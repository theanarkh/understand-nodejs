{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u901a\u8fc7\u6e90\u7801\u5206\u6790nodejs\u539f\u7406","text":"<ul> <li>\u77e5\u4e4e\uff1aNode.js\u6e90\u7801\u5206\u6790</li> <li>\u4e3a\u4ec0\u4e48\u8981\u8bfbNode.js\u6e90\u7801\uff1f</li> <li>Node.js\u7684\u5e95\u5c42\u539f\u7406</li> <li>\u300aNode.js\u6e90\u7801\u89e3\u67901.0.0\u5e26\u6807\u7b7e\u7248\u300b</li> </ul> <p>\u8ba9\u6211\u4eec\u5f00\u59cb\u5b66\u4e60Node.js\u5427\ud83d\udd25</p> <p>\u6700\u540e\u66f4\u65b0: 2024-11-17</p>"},{"location":"chapter00-%E5%89%8D%E8%A8%80/","title":"\u524d\u8a00","text":"<p>\u6211\u5f88\u559c\u6b22JS\u8fd9\u95e8\u8bed\u8a00\uff0c\u611f\u89c9\u5b83\u548cC\u8bed\u8a00\u4e00\u6837\uff0c\u5728C\u8bed\u8a00\u91cc\uff0c\u5f88\u591a\u4e1c\u897f\u90fd\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\uff0c\u8ba9\u6211\u4eec\u53ef\u4ee5\u53d1\u6325\u65e0\u9650\u7684\u521b\u9020\u529b\u548c\u60f3\u8c61\u529b\u3002\u5728JS\u4e2d\uff0c\u867d\u7136\u5f88\u591a\u4e1c\u897f\u5728V8\u91cc\u5df2\u7ecf\u63d0\u4f9b\uff0c\u4f46\u662f\u7528JS\uff0c\u4f9d\u7136\u53ef\u4ee5\u521b\u9020\u5f88\u591a\u597d\u73a9\u7684\u4e1c\u897f\uff0c\u8fd8\u6709\u597d\u73a9\u7684\u5199\u6cd5\u3002\u53e6\u5916\uff0cJS\u5e94\u8be5\u6211\u89c1\u8fc7\u552f\u4e00\u7684\u4e00\u95e8\u6ca1\u6709\u5b9e\u73b0\u7f51\u7edc\u548c\u6587\u4ef6\u529f\u80fd\u7684\u8bed\u8a00\uff0c\u7f51\u7edc\u548c\u6587\u4ef6\uff0c\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u80fd\u529b\uff0c\u5bf9\u4e8e\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u4e5f\u662f\u5f88\u6838\u5fc3\u5f88\u57fa\u7840\u7684\u77e5\u8bc6\u3002\u5f88\u5e78\u8fd0\uff0cNode.js\u88ab\u521b\u9020\u51fa\u6765\u4e86\uff0cNode.js\u5728JS\u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528V8\u548cLibuv\u63d0\u4f9b\u7684\u80fd\u529b\uff0c\u6781\u5927\u5730\u62d3\u5c55\u3001\u4e30\u5bcc\u4e86JS\u7684\u80fd\u529b\uff0c\u5c24\u5176\u662f\u7f51\u7edc\u548c\u6587\u4ef6\uff0c\u8fd9\u6837\u6211\u5c31\u4e0d\u4ec5\u53ef\u4ee5\u4f7f\u7528JS\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7f51\u7edc\u3001\u6587\u4ef6\u7b49\u529f\u80fd\uff0c\u8fd9\u662f\u6211\u9010\u6e10\u8f6c\u5411Node.js\u65b9\u5411\u7684\u539f\u56e0\u4e4b\u4e00\uff0c\u4e5f\u662f\u6211\u5f00\u59cb\u7814\u7a76Node.js\u6e90\u7801\u7684\u539f\u56e0\u4e4b\u4e00\u3002\u867d\u7136Node.js\u6ee1\u8db3\u4e86\u6211\u559c\u597d\u548c\u6280\u672f\u4e0a\u7684\u9700\u6c42\uff0c\u4e0d\u8fc7\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6211\u5e76\u6ca1\u6709\u5168\u8eab\u5fc3\u5730\u6295\u5165\u4ee3\u7801\u7684\u7814\u7a76\uff0c\u53ea\u662f\u5076\u5c14\u4f1a\u770b\u4e00\u4e0b\u67d0\u4e9b\u6a21\u5757\u7684\u5b9e\u73b0\uff0c\u771f\u6b63\u7684\u5f00\u59cb\uff0c\u662f\u4e3a\u4e86\u505a\u300aNode.js\u662f\u5982\u4f55\u5229\u7528Libuv\u5b9e\u73b0\u4e8b\u4ef6\u5faa\u73af\u548c\u5f02\u6b65\u300b\u7684\u5206\u4eab\uff0c\u4ece\u90a3\u65f6\u5019\u8d77\uff0c\u5927\u90e8\u5206\u4e1a\u4f59\u65f6\u95f4\u548c\u7cbe\u529b\u90fd\u6295\u5165\u6e90\u7801\u7684\u7814\u7a76\u3002 \u00a0\u00a0\u00a0\u00a0\u6211\u9996\u5148\u4eceLibuv\u5f00\u59cb\u7814\u7a76\uff0c\u56e0\u4e3aLibuv\u662fNode.js\u7684\u6838\u5fc3\u4e4b\u4e00\u3002\u7531\u4e8e\u66fe\u7ecf\u7814\u7a76\u8fc7\u4e00\u4e9bLinux\u7684\u6e90\u7801\uff0c\u4e5f\u4e00\u76f4\u5728\u5b66\u4e60\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e00\u4e9b\u539f\u7406\u548c\u5b9e\u73b0\uff0c\u6240\u4ee5\u5728\u9605\u8bfbLibuv\u7684\u65f6\u5019\uff0c\u7b97\u662f\u6ca1\u6709\u9047\u5230\u592a\u5927\u7684\u56f0\u96be\uff0cC\u8bed\u8a00\u51fd\u6570\u7684\u4f7f\u7528\u548c\u539f\u7406\uff0c\u57fa\u672c\u90fd\u53ef\u4ee5\u770b\u660e\u767d\uff0c\u91cd\u70b9\u5728\u4e8e\u9700\u8981\u628a\u5404\u4e2a\u903b\u8f91\u634b\u6e05\u695a\u3002\u6211\u4f7f\u7528\u7684\u65b9\u6cd5\u5c31\u662f\u6ce8\u91ca\u548c\u753b\u56fe\uff0c\u6211\u4e2a\u4eba\u6bd4\u8f83\u559c\u6b22\u5199\u6ce8\u91ca\u3002\u867d\u7136\u8bf4\u4ee3\u7801\u662f\u6700\u597d\u7684\u6ce8\u91ca\uff0c\u4f46\u662f\u6211\u8fd8\u662f\u613f\u610f\u82b1\u65f6\u95f4\u7528\u6ce8\u91ca\u53bb\u628a\u4ee3\u7801\u7684\u80cc\u666f\u548c\u610f\u4e49\u9610\u8ff0\u4e00\u4e0b\uff0c\u800c\u4e14\u6ce8\u91ca\u4f1a\u8ba9\u5927\u90e8\u5206\u4eba\u66f4\u5feb\u5730\u80fd\u8bfb\u61c2\u4ee3\u7801\u7684\u542b\u4e49\u3002\u8bfbLibuv\u7684\u65f6\u5019\uff0c\u4e5f\u7a7f\u63d2\u5730\u8bfb\u4e86\u4e00\u4e9bJS\u548cC++\u5c42\u7684\u4ee3\u7801\u3002\u6211\u9605\u8bfbNode.js\u6e90\u7801\u7684\u65b9\u5f0f\u662f\uff0c\u9009\u62e9\u4e00\u4e2a\u6a21\u5757\uff0c\u5782\u76f4\u5730\u4eceJS\u5c42\u5206\u6790\u5230C++\u5c42\uff0c\u7136\u540e\u5230Libuv\u5c42\u3002 \u00a0\u00a0\u00a0\u00a0\u8bfb\u5b8cLibuv\uff0c\u63a5\u4e0b\u6765\u8bfb\u7684\u662fJS\u5c42\u7684\u4ee3\u7801\uff0cJS\u867d\u7136\u5bb9\u6613\u770b\u61c2\uff0c\u4f46\u662fJS\u5c42\u7684\u4ee3\u7801\u975e\u5e38\u591a\uff0c\u800c\u4e14\u6211\u611f\u89c9\u903b\u8f91\u4e0a\u4e5f\u975e\u5e38\u7ed5\uff0c\u6240\u4ee5\u81f3\u4eca\uff0c\u6211\u8fd8\u6709\u5f88\u591a\u6ca1\u6709\u7ec6\u8bfb\uff0c\u8fd9\u4e2a\u4f5c\u4e3a\u540e\u7eed\u7684\u8ba1\u5212\u3002Node.js\u4e2d\uff0cC++\u7b97\u662f\u80f6\u6c34\u5c42\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u4e0d\u4f1aC++\uff0c\u5176\u5b9e\u4e5f\u4e0d\u5f71\u54cdNode.js\u6e90\u7801\u7684\u9605\u8bfb\uff0c\u56e0\u4e3aC++\u5f88\u591a\u65f6\u5019\uff0c\u53ea\u662f\u4e00\u79cd\u900f\u4f20\u7684\u529f\u80fd\uff0c\u5b83\u628aJS\u5c42\u7684\u8bf7\u6c42\uff0c\u901a\u8fc7V8\uff0c\u4f20\u7ed9Libuv\uff0c\u7136\u540e\u518d\u53cd\u8fc7\u6765\uff0c\u6240\u4ee5C++\u5c42\u6211\u662f\u653e\u5230\u6700\u540e\u624d\u7ec6\u8bfb\u3002C++\u5c42\u6211\u89c9\u5f97\u662f\u6700\u96be\u7684\uff0c\u8fd9\u65f6\u5019\uff0c\u6211\u53c8\u4e0d\u5f97\u4e0d\u5f00\u59cb\u8bfbV8\u7684\u6e90\u7801\u4e86\uff0c\u7406\u89e3V8\u975e\u5e38\u96be\uff0c\u6211\u9009\u53d6\u7684\u51e0\u4e4e\u662f\u6700\u65e9\u7684\u7248\u672c0.1.5\uff0c\u7136\u540e\u7ed3\u54088.x\u7248\u672c\u3002\u901a\u8fc7\u65e9\u671f\u7248\u672c\uff0c\u5148\u5b66\u4e60V8\u7684\u5927\u6982\u539f\u7406\u548c\u4e00\u4e9b\u65e9\u671f\u5b9e\u73b0\u4e0a\u7684\u7ec6\u8282\u3002\u56e0\u4e3a\u540e\u7eed\u7684\u7248\u672c\u867d\u7136\u53d8\u5316\u5f88\u5927\uff0c\u4f46\u662f\u66f4\u591a\u53ea\u662f\u529f\u80fd\u7684\u589e\u5f3a\u548c\u4f18\u5316\uff0c\u6709\u5f88\u591a\u6838\u5fc3\u7684\u6982\u5ff5\u8fd8\u662f\u6ca1\u6709\u53d8\u5316\u7684\uff0c\u8fd9\u662f\u6211\u9009\u53d6\u65e9\u671f\u7248\u672c\u7684\u539f\u56e0\uff0c\u907f\u514d\u4e00\u5f00\u59cb\u5c31\u9677\u5165\u65e0\u7a77\u65e0\u5c3d\u7684\u4ee3\u7801\u4e2d\uff0c\u8ff7\u5931\u4e86\u65b9\u5411\uff0c\u5931\u53bb\u4e86\u52a8\u529b\u3002\u4f46\u662f\u54ea\u6015\u662f\u65e9\u671f\u7684\u7248\u672c\uff0c\u6709\u5f88\u591a\u5185\u5bb9\u4f9d\u7136\u975e\u5e38\u590d\u6742\uff0c\u7ed3\u5408\u65b0\u7248\u672c\u662f\u56e0\u4e3a\u6709\u4e9b\u529f\u80fd\u5728\u65e9\u671f\u7248\u672c\u91cc\u6ca1\u6709\u5b9e\u73b0\uff0c\u8fd9\u65f6\u5019\u8981\u660e\u767d\u5b83\u7684\u539f\u7406\uff0c\u5c31\u53ea\u80fd\u770b\u65b0\u7248\u7684\u4ee3\u7801\uff0c\u6709\u4e86\u65e9\u671f\u7248\u672c\u7684\u7ecf\u9a8c\uff0c\u9605\u8bfb\u65b0\u7248\u7684\u4ee3\u7801\u4e5f\u6709\u4e00\u5b9a\u7684\u597d\u5904\uff0c\u591a\u5c11\u4e5f\u77e5\u9053\u4e86\u4e00\u4e9b\u9605\u8bfb\u6280\u5de7\u3002 \u00a0\u00a0\u00a0\u00a0Node.js\u7684\u5927\u90e8\u5206\u4ee3\u7801\u90fd\u5728C++\u548cJS\u5c42\uff0c\u6240\u4ee5\u76ee\u524d\u4ecd\u7136\u662f\u5728\u4e0d\u65ad\u5730\u9605\u8bfb\u8fd9\u4e24\u5c42\u7684\u4ee3\u7801\u3002\u8fd8\u662f\u6309\u7167\u6a21\u5757\u5782\u76f4\u5206\u6790\u3002\u9605\u8bfbNode.js\u4ee3\u7801\uff0c\u8ba9\u6211\u66f4\u4e86\u89e3Node.js\u7684\u539f\u7406\uff0c\u4e5f\u66f4\u4e86\u89e3JS\u3002\u4e0d\u8fc7\u4ee3\u7801\u91cf\u975e\u5e38\u5927\uff0c\u9700\u8981\u6e90\u6e90\u4e0d\u65ad\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u6295\u5165\u3002\u4f46\u662f\u505a\u6280\u672f\uff0c\u77e5\u5176\u7136\u77e5\u5176\u6240\u4ee5\u7136\u7684\u611f\u89c9\u662f\u975e\u5e38\u7f8e\u5999\u7684\uff0c\u4f60\u9760\u7740\u4e00\u95e8\u6280\u672f\u8c0b\u751f\uff0c\u5374\u5bf9\u5b83\u77e5\u4e4b\u751a\u5c11\uff0c\u8fd9\u79cd\u611f\u89c9\u5e76\u4e0d\u597d\u3002\u9605\u8bfb\u6e90\u7801\uff0c\u867d\u7136\u4e0d\u4f1a\u4e3a\u4f60\u5e26\u6765\u76f4\u63a5\u7684\u3001\u8fc5\u901f\u7684\u6536\u76ca\uff0c\u4f46\u662f\u6709\u51e0\u4e2a\u597d\u5904\u662f\u5fc5\u7136\u7684\u3002\u7b2c\u4e00\u662f\u5b83\u4f1a\u51b3\u5b9a\u4f60\u7684\u9ad8\u5ea6\uff0c\u7b2c\u4e8c\u4f60\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u4f60\u770b\u5230\u7684\u4e0d\u518d\u662f\u4e00\u4e9b\u51b0\u51b7\u51b7\u3001\u65e0\u751f\u547d\u7684\u5b57\u7b26\u3002\u8fd9\u53ef\u80fd\u6709\u70b9\u5938\u5f20\uff0c\u4f46\u662f\u4f60\u4e86\u89e3\u4e86\u6280\u672f\u7684\u539f\u7406\uff0c\u4f60\u5728\u4f7f\u7528\u6280\u672f\u7684\u65f6\u5019\uff0c\u7684\u786e\u4f1a\u6709\u4e0d\u540c\u7684\u4f53\u9a8c\uff0c\u4f60\u7684\u601d\u7ef4\u4e5f\u4f1a\u6709\u4e86\u66f4\u591a\u7684\u53d8\u5316\u3002\u7b2c\u4e09\u662f\u63d0\u9ad8\u4e86\u4f60\u7684\u5b66\u4e60\u80fd\u529b\uff0c\u5f53\u4f60\u5bf9\u5e95\u5c42\u539f\u7406\u6709\u4e86\u66f4\u591a\u7684\u4e86\u89e3\u548c\u7406\u89e3\uff0c\u4f60\u5728\u5b66\u4e60\u5176\u5b83\u6280\u672f\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u66f4\u5feb\u5730\u5b66\u4f1a\uff0c\u6bd4\u5982\u4f60\u4e86\u89e3\u4e86epoll\u7684\u539f\u7406\uff0c\u90a3\u4f60\u770bNginx\u3001Redis\u3001Libuv\u7b49\u6e90\u7801\u7684\u65f6\u5019\uff0c\u5173\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u7684\u903b\u8f91\uff0c\u57fa\u672c\u4e0a\u5f88\u5feb\u5c31\u80fd\u770b\u61c2\u3002\u5f88\u9ad8\u5174\u6709\u8fd9\u4e9b\u7ecf\u5386\uff0c\u4e5f\u6295\u5165\u4e86\u5f88\u591a\u65f6\u95f4\u548c\u7ecf\u7cbe\u529b\uff0c\u5e0c\u671b\u4ee5\u540e\u5bf9Node.js\u6709\u66f4\u591a\u7684\u7406\u89e3\u548c\u4e86\u89e3\uff0c\u4e5f\u5e0c\u671b\u5728Node.js\u65b9\u5411\u6709\u66f4\u591a\u7684\u5b9e\u8df5\u3002</p>"},{"location":"chapter00-%E5%89%8D%E8%A8%80/#_2","title":"\u672c\u4e66\u7684\u76ee\u7684","text":"<p>\u00a0\u00a0\u00a0\u00a0\u9605\u8bfbNode.js\u6e90\u7801\u7684\u521d\u8877\u662f\u8ba9\u81ea\u5df1\u6df1\u5165\u7406\u89e3Node.js\u7684\u539f\u7406\uff0c\u4f46\u662f\u6211\u53d1\u73b0\u6709\u5f88\u591a\u540c\u5b66\u5bf9Node.js\u539f\u7406\u4e5f\u975e\u5e38\u611f\u5174\u8da3\uff0c\u56e0\u4e3a\u4e1a\u4f59\u65f6\u95f4\u91cc\u4e5f\u4e00\u76f4\u5728\u5199\u4e00\u4e9b\u5173\u4e8eNode.js\u6e90\u7801\u5206\u6790\u7684\u6587\u7ae0\uff08\u57fa\u4e8eNode.js V10\u548cV14\uff09\uff0c\u6240\u4ee5\u5c31\u6253\u7b97\u628a\u8fd9\u4e9b\u5185\u5bb9\u6574\u7406\u6210\u4e00\u672c\u6709\u4f53\u7cfb\u7684\u4e66\uff0c\u8ba9\u611f\u5174\u8da3\u7684\u540c\u5b66\u80fd\u7cfb\u7edf\u5730\u53bb\u4e86\u89e3\u548c\u7406\u89e3Node.js\u7684\u539f\u7406\u3002\u4e0d\u8fc7\u6211\u66f4\u5e0c\u671b\u7684\u662f\uff0c\u8bfb\u8005\u4ece\u4e66\u4e2d\u4e0d\u4ec5\u5b66\u5230Node.js\u7684\u77e5\u8bc6\uff0c\u800c\u4e14\u4e5f\u5b66\u5230\u5982\u4f55\u9605\u8bfbNode.js\u6e90\u7801\uff0c\u53ef\u4ee5\u81ea\u5df1\u72ec\u7acb\u5b8c\u6210\u6e90\u7801\u7684\u7814\u7a76\u3002\u4e5f\u5e0c\u671b\u66f4\u591a\u540c\u5b66\u5206\u4eab\u81ea\u5df1\u7684\u5fc3\u5f97\u3002\u672c\u4e66\u4e0d\u662fNode.js\u7684\u5168\u90e8\uff0c\u4f46\u662f\u5c3d\u91cf\u53bb\u8bb2\u5f97\u66f4\u591a\uff0c\u6e90\u7801\u975e\u5e38\u591a\uff0c\u9519\u7efc\u590d\u6742\uff0c\u7406\u89e3\u4e0a\u53ef\u80fd\u6709\u4e0d\u5bf9\u4e4b\u5904\uff0c\u6b22\u8fce\u4ea4\u6d41\u3002\u56e0\u4e3a\u770b\u8fc7Linux\u65e9\u671f\u5185\u6838\uff080.11\u548c1.2.13\uff09\u548c\u65e9\u671fV8\uff080.1.5\uff09\u7684\u4e00\u4e9b\u5b9e\u73b0\uff0c\u6587\u7ae0\u4f1a\u5f15\u7528\u5176\u4e2d\u7684\u4e00\u4e9b\u4ee3\u7801\uff0c\u76ee\u7684\u5728\u4e8e\u8ba9\u8bfb\u8005\u53ef\u4ee5\u66f4\u4e86\u89e3\u4e00\u4e2a\u77e5\u8bc6\u70b9\u7684\u5927\u81f4\u5b9e\u73b0\u539f\u7406\uff0c\u5982\u679c\u8bfb\u8005\u6709\u5174\u8da3\uff0c\u53ef\u4ee5\u81ea\u884c\u9605\u8bfb\u76f8\u5173\u4ee3\u7801\u3002</p>"},{"location":"chapter00-%E5%89%8D%E8%A8%80/#_3","title":"\u672c\u4e66\u7ed3\u6784","text":"<p>\u672c\u4e66\u5171\u5206\u4e3a\u4e8c\u5341\u4e8c\u7ae0\uff0c\u8bb2\u89e3\u7684\u4ee3\u7801\u90fd\u662f\u57fa\u4e8eLinux\u7cfb\u7edf\u7684\u3002</p> <ol> <li>\u4e3b\u8981\u4ecb\u7ecd\u4e86Node.js\u7684\u7ec4\u6210\u548c\u6574\u4f53\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u53e6\u5916\u5206\u6790\u4e86Node.js\u542f\u52a8\u7684\u8fc7\u7a0b\uff0c\u6700\u540e\u4ecb\u7ecd\u4e86\u670d\u52a1\u5668\u67b6\u6784\u7684\u6f14\u53d8\u548cNode.js\u7684\u6240\u9009\u53d6\u7684\u67b6\u6784\u3002</li> <li>\u4e3b\u8981\u4ecb\u7ecd\u4e86Node.js\u4e2d\u7684\u57fa\u7840\u6570\u636e\u7ed3\u6784\u548c\u901a\u7528\u7684\u903b\u8f91\uff0c\u5728\u540e\u9762\u7684\u7ae0\u8282\u4f1a\u7528\u5230\u3002</li> <li>\u4e3b\u8981\u4ecb\u7ecd\u4e86Libuv\u7684\u4e8b\u4ef6\u5faa\u73af\uff0c\u8fd9\u662fNode.js\u7684\u6838\u5fc3\u6240\u5728,\u672c\u7ae0\u5177\u4f53\u4ecb\u7ecd\u4e86\u4e8b\u4ef6\u5faa\u73af\u4e2d\u6bcf\u4e2a\u9636\u6bb5\u7684\u5b9e\u73b0\u3002</li> <li>\u4e3b\u8981\u5206\u6790\u4e86Libuv\u4e2d\u7ebf\u7a0b\u6c60\u7684\u5b9e\u73b0\uff0cLibuv\u7ebf\u7a0b\u6c60\u5bf9Node.js\u6765\u8bf4\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0cNode.js\u4e2d\u5f88\u591a\u6a21\u5757\u90fd\u9700\u8981\u4f7f\u7528\u7ebf\u7a0b\u6c60\uff0c\u5305\u62eccrypto\u3001fs\u3001dns\u7b49\u3002\u5982\u679c\u6ca1\u6709\u7ebf\u7a0b\u6c60\uff0cNode.js\u7684\u529f\u80fd\u5c06\u4f1a\u5927\u6253\u6298\u6263\u3002\u540c\u65f6\u5206\u6790\u4e86Libuv\u4e2d\u5b50\u7ebf\u7a0b\u548c\u4e3b\u7ebf\u7a0b\u7684\u901a\u4fe1\u673a\u5236\u3002\u540c\u6837\u9002\u5408\u5176\u5b83\u5b50\u7ebf\u7a0b\u548c\u4e3b\u7ebf\u7a0b\u901a\u4fe1\u3002</li> <li>\u4e3b\u8981\u5206\u6790\u4e86Libuv\u4e2d\u6d41\u7684\u5b9e\u73b0\uff0c\u6d41\u5728Node.js\u6e90\u7801\u4e2d\u5f88\u591a\u5730\u65b9\u90fd\u7528\u5230\uff0c\u53ef\u4ee5\u8bf4\u662f\u975e\u5e38\u6838\u5fc3\u7684\u6982\u5ff5\u3002</li> <li>\u4e3b\u8981\u5206\u6790\u4e86Node.js\u4e2dC++\u5c42\u7684\u4e00\u4e9b\u91cd\u8981\u6a21\u5757\u548c\u901a\u7528\u903b\u8f91\u3002</li> <li>\u4e3b\u8981\u5206\u6790\u4e86Node.js\u7684\u4fe1\u53f7\u5904\u7406\u673a\u5236\uff0c\u4fe1\u53f7\u662f\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\u3002</li> <li>\u4e3b\u8981\u5206\u6790\u4e86Node.js\u7684dns\u6a21\u5757\u7684\u5b9e\u73b0\uff0c\u5305\u62eccares\u7684\u4f7f\u7528\u548c\u539f\u7406\u3002</li> <li>\u4e3b\u8981\u5206\u6790\u4e86Node.js\u4e2dpipe\u6a21\u5757\uff08Unix\u57df\uff09\u7684\u5b9e\u73b0\u548c\u4f7f\u7528\uff0cUnix\u57df\u662f\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u65b9\u5f0f\uff0c\u5b83\u89e3\u51b3\u4e86\u6ca1\u6709\u7ee7\u627f\u7684\u8fdb\u7a0b\u65e0\u6cd5\u901a\u4fe1\u7684\u95ee\u9898\u3002\u800c\u4e14\u652f\u6301\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u6781\u5927\u5730\u589e\u5f3a\u4e86Node.js\u7684\u80fd\u529b\u3002</li> <li>\u4e3b\u8981\u5206\u6790\u4e86Node.js\u4e2d\u5b9a\u65f6\u5668\u6a21\u5757\u7684\u5b9e\u73b0\u3002\u5b9a\u65f6\u5668\u662f\u5b9a\u65f6\u5904\u7406\u4efb\u52a1\u7684\u5229\u5668\u3002</li> <li>\u4e3b\u8981\u5206\u6790\u4e86Node.js setImmediate\u548cnextTick\u7684\u5b9e\u73b0\u3002</li> <li>\u4e3b\u8981\u4ecb\u7ecd\u4e86Node.js\u4e2d\u6587\u4ef6\u6a21\u5757\u7684\u5b9e\u73b0\uff0c\u6587\u4ef6\u64cd\u4f5c\u662f\u6211\u4eec\u7ecf\u5e38\u4f1a\u7528\u5230\u7684\u529f\u80fd\u3002</li> <li>\u4e3b\u8981\u4ecb\u7ecd\u4e86Node.js\u4e2d\u8fdb\u7a0b\u6a21\u5757\u7684\u5b9e\u73b0\uff0c\u591a\u8fdb\u7a0b\u4f7f\u5f97Node.js\u53ef\u4ee5\u5229\u7528\u591a\u6838\u80fd\u529b\u3002</li> <li>\u4e3b\u8981\u4ecb\u7ecd\u4e86Node.js\u4e2d\u7ebf\u7a0b\u6a21\u5757\u7684\u5b9e\u73b0\uff0c\u591a\u8fdb\u7a0b\u548c\u591a\u7ebf\u7a0b\u6709\u7c7b\u4f3c\u7684\u529f\u80fd\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u5dee\u5f02\u3002</li> <li>\u4e3b\u8981\u4ecb\u7ecd\u4e86Node.js\u4e2dcluster\u6a21\u5757\u7684\u4f7f\u7528\u548c\u5b9e\u73b0\u539f\u7406\uff0ccluster\u6a21\u5757\u5c01\u88c5\u4e86\u591a\u8fdb\u7a0b\u80fd\u529b\uff0c\u4f7f\u5f97Node.j\u662f\u53ef\u4ee5\u4f7f\u7528\u591a\u8fdb\u7a0b\u7684\u670d\u52a1\u5668\u67b6\u6784\uff0c\u5229\u7528\u4e86\u591a\u6838\u7684\u80fd\u529b\u3002</li> <li>\u4e3b\u8981\u5206\u6790\u4e86Node.js\u4e2dUDP\u7684\u5b9e\u73b0\u548c\u76f8\u5173\u5185\u5bb9\u3002</li> <li>\u4e3b\u8981\u5206\u6790\u4e86Node.js\u4e2dTCP\u6a21\u5757\u7684\u5b9e\u73b0\uff0cTCP\u662fNode.js\u7684\u6838\u5fc3\u6a21\u5757\uff0c\u6211\u4eec\u5e38\u7528\u7684HTTP\uff0cHTTPS\u90fd\u662f\u57fa\u4e8enet\u6a21\u5757\u3002</li> <li>\u4e3b\u8981\u4ecb\u7ecd\u4e86HTTP\u6a21\u5757\u7684\u5b9e\u73b0\u4ee5\u53caHTTP\u534f\u8bae\u7684\u4e00\u4e9b\u539f\u7406\u3002</li> <li>\u4e3b\u8981\u5206\u6790\u4e86Node.js\u4e2d\u5404\u79cd\u6a21\u5757\u52a0\u8f7d\u7684\u539f\u7406\uff0c\u6df1\u5165\u7406\u89e3Node.js\u7684require\u51fd\u6570\u6240\u505a\u7684\u4e8b\u60c5\u3002</li> <li>\u4e3b\u8981\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u62d3\u5c55Node.js\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528Node.js\uff0c\u62d3\u5c55Node.js\u3002</li> <li>\u4e3b\u8981\u4ecb\u7ecd\u4e86JS\u5c42Stream\u7684\u5b9e\u73b0\uff0cStream\u6a21\u5757\u7684\u903b\u8f91\u5f88\u7ed5\uff0c\u5927\u6982\u8bb2\u89e3\u4e86\u4e00\u4e0b\u3002</li> <li>\u4e3b\u8981\u4ecb\u7ecd\u4e86Node.js\u4e2devent\u6a21\u5757\u7684\u5b9e\u73b0\uff0cevent\u6a21\u5757\u867d\u7136\u7b80\u5355\uff0c\u4f46\u662f\u662fNode.js\u7684\u6838\u5fc3\u6a21\u5757\u3002</li> </ol>"},{"location":"chapter00-%E5%89%8D%E8%A8%80/#_4","title":"\u9762\u5bf9\u7684\u8bfb\u8005","text":"<p>\u672c\u4e66\u9762\u5411\u6709\u4e00\u5b9aNode.js\u4f7f\u7528\u7ecf\u9a8c\u5e76\u5bf9Node.js\u539f\u7406\u611f\u5174\u8da3\u7684\u540c\u5b66\uff0c\u56e0\u4e3a\u672c\u4e66\u662fNode.js\u6e90\u7801\u7684\u89d2\u5ea6\u53bb\u5206\u6790Node.js\u7684\u539f\u7406\uff0c\u5176\u4e2d\u90e8\u5206\u662fC\u3001C++\uff0c\u6240\u4ee5\u9700\u8981\u8bfb\u8005\u6709\u4e00\u5b9a\u7684C\u3001C++\u57fa\u7840\uff0c\u53e6\u5916\uff0c\u6709\u4e00\u5b9a\u7684\u64cd\u4f5c\u7cfb\u7edf\u3001\u8ba1\u7b97\u673a\u7f51\u7edc\u3001V8\u57fa\u7840\u4f1a\u66f4\u597d\u3002</p>"},{"location":"chapter00-%E5%89%8D%E8%A8%80/#_5","title":"\u9605\u8bfb\u5efa\u8bae","text":"<p>\u5efa\u8bae\u9996\u5148\u9605\u8bfb\u524d\u9762\u51e0\u79cd\u57fa\u7840\u548c\u901a\u7528\u7684\u5185\u5bb9\uff0c\u7136\u540e\u518d\u9605\u8bfb\u5355\u4e2a\u6a21\u5757\u7684\u5b9e\u73b0\uff0c\u6700\u540e\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u518d\u9605\u8bfb\u5982\u4f55\u62d3\u5c55Node.js\u7ae0\u8282\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u6bd4\u8f83\u719f\u6089Node.js\uff0c\u53ea\u662f\u5bf9\u67d0\u4e2a\u6a21\u5757\u6216\u5185\u5bb9\u6bd4\u8f83\u611f\u5174\u8da3\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u9605\u8bfb\u67d0\u4e2a\u7ae0\u8282\u3002\u521a\u5f00\u59cb\u9605\u8bfbNode.js\u6e90\u7801\u65f6\uff0c\u9009\u53d6\u7684\u662fV10.x\u7684\u7248\u672c\uff0c\u540e\u6765Node.js\u5df2\u7ecf\u66f4\u65b0\u5230\u4e86V14\uff0c\u6240\u4ee5\u4e66\u4e2d\u7684\u4ee3\u7801\u6709\u7684\u662fV10\u6709\u7684\u662fV14\u7684\u3002Libuv\u662fV1.23\u3002\u53ef\u4ee5\u5230\u6211\u7684github\u4e0a\u83b7\u53d6\u3002</p>"},{"location":"chapter00-%E5%89%8D%E8%A8%80/#_6","title":"\u6e90\u7801\u9605\u8bfb\u5efa\u8bae","text":"<p>Node.js\u7684\u6e90\u7801\u7531JS\u3001C++\u3001C\u7ec4\u6210\u3002 1 Libuv\u662fC\u8bed\u8a00\u7f16\u5199\u3002\u7406\u89e3Libuv\u9664\u4e86\u9700\u8981\u4e86\u89e3C\u8bed\u6cd5\u5916\uff0c\u66f4\u591a\u7684\u662f\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u548c\u7f51\u7edc\u7684\u7406\u89e3\uff0c\u6709\u4e9b\u7ecf\u5178\u7684\u4e66\u7c4d\u53ef\u4ee5\u53c2\u8003\uff0c\u6bd4\u5982\u300aUnix\u7f51\u7edc\u7f16\u7a0b\u300b1,2\u4e24\u518c\uff0c\u300aLinux\u7cfb\u7edf\u7f16\u7a0b\u624b\u518c\u300b\u4e0a\u4e0b\u4e24\u518c\uff0c\u300aTCP/IP\u6743\u5a01\u6307\u5357\u300b\u7b49\u7b49\u3002\u8fd8\u6709Linux\u7684API\u6587\u6863\u4ee5\u53ca\u7f51\u4e0a\u4f18\u79c0\u7684\u6587\u7ae0\u90fd\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\u3002</p> <p>2 C++\u4e3b\u8981\u662f\u5229\u7528V8\u63d0\u4f9b\u7684\u80fd\u529b\u5bf9JS\u8fdb\u884c\u62d3\u5c55\uff0c\u4e5f\u6709\u4e00\u90e8\u5206\u529f\u80fd\u4f7f\u7528C++\u5b9e\u73b0\uff0c\u603b\u7684\u6765\u8bf4C++\u7684\u4f5c\u7528\u66f4\u591a\u662f\u80f6\u6c34\u5c42\uff0c\u5229\u7528V8\u4f5c\u4e3a\u6865\u6881\uff0c\u8fde\u63a5Libuv\u548cJS\u3002\u4e0d\u4f1aC++\uff0c\u4e5f\u4e0d\u5b8c\u5168\u5f71\u54cd\u6e90\u7801\u7684\u9605\u8bfb\uff0c\u4f46\u662f\u4f1aC++\u4f1a\u66f4\u597d\u3002\u9605\u8bfbC++\u5c42\u4ee3\u7801\uff0c\u9664\u4e86\u8bed\u6cd5\u5916\uff0c\u8fd8\u9700\u8981\u5bf9V8\u7684\u6982\u5ff5\u548c\u4f7f\u7528\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u548c\u7406\u89e3\u3002</p> <p>3 JS\u4ee3\u7801\u76f8\u4fe1\u5b66\u4e60Node.js\u7684\u540c\u5b66\u90fd\u6ca1\u4ec0\u4e48\u95ee\u9898\u3002</p>"},{"location":"chapter00-%E5%89%8D%E8%A8%80/#_7","title":"\u5176\u5b83\u8d44\u6e90","text":"<p>\u4e2a\u4eba\u535a\u5ba2 csdn https://blog.csdn.net/THEANARKH \u77e5\u4e4ehttps://www.zhihu.com/people/theanarkh github https://github.com/theanarkh \u9605\u8bfbNode.js\u6e90\u7801\u65f6\uff0c\u6240\u7528\u5230\u7684\u57fa\u7840\u77e5\u8bc6\u3001\u6240\u4f5c\u79ef\u7d2f\u548c\u8bb0\u5f55\u51e0\u4e4e\u90fd\u5728\u4e0a\u9762\u7684\u535a\u5ba2\u4e2d\u3002 \u5982\u679c\u4f60\u6709\u4efb\u4f55\u95ee\u9898\u53ef\u4ee5\u5230https://github.com/theanarkh/understand-nodejs\u63d0issue\u6216\u8005\u8054\u7cfb\u6211\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/","title":"\u7b2c\u4e00\u7ae0 Node.js\u7ec4\u6210\u548c\u539f\u7406","text":""},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#11-nodejs","title":"1.1 Node.js\u7b80\u4ecb","text":"<p>Node.js\u662f\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u7684\u5355\u8fdb\u7a0b\u5355\u7ebf\u7a0b\u5e94\u7528\uff0c\u5355\u7ebf\u7a0b\u5177\u4f53\u4f53\u73b0\u5728Node.js\u5728\u5355\u4e2a\u7ebf\u7a0b\u4e2d\u7ef4\u62a4\u4e86\u4e00\u7cfb\u5217\u4efb\u52a1\uff0c\u7136\u540e\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u4e0d\u65ad\u6d88\u8d39\u4efb\u52a1\u961f\u5217\u4e2d\u7684\u8282\u70b9\uff0c\u53c8\u4e0d\u65ad\u4ea7\u751f\u65b0\u7684\u4efb\u52a1\uff0c\u5728\u4efb\u52a1\u7684\u4ea7\u751f\u548c\u6d88\u8d39\u4e2d\u4e0d\u65ad\u9a71\u52a8\u7740Node.js\u7684\u6267\u884c\u3002\u4ece\u53e6\u5916\u4e00\u4e2a\u89d2\u5ea6\u6765\u8bf4\uff0cNode.js\u53c8\u53ef\u4ee5\u8bf4\u662f\u591a\u7ebf\u7a0b\u7684\uff0c\u56e0\u4e3aNode.js\u5e95\u5c42\u4e5f\u7ef4\u62a4\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u6c60\uff0c\u8be5\u7ebf\u7a0b\u6c60\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u4e00\u4e9b\u6587\u4ef6IO\u3001DNS\u3001CPU\u8ba1\u7b97\u7b49\u4efb\u52a1\u3002</p> <p>Node.js\u4e3b\u8981\u7531V8\u3001Libuv\uff0c\u8fd8\u6709\u4e00\u4e9b\u5176\u5b83\u7684\u7b2c\u4e09\u65b9\u6a21\u5757\u7ec4\u6210\uff08cares\u5f02\u6b65DNS\u89e3\u6790\u5e93\u3001HTTP\u89e3\u6790\u5668\u3001HTTP2\u89e3\u6790\u5668\uff0c\u538b\u7f29\u5e93\u3001\u52a0\u89e3\u5bc6\u5e93\u7b49\uff09\u3002Node.js\u6e90\u7801\u5206\u4e3a\u4e09\u5c42\uff0c\u5206\u522b\u662fJS\u3001C++\u3001C\uff0cLibuv\u662f\u4f7f\u7528C\u8bed\u8a00\u7f16\u5199\uff0cC++\u5c42\u4e3b\u8981\u662f\u901a\u8fc7V8\u4e3aJS\u5c42\u63d0\u4f9b\u548c\u5e95\u5c42\u4ea4\u4e92\u7684\u80fd\u529b\uff0cC++\u5c42\u4e5f\u5b9e\u73b0\u4e86\u90e8\u5206\u529f\u80fd\uff0cJS\u5c42\u662f\u9762\u5411\u7528\u6237\u7684\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u8c03\u7528\u5e95\u5c42\u7684\u63a5\u53e3\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#111-jsv8","title":"1.1.1 JS\u5f15\u64ceV8","text":"<p>Node.js\u662f\u57fa\u4e8eV8\u7684JS\u8fd0\u884c\u65f6\uff0c\u5b83\u5229\u7528V8\u63d0\u4f9b\u7684\u80fd\u529b\uff0c\u6781\u5927\u5730\u62d3\u5c55\u4e86JS\u7684\u80fd\u529b\u3002\u8fd9\u79cd\u62d3\u5c55\u4e0d\u662f\u4e3aJS\u589e\u52a0\u4e86\u65b0\u7684\u8bed\u8a00\u7279\u6027\uff0c\u800c\u662f\u62d3\u5c55\u4e86\u529f\u80fd\u6a21\u5757\uff0c\u6bd4\u5982\u5728\u524d\u7aef\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Date\u8fd9\u4e2a\u51fd\u6570\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528TCP\u8fd9\u4e2a\u51fd\u6570\uff0c\u56e0\u4e3aJS\u4e2d\u5e76\u6ca1\u6709\u5185\u7f6e\u8fd9\u4e2a\u51fd\u6570\u3002\u800c\u5728Node.js\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528TCP\uff0c\u8fd9\u5c31\u662fNode.js\u505a\u7684\u4e8b\u60c5\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u4f7f\u7528JS\u4e2d\u672c\u6765\u4e0d\u5b58\u5728\u7684\u529f\u80fd\uff0c\u6bd4\u5982\u6587\u4ef6\u3001\u7f51\u7edc\u3002Node.js\u4e2d\u6700\u6838\u5fc3\u7684\u90e8\u5206\u662fLibuv\u548cV8\uff0cV8\u4e0d\u4ec5\u8d1f\u8d23\u6267\u884cJS\uff0c\u8fd8\u652f\u6301\u81ea\u5b9a\u4e49\u7684\u62d3\u5c55\uff0c\u5b9e\u73b0\u4e86JS\u8c03\u7528C++\u548cC++\u8c03\u7528JS\u7684\u80fd\u529b\u3002\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2aC++\u6a21\u5757\uff0c\u7136\u540e\u5728JS\u8c03\u7528\uff0cNode.js\u6b63\u662f\u5229\u7528\u4e86\u8fd9\u4e2a\u80fd\u529b\uff0c\u5b8c\u6210\u4e86\u529f\u80fd\u7684\u62d3\u5c55\u3002JS\u5c42\u8c03\u7528\u7684\u6240\u6709C\u3001C++\u6a21\u5757\u90fd\u662f\u901a\u8fc7V8\u6765\u5b8c\u6210\u7684\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#112-libuv","title":"1.1.2 Libuv","text":"<p>Libuv\u662fNode.js\u5e95\u5c42\u7684\u5f02\u6b65IO\u5e93\uff0c\u4f46\u5b83\u63d0\u4f9b\u7684\u529f\u80fd\u4e0d\u4ec5\u4ec5\u662fIO\uff0c\u8fd8\u5305\u62ec\u8fdb\u7a0b\u3001\u7ebf\u7a0b\u3001\u4fe1\u53f7\u3001\u5b9a\u65f6\u5668\u3001\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7b49\uff0c\u800c\u4e14Libuv\u62b9\u5e73\u4e86\u5404\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u95f4\u7684\u5dee\u5f02\u3002Libuv\u63d0\u4f9b\u7684\u529f\u80fd\u5927\u6982\u5982\u4e0b \u2022   Full-featured event loop backed by epoll, kqueue, IOCP, event ports. \u2022   Asynchronous TCP and UDP sockets \u2022   Asynchronous DNS resolution \u2022   Asynchronous file and file system operations \u2022   File system events \u2022   ANSI escape code controlled TTY \u2022   IPC with socket sharing, using Unix domain sockets or named pipes (Windows) \u2022   Child processes \u2022   Thread pool \u2022   Signal handling \u2022   High resolution clock \u2022   Threading and synchronization primitives</p> <p>Libuv\u7684\u5b9e\u73b0\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u578b\u3002Libuv\u5728\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\uff0c\u6bcf\u4e00\u8f6e\u5faa\u73af\u90fd\u4f1a\u5904\u7406\u6bcf\u4e2a\u9636\u6bb5\uff08phase\uff09\u7ef4\u62a4\u7684\u4efb\u52a1\u961f\u5217\uff0c\u7136\u540e\u9010\u4e2a\u6267\u884c\u4efb\u52a1\u961f\u5217\u4e2d\u8282\u70b9\u7684\u56de\u8c03\uff0c\u5728\u56de\u8c03\u4e2d\uff0c\u4e0d\u65ad\u751f\u4ea7\u65b0\u7684\u4efb\u52a1\uff0c\u4ece\u800c\u4e0d\u65ad\u9a71\u52a8Libuv\u3002\u4e0b\u662fLibuv\u7684\u6574\u4f53\u6267\u884c\u6d41\u7a0b</p> <p></p> <p>\u4ece\u4e0a\u56fe\u4e2d\u6211\u4eec\u5927\u81f4\u4e86\u89e3\u5230\uff0cLibuv\u5206\u4e3a\u51e0\u4e2a\u9636\u6bb5\uff0c\u7136\u540e\u5728\u4e00\u4e2a\u5faa\u73af\u91cc\u4e0d\u65ad\u6267\u884c\u6bcf\u4e2a\u9636\u6bb5\u91cc\u7684\u4efb\u52a1\u3002\u4e0b\u9762\u6211\u4eec\u5177\u4f53\u770b\u4e00\u4e0b\u6bcf\u4e2a\u9636\u6bb5</p> <ol> <li>\u66f4\u65b0\u5f53\u524d\u65f6\u95f4\uff0c\u5728\u6bcf\u6b21\u4e8b\u4ef6\u5faa\u73af\u5f00\u59cb\u7684\u65f6\u5019\uff0cLibuv\u4f1a\u66f4\u65b0\u5f53\u524d\u65f6\u95f4\u5230\u53d8\u91cf\u4e2d\uff0c\u8fd9\u4e00\u8f6e\u5faa\u73af\u7684\u5269\u4e0b\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u907f\u514d\u8fc7\u591a\u7684\u7cfb\u7edf\u8c03\u7528\u5f71\u54cd\u6027\u80fd\uff0c\u989d\u5916\u7684\u5f71\u54cd\u5c31\u662f\u65f6\u95f4\u4e0d\u662f\u90a3\u4e48\u7cbe\u786e\u3002\u4f46\u662f\u5728\u4e00\u8f6e\u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0cLibuv\u5728\u5fc5\u8981\u7684\u65f6\u5019\uff0c\u4f1a\u4e3b\u52a8\u66f4\u65b0\u8fd9\u4e2a\u65f6\u95f4\uff0c\u6bd4\u5982\u5728epoll\u4e2d\u963b\u585e\u4e86timeout\u65f6\u95f4\u540e\u8fd4\u56de\u65f6\uff0c\u4f1a\u518d\u6b21\u66f4\u65b0\u5f53\u524d\u65f6\u95f4\u53d8\u91cf\u3002</li> <li>\u5982\u679c\u4e8b\u4ef6\u5faa\u73af\u662f\u5904\u4e8ealive\u72b6\u6001\uff0c\u5219\u5f00\u59cb\u5904\u7406\u4e8b\u4ef6\u5faa\u73af\u7684\u6bcf\u4e2a\u9636\u6bb5\uff0c\u5426\u5219\u9000\u51fa\u8fd9\u4e2a\u4e8b\u4ef6\u5faa\u73af\u3002alive\u72b6\u6001\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u5982\u679c\u6709active\u548cref\u72b6\u6001\u7684handle\uff0cactive\u72b6\u6001\u7684request\u6216\u8005closing\u72b6\u6001\u7684handle\u5219\u8ba4\u4e3a\u4e8b\u4ef6\u5faa\u73af\u662falive\uff08\u5177\u4f53\u7684\u540e\u7eed\u4f1a\u8bb2\u5230\uff09\u3002</li> <li>timer\u9636\u6bb5\uff1a\u5224\u65ad\u6700\u5c0f\u5806\u4e2d\u7684\u8282\u70b9\u54ea\u4e2a\u8282\u70b9\u8d85\u65f6\u4e86\uff0c\u6267\u884c\u5b83\u7684\u56de\u8c03\u3002</li> <li>pending\u9636\u6bb5\uff1a\u6267\u884cpending\u56de\u8c03\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6240\u6709\u7684IO\u56de\u8c03\uff08\u7f51\u7edc\uff0c\u6587\u4ef6\uff0cDNS\uff09\u90fd\u4f1a\u5728Poll IO\u9636\u6bb5\u6267\u884c\uff0c\u4f46\u662f\u6709\u7684\u60c5\u51b5\u4e0b\uff0cPoll IO\u9636\u6bb5\u7684\u56de\u8c03\u4f1a\u5ef6\u8fdf\u5230\u4e0b\u4e00\u6b21\u5faa\u73af\u6267\u884c\uff0c\u90a3\u4e48\u8fd9\u79cd\u56de\u8c03\u5c31\u662f\u5728pending\u9636\u6bb5\u6267\u884c\u7684\uff0c\u6bd4\u5982IO\u56de\u8c03\u91cc\u51fa\u73b0\u4e86\u9519\u8bef\u6216\u5199\u6570\u636e\u6210\u529f\u7b49\u7b49\u90fd\u4f1a\u5728\u4e0b\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\u7684pending\u9636\u6bb5\u6267\u884c\u56de\u8c03\u3002</li> <li>idle\u9636\u6bb5\uff1a\u6bcf\u6b21\u4e8b\u4ef6\u5faa\u73af\u90fd\u4f1a\u88ab\u6267\u884c\uff08idle\u4e0d\u662f\u8bf4\u4e8b\u4ef6\u5faa\u73af\u7a7a\u95f2\u7684\u65f6\u5019\u624d\u6267\u884c\uff09\u3002</li> <li>prepare\u9636\u6bb5\uff1a\u548cidle\u9636\u6bb5\u7c7b\u4f3c\u3002</li> <li>Poll IO\u9636\u6bb5\uff1a\u8c03\u7528\u5404\u5e73\u53f0\u63d0\u4f9b\u7684IO\u591a\u8def\u590d\u7528\u63a5\u53e3\uff08\u6bd4\u5982Linux\u4e0b\u5c31\u662fepoll\u6a21\u5f0f\uff09\uff0c\u6700\u591a\u7b49\u5f85timeout\u65f6\u95f4\uff0c\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u6267\u884c\u5bf9\u5e94\u7684\u56de\u8c03\u3002timeout\u7684\u8ba1\u7b97\u89c4\u5219\uff1a         1 \u5982\u679c\u65f6\u95f4\u5faa\u73af\u662f\u4ee5UV_RUN_NOWAIT\u6a21\u5f0f\u8fd0\u884c\u7684\uff0c\u5219timeout\u662f0\u3002         2 \u5982\u679c\u65f6\u95f4\u5faa\u73af\u5373\u5c06\u9000\u51fa\uff08\u8c03\u7528\u4e86uv_stop\uff09\uff0c\u5219timeout\u662f0\u3002         3 \u5982\u679c\u6ca1\u6709active\u72b6\u6001\u7684handle\u6216\u8005request\uff0ctimeout\u662f0\u3002         4 \u5982\u679c\u6709idle\u9636\u6bb5\u7684\u961f\u5217\u91cc\u6709\u8282\u70b9\uff0c\u5219timeout\u662f0\u3002         5 \u5982\u679c\u6709handle\u7b49\u5f85\u88ab\u5173\u95ed\u7684\uff08\u5373\u8c03\u4e86uv_close\uff09\uff0ctimeout\u662f0\u3002         6 \u5982\u679c\u4e0a\u9762\u7684\u90fd\u4e0d\u6ee1\u8db3\uff0c\u5219\u53d6timer\u9636\u6bb5\u4e2d\u6700\u5feb\u8d85\u65f6\u7684\u8282\u70b9\u4f5c\u4e3atimeout\u3002          7 \u5982\u679c\u4e0a\u9762\u7684\u90fd\u4e0d\u6ee1\u8db3\u5219timeout\u7b49\u4e8e-1\uff0c\u5373\u4e00\u76f4\u963b\u585e\uff0c\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\u3002  </li> <li>check\u9636\u6bb5\uff1a\u548cidle\u3001prepare\u4e00\u6837\u3002</li> <li>closing\u9636\u6bb5\uff1a\u6267\u884c\u8c03\u7528uv_close\u51fd\u6570\u65f6\u4f20\u5165\u7684\u56de\u8c03\u3002</li> <li>\u5982\u679cLibuv\u662f\u4ee5UV_RUN_ONCE\u6a21\u5f0f\u8fd0\u884c\u7684\uff0c\u90a3\u4e8b\u4ef6\u5faa\u73af\u5373\u5c06\u9000\u51fa\u3002\u4f46\u662f\u6709\u4e00\u79cd\u60c5\u51b5\u662f\uff0cPoll IO\u9636\u6bb5\u7684timeout\u7684\u503c\u662ftimer\u9636\u6bb5\u7684\u8282\u70b9\u7684\u503c\uff0c\u5e76\u4e14Poll IO\u9636\u6bb5\u662f\u56e0\u4e3a\u8d85\u65f6\u8fd4\u56de\u7684\uff0c\u5373\u6ca1\u6709\u4efb\u4f55\u4e8b\u4ef6\u53d1\u751f\uff0c\u4e5f\u6ca1\u6709\u6267\u884c\u4efb\u4f55IO\u56de\u8c03\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u5728\u6267\u884c\u4e00\u6b21timer\u9636\u6bb5\u3002\u56e0\u4e3a\u6709\u8282\u70b9\u8d85\u65f6\u4e86\u3002</li> <li>\u4e00\u8f6e\u4e8b\u4ef6\u5faa\u73af\u7ed3\u675f\uff0c\u5982\u679cLibuv\u4ee5UV_RUN_NOWAIT \u6216 UV_RUN_ONCE\u6a21\u5f0f\u8fd0\u884c\u7684\uff0c\u5219\u9000\u51fa\u4e8b\u4ef6\u5faa\u73af\uff0c\u5982\u679c\u662f\u4ee5UV_RUN_DEFAULT\u6a21\u5f0f\u8fd0\u884c\u7684\u5e76\u4e14\u72b6\u6001\u662falive\uff0c\u5219\u5f00\u59cb\u4e0b\u4e00\u8f6e\u5faa\u73af\u3002\u5426\u5219\u9000\u51fa\u4e8b\u4ef6\u5faa\u73af\u3002</li> </ol> <p>\u4e0b\u9762\u6211\u80fd\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u4e86\u89e3libuv\u7684\u57fa\u672c\u539f\u7406\u3002</p> <pre><code>    #include &lt;stdio.h&gt;  \n    #include &lt;uv.h&gt;  \n\n    int64_t counter = 0;  \n\n    void wait_for_a_while(uv_idle_t* handle) {  \n        counter++;  \n        if (counter &gt;= 10e6)  \n            uv_idle_stop(handle);  \n    }  \n\n    int main() {  \n        uv_idle_t idler;  \n         // \u83b7\u53d6\u4e8b\u4ef6\u5faa\u73af\u7684\u6838\u5fc3\u7ed3\u6784\u4f53\u3002\u5e76\u521d\u59cb\u5316\u4e00\u4e2aidle  \n        uv_idle_init(uv_default_loop(), &amp;idler);  \n        // \u5f80\u4e8b\u4ef6\u5faa\u73af\u7684idle\u9636\u6bb5\u63d2\u5165\u4e00\u4e2a\u4efb\u52a1  \n        uv_idle_start(&amp;idler, wait_for_a_while);  \n        // \u542f\u52a8\u4e8b\u4ef6\u5faa\u73af  \n        uv_run(uv_default_loop(), UV_RUN_DEFAULT);  \n        // \u9500\u6bc1libuv\u7684\u76f8\u5173\u6570\u636e  \n        uv_loop_close(uv_default_loop());  \n        return 0;  \n    }  \n</code></pre> <p>\u4f7f\u7528Libuv\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u83b7\u53d6Libuv\u7684\u6838\u5fc3\u7ed3\u6784\u4f53uv_loop_t\uff0cuv_loop_t\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u7ed3\u6784\u4f53\uff0c\u91cc\u9762\u8bb0\u5f55\u4e86Libuv\u6574\u4e2a\u751f\u547d\u5468\u671f\u7684\u6570\u636e\u3002uv_default_loop\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\u7684uv_loop_t\u7ed3\u6784\u4f53\uff0c\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5df1\u53bb\u5206\u914d\u4e00\u4e2a\uff0c\u81ea\u5df1\u521d\u59cb\u5316\u3002</p> <pre><code>    uv_loop_t* uv_default_loop(void) {  \n      // \u7f13\u5b58  \n      if (default_loop_ptr != NULL)  \n        return default_loop_ptr;  \n\n      if (uv_loop_init(&amp;default_loop_struct))  \n        return NULL;  \n\n      default_loop_ptr = &amp;default_loop_struct;  \n      return default_loop_ptr;  \n    }  \n</code></pre> <p>Libuv\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5168\u5c40\u7684uv_loop_t\u7ed3\u6784\u4f53\uff0c\u4f7f\u7528uv_loop_init\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4e0d\u6253\u7b97\u5c55\u5f00\u8bb2\u89e3uv_loop_init\u51fd\u6570\uff0cw\u56e0\u4e3a\u5b83\u5927\u6982\u5c31\u662f\u5bf9uv_loop_t\u7ed3\u6784\u4f53\u5404\u4e2a\u5b57\u6bb5\u8fdb\u884c\u521d\u59cb\u5316\u3002\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0buv_idle_*\u7cfb\u5217\u7684\u51fd\u6570\u3002</p> <p>1 uv_idle_init</p> <pre><code>    int uv_idle_init(uv_loop_t* loop, uv_idle_t* handle) {  \n        /* \n          \u521d\u59cb\u5316handle\u7684\u7c7b\u578b\uff0c\u6240\u5c5eloop\uff0c\u6253\u4e0aUV_HANDLE_REF\uff0c \n          \u5e76\u4e14\u628ahandle\u63d2\u5165loop-&gt;handle_queue\u961f\u5217\u7684\u961f\u5c3e \n        */  \n        uv__handle_init(loop, (uv_handle_t*)handle, UV_IDLE);\n        handle-&gt;idle_cb = NULL;   \n        return 0;      \n    }   \n</code></pre> <p>\u6267\u884cuv_idle_init\u51fd\u6570\u540e\uff0cLibuv\u7684\u5185\u5b58\u89c6\u56fe\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>2 uv_idle_start</p> <pre><code>    int uv_idle_start(uv_idle_t* handle, uv_idle_cb cb) { \n      // \u5982\u679c\u5df2\u7ecf\u6267\u884c\u8fc7start\u51fd\u6570\u5219\u76f4\u63a5\u8fd4\u56de  \n       if (uv__is_active(handle)) return 0;  \n       // \u628ahandle\u63d2\u5165loop\u4e2didle\u7684\u961f\u5217  \n       QUEUE_INSERT_HEAD(&amp;handle-&gt;loop-&gt;idle_handles, &amp;handle-&gt;queue);           \n       // \u6302\u8f7d\u56de\u8c03\uff0c\u4e0b\u4e00\u8f6e\u5faa\u73af\u7684\u65f6\u5019\u88ab\u6267\u884c  \n       handle-&gt;idle_cb = cb;  \n       /* \n         \u8bbe\u7f6eUV_HANDLE_ACTIVE\u6807\u8bb0\u4f4d\uff0c\u5e76\u4e14loop\u4e2d\u7684handle\u6570\u52a0\u4e00\uff0c \n        init\u7684\u65f6\u5019\u53ea\u662f\u628ahandle\u6302\u8f7d\u5230loop\uff0cstart\u7684\u65f6\u5019handle\u624d\n        \u5904\u4e8e\u6fc0\u6d3b\u6001 \n      */  \n       uv__handle_start(handle);  \n       return 0;   \n     }   \n</code></pre> <p>\u6267\u884c\u5b8cuv_idle_start\u7684\u5185\u5b58\u89c6\u56fe\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u7136\u540e\u6267\u884cuv_run\u8fdb\u5165Libuv\u7684\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p><pre><code>    int uv_run(uv_loop_t* loop, uv_run_mode mode) {  \n      int timeout;  \n      int r;  \n      int ran_pending;  \n      // \u5728uv_run\u4e4b\u524d\u8981\u5148\u63d0\u4ea4\u4efb\u52a1\u5230loop  \n      r = uv__loop_alive(loop);  \n      // \u6ca1\u6709\u4efb\u52a1\u9700\u8981\u5904\u7406\u6216\u8005\u8c03\u7528\u4e86uv_stop   \n      while (r != 0 &amp;&amp; loop-&gt;stop_flag == 0) {  \n        // \u5904\u7406idle\u961f\u5217  \n        uv__run_idle(loop);  \n      }  \n\n      // \u662f\u56e0\u4e3a\u8c03\u7528\u4e86uv_stop\u9000\u51fa\u7684\uff0c\u91cd\u7f6eflag  \n      if (loop-&gt;stop_flag != 0)  \n        loop-&gt;stop_flag = 0;  \n      /* \n        \u8fd4\u56de\u662f\u5426\u8fd8\u6709\u6d3b\u8dc3\u7684\u4efb\u52a1\uff08handle\u6216request\uff09\uff0c\n        \u4e1a\u52a1\u4ee3\u8868\u53ef\u4ee5\u518d\u6b21\u6267\u884cuv_run \n      */ \n      return r;  \n    }  \n</code></pre> \u6211\u4eec\u770b\u5230\u6709\u4e00\u4e2a\u51fd\u6570\u662fuv__run_idle\uff0c\u8fd9\u5c31\u662f\u5904\u7406idle\u9636\u6bb5\u7684\u51fd\u6570\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5b83\u7684\u5b9e\u73b0\u3002</p> <pre><code>    // \u5728\u6bcf\u4e00\u8f6e\u5faa\u73af\u4e2d\u6267\u884c\u8be5\u51fd\u6570\uff0c\u6267\u884c\u65f6\u673a\u89c1uv_run  \n      void uv__run_idle(uv_loop_t* loop) { \n        uv_idle_t* h;       \n        QUEUE queue;     \n        QUEUE* q;    \n        /*\n           \u628a\u8be5\u7c7b\u578b\u5bf9\u5e94\u7684\u961f\u5217\u4e2d\u6240\u6709\u8282\u70b9\u6458\u4e0b\u6765\u6302\u8f7d\u5230queue\u53d8\u91cf\uff0c\n           \u53d8\u91cf\u56de\u8c03\u91cc\u4e0d\u65ad\u63d2\u5165\u65b0\u8282\u70b9\uff0c\u5bfc\u81f4\u6b7b\u5faa\u73af \n         */ \n        QUEUE_MOVE(&amp;loop-&gt;idle_handles, &amp;queue);  \n        // \u904d\u5386\u961f\u5217\uff0c\u6267\u884c\u6bcf\u4e2a\u8282\u70b9\u91cc\u9762\u7684\u51fd\u6570  \n        while (!QUEUE_EMPTY(&amp;queue)) {\n          // \u53d6\u4e0b\u5f53\u524d\u5f85\u5904\u7406\u7684\u8282\u70b9  \n          q = QUEUE_HEAD(&amp;queue);\n          // \u53d6\u5f97\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u6574\u4e2a\u7ed3\u6784\u4f53\u7684\u57fa\u5730\u5740  \n          h = QUEUE_DATA(q, uv_idle_t, queue);  \n          // \u628a\u8be5\u8282\u70b9\u79fb\u51fa\u5f53\u524d\u961f\u5217\uff0c\u5426\u5219\u5faa\u73af\u4e0d\u4f1a\u7ed3\u675f  \n          QUEUE_REMOVE(q);   \n         // \u91cd\u65b0\u63d2\u5165\u539f\u6765\u7684\u961f\u5217  \n          QUEUE_INSERT_TAIL(&amp;loop-&gt;idle_handles, q);  \n         // \u6267\u884c\u56de\u8c03\u51fd\u6570  \n          h-&gt;idle_cb(h);  \n        }                                                                           \n      }    \n</code></pre> <p>\u6211\u4eec\u770b\u5230uv__run_idle\u7684\u903b\u8f91\u5e76\u4e0d\u590d\u6742\uff0c\u5c31\u662f\u904d\u5386idle_handles\u961f\u5217\u7684\u8282\u70b9\uff0c\u7136\u540e\u6267\u884c\u56de\u8c03\uff0c\u5728\u56de\u8c03\u91cc\u6211\u4eec\u53ef\u4ee5\u63d2\u5165\u65b0\u7684\u8282\u70b9\uff08\u4ea7\u751f\u65b0\u4efb\u52a1\uff09\uff0c\u4ece\u800c\u4e0d\u65ad\u9a71\u52a8Libuv\u7684\u8fd0\u884c\u3002\u6211\u4eec\u770b\u5230uv_run\u9000\u51fa\u5faa\u73af\u7684\u6761\u4ef6\u4e0b\u9762\u7684\u4ee3\u7801\u4e3afalse\u3002</p> <pre><code>    r != 0 &amp;&amp; loop-&gt;stop_flag == 0  \n</code></pre> <p>stop_flag\u7531\u7528\u6237\u4e3b\u52a8\u5173\u95edLibuv\u4e8b\u4ef6\u5faa\u73af\u3002</p> <pre><code>    void uv_stop(uv_loop_t* loop) {  \n      loop-&gt;stop_flag = 1;  \n    }  \n</code></pre> <p>r\u662f\u4ee3\u8868\u4e8b\u4ef6\u5faa\u73af\u662f\u5426\u8fd8\u5b58\u6d3b\uff0c\u8fd9\u4e2a\u5224\u65ad\u7684\u6807\u51c6\u662f\u7531uv__loop_alive\u63d0\u4f9b</p> <pre><code>    static int uv__loop_alive(const uv_loop_t* loop) {  \n      return loop-&gt;active_handles &gt; 0 ||  \n             loop-&gt;active_reqs.count &gt; 0 ||  \n             loop-&gt;closing_handles != NULL;  \n    }  \n</code></pre> <p>\u8fd9\u65f6\u5019\u6211\u4eec\u6709\u4e00\u4e2aactived handles\uff0c\u6240\u4ee5Libuv\u4e0d\u4f1a\u9000\u51fa\u3002\u5f53\u6211\u4eec\u8c03\u7528uv_idle_stop\u51fd\u6570\u628aidle\u8282\u70b9\u79fb\u51fahandle\u961f\u5217\u7684\u65f6\u5019\uff0cLibuv\u5c31\u4f1a\u9000\u51fa\u3002\u540e\u9762\u6211\u4eec\u4f1a\u5177\u4f53\u5206\u6790Libuv\u4e8b\u4ef6\u5faa\u73af\u7684\u539f\u7406\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#113","title":"1.1.3 \u5176\u5b83\u7b2c\u4e09\u65b9\u5e93","text":"<p>Node.js\u4e2d\u7b2c\u4e09\u65b9\u5e93\u5305\u62ec\u5f02\u6b65DNS\u89e3\u6790\uff08cares\uff09\u3001HTTP\u89e3\u6790\u5668\uff08\u65e7\u7248\u4f7f\u7528http_parser\uff0c\u65b0\u7248\u4f7f\u7528llhttp\uff09\u3001HTTP2\u89e3\u6790\u5668\uff08nghttp2\uff09\u3001\u89e3\u538b\u538b\u7f29\u5e93(zlib)\u3001\u52a0\u5bc6\u89e3\u5bc6\u5e93(openssl)\u7b49\u7b49\uff0c\u4e0d\u4e00\u4e00\u4ecb\u7ecd\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#12-nodejs","title":"1.2 Node.js\u5de5\u4f5c\u539f\u7406","text":""},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#121-nodejsjs","title":"1.2.1 Node.js\u662f\u5982\u4f55\u62d3\u5c55JS\u529f\u80fd\u7684\uff1f","text":"<p>V8\u63d0\u4f9b\u4e86\u4e00\u5957\u673a\u5236\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5728JS\u5c42\u8c03\u7528C++\u3001C\u8bed\u8a00\u6a21\u5757\u63d0\u4f9b\u7684\u529f\u80fd\u3002Node.js\u6b63\u662f\u901a\u8fc7\u8fd9\u5957\u673a\u5236\uff0c\u5b9e\u73b0\u4e86\u5bf9JS\u80fd\u529b\u7684\u62d3\u5c55\u3002Node.js\u5728\u5e95\u5c42\u505a\u4e86\u5927\u91cf\u7684\u4e8b\u60c5\uff0c\u5b9e\u73b0\u4e86\u5f88\u591a\u529f\u80fd\uff0c\u7136\u540e\u5728JS\u5c42\u66b4\u9732\u63a5\u53e3\u7ed9\u7528\u6237\u4f7f\u7528\uff0c\u964d\u4f4e\u4e86\u7528\u6237\u6210\u672c\uff0c\u4e5f\u63d0\u9ad8\u4e86\u5f00\u53d1\u6548\u7387\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#122-v8","title":"1.2.2 \u5982\u4f55\u5728V8\u65b0\u589e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u529f\u80fd\uff1f","text":"<pre><code>    // C++\u91cc\u5b9a\u4e49  \n    Handle&lt;FunctionTemplate&gt; Test = FunctionTemplate::New(cb);\n    global-&gt;Set(String::New(\u201cTest\"), Test);  \n    // JS\u91cc\u4f7f\u7528    \n    const test = new Test();  \n</code></pre> <p>\u6211\u4eec\u5148\u6709\u4e00\u4e2a\u611f\u6027\u7684\u8ba4\u8bc6\uff0c\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u4f1a\u5177\u4f53\u8bb2\u89e3\u5982\u4f55\u4f7f\u7528V8\u62d3\u5c55JS\u7684\u529f\u80fd\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#123-nodejs","title":"1.2.3 Node.js\u662f\u5982\u4f55\u5b9e\u73b0\u62d3\u5c55\u7684?","text":"<p>Node.js\u5e76\u4e0d\u662f\u7ed9\u6bcf\u4e2a\u529f\u80fd\u90fd\u62d3\u5c55\u4e00\u4e2a\u5bf9\u8c61\uff0c\u7136\u540e\u6302\u8f7d\u5230\u5168\u5c40\u53d8\u91cf\u4e2d\uff0c\u800c\u662f\u62d3\u5c55\u4e00\u4e2aprocess\u5bf9\u8c61\uff0c\u518d\u901a\u8fc7process.binding\u62d3\u5c55js\u529f\u80fd\u3002Node.js\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5168\u5c40\u7684JS\u5bf9\u8c61process\uff0c\u6620\u5c04\u5230\u4e00\u4e2aC++\u5bf9\u8c61process\uff0c\u5e95\u5c42\u7ef4\u62a4\u4e86\u4e00\u4e2aC++\u6a21\u5757\u7684\u94fe\u8868\uff0cJS\u901a\u8fc7\u8c03\u7528JS\u5c42\u7684process.binding\uff0c\u8bbf\u95ee\u5230C++\u7684process\u5bf9\u8c61\uff0c\u4ece\u800c\u8bbf\u95eeC++\u6a21\u5757(\u7c7b\u4f3c\u8bbf\u95eeJS\u7684Object\u3001Date\u7b49)\u3002\u4e0d\u8fc7Node.js 14\u7248\u672c\u5df2\u7ecf\u6539\u6210internalBinding\u7684\u65b9\u5f0f\uff0c\u901a\u8fc7internalBinding\u5c31\u53ef\u4ee5\u8bbf\u95eeC++\u6a21\u5757\uff0c\u539f\u7406\u7c7b\u4f3c\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#13-nodejs","title":"1.3 Node.js\u542f\u52a8\u8fc7\u7a0b","text":"<p>\u4e0b\u9762\u662fNode.js\u542f\u52a8\u7684\u4e3b\u6d41\u7a0b\u56fe\u5982\u56fe1-4\u6240\u793a\u3002</p> <p></p> <p>\u6211\u4eec\u4ece\u4e0a\u5f80\u4e0b\uff0c\u770b\u4e00\u4e0b\u6bcf\u4e2a\u8fc7\u7a0b\u90fd\u505a\u4e86\u4e9b\u4ec0\u4e48\u4e8b\u60c5\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#131-c","title":"1.3.1 \u6ce8\u518cC++\u6a21\u5757","text":"<p>RegisterBuiltinModules\u51fd\u6570\uff08node_binding.cc\uff09\u7684\u4f5c\u7528\u662f\u6ce8\u518cC++\u6a21\u5757\u3002</p> <pre><code>    void RegisterBuiltinModules() {  \n    #define V(modname) _register_##modname();  \n      NODE_BUILTIN_MODULES(V)  \n    #undef V  \n    }  \n</code></pre> <p>NODE_BUILTIN_MODULES\u662f\u4e00\u4e2aC\u8bed\u8a00\u5b8f\uff0c\u5b8f\u5c55\u5f00\u540e\u5982\u4e0b\uff08\u7701\u7565\u7c7b\u4f3c\u903b\u8f91\uff09</p> <pre><code>    void RegisterBuiltinModules() {  \n    #define V(modname) _register_##modname();  \n      V(tcp_wrap)   \n      V(timers)  \n      ...\u5176\u5b83\u6a21\u5757  \n    #undef V  \n    }  \n</code></pre> <p>\u518d\u4e00\u6b65\u5c55\u5f00\u5982\u4e0b</p> <pre><code>    void RegisterBuiltinModules() {  \n      _register_tcp_wrap();  \n      _register_timers();  \n    }  \n</code></pre> <p>\u6267\u884c\u4e86\u4e00\u7cfb\u5217_register\u5f00\u5934\u7684\u51fd\u6570\uff0c\u4f46\u662f\u6211\u4eec\u5728Node.js\u6e90\u7801\u91cc\u627e\u4e0d\u5230\u8fd9\u4e9b\u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u51fd\u6570\u662f\u5728\u6bcf\u4e2aC++\u6a21\u5757\u5b9a\u4e49\u7684\u6587\u4ef6\u91cc\uff08.cc\u6587\u4ef6\u7684\u6700\u540e\u4e00\u884c\uff09\u901a\u8fc7\u5b8f\u5b9a\u4e49\u7684\u3002\u4ee5tcp_wrap\u6a21\u5757\u4e3a\u4f8b\uff0c\u770b\u770b\u5b83\u662f\u600e\u4e48\u505a\u7684\u3002\u6587\u4ef6tcp_wrap.cc\u7684\u6700\u540e\u4e00\u53e5\u4ee3\u7801 NODE_MODULE_CONTEXT_AWARE_INTERNAL(tcp_wrap, node::TCPWrap::Initialize)   \u5b8f\u5c55\u5f00\u662f</p> <pre><code>    #define NODE_MODULE_CONTEXT_AWARE_INTERNAL(modname, regfunc)  \\  \n    NODE_MODULE_CONTEXT_AWARE_CPP(modname, \n                                  regfunc, \n                                  nullptr, \n                                  NM_F_INTERNAL)  \n</code></pre> <p>\u7ee7\u7eed\u5c55\u5f00</p> <pre><code>    #define NODE_MODULE_CONTEXT_AWARE_CPP(modname, regfunc, priv, flags\\  \n      static node::node_module _module = {              \\  \n          NODE_MODULE_VERSION,                        \\  \n          flags,                        \\  \n          nullptr,                        \\  \n          __FILE__,                        \\  \n          nullptr,                        \\  \n          (node::addon_context_register_func)(regfunc),  \\  \n          NODE_STRINGIFY(modname),                        \\  \n          priv,                        \\  \n          nullptr};                        \\  \n      void _register_tcp_wrap() { node_module_register(&amp;_module); }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u6bcf\u4e2aC++\u6a21\u5757\u5e95\u5c42\u90fd\u5b9a\u4e49\u4e86\u4e00\u4e2a_register\u5f00\u5934\u7684\u51fd\u6570\uff0c\u5728Node.js\u542f\u52a8\u65f6\uff0c\u5c31\u4f1a\u628a\u8fd9\u4e9b\u51fd\u6570\u9010\u4e2a\u6267\u884c\u4e00\u904d\u3002\u6211\u4eec\u7ee7\u7eed\u770b\u4e00\u4e0b\u8fd9\u4e9b\u51fd\u6570\u90fd\u505a\u4e86\u4ec0\u4e48\uff0c\u5728\u8fd9\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u5148\u4e86\u89e3\u4e00\u4e0bNode.js\u4e2d\u8868\u793aC++\u6a21\u5757\u7684\u6570\u636e\u7ed3\u6784\u3002</p> <pre><code>    struct node_module {  \n      int nm_version;  \n      unsigned int nm_flags;  \n      void* nm_dso_handle;  \n      const char* nm_filename;  \n      node::addon_register_func nm_register_func;  \n      node::addon_context_register_func nm_context_register_func;  \n      const char* nm_modname;  \n      void* nm_priv;  \n      struct node_module* nm_link;  \n    };  \n</code></pre> <p>\u6211\u4eec\u770b\u5230_register\u5f00\u5934\u7684\u51fd\u6570\u8c03\u4e86node_module_register\uff0c\u5e76\u4f20\u5165\u4e00\u4e2anode_module\u6570\u636e\u7ed3\u6784\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u4e00\u4e0bnode_module_register\u7684\u5b9e\u73b0</p> <pre><code>    void node_module_register(void* m) {  \n      struct node_module* mp = reinterpret_cast&lt;struct node_module*&gt;(m);  \n      if (mp-&gt;nm_flags &amp; NM_F_INTERNAL) {  \n        mp-&gt;nm_link = modlist_internal;  \n        modlist_internal = mp;  \n      } else if (!node_is_initialized) { \n        mp-&gt;nm_flags = NM_F_LINKED;  \n        mp-&gt;nm_link = modlist_linked;  \n        modlist_linked = mp;  \n      } else {  \n        thread_local_modpending = mp;  \n      }  \n    }  \n</code></pre> <p>C++\u5185\u7f6e\u6a21\u5757\u7684flag\u662fNM_F_INTERNAL\uff0c\u6240\u4ee5\u4f1a\u6267\u884c\u7b2c\u4e00\u4e2aif\u7684\u903b\u8f91\uff0cmodlist_internal\u7c7b\u4f3c\u4e00\u4e2a\u5934\u6307\u9488\u3002if\u91cc\u7684\u903b\u8f91\u5c31\u662f\u5934\u63d2\u6cd5\u5efa\u7acb\u4e00\u4e2a\u5355\u94fe\u8868\u3002C++\u5185\u7f6e\u6a21\u5757\u5728Node.js\u91cc\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u5f88\u591a\u529f\u80fd\u90fd\u4f1a\u8c03\u7528\uff0c\u540e\u7eed\u6211\u4eec\u4f1a\u770b\u5230\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#132-environment","title":"1.3.2 \u521b\u5efaEnvironment\u5bf9\u8c61","text":"<p>1 CreateMainEnvironment</p> <p>Node.js\u4e2dEnvironment\u7c7b\uff08env.h\uff09\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7c7b\uff0cNode.js\u4e2d\uff0c\u5f88\u591a\u6570\u636e\u7531Environment\u5bf9\u8c61\u8fdb\u884c\u7ba1\u7406\u3002</p> <pre><code>    context = NewContext(isolate_);  \n    std::unique_ptr&lt;Environment&gt; env = std::make_unique&lt;Environment&gt;(  \n          isolate_data_.get(),  \n          context,  \n          args_,  \n          exec_args_,  \n          static_cast&lt;Environment::Flags&gt;(Environment::kIsMainThread | \n    Environment::kOwnsProcessState | Environment::kOwnsInspector));  \n</code></pre> <p>Isolate\uff0cContext\u662fV8\u4e2d\u7684\u6982\u5ff5\uff0cIsolate\u7528\u4e8e\u9694\u79bb\u5b9e\u4f8b\u95f4\u7684\u73af\u5883\uff0cContext\u7528\u4e8e\u63d0\u4f9bJS\u6267\u884c\u65f6\u7684\u4e0a\u4e0b\u6587\uff0ckIsMainThread\u8bf4\u660e\u5f53\u524d\u8fd0\u884c\u7684\u662f\u4e3b\u7ebf\u7a0b\uff0c\u7528\u4e8e\u533a\u5206Node.js\u4e2d\u7684worker_threads\u5b50\u7ebf\u7a0b\u3002Environment\u7c7b\u975e\u5e38\u5e9e\u5927\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u521d\u59cb\u5316\u7684\u4ee3\u7801 </p> <pre><code>    Environment::Environment(IsolateData* isolate_data,  \n                             Local&lt;Context&gt; context,  \n                             const std::vector&lt;std::string&gt;&amp; args,  \n                             const std::vector&lt;std::string&gt;&amp; exec_args,  \n                             Flags flags,  \n                             uint64_t thread_id)  \n        : isolate_(context-&gt;GetIsolate()),  \n          isolate_data_(isolate_data),  \n          immediate_info_(context-&gt;GetIsolate()),  \n          tick_info_(context-&gt;GetIsolate()),  \n          timer_base_(uv_now(isolate_data-&gt;event_loop())),  \n          exec_argv_(exec_args),  \n          argv_(args),  \n          exec_path_(GetExecPath(args)),  \n          should_abort_on_uncaught_toggle_(isolate_, 1),  \n          stream_base_state_(isolate_, StreamBase::kNumStreamBaseStateFields),  \n          flags_(flags),  \n          thread_id_(thread_id == kNoThreadId ? AllocateThreadId() : thread_id),  \n          fs_stats_field_array_(isolate_, kFsStatsBufferLength),  \n          fs_stats_field_bigint_array_(isolate_, kFsStatsBufferLength),  \n          context_(context-&gt;GetIsolate(), context) {  \n      // \u8fdb\u5165\u5f53\u524d\u7684context  \n      HandleScope handle_scope(isolate());  \n      Context::Scope context_scope(context);  \n      // \u4fdd\u5b58\u73af\u5883\u53d8\u91cf  \n      set_env_vars(per_process::system_environment);  \n      // \u5173\u8054context\u548cenv  \n      AssignToContext(context, ContextInfo(\"\"));  \n      // \u521b\u5efa\u5176\u5b83\u5bf9\u8c61  \n      CreateProperties();  \n    }  \n</code></pre> <p>\u6211\u4eec\u53ea\u770b\u4e00\u4e0bAssignToContext\u548cCreateProperties\uff0cset_env_vars\u4f1a\u628a\u8fdb\u7a0b\u7ae0\u8282\u8bb2\u89e3\u3002</p> <p>1.1 AssignToContext</p> <pre><code>    inline void Environment::AssignToContext(v8::Local&lt;v8::Context&gt; context,  \n                                             const ContextInfo&amp; info) {  \n      // \u5728context\u4e2d\u4fdd\u5b58env\u5bf9\u8c61                                           \n      context-&gt;SetAlignedPointerInEmbedderData(ContextEmbedderIndex::kEnvironment, this);  \n      // Used by Environment::GetCurrent to know that we are on a node context.  \n      context-&gt;SetAlignedPointerInEmbedderData(ContextEmbedderIndex::kContextTag, Environment::kNodeContextTagPtr);  \n\n    }  \n</code></pre> <p>AssignToContext\u7528\u4e8e\u4fdd\u5b58context\u548cenv\u7684\u5173\u7cfb\u3002\u8fd9\u4e2a\u903b\u8f91\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u540e\u7eed\u6267\u884c\u4ee3\u7801\u65f6\uff0c\u6211\u4eec\u4f1a\u8fdb\u5165V8\u7684\u9886\u57df\uff0c\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u77e5\u9053Isolate\u548ccontext\u3002\u5982\u679c\u4e0d\u4fdd\u5b58context\u548cenv\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u5c31\u4e0d\u77e5\u9053\u5f53\u524d\u6240\u5c5e\u7684env\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u4f55\u83b7\u53d6\u5bf9\u5e94\u7684env\u3002</p> <pre><code>    inline Environment* Environment::GetCurrent(v8::Isolate* isolate) {  \n      v8::HandleScope handle_scope(isolate);  \n      return GetCurrent(isolate-&gt;GetCurrentContext());  \n    }  \n\n    inline Environment* Environment::GetCurrent(v8::Local&lt;v8::Context&gt; context) {  \n      return static_cast&lt;Environment*&gt;(  \n          context-&gt;GetAlignedPointerFromEmbedderData(ContextEmbedderIndex::kEnvironment));  \n    }  \n</code></pre> <p>1.2 CreateProperties</p> <p>\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0bCreateProperties\u4e2d\u521b\u5efaprocess\u5bf9\u8c61\u7684\u903b\u8f91\u3002</p> <pre><code>      Isolate* isolate = env-&gt;isolate();  \n     EscapableHandleScope scope(isolate);  \n     Local&lt;Context&gt; context = env-&gt;context();  \n     // \u7533\u8bf7\u4e00\u4e2a\u51fd\u6570\u6a21\u677f  \n     Local&lt;FunctionTemplate&gt; process_template = FunctionTemplate::New(isolate);  \n     process_template-&gt;SetClassName(env-&gt;process_string());  \n     // \u4fdd\u5b58\u51fd\u6570\u6a21\u677f\u751f\u6210\u7684\u51fd\u6570  \n     Local&lt;Function&gt; process_ctor;  \n     // \u4fdd\u5b58\u51fd\u6570\u6a21\u5757\u751f\u6210\u7684\u51fd\u6570\u6240\u65b0\u5efa\u51fa\u6765\u7684\u5bf9\u8c61  \n     Local&lt;Object&gt; process;  \n     if (!process_template-&gt;GetFunction(context).ToLocal(&amp;process_ctor)|| !process_ctor-&gt;NewInstance(context).ToLocal(&amp;process)) {  \n       return MaybeLocal&lt;Object&gt;();  \n     }  \n</code></pre> <p>process\u6240\u4fdd\u5b58\u7684\u5bf9\u8c61\u5c31\u662f\u6211\u4eec\u5728JS\u5c42\u7528\u4f7f\u7528\u7684process\u5bf9\u8c61\u3002Node.js\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u8fd8\u6302\u8f7d\u4e86\u4e00\u4e9b\u5c5e\u6027\u3002</p> <pre><code>    READONLY_PROPERTY(process, \n                      \"version\", \n                      FIXED_ONE_BYTE_STRING(env-&gt;isolate(), \n                                            NODE_VERSION));  \n    READONLY_STRING_PROPERTY(process, \"arch\", per_process::metadata.arch);......\n</code></pre> <p>\u521b\u5efa\u5b8cprocess\u5bf9\u8c61\u540e\uff0cNode.js\u628aprocess\u4fdd\u5b58\u5230env\u4e2d\u3002</p> <pre><code>    Local&lt;Object&gt; process_object = node::CreateProcessObject(this).FromMaybe(Local&lt;Object&gt;());  \n    set_process_object(process_object)  \n</code></pre>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#133-libuv","title":"1.3.3 \u521d\u59cb\u5316Libuv\u4efb\u52a1","text":"<pre><code>InitializeLibuv\u51fd\u6570\u4e2d\u7684\u903b\u8f91\u662f\u5f80Libuv\u4e2d\u63d0\u4ea4\u4efb\u52a1\u3002\n    void Environment::InitializeLibuv(bool start_profiler_idle_notifier) {  \n      HandleScope handle_scope(isolate());  \n      Context::Scope context_scope(context());  \n      CHECK_EQ(0, uv_timer_init(event_loop(), timer_handle()));  \n      uv_unref(reinterpret_cast&lt;uv_handle_t*&gt;(timer_handle()));  \n      uv_check_init(event_loop(), immediate_check_handle());  \n      uv_unref(reinterpret_cast&lt;uv_handle_t*&gt;(immediate_check_handle()));\n      uv_idle_init(event_loop(), immediate_idle_handle());  \n      uv_check_start(immediate_check_handle(), CheckImmediate);  \n      uv_prepare_init(event_loop(), &amp;idle_prepare_handle_);  \n      uv_check_init(event_loop(), &amp;idle_check_handle_);  \n      uv_async_init(  \n          event_loop(),  \n          &amp;task_queues_async_,  \n          [](uv_async_t* async) {  \n            Environment* env = ContainerOf(  \n                &amp;Environment::task_queues_async_, async);  \n            env-&gt;CleanupFinalizationGroups();  \n            env-&gt;RunAndClearNativeImmediates();  \n          });  \n      uv_unref(reinterpret_cast&lt;uv_handle_t*&gt;(&amp;idle_prepare_handle_));  \n      uv_unref(reinterpret_cast&lt;uv_handle_t*&gt;(&amp;idle_check_handle_));  \n      uv_unref(reinterpret_cast&lt;uv_handle_t*&gt;(&amp;task_queues_async_));  \n      // \u2026\n    }  \n</code></pre> <p>\u8fd9\u4e9b\u51fd\u6570\u90fd\u662fLibuv\u63d0\u4f9b\u7684\uff0c\u5206\u522b\u662f\u5f80Libuv\u4e0d\u540c\u9636\u6bb5\u63d2\u5165\u4efb\u52a1\u8282\u70b9\uff0cuv_unref\u662f\u4fee\u6539\u72b6\u6001\u3002</p> <p>1 timer_handle\u662f\u5b9e\u73b0Node.js\u4e2d\u5b9a\u65f6\u5668\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5bf9\u5e94Libuv\u7684time\u9636\u6bb5</p> <p>2 immediate_check_handle\u662f\u5b9e\u73b0Node.js\u4e2dsetImmediate\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5bf9\u5e94Libuv\u7684check\u9636\u6bb5\u3002</p> <p>3 task_queues_async_\u7528\u4e8e\u5b50\u7ebf\u7a0b\u548c\u4e3b\u7ebf\u7a0b\u901a\u4fe1\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#134-loader","title":"1.3.4 \u521d\u59cb\u5316Loader\u548c\u6267\u884c\u4e0a\u4e0b\u6587","text":"<p>RunBootstrapping\u91cc\u8c03\u7528\u4e86BootstrapInternalLoaders\u548cBootstrapNode\u51fd\u6570\uff0c\u6211\u4eec\u4e00\u4e2a\u4e2a\u5206\u6790\u3002</p> <p>1 \u521d\u59cb\u5316loader</p> <p>BootstrapInternalLoaders\u7528\u4e8e\u6267\u884cinternal/bootstrap/loaders.js\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u903b\u8f91\u3002\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u7528\u4e8e\u5b9a\u4e49\u51fd\u6570\u7684\u5f62\u53c2\u5217\u8868\uff0c\u4e00\u4f1a\u6211\u4eec\u4f1a\u770b\u5230\u5b83\u7684\u4f5c\u7528\u3002</p> <pre><code>    std::vector&lt;Local&lt;String&gt;&gt; loaders_params = {  \n          process_string(),  \n          FIXED_ONE_BYTE_STRING(isolate_, \"getLinkedBinding\"),  \n          FIXED_ONE_BYTE_STRING(isolate_, \"getInternalBinding\"),  \n          primordials_string()};  \n</code></pre> <p>\u7136\u540e\u518d\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\uff0c\u662f\u4e00\u4e2a\u5bf9\u8c61\u6570\u7ec4\uff0c\u7528\u4f5c\u6267\u884c\u51fd\u6570\u65f6\u7684\u5b9e\u53c2\u3002</p> <pre><code>    std::vector&lt;Local&lt;Value&gt;&gt; loaders_args = {  \n         process_object(),  \n         NewFunctionTemplate(binding::GetLinkedBinding)  \n             -&gt;GetFunction(context())  \n             .ToLocalChecked(),  \n         NewFunctionTemplate(binding::GetInternalBinding)  \n             -&gt;GetFunction(context())  \n             .ToLocalChecked(),  \n         primordials()};  \n</code></pre> <p>\u63a5\u7740Node.js\u7f16\u8bd1\u6267\u884cinternal/bootstrap/loaders.js\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u94fe\u8def\u975e\u5e38\u957f\uff0c\u6700\u540e\u5230V8\u5c42\uff0c\u5c31\u4e0d\u8d34\u51fa\u5177\u4f53\u7684\u4ee3\u7801\uff0c\u5177\u4f53\u7684\u903b\u8f91\u8f6c\u6210JS\u5982\u4e0b\u3002</p> <pre><code>    function demo(process, \n                   getLinkedBinding, \n                   getInternalBinding, \n                   primordials) {  \n      // internal/bootstrap/loaders.js \u7684\u4ee3\u7801  \n    }  \n    const process = {};  \n    function getLinkedBinding(){}  \n    function getInternalBinding() {}  \n    const primordials = {};  \n    const export = demo(process, \n                           getLinkedBinding, \n                           getInternalBinding, \n                           primordials);  \n</code></pre> <p>V8\u628ainternal/bootstrap/loaders.js\u7528\u4e00\u4e2a\u51fd\u6570\u5305\u88f9\u8d77\u6765\uff0c\u5f62\u53c2\u5c31\u662floaders_params\u53d8\u91cf\u5bf9\u5e94\u7684\u56db\u4e2a\u5b57\u7b26\u4e32\u3002\u7136\u540e\u6267\u884c\u8fd9\u4e2a\u51fd\u6570\uff0c\u5e76\u4e14\u4f20\u5165loaders_args\u91cc\u7684\u90a3\u56db\u4e2a\u5bf9\u8c61\u3002internal/bootstrap/loaders.js\u4f1a\u5bfc\u51fa\u4e00\u4e2a\u5bf9\u8c61\u3002\u5728\u770binternal/bootstrap/loaders.js\u4ee3\u7801\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u770b\u4e00\u4e0bgetLinkedBinding, getInternalBinding\u8fd9\u4e24\u4e2a\u51fd\u6570\uff0cNode.js\u5728C++\u5c42\u5bf9\u5916\u66b4\u9732\u4e86AddLinkedBinding\u65b9\u6cd5\u6ce8\u518c\u6a21\u5757\uff0cNode.js\u9488\u5bf9\u8fd9\u79cd\u7c7b\u578b\u7684\u6a21\u5757\uff0c\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u94fe\u8868\u3002getLinkedBinding\u5c31\u662f\u6839\u636e\u6a21\u5757\u540d\u4ece\u8fd9\u4e2a\u94fe\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u6a21\u5757\uff0c\u4f46\u662f\u6211\u4eec\u4e00\u822c\u7528\u4e0d\u5230\u8fd9\u4e2a\uff0c\u6240\u4ee5\u5c31\u4e0d\u6df1\u5165\u5206\u6790\u3002\u524d\u9762\u6211\u4eec\u770b\u5230\u5bf9\u4e8eC++\u5185\u7f6e\u6a21\u5757\uff0cNode.js\u540c\u6837\u7ef4\u62a4\u4e86\u4e00\u4e2a\u94fe\u8868\uff0cgetInternalBinding\u5c31\u662f\u6839\u636e\u6a21\u5757\u540d\u4ece\u8fd9\u4e2a\u94fe\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u6a21\u5757\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5177\u4f53\u770b\u4e00\u4e0binternal/bootstrap/loaders.js\u7684\u4ee3\u7801\u4e86\u3002</p> <pre><code>    let internalBinding;  \n    {  \n      const bindingObj = ObjectCreate(null);  \n      internalBinding = function internalBinding(module) {  \n        let mod = bindingObj[module];  \n        if (typeof mod !== 'object') {  \n          mod = bindingObj[module] = getInternalBinding(module);\n          moduleLoadList.push(`Internal Binding ${module}`);  \n        }  \n        return mod;  \n      };  \n    }  \n</code></pre> <p>Node.js\u5728JS\u5bf9getInternalBinding\u8fdb\u884c\u4e86\u4e00\u4e2a\u5c01\u88c5\uff0c\u4e3b\u8981\u662f\u52a0\u4e86\u7f13\u5b58\u5904\u7406\u3002</p> <pre><code>    const internalBindingWhitelist = new SafeSet([,  \n      'tcp_wrap',  \n      // \u4e00\u7cfb\u5217C++\u5185\u7f6e\u6a21\u5757\u540d  \n    ]);  \n\n    {  \n      const bindingObj = ObjectCreate(null);  \n      process.binding = function binding(module) {  \n        module = String(module);  \n        if (internalBindingWhitelist.has(module)) {  \n          return internalBinding(module);  \n        }  \n        throw new Error(`No such module: ${module}`);  \n      };\n    }  \n</code></pre> <p>\u5728process\u5bf9\u8c61\uff08\u5c31\u662f\u6211\u4eec\u5e73\u65f6\u4f7f\u7528\u7684process\u5bf9\u8c61\uff09\u4e2d\u6302\u8f7dbinding\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u5185\u7f6e\u7684JS\u6a21\u5757\uff0c\u540e\u9762\u6211\u4eec\u4f1a\u7ecf\u5e38\u770b\u5230\u3002binding\u7684\u903b\u8f91\u5c31\u662f\u6839\u636e\u6a21\u5757\u540d\u67e5\u627e\u5bf9\u5e94\u7684C++\u6a21\u5757\u3002\u4e0a\u9762\u7684\u5904\u7406\u662f\u4e3a\u4e86Node.js\u80fd\u5728JS\u5c42\u901a\u8fc7binding\u51fd\u6570\u52a0\u8f7dC++\u6a21\u5757\uff0c\u6211\u4eec\u77e5\u9053Node.js\u4e2d\u8fd8\u6709\u539f\u751f\u7684JS\u6a21\u5757\uff08lib\u6587\u4ef6\u5939\u4e0b\u7684JS\u6587\u4ef6\uff09\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u52a0\u8f7d\u539f\u751fJS\u6a21\u5757\u7684\u5904\u7406\u3002Node.js\u5b9a\u4e49\u4e86\u4e00\u4e2aNativeModule\u7c7b\u8d1f\u8d23\u539f\u751fJS\u6a21\u5757\u7684\u52a0\u8f7d\u3002\u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf\u4fdd\u5b58\u4e86\u539f\u751fJS\u6a21\u5757\u7684\u540d\u79f0\u5217\u8868\u3002</p> <pre><code>static map = new Map(moduleIds.map((id) =&gt; [id, new NativeModule(id)]));  \n</code></pre> <p>NativeModule\u4e3b\u8981\u7684\u903b\u8f91\u5982\u4e0b</p> <p>1 \u539f\u751fJS\u6a21\u5757\u7684\u4ee3\u7801\u662f\u8f6c\u6210\u5b57\u7b26\u5b58\u5728node_javascript.cc\u6587\u4ef6\u7684\uff0cNativeModule\u8d1f\u8d23\u539f\u751fJS\u6a21\u5757\u7684\u52a0\u8f7d\uff0c\u5373\u7f16\u8bd1\u548c\u6267\u884c\u3002 2 \u63d0\u4f9b\u4e00\u4e2arequire\u51fd\u6570\uff0c\u52a0\u8f7d\u539f\u751fJS\u6a21\u5757\uff0c\u5bf9\u4e8e\u6587\u4ef6\u8def\u5f84\u4ee5internal\u5f00\u5934\u7684\u6a21\u5757\uff0c\u662f\u4e0d\u80fd\u88ab\u7528\u6237require\u4f7f\u7528\u7684\u3002</p> <p>\u8fd9\u662f\u539f\u751fJS\u6a21\u5757\u52a0\u8f7d\u7684\u5927\u6982\u903b\u8f91\uff0c\u5177\u4f53\u7684\u6211\u4eec\u5728Node.js\u6a21\u5757\u52a0\u8f7d\u7ae0\u8282\u5177\u4f53\u5206\u6790\u3002\u6267\u884c\u5b8cinternal/bootstrap/loaders.js\uff0c\u6700\u540e\u8fd4\u56de\u4e09\u4e2a\u53d8\u91cf\u7ed9C++\u5c42\u3002</p> <pre><code>    return {  \n      internalBinding,  \n      NativeModule,  \n      require: nativeModuleRequire  \n    };  \n</code></pre> <p>C++\u5c42\u4fdd\u5b58\u5176\u4e2d\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u4e8e\u52a0\u8f7d\u5185\u7f6eC++\u6a21\u5757\u548c\u539f\u751fJS\u6a21\u5757\u7684\u51fd\u6570\u3002</p> <pre><code>    set_internal_binding_loader(internal_binding_loader.As&lt;Function&gt;());\n    set_native_module_require(require.As&lt;Function&gt;());   \n</code></pre> <p>\u81f3\u6b64\uff0cinternal/bootstrap/loaders.js\u5206\u6790\u5b8c\u4e86\u3002</p> <p>2 \u521d\u59cb\u5316\u6267\u884c\u4e0a\u4e0b\u6587</p> <p>BootstrapNode\u8d1f\u8d23\u521d\u59cb\u5316\u6267\u884c\u4e0a\u4e0b\u6587\uff0c\u4ee3\u7801\u5982\u4e0b</p> <pre><code>    EscapableHandleScope scope(isolate_); \n    // \u83b7\u53d6\u5168\u5c40\u53d8\u91cf\u5e76\u8bbe\u7f6eglobal\u5c5e\u6027 \n    Local&lt;Object&gt; global = context()-&gt;Global();  \n    global-&gt;Set(context(), FIXED_ONE_BYTE_STRING(isolate_, \"global\"), global).Check();  \n    /*\n      \u6267\u884cinternal/bootstrap/node.js\u65f6\u7684\u53c2\u6570\n      process, require, internalBinding, primordials\n    */\n    std::vector&lt;Local&lt;String&gt;&gt; node_params = {\n        process_string(),\n        require_string(),\n        internal_binding_string(),\n        primordials_string()};\n    std::vector&lt;Local&lt;Value&gt;&gt; node_args = {\n        process_object(),\n        // \u539f\u751f\u6a21\u5757\u52a0\u8f7d\u5668\n        native_module_require(),\n        // C++\u6a21\u5757\u52a0\u8f7d\u5668\n        internal_binding_loader(),\n        primordials()};\n\n    MaybeLocal&lt;Value&gt; result = ExecuteBootstrapper(\n        this, \"internal/bootstrap/node\", &amp;node_params, &amp;node_args);\n</code></pre> <p>\u5728\u5168\u5c40\u5bf9\u8c61\u4e0a\u8bbe\u7f6e\u4e00\u4e2aglobal\u5c5e\u6027\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u5728Node.js\u4e2d\u4f7f\u7528\u7684global\u5bf9\u8c61\u3002\u63a5\u7740\u6267\u884cinternal/bootstrap/node.js\u8bbe\u7f6e\u4e00\u4e9b\u53d8\u91cf\uff08\u5177\u4f53\u53ef\u4ee5\u53c2\u8003internal/bootstrap/node.js\uff09\u3002</p> <pre><code>    process.cpuUsage = wrapped.cpuUsage;  \n    process.resourceUsage = wrapped.resourceUsage;  \n    process.memoryUsage = wrapped.memoryUsage;  \n    process.kill = wrapped.kill;  \n    process.exit = wrapped.exit;  \n</code></pre> <p>\u8bbe\u7f6e\u5168\u5c40\u53d8\u91cf</p> <pre><code>    defineOperation(global, 'clearInterval', timers.clearInterval);  \n    defineOperation(global, 'clearTimeout', timers.clearTimeout);  \n    defineOperation(global, 'setInterval', timers.setInterval);  \n    defineOperation(global, 'setTimeout', timers.setTimeout);  \n    ObjectDefineProperty(global, 'process', {  \n      value: process,  \n      enumerable: false,  \n      writable: true,  \n      configurable: true  \n    });  \n</code></pre>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#135-js","title":"1.3.5 \u6267\u884c\u7528\u6237JS\u6587\u4ef6","text":"<p>StartMainThreadExecution\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u5de5\u4f5c\uff0c\u7136\u540e\u6267\u884c\u7528\u6237JS\u4ee3\u7801\u3002</p> <p>1 \u7ed9process\u5bf9\u8c61\u6302\u8f7d\u5c5e\u6027</p> <p>\u6267\u884cpatchProcessObject\u51fd\u6570\uff08\u5728node_process_methods.cc\u4e2d\u5bfc\u51fa\uff09\u7ed9process\u5bf9\u8c61\u6302\u8f7d\u4e00\u4e9b\u5217\u5c5e\u6027\uff0c\u4e0d\u4e00\u4e00\u5217\u4e3e\u3002</p> <pre><code>    // process.argv  \n    process-&gt;Set(context,\n                        FIXED_ONE_BYTE_STRING(isolate, \"argv\"),  \n              ToV8Value(context, env-&gt;argv()).ToLocalChecked()).Check();  \n\n    READONLY_PROPERTY(process, \n                      \"pid\",  \n              Integer::New(isolate, uv_os_getpid())); \n</code></pre> <p>\u56e0\u4e3aNode.js\u589e\u52a0\u4e86\u5bf9\u7ebf\u7a0b\u7684\u652f\u6301\uff0c\u6709\u4e9b\u5c5e\u6027\u9700\u8981hack\u4e00\u4e0b\uff0c\u6bd4\u5982\u5728\u7ebf\u7a0b\u91cc\u4f7f\u7528process.exit\u7684\u65f6\u5019\uff0c\u9000\u51fa\u7684\u662f\u5355\u4e2a\u7ebf\u7a0b\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u8fdb\u7a0b\uff0cexit\u7b49\u51fd\u6570\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002\u540e\u9762\u7ae0\u8282\u4f1a\u8be6\u7ec6\u8bb2\u89e3\u3002</p> <p>2 \u5904\u7406\u8fdb\u7a0b\u95f4\u901a\u4fe1</p> <pre><code>    function setupChildProcessIpcChannel() {  \n      if (process.env.NODE_CHANNEL_FD) {  \n        const fd = parseInt(process.env.NODE_CHANNEL_FD, 10);  \n        delete process.env.NODE_CHANNEL_FD;  \n        const serializationMode = \n    process.env.NODE_CHANNEL_SERIALIZATION_MODE || 'json';  \n        delete process.env.NODE_CHANNEL_SERIALIZATION_MODE;  \n        require('child_process')._forkChild(fd, serializationMode);  \n      }  \n    }  \n</code></pre> <p>\u73af\u5883\u53d8\u91cfNODE_CHANNEL_FD\u662f\u5728\u521b\u5efa\u5b50\u8fdb\u7a0b\u7684\u65f6\u5019\u8bbe\u7f6e\u7684\uff0c\u5982\u679c\u6709\u8bf4\u660e\u5f53\u524d\u542f\u52a8\u7684\u8fdb\u7a0b\u662f\u5b50\u8fdb\u7a0b\uff0c\u5219\u9700\u8981\u5904\u7406\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002</p> <p>3 \u5904\u7406cluster\u6a21\u5757\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1</p> <pre><code>    function initializeclusterIPC() {  \n      if (process.argv[1] &amp;&amp; process.env.NODE_UNIQUE_ID) {  \n        const cluster = require('cluster');  \n        cluster._setupWorker(); \n        delete process.env.NODE_UNIQUE_ID;  \n      }  \n    }  \n</code></pre> <p>4 \u6267\u884c\u7528\u6237JS\u4ee3\u7801</p> <pre><code>require('internal/modules/cjs/loader').Module.runMain(process.argv[1]);  \n</code></pre> <p>internal/modules/cjs/loader.js\u662f\u8d1f\u8d23\u52a0\u8f7d\u7528\u6237JS\u7684\u6a21\u5757\uff0crunMain\u51fd\u6570\u5728pre_execution.js\u88ab\u6302\u8f7d\uff0crunMain\u505a\u7684\u4e8b\u60c5\u662f\u52a0\u8f7d\u7528\u6237\u7684JS\uff0c\u7136\u540e\u6267\u884c\u3002\u5177\u4f53\u7684\u8fc7\u7a0b\u5728\u540e\u9762\u7ae0\u8282\u8be6\u7ec6\u5206\u6790\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#136-libuv","title":"1.3.6 \u8fdb\u5165Libuv\u4e8b\u4ef6\u5faa\u73af","text":"<p>\u6267\u884c\u5b8c\u6240\u6709\u7684\u521d\u59cb\u5316\u540e\uff0cNode.js\u6267\u884c\u4e86\u7528\u6237\u7684JS\u4ee3\u7801\uff0c\u7528\u6237\u7684JS\u4ee3\u7801\u4f1a\u5f80Libuv\u6ce8\u518c\u4e00\u4e9b\u4efb\u52a1\uff0c\u6bd4\u5982\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u6700\u540eNode.js\u8fdb\u5165Libuv\u7684\u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0c\u5f00\u59cb\u4e00\u8f6e\u53c8\u4e00\u8f6e\u7684\u4e8b\u4ef6\u5faa\u73af\u5904\u7406\u3002\u5982\u679c\u6ca1\u6709\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\uff0cLibuv\u4f1a\u9000\u51fa\uff0c\u4ece\u800cNode.js\u9000\u51fa\u3002</p> <pre><code>    do {\n        uv_run(env-&gt;event_loop(), UV_RUN_DEFAULT);\n        per_process::v8_platform.DrainVMTasks(isolate_);\n        more = uv_loop_alive(env-&gt;event_loop());\n        if (more &amp;&amp; !env-&gt;is_stopping()) continue;\n        if (!uv_loop_alive(env-&gt;event_loop())) {\n            EmitBeforeExit(env.get());\n        }\n        more = uv_loop_alive(env-&gt;event_loop());\n     } while (more == true &amp;&amp; !env-&gt;is_stopping()); \n</code></pre>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#14-nodejs","title":"1.4 Node.js\u548c\u5176\u5b83\u670d\u52a1\u5668\u7684\u6bd4\u8f83","text":"<p>\u670d\u52a1\u5668\u662f\u73b0\u4ee3\u8f6f\u4ef6\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u7ec4\u6210\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u670d\u52a1\u5668\u53d1\u5c55\u7684\u8fc7\u7a0b\u4e2d\uff0c\u90fd\u6709\u54ea\u4e9b\u8bbe\u8ba1\u67b6\u6784\u3002\u4e00\u4e2a\u57fa\u4e8eTCP\u534f\u8bae\u7684\u670d\u52a1\u5668\uff0c\u57fa\u672c\u7684\u6d41\u7a0b\u5982\u4e0b\uff08\u4f2a\u4ee3\u7801\uff09\u3002</p> <pre><code>    // \u62ff\u5230\u4e00\u4e2asocket\u7528\u4e8e\u76d1\u542c  \n    const socketfd = socket(\u534f\u8bae\u7c7b\u578b\u7b49\u914d\u7f6e);  \n    // \u76d1\u542c\u672c\u673a\u7684\u5730\u5740\uff08ip+\u7aef\u53e3\uff09  \n    bind(socketfd\uff0c \u76d1\u542c\u5730\u5740)  \n    // \u6807\u8bb0\u8be5socket\u662f\u76d1\u542c\u578bsocket  \n    listen(socketfd)  \n</code></pre> <p>\u6267\u884c\u5b8c\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u4e00\u4e2a\u670d\u52a1\u5668\u6b63\u5f0f\u5f00\u59cb\u670d\u52a1\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u57fa\u4e8e\u4e0a\u9762\u7684\u6a21\u578b\uff0c\u5206\u6790\u5404\u79cd\u5404\u6837\u7684\u5904\u7406\u65b9\u6cd5\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#141","title":"1.4.1 \u4e32\u884c\u5904\u7406\u8bf7\u6c42","text":"<pre><code>    while(1) {  \n        const socketForCommunication = accept(socket);  \n        const data = read(socketForCommunication);  \n        handle(data);  \n        write(socketForCommunication, data );  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u770b\u8fd9\u79cd\u6a21\u5f0f\u7684\u5904\u7406\u8fc7\u7a0b\uff0c\u5047\u8bbe\u6709n\u4e2a\u8bf7\u6c42\u5230\u6765\u3002\u90a3\u4e48socket\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u8fd9\u65f6\u5019\u8fdb\u7a0b\u4eceaccept\u4e2d\u88ab\u5524\u9192\u3002\u7136\u540e\u62ff\u5230\u4e00\u4e2a\u65b0\u7684socket\u7528\u4e8e\u901a\u4fe1\u3002\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>accept\u5c31\u662f\u4ece\u5df2\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u7684\u8fde\u63a5\u961f\u5217\u91cc\uff0c\u6458\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\u5f88\u591a\u540c\u5b66\u90fd\u4e86\u89e3\u4e09\u6b21\u63e1\u624b\u662f\u4ec0\u4e48\uff0c\u4f46\u662f\u53ef\u80fd\u5f88\u5c11\u540c\u5b66\u4f1a\u6df1\u5165\u601d\u8003\u6216\u8005\u770b\u5b83\u7684\u5b9e\u73b0\uff0c\u4f17\u6240\u5468\u77e5\uff0c\u4e00\u4e2a\u670d\u52a1\u5668\u542f\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u76d1\u542c\u4e00\u4e2a\u7aef\u53e3\uff0c\u5176\u5b9e\u5c31\u662f\u65b0\u5efa\u4e86\u4e00\u4e2asocket\u3002\u90a3\u4e48\u5982\u679c\u6709\u4e00\u4e2a\u8fde\u63a5\u5230\u6765\u7684\u65f6\u5019\uff0c\u6211\u4eec\u901a\u8fc7accept\u5c31\u80fd\u62ff\u5230\u8fd9\u4e2a\u65b0\u8fde\u63a5\u5bf9\u5e94\u7684socket\uff0c\u90a3\u8fd9\u4e2asocket\u548c\u76d1\u542c\u7684socket\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\u5462\uff1f\u5176\u5b9esocket\u5206\u4e3a\u76d1\u542c\u578b\u548c\u901a\u4fe1\u578b\u7684\uff0c\u8868\u9762\u4e0a\uff0c\u670d\u52a1\u5668\u7528\u4e00\u4e2a\u7aef\u53e3\u5b9e\u73b0\u4e86\u591a\u4e2a\u8fde\u63a5\uff0c\u4f46\u662f\u8fd9\u4e2a\u7aef\u53e3\u662f\u7528\u4e8e\u76d1\u542c\u7684\uff0c\u5e95\u5c42\u7528\u4e8e\u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u7684\u5176\u5b9e\u662f\u53e6\u4e00\u4e2asocket\u3002\u6240\u4ee5\u6bcf\u4e00\u4e2a\u8fde\u63a5\u8fc7\u6765\uff0c\u8d1f\u8d23\u76d1\u542c\u7684socket\u53d1\u73b0\u662f\u4e00\u4e2a\u5efa\u7acb\u8fde\u63a5\u7684\u5305\uff08syn\u5305\uff09\uff0c\u5b83\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684socket\u4e0e\u4e4b\u901a\u4fe1\uff08accept\u7684\u65f6\u5019\u8fd4\u56de\u7684\u90a3\u4e2a\uff09\u3002\u76d1\u542csocket\u91cc\u53ea\u4fdd\u5b58\u4e86\u5b83\u76d1\u542c\u7684IP\u548c\u7aef\u53e3\uff0c\u901a\u4fe1socket\u9996\u5148\u4ece\u76d1\u542csocket\u4e2d\u590d\u5236IP\u548c\u7aef\u53e3\uff0c\u7136\u540e\u628a\u5ba2\u6237\u7aef\u7684IP\u548c\u7aef\u53e3\u4e5f\u8bb0\u5f55\u4e0b\u6765\uff0c\u5f53\u4e0b\u6b21\u6536\u5230\u4e00\u4e2a\u6570\u636e\u5305\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c31\u4f1a\u6839\u636e\u56db\u5143\u7ec4\u4ecesocket\u6c60\u5b50\u91cc\u627e\u5230\u8be5socket\uff0c\u4ece\u800c\u5b8c\u6210\u6570\u636e\u7684\u5904\u7406\u3002</p> <p>\u4e32\u884c\u8fd9\u79cd\u6a21\u5f0f\u5c31\u662f\u4ece\u5df2\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u7684\u961f\u5217\u91cc\u6458\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5904\u7406\u3002\u518d\u6458\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u518d\u5904\u7406\u3002\u5982\u679c\u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\u6709\u963b\u585e\u5f0fIO\uff0c\u53ef\u60f3\u800c\u77e5\uff0c\u6548\u7387\u662f\u6709\u591a\u4f4e\u3002\u800c\u4e14\u5e76\u53d1\u91cf\u6bd4\u8f83\u5927\u7684\u65f6\u5019\uff0c\u76d1\u542csocket\u5bf9\u5e94\u7684\u961f\u5217\u5f88\u5feb\u5c31\u4f1a\u88ab\u5360\u6ee1\uff08\u5df2\u5b8c\u6210\u8fde\u63a5\u961f\u5217\u6709\u4e00\u4e2a\u6700\u5927\u957f\u5ea6\uff09\u3002\u8fd9\u662f\u6700\u7b80\u5355\u7684\u6a21\u5f0f\uff0c\u867d\u7136\u670d\u52a1\u5668\u7684\u8bbe\u8ba1\u4e2d\u80af\u5b9a\u4e0d\u4f1a\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\uff0c\u4f46\u662f\u5b83\u8ba9\u6211\u4eec\u4e86\u89e3\u4e86\u4e00\u4e2a\u670d\u52a1\u5668\u5904\u7406\u8bf7\u6c42\u7684\u6574\u4f53\u8fc7\u7a0b\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#142","title":"1.4.2 \u591a\u8fdb\u7a0b\u6a21\u5f0f","text":"<p>\u4e32\u884c\u6a21\u5f0f\u4e2d\uff0c\u6240\u6709\u8bf7\u6c42\u90fd\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u6392\u961f\u88ab\u5904\u7406\uff0c\u8fd9\u662f\u6548\u7387\u4f4e\u4e0b\u7684\u539f\u56e0\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u628a\u8bf7\u6c42\u5206\u7ed9\u591a\u4e2a\u8fdb\u7a0b\u5904\u7406\u6765\u63d0\u4f9b\u6548\u7387\uff0c\u56e0\u4e3a\u5728\u4e32\u884c\u5904\u7406\u7684\u6a21\u5f0f\u4e2d\uff0c\u5982\u679c\u6709\u963b\u585e\u5f0fIO\u64cd\u4f5c\uff0c\u5b83\u5c31\u4f1a\u963b\u585e\u4e3b\u8fdb\u7a0b\uff0c\u4ece\u800c\u963b\u585e\u540e\u7eed\u8bf7\u6c42\u7684\u5904\u7406\u3002\u5728\u591a\u8fdb\u7a0b\u7684\u6a21\u5f0f\u4e0b\uff0c\u4e00\u4e2a\u8bf7\u6c42\u5982\u679c\u963b\u585e\u4e86\u8fdb\u7a0b\uff0c\u90a3\u4e48\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6302\u8d77\u8be5\u8fdb\u7a0b\uff0c\u63a5\u7740\u8c03\u5ea6\u5176\u5b83\u8fdb\u7a0b\u6267\u884c\uff0c\u90a3\u4e48\u5176\u5b83\u8fdb\u7a0b\u5c31\u53ef\u4ee5\u6267\u884c\u65b0\u7684\u4efb\u52a1\u3002\u591a\u8fdb\u7a0b\u6a21\u5f0f\u4e0b\u5206\u4e3a\u51e0\u79cd\u3002</p> <p>1 \u4e3b\u8fdb\u7a0baccept\uff0c\u5b50\u8fdb\u7a0b\u5904\u7406\u8bf7\u6c42 \u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u4e3b\u8fdb\u7a0b\u8d1f\u8d23\u6458\u53d6\u5df2\u5b8c\u6210\u8fde\u63a5\u7684\u8282\u70b9\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u8bf7\u6c42\u4ea4\u7ed9\u5b50\u8fdb\u7a0b\u5904\u7406\uff0c\u903b\u8f91\u5982\u4e0b\u3002</p> <pre><code>    while(1) {  \n        const socketForCommunication = accept(socket);  \n        if (fork() &gt; 0) {  \n             continue;\n            // \u7236\u8fdb\u7a0b  \n        } else {  \n            // \u5b50\u8fdb\u7a0b  \n            handle(socketForCommunication);  \n        }  \n    }  \n</code></pre> <p>\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u6bcf\u6b21\u6765\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5c31\u4f1a\u65b0\u5efa\u4e00\u4e2a\u8fdb\u7a0b\u53bb\u5904\u7406\u3002\u8fd9\u79cd\u6a21\u5f0f\u6bd4\u4e32\u884c\u7684\u7a0d\u5fae\u597d\u4e86\u4e00\u70b9\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u72ec\u7acb\u5904\u7406\uff0c\u5047\u8bbea\u8bf7\u6c42\u963b\u585e\u5728\u6587\u4ef6IO\uff0c\u90a3\u4e48\u4e0d\u4f1a\u5f71\u54cdb\u8bf7\u6c42\u7684\u5904\u7406\uff0c\u5c3d\u53ef\u80fd\u5730\u505a\u5230\u4e86\u5e76\u53d1\u3002\u5b83\u7684\u74f6\u9888\u5c31\u662f\u7cfb\u7edf\u7684\u8fdb\u7a0b\u6570\u6709\u9650\uff0c\u5982\u679c\u6709\u5927\u91cf\u7684\u8bf7\u6c42\uff0c\u7cfb\u7edf\u65e0\u6cd5\u625b\u5f97\u4f4f\uff0c\u518d\u8005\uff0c\u8fdb\u7a0b\u7684\u5f00\u9500\u5f88\u5927\uff0c\u5bf9\u4e8e\u7cfb\u7edf\u6765\u8bf4\u662f\u4e00\u4e2a\u6c89\u91cd\u7684\u8d1f\u62c5\u3002</p> <p>2 \u8fdb\u7a0b\u6c60\u6a21\u5f0f \u5b9e\u65f6\u521b\u5efa\u548c\u9500\u6bc1\u8fdb\u7a0b\u5f00\u9500\u5927\uff0c\u6548\u7387\u4f4e\uff0c\u6240\u4ee5\u884d\u751f\u4e86\u8fdb\u7a0b\u6c60\u6a21\u5f0f\uff0c\u8fdb\u7a0b\u6c60\u6a21\u5f0f\u5c31\u662f\u670d\u52a1\u5668\u542f\u52a8\u7684\u65f6\u5019\uff0c\u9884\u5148\u521b\u5efa\u4e00\u5b9a\u6570\u91cf\u7684\u8fdb\u7a0b\uff0c\u4f46\u662f\u8fd9\u4e9b\u8fdb\u7a0b\u662fworker\u8fdb\u7a0b\u3002\u5b83\u4e0d\u8d1f\u8d23accept\u8bf7\u6c42\u3002\u5b83\u53ea\u8d1f\u8d23\u5904\u7406\u8bf7\u6c42\u3002\u4e3b\u8fdb\u7a0b\u8d1f\u8d23accept\uff0c\u5b83\u628aaccept\u8fd4\u56de\u7684socket\u4ea4\u7ed9worker\u8fdb\u7a0b\u5904\u7406\uff0c\u6a21\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u4f46\u662f\u548c1\u4e2d\u7684\u6a21\u5f0f\u76f8\u6bd4\uff0c\u8fdb\u7a0b\u6c60\u6a21\u5f0f\u76f8\u5bf9\u6bd4\u8f83\u590d\u6742\uff0c\u56e0\u4e3a\u5728\u6a21\u5f0f1\u4e2d\uff0c\u5f53\u4e3b\u8fdb\u7a0b\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u5b9e\u65f6fork\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u8fd9\u65f6\u5019\uff0c\u8fd9\u4e2a\u5b50\u8fdb\u7a0b\u4f1a\u7ee7\u627f\u4e3b\u8fdb\u7a0b\u4e2d\u65b0\u8bf7\u6c42\u5bf9\u5e94\u7684fd\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u76f4\u63a5\u5904\u7406\u8be5fd\u5bf9\u5e94\u7684\u8bf7\u6c42\uff0c\u5728\u8fdb\u7a0b\u6c60\u7684\u6a21\u5f0f\u4e2d\uff0c\u5b50\u8fdb\u7a0b\u662f\u9884\u5148\u521b\u5efa\u7684\uff0c\u5f53\u4e3b\u8fdb\u7a0b\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u5b50\u8fdb\u7a0b\u4e2d\u662f\u65e0\u6cd5\u62ff\u5f97\u5230\u8be5\u8bf7\u6c42\u5bf9\u5e94\u7684fd\u7684\u3002\u8fd9\u65f6\u5019\uff0c\u9700\u8981\u4e3b\u8fdb\u7a0b\u4f7f\u7528\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u6280\u672f\u628a\u8fd9\u4e2a\u8bf7\u6c42\u5bf9\u5e94\u7684fd\u4f20\u7ed9\u5b50\u8fdb\u7a0b\u3002\u4e00\u4e2a\u8fdb\u7a0b\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53task_struct\uff0c\u5728JS\u91cc\u6211\u4eec\u53ef\u4ee5\u8bf4\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u6709\u4e00\u4e2a\u5b57\u6bb5\u8bb0\u5f55\u4e86\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5f53\u6211\u4eec\u8bbf\u95ee\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c31\u4f1a\u6839\u636efd\u7684\u503c\uff0c\u4ecetask_struct\u4e2d\u627e\u5230fd\u5bf9\u5e94\u7684\u5e95\u5c42\u8d44\u6e90\uff0c\u6240\u4ee5\u4e3b\u8fdb\u7a0b\u7ed9\u5b50\u8fdb\u7a0b\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u65f6\u5019\uff0c\u4f20\u9012\u7684\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u6570\u5b57fd\uff0c\u56e0\u4e3a\u5982\u679c\u4ec5\u4ec5\u8fd9\u6837\u505a\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u8be5fd\u53ef\u80fd\u6ca1\u6709\u5bf9\u5e94\u4efb\u4f55\u8d44\u6e90\uff0c\u6216\u8005\u5bf9\u5e94\u7684\u8d44\u6e90\u548c\u4e3b\u8fdb\u7a0b\u4e2d\u7684\u662f\u4e0d\u4e00\u81f4\u7684\u3002\u8fd9\u5176\u4e2d\u64cd\u4f5c\u7cfb\u7edf\u5e2e\u6211\u4eec\u505a\u4e86\u5f88\u591a\u4e8b\u60c5\u3002\u8ba9\u6211\u4eec\u5728\u5b50\u8fdb\u7a0b\u4e2d\u53ef\u4ee5\u901a\u8fc7fd\u8bbf\u95ee\u5230\u6b63\u786e\u7684\u8d44\u6e90\uff0c\u5373\u4e3b\u8fdb\u7a0b\u4e2d\u6536\u5230\u7684\u8bf7\u6c42\u3002</p> <p>3 \u5b50\u8fdb\u7a0baccept</p> <p>\u8fd9\u79cd\u6a21\u5f0f\u4e0d\u662f\u7b49\u5230\u8bf7\u6c42\u6765\u7684\u65f6\u5019\u518d\u521b\u5efa\u8fdb\u7a0b\u3002\u800c\u662f\u5728\u670d\u52a1\u5668\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\u3002\u7136\u540e\u591a\u4e2a\u8fdb\u7a0b\u5206\u522b\u8c03\u7528accept\u3002\u8fd9\u79cd\u6a21\u5f0f\u7684\u67b6\u6784\u5982\u56fe1-8\u6240\u793a\u3002</p> <p></p> <pre><code>    const socketfd = socket(\u534f\u8bae\u7c7b\u578b\u7b49\u914d\u7f6e);  \n    bind(socketfd\uff0c \u76d1\u542c\u5730\u5740)  \n\n    for (let i = 0 ; i &lt; \u8fdb\u7a0b\u4e2a\u6570; i++) {  \n        if (fork() &gt; 0) {  \n            // \u7236\u8fdb\u7a0b\u8d1f\u8d23\u76d1\u63a7\u5b50\u8fdb\u7a0b  \n        } else {  \n            // \u5b50\u8fdb\u7a0b\u5904\u7406\u8bf7\u6c42  \n              listen(socketfd);\n            while(1) {  \n                const socketForCommunication = accept(socketfd);  \n                handle(socketForCommunication);  \n            }  \n        }  \n    }  \n</code></pre> <p>\u8fd9\u79cd\u6a21\u5f0f\u4e0b\u591a\u4e2a\u5b50\u8fdb\u7a0b\u90fd\u963b\u585e\u5728accept\u3002\u5982\u679c\u8fd9\u65f6\u5019\u6709\u4e00\u4e2a\u8bf7\u6c42\u5230\u6765\uff0c\u90a3\u4e48\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u90fd\u4f1a\u88ab\u5524\u9192\uff0c\u4f46\u662f\u9996\u5148\u88ab\u8c03\u5ea6\u7684\u5b50\u8fdb\u7a0b\u4f1a\u9996\u5148\u6458\u4e0b\u8fd9\u4e2a\u8bf7\u6c42\u8282\u70b9\uff0c\u540e\u7eed\u7684\u8fdb\u7a0b\u88ab\u5524\u9192\u540e\u53ef\u80fd\u4f1a\u9047\u5230\u5df2\u7ecf\u6ca1\u6709\u8bf7\u6c42\u53ef\u4ee5\u5904\u7406\uff0c\u53c8\u8fdb\u5165\u7761\u7720\uff0c\u8fdb\u7a0b\u88ab\u65e0\u6548\u5524\u9192\uff0c\u8fd9\u662f\u8457\u540d\u7684\u60ca\u7fa4\u73b0\u8c61\u3002\u6539\u8fdb\u65b9\u5f0f\u5c31\u662f\u5728accpet\u4e4b\u524d\u52a0\u9501\uff0c\u62ff\u5230\u9501\u7684\u8fdb\u7a0b\u624d\u80fd\u8fdb\u884caccept\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u4f1a\u963b\u585e\u5728accept\uff0cNginx\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u65b0\u7248\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u5728\u5185\u6838\u5c42\u9762\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u6bcf\u6b21\u53ea\u4f1a\u5524\u9192\u4e00\u4e2a\u8fdb\u7a0b\u3002\u901a\u5e38\u8fd9\u79cd\u6a21\u5f0f\u548c\u4e8b\u4ef6\u9a71\u52a8\u914d\u5408\u4f7f\u7528\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#143","title":"1.4.3 \u591a\u7ebf\u7a0b\u6a21\u5f0f","text":"<p>\u591a\u7ebf\u7a0b\u6a21\u5f0f\u548c\u591a\u8fdb\u7a0b\u6a21\u5f0f\u662f\u7c7b\u4f3c\u7684\uff0c\u4e5f\u662f\u5206\u4e3a\u4e0b\u9762\u51e0\u79cd</p> <p>1 \u4e3b\u8fdb\u7a0baccept\uff0c\u521b\u5efa\u5b50\u7ebf\u7a0b\u5904\u7406</p> <p>2 \u5b50\u7ebf\u7a0baccept</p> <p>3 \u7ebf\u7a0b\u6c60</p> <p>\u524d\u9762\u4e24\u79cd\u548c\u591a\u8fdb\u7a0b\u6a21\u5f0f\u4e2d\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u7b2c\u4e09\u79cd\u6bd4\u8f83\u7279\u522b\uff0c\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u7b2c\u4e09\u79cd\u3002\u5728\u5b50\u8fdb\u7a0b\u6a21\u5f0f\u65f6\uff0c\u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u7684task_struct\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u5728fork\u4e4b\u540e\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u8d1f\u8d23\u7ef4\u62a4\u81ea\u5df1\u7684\u6570\u636e\uff0c\u800c\u7ebf\u7a0b\u5219\u4e0d\u4e00\u6837\uff0c\u7ebf\u7a0b\u662f\u5171\u4eab\u4e3b\u7ebf\u7a0b\uff08\u4e3b\u8fdb\u7a0b\uff09\u7684\u6570\u636e\u7684\uff0c\u5f53\u4e3b\u8fdb\u7a0b\u4eceaccept\u4e2d\u62ff\u5230\u4e00\u4e2afd\u7684\u65f6\u5019\uff0c\u4f20\u7ed9\u7ebf\u7a0b\u7684\u8bdd\uff0c\u7ebf\u7a0b\u662f\u53ef\u4ee5\u76f4\u63a5\u64cd\u4f5c\u7684\u3002\u6240\u4ee5\u5728\u7ebf\u7a0b\u6c60\u6a21\u5f0f\u65f6\uff0c\u67b6\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u4e3b\u8fdb\u7a0b\u8d1f\u8d23accept\u8bf7\u6c42\uff0c\u7136\u540e\u901a\u8fc7\u4e92\u65a5\u7684\u65b9\u5f0f\u63d2\u5165\u4e00\u4e2a\u4efb\u52a1\u5230\u5171\u4eab\u961f\u5217\u4e2d\uff0c\u7ebf\u7a0b\u6c60\u4e2d\u7684\u5b50\u7ebf\u7a0b\u540c\u6837\u662f\u901a\u8fc7\u4e92\u65a5\u7684\u65b9\u5f0f\uff0c\u4ece\u5171\u4eab\u961f\u5217\u4e2d\u6458\u53d6\u8282\u70b9\u8fdb\u884c\u5904\u7406\u3002</p>"},{"location":"chapter01-Node.js%E7%BB%84%E6%88%90%E5%92%8C%E5%8E%9F%E7%90%86/#144","title":"1.4.4 \u4e8b\u4ef6\u9a71\u52a8","text":"<p>\u73b0\u5728\u5f88\u591a\u670d\u52a1\u5668\uff08Nginx\uff0cNode.js\uff0cRedis\uff09\u90fd\u5f00\u59cb\u4f7f\u7528\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5f0f\u53bb\u8bbe\u8ba1\u3002\u4ece\u4e4b\u524d\u7684\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u6211\u4eec\u77e5\u9053\uff0c\u4e3a\u4e86\u5e94\u5bf9\u5927\u91cf\u7684\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u9700\u8981\u5927\u91cf\u7684\u8fdb\u7a0b/\u7ebf\u7a0b\u3002\u8fd9\u4e2a\u662f\u4e2a\u975e\u5e38\u5927\u7684\u5f00\u9500\u3002\u800c\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5f0f\uff0c\u4e00\u822c\u662f\u914d\u5408\u5355\u8fdb\u7a0b\uff08\u5355\u7ebf\u7a0b\uff09\uff0c\u518d\u591a\u7684\u8bf7\u6c42\uff0c\u4e5f\u662f\u5728\u4e00\u4e2a\u8fdb\u7a0b\u91cc\u5904\u7406\u7684\u3002\u4f46\u662f\u56e0\u4e3a\u662f\u5355\u8fdb\u7a0b\uff0c\u6240\u4ee5\u4e0d\u9002\u5408CPU\u5bc6\u96c6\u578b\uff0c\u56e0\u4e3a\u4e00\u4e2a\u4efb\u52a1\u4e00\u76f4\u5728\u5360\u636eCPU\u7684\u8bdd\uff0c\u540e\u7eed\u7684\u4efb\u52a1\u5c31\u65e0\u6cd5\u6267\u884c\u4e86\u3002\u5b83\u66f4\u9002\u5408IO\u5bc6\u96c6\u7684\uff08\u4e00\u822c\u90fd\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u7ebf\u7a0b\u6c60\uff0c\u8d1f\u8d23\u5904\u7406CPU\u6216\u8005\u963b\u585e\u578b\u7684\u4efb\u52a1\uff09\u3002\u800c\u4f7f\u7528\u591a\u8fdb\u7a0b/\u7ebf\u7a0b\u6a21\u5f0f\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u8fdb\u7a0b/\u7ebf\u7a0b\u662f\u65e0\u6cd5\u4e00\u76f4\u5360\u636eCPU\u7684\uff0c\u6267\u884c\u4e00\u5b9a\u65f6\u95f4\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6267\u884c\u4efb\u52a1\u8c03\u5ea6\u3002\u8ba9\u5176\u5b83\u7ebf\u7a0b\u4e5f\u6709\u673a\u4f1a\u6267\u884c\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u524d\u9762\u7684\u4efb\u52a1\u963b\u585e\u540e\u9762\u7684\u4efb\u52a1\uff0c\u51fa\u73b0\u9965\u997f\u60c5\u51b5\u3002\u5927\u90e8\u5206\u64cd\u4f5c\u7cfb\u7edf\u90fd\u63d0\u4f9b\u4e86\u4e8b\u4ef6\u9a71\u52a8\u7684API\u3002\u4f46\u662f\u4e8b\u4ef6\u9a71\u52a8\u5728\u4e0d\u540c\u7cfb\u7edf\u4e2d\u5b9e\u73b0\u4e0d\u4e00\u6837\u3002\u6240\u4ee5\u4e00\u822c\u90fd\u4f1a\u6709\u4e00\u5c42\u62bd\u8c61\u5c42\u62b9\u5e73\u8fd9\u4e2a\u5dee\u5f02\u3002\u8fd9\u91cc\u4ee5Linux\u7684epoll\u4e3a\u4f8b\u5b50\u3002</p> <pre><code>    // \u521b\u5efa\u4e00\u4e2aepoll  \n    var epollFD = epoll_create();  \n    /* \n     \u5728epoll\u7ed9\u67d0\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u6ce8\u518c\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\uff0c\u8fd9\u91cc\u662f\u76d1\u542c\u7684socket\uff0c\u6ce8\u518c\u53ef \n     \u8bfb\u4e8b\u4ef6\uff0c\u5373\u8fde\u63a5\u5230\u6765 \n     event = { \n        event: \u53ef\u8bfb \n        fd\uff1a \u76d1\u542csocket \n        // \u4e00\u4e9b\u4e0a\u4e0b\u6587 \n     } \n    */  \n    epoll_ctl(epollFD , EPOLL_CTL_ADD , socket, event);  \n    while(1) {  \n        // \u963b\u585e\u7b49\u5f85\u4e8b\u4ef6\u5c31\u7eea\uff0cevents\u4fdd\u5b58\u5c31\u7eea\u4e8b\u4ef6\u7684\u4fe1\u606f\uff0ctotal\u662f\u4e2a\u6570  \n        var total= epoll_wait(epollFD , \u4fdd\u5b58\u5c31\u7eea\u4e8b\u4ef6\u7684\u7ed3\u6784events, \u4e8b\u4ef6\u4e2a\u6570, timeout);  \n        for (let i = 0; i &lt; total; i++) {  \n            if (events[i].fd === \u76d1\u542csocket) {  \n                var newSocket = accpet(socket);  \n                /*\n                   \u628a\u65b0\u7684socket\u4e5f\u6ce8\u518c\u5230epoll\uff0c\u7b49\u5f85\u53ef\u8bfb\uff0c\n                   \u5373\u53ef\u8bfb\u53d6\u5ba2\u6237\u7aef\u6570\u636e \n                 */ \n                epoll_ctl(epollFD, \n                            EPOLL_CTL_ADD, \n                            newSocket, \n                            \u53ef\u8bfb\u4e8b\u4ef6);  \n            } else {  \n                // \u4eceevents[i]\u4e2d\u62ff\u5230\u4e00\u4e9b\u4e0a\u4e0b\u6587\uff0c\u6267\u884c\u76f8\u5e94\u7684\u56de\u8c03  \n            }  \n        }  \n    }  \n</code></pre> <p>\u8fd9\u5c31\u662f\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5f0f\u7684\u5927\u81f4\u8fc7\u7a0b\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u8ba2\u9605/\u53d1\u5e03\u6a21\u5f0f\u3002\u670d\u52a1\u5668\u901a\u8fc7\u6ce8\u518c\u6587\u4ef6\u63cf\u8ff0\u7b26\u548c\u4e8b\u4ef6\u5230epoll\u4e2d\uff0cepoll\u5f00\u59cb\u963b\u585e\uff0c\u7b49\u5230epoll\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u544a\u8bc9\u670d\u52a1\u5668\u54ea\u4e9bfd\u7684\u54ea\u4e9b\u4e8b\u4ef6\u89e6\u53d1\u4e86\uff0c\u8fd9\u65f6\u5019\u670d\u52a1\u5668\u904d\u5386\u5c31\u7eea\u4e8b\u4ef6\uff0c\u7136\u540e\u6267\u884c\u5bf9\u5e94\u7684\u56de\u8c03\uff0c\u5728\u56de\u8c03\u91cc\u53ef\u4ee5\u518d\u6b21\u6ce8\u518c\u65b0\u7684\u4e8b\u4ef6\uff0c\u5c31\u662f\u8fd9\u6837\u4e0d\u65ad\u9a71\u52a8\u7740\u3002epoll\u7684\u539f\u7406\u5176\u5b9e\u4e5f\u7c7b\u4f3c\u4e8b\u4ef6\u9a71\u52a8\uff0cepoll\u5e95\u5c42\u7ef4\u62a4\u7528\u6237\u6ce8\u518c\u7684\u4e8b\u4ef6\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0cepoll\u672c\u8eab\u4e5f\u4f1a\u5728\u6587\u4ef6\u63cf\u8ff0\u7b26\u5bf9\u5e94\u7684\u6587\u4ef6/socket/\u7ba1\u9053\u5904\u6ce8\u518c\u4e00\u4e2a\u56de\u8c03\uff0c\u7136\u540e\u81ea\u8eab\u8fdb\u5165\u963b\u585e\uff0c\u7b49\u5230\u522b\u4eba\u901a\u77e5epoll\u6709\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u5019\uff0cepoll\u5c31\u4f1a\u628afd\u548c\u4e8b\u4ef6\u8fd4\u56de\u7ed9\u7528\u6237\u3002</p> <pre><code>    function epoll_wait() {  \n        for \u4e8b\u4ef6\u4e2a\u6570  \n            // \u8c03\u7528\u6587\u4ef6\u7cfb\u7edf\u7684\u51fd\u6570\u5224\u65ad  \n            if (\u4e8b\u4ef6[i]\u4e2d\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e2d\u6709\u67d0\u4e2a\u7528\u6237\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u53d1\u751f?) {  \n                \u63d2\u5165\u5c31\u7eea\u4e8b\u4ef6\u961f\u5217  \n            } else {  \n              /*\n                 \u5728\u4e8b\u4ef6[i]\u4e2d\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6240\u5bf9\u5e94\u7684\u6587\u4ef6/socket/\u7ba1\u9053\u7b49indeo\u8282\n                 \u70b9\u6ce8\u518c\u56de\u8c03\u3002\u5373\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u89e6\u53d1\u540e\u56de\u8c03epoll\uff0c\u56de\u8c03epoll\u540e\uff0c\n                epoll\u628a\u8be5event[i]\u63d2\u5165\u5c31\u7eea\u4e8b\u4ef6\u961f\u5217\u8fd4\u56de\u7ed9\u7528\u6237  \n              */\n            }  \n    }  \n</code></pre> <p>\u4ee5\u4e0a\u5c31\u662f\u670d\u52a1\u5668\u8bbe\u8ba1\u7684\u4e00\u4e9b\u57fa\u672c\u4ecb\u7ecd\u3002\u73b0\u5728\u7684\u670d\u52a1\u5668\u7684\u8bbe\u8ba1\u4e2d\u8fd8\u4f1a\u6d89\u53ca\u5230\u534f\u7a0b\u3002\u4e0d\u8fc7\u76ee\u524d\u8fd8\u6ca1\u6709\u770b\u8fc7\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u6240\u4ee5\u6682\u4e0d\u5c55\u5f00\u4ecb\u7ecd\uff0c\u6709\u5174\u8da3\u7684\u901a\u4fe1\u53ef\u4ee5\u770b\u4e00\u4e0b\u534f\u7a0b\u5e93libtask\u4e86\u89e3\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528\u534f\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u670d\u52a1\u5668\u3002 Node.js\u662f\u57fa\u4e8e\u5355\u8fdb\u7a0b\uff08\u5355\u7ebf\u7a0b\uff09\u7684\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5f0f\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48Node.js\u64c5\u957f\u5904\u7406\u9ad8\u5e76\u53d1IO\u578b\u4efb\u52a1\u800c\u4e0d\u64c5\u957f\u5904\u7406CPU\u578b\u4efb\u52a1\u7684\u539f\u56e0\uff0cNginx\u3001Redis\u4e5f\u662f\u8fd9\u79cd\u6a21\u5f0f\u3002\u53e6\u5916Node.js\u662f\u4e00\u4e2a\u53caweb\u670d\u52a1\u5668\u548c\u5e94\u7528\u670d\u52a1\u5668\u4e8e\u4e00\u8eab\u7684\u670d\u52a1\u5668\uff0c\u50cfNginx\u8fd9\u79cd\u5c5e\u4e8eweb\u670d\u52a1\u5668\uff0c\u5b83\u4eec\u53ea\u5904\u7406HTTP\u534f\u8bae\uff0c\u4e0d\u5177\u5907\u811a\u672c\u8bed\u8a00\u6765\u5904\u7406\u5177\u4f53\u7684\u4e1a\u52a1\u903b\u8f91\u3002\u5b83\u9700\u8981\u628a\u8bf7\u6c42\u8f6c\u53d1\u5230\u771f\u6b63\u7684web\u670d\u52a1\u5668\u4e2d\u53bb\u5904\u7406\uff0c\u6bd4\u5982PHP\u3002\u800cNode.js\u4e0d\u4ec5\u53ef\u4ee5\u89e3\u6790HTTP\u534f\u8bae\uff0c\u8fd8\u53ef\u4ee5\u5904\u7406\u5177\u4f53\u7684\u4e1a\u52a1\u903b\u8f91\u3002</p>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/","title":"\u7b2c\u4e8c\u7ae0Libuv\u6570\u636e\u7ed3\u6784\u548c\u901a\u7528\u903b\u8f91","text":""},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#21-uv_loop_s","title":"2.1 \u6838\u5fc3\u7ed3\u6784\u4f53uv_loop_s","text":"<p>uv_loop_s\u662fLibuv\u7684\u6838\u5fc3\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\u5bf9\u5e94\u4e00\u4e2auv_loop_s\u7ed3\u6784\u4f53\u3002\u5b83\u8bb0\u5f55\u4e86\u6574\u4e2a\u4e8b\u4ef6\u5faa\u73af\u4e2d\u7684\u6838\u5fc3\u6570\u636e\u3002\u6211\u4eec\u6765\u5206\u6790\u6bcf\u4e00\u4e2a\u5b57\u6bb5\u7684\u610f\u4e49\u3002</p> <pre><code>1 \u7528\u6237\u81ea\u5b9a\u4e49\u6570\u636e\u7684\u5b57\u6bb5\nvoid* data;\n\n2\u6d3b\u8dc3\u7684handle\u4e2a\u6570\uff0c\u4f1a\u5f71\u54cd\u4f7f\u7528\u5faa\u73af\u7684\u9000\u51fa\nunsigned int active_handles;\n\n3 handle\u961f\u5217\uff0c\u5305\u62ec\u6d3b\u8dc3\u548c\u975e\u6d3b\u8dc3\u7684\nvoid* handle_queue[2]; \n\n4 request\u4e2a\u6570\uff0c\u4f1a\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa\nunion { void* unused[2];  unsigned int count; } active_reqs;\n\n5\u4e8b\u4ef6\u5faa\u73af\u662f\u5426\u7ed3\u675f\u7684\u6807\u8bb0\nunsigned int stop_flag;\n\n6 Libuv\u8fd0\u884c\u7684\u4e00\u4e9b\u6807\u8bb0\uff0c\u76ee\u524d\u53ea\u6709UV_LOOP_BLOCK_SIGPROF\uff0c\u4e3b\u8981\u662f\u7528\u4e8eepoll_wait\u7684\u65f6\u5019\u5c4f\u853dSIGPROF\u4fe1\u53f7\uff0c\u63d0\u9ad8\u6027\u80fd\uff0cSIGPROF\u662f\u8c03\u64cd\u4f5c\u7cfb\u7edfsettimer\u51fd\u6570\u8bbe\u7f6e\u4ece\u800c\u89e6\u53d1\u7684\u4fe1\u53f7\nunsigned long flags; \n\n7 epoll\u7684fd\nint backend_fd;                    \n\n8 pending\u9636\u6bb5\u7684\u961f\u5217                   \nvoid* pending_queue[2];          \n\n9\u6307\u5411\u9700\u8981\u5728epoll\u4e2d\u6ce8\u518c\u4e8b\u4ef6\u7684uv__io_t\u7ed3\u6784\u4f53\u961f\u5217            \nvoid* watcher_queue[2];      \n\n10 watcher_queue\u961f\u5217\u7684\u8282\u70b9\u4e2d\u6709\u4e00\u4e2afd\u5b57\u6bb5\uff0cwatchers\u4ee5fd\u4e3a\u7d22\u5f15\uff0c\u8bb0\u5f55fd\u6240\u5728\u7684uv__io_t\u7ed3\u6784\u4f53                       \nuv__io_t** watchers;               \n\n11 watchers\u76f8\u5173\u7684\u6570\u91cf\uff0c\u5728maybe_resize\u51fd\u6570\u91cc\u8bbe\u7f6e\nunsigned int nwatchers;\n\n12 watchers\u91ccfd\u4e2a\u6570\uff0c\u4e00\u822c\u4e3awatcher_queue\u961f\u5217\u7684\u8282\u70b9\u6570\nunsigned int nfds;      \n\n13\u7ebf\u7a0b\u6c60\u7684\u5b50\u7ebf\u7a0b\u5904\u7406\u5b8c\u4efb\u52a1\u540e\u628a\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u63d2\u5165\u5230wq\u961f\u5217        \nvoid* wq[2];               \n\n14\u63a7\u5236wq\u961f\u5217\u4e92\u65a5\u8bbf\u95ee\uff0c\u5426\u5219\u591a\u4e2a\u5b50\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u4f1a\u6709\u95ee\u9898\nuv_mutex_t wq_mutex;\n\n15\u7528\u4e8e\u7ebf\u7a0b\u6c60\u7684\u5b50\u7ebf\u7a0b\u548c\u4e3b\u7ebf\u7a0b\u901a\u4fe1    \nuv_async_t wq_async;   \n\n16\u7528\u4e8e\u8bfb\u5199\u9501\u7684\u4e92\u65a5\u53d8\u91cf\nuv_rwlock_t cloexec_lock;  \n\n17 \u4e8b\u4ef6\u5faa\u73afclose\u9636\u6bb5\u7684\u961f\u5217\uff0c\u7531uv_close\u4ea7\u751f\nuv_handle_t* closing_handles;       \n\n18 fork\u51fa\u6765\u7684\u8fdb\u7a0b\u961f\u5217                 \nvoid* process_handles[2];    \n\n19 \u4e8b\u4ef6\u5faa\u73af\u7684prepare\u9636\u6bb5\u5bf9\u5e94\u7684\u4efb\u52a1\u961f\u5217                   \nvoid* prepare_handles[2];        \n\n20 \u4e8b\u4ef6\u5faa\u73af\u7684check\u9636\u6bb5\u5bf9\u5e94\u7684\u4efb\u52a1\u961f\u5217              \nvoid* check_handles[2];        \n\n21 \u4e8b\u4ef6\u5faa\u73af\u7684idle\u9636\u6bb5\u5bf9\u5e94\u7684\u4efb\u52a1\u961f\u5217\nvoid* idle_handles[2];  \n\n21 async_handles\u961f\u5217\uff0cPoll IO\u9636\u6bb5\u6267\u884cuv__async_io\u4e2d\u904d\u5386async_handles\u961f\u5217\u5904\u7406\u91cc\u9762pending\u4e3a1\u7684\u8282\u70b9\nvoid* async_handles[2];         \n\n22\u7528\u4e8e\u76d1\u542c\u662f\u5426\u6709async handle\u4efb\u52a1\u9700\u8981\u5904\u7406\nuv__io_t async_io_watcher;  \n\n23\u7528\u4e8e\u4fdd\u5b58\u5b50\u7ebf\u7a0b\u548c\u4e3b\u7ebf\u7a0b\u901a\u4fe1\u7684\u5199\u7aeffd                    \nint async_wfd;   \n\n24\u4fdd\u5b58\u5b9a\u65f6\u5668\u4e8c\u53c9\u5806\u7ed3\u6784       \nstruct {\nvoid* min; \nunsigned int nelts;\n} timer_heap; \n\n25 \u7ba1\u7406\u5b9a\u65f6\u5668\u8282\u70b9\u7684id\uff0c\u4e0d\u65ad\u53e0\u52a0\nuint64_t timer_counter;      \n\n26\u5f53\u524d\u65f6\u95f4\uff0cLibuv\u4f1a\u5728\u6bcf\u6b21\u4e8b\u4ef6\u5faa\u73af\u7684\u5f00\u59cb\u548cPoll IO\u9636\u6bb5\u66f4\u65b0\u5f53\u524d\u65f6\u95f4\uff0c\u7136\u540e\u5728\u540e\u7eed\u7684\u5404\u4e2a\u9636\u6bb5\u4f7f\u7528\uff0c\u51cf\u5c11\u5bf9\u7cfb\u7edf\u8c03\u7528                      \nuint64_t time; \n\n27\u7528\u4e8efork\u51fa\u6765\u7684\u8fdb\u7a0b\u548c\u4e3b\u8fdb\u7a0b\u901a\u4fe1\u7684\u7ba1\u9053\uff0c\u7528\u4e8e\u5b50\u8fdb\u7a0b\u6536\u5230\u4fe1\u53f7\u7684\u65f6\u5019\u901a\u77e5\u4e3b\u8fdb\u7a0b\uff0c\u7136\u540e\u4e3b\u8fdb\u7a0b\u6267\u884c\u5b50\u8fdb\u7a0b\u8282\u70b9\u6ce8\u518c\u7684\u56de\u8c03\nint signal_pipefd[2];                 \n\n28\u7c7b\u4f3casync_io_watcher\uff0csignal_io_watcher\u4fdd\u5b58\u4e86\u7ba1\u9053\u8bfb\u7aeffd\u548c\u56de\u8c03\uff0c\u7136\u540e\u6ce8\u518c\u5230epoll\u4e2d\uff0c\u5728\u5b50\u8fdb\u7a0b\u6536\u5230\u4fe1\u53f7\u7684\u65f6\u5019\uff0c\u901a\u8fc7write\u5199\u5230\u7ba1\u9053\uff0c\u6700\u540e\u5728Poll IO\u9636\u6bb5\u6267\u884c\u56de\u8c03\nuv__io_t signal_io_watcher;\n29 \u7528\u4e8e\u7ba1\u7406\u5b50\u8fdb\u7a0b\u9000\u51fa\u4fe1\u53f7\u7684handle\nuv_signal_t child_watcher;  \n\n30\u5907\u7528\u7684fd       \nint emfile_fd;   \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#22-uv_handle_t","title":"2.2 uv_handle_t","text":"<p>\u5728Libuv\u4e2d\uff0cuv_handle_t\u7c7b\u4f3cC++\u4e2d\u7684\u57fa\u7c7b\uff0c\u6709\u5f88\u591a\u5b50\u7c7b\u7ee7\u627f\u4e8e\u5b83\uff0cLibuv\u4e3b\u8981\u901a\u8fc7\u63a7\u5236\u5185\u5b58\u7684\u5e03\u5c40\u5f97\u5230\u7ee7\u627f\u7684\u6548\u679c\u3002handle\u4ee3\u8868\u751f\u547d\u5468\u671f\u6bd4\u8f83\u957f\u7684\u5bf9\u8c61\u3002\u4f8b\u5982 1 \u4e00\u4e2a\u5904\u4e8eactive\u72b6\u6001\u7684prepare handle\uff0c\u5b83\u7684\u56de\u8c03\u4f1a\u5728\u6bcf\u6b21\u4e8b\u4ef6\u5faa\u73af\u5316\u7684\u65f6\u5019\u88ab\u6267\u884c\u3002 2 \u4e00\u4e2aTCP handle\u5728\u6bcf\u6b21\u6709\u8fde\u63a5\u5230\u6765\u65f6\uff0c\u6267\u884c\u5b83\u7684\u56de\u8c03\u3002</p> <p>\u6211\u4eec\u770b\u4e00\u4e0buv_handle_t\u7684\u5b9a\u4e49</p> <pre><code>1 \u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u7528\u4e8e\u5173\u8054\u4e00\u4e9b\u4e0a\u4e0b\u6587,Node.js\u4e2d\u7528\u4e8e\u5173\u8054handle\u6240\u5c5e\u7684C++\u5bf9\u8c61  \nvoid* data;  \n\n2 \u6240\u5c5e\u7684\u4e8b\u4ef6\u5faa\u73af     \nuv_loop_t* loop;\n\n3 handle\u7c7b\u578b   \nuv_handle_type type;\n\n4 handle\u8c03\u7528uv_close\u540e\uff0c\u5728closing\u9636\u6bb5\u88ab\u6267\u884c\u7684\u56de\u8c03\nuv_close_cb close_cb; \n\n5 \u7528\u4e8e\u7ec4\u7ec7handle\u961f\u5217\u7684\u524d\u7f6e\u540e\u7f6e\u6307\u9488\nvoid* handle_queue[2];\n\n6 \u6587\u4ef6\u63cf\u8ff0\u7b26 \nunion {               \nint fd;             \n void* reserved[4];  \n} u;  \n\n7 \u5f53handle\u5728close\u961f\u5217\u65f6\uff0c\u8be5\u5b57\u6bb5\u6307\u5411\u4e0b\u4e00\u4e2aclose\u8282\u70b9     \nuv_handle_t* next_closing; \n\n8 handle\u7684\u72b6\u6001\u548c\u6807\u8bb0\nunsigned int flags;\n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#221-uv_stream_s","title":"2.2.1 uv_stream_s","text":"<p>uv_stream_s\u662f\u8868\u793a\u6d41\u7684\u7ed3\u6784\u4f53\u3002\u9664\u4e86\u7ee7\u627fuv_handle_t\u7684\u5b57\u6bb5\u5916\uff0c\u5b83\u989d\u5916\u5b9a\u4e49\u4e0b\u9762\u5b57\u6bb5</p> <pre><code>1 \u7b49\u5f85\u53d1\u9001\u7684\u5b57\u8282\u6570\nsize_t write_queue_size;\n\n2 \u5206\u914d\u5185\u5b58\u7684\u51fd\u6570       \nuv_alloc_cb alloc_cb; \n\n3 \u8bfb\u53d6\u6570\u636e\u6210\u529f\u65f6\u6267\u884c\u7684\u56de\u8c03            \nuv_read_cb read_cb; \n\n4 \u53d1\u8d77\u8fde\u63a5\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\nuv_connect_t *connect_req; \n\n5 \u5173\u95ed\u5199\u7aef\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\nuv_shutdown_t *shutdown_req;   \n\n6 \u7528\u4e8e\u63d2\u5165epoll\uff0c\u6ce8\u518c\u8bfb\u5199\u4e8b\u4ef6\nuv__io_t io_watcher;           \n\n7 \u5f85\u53d1\u9001\u961f\u5217\nvoid* write_queue[2];     \n\n8 \u53d1\u9001\u5b8c\u6210\u7684\u961f\u5217     \nvoid* write_completed_queue[2];\n\n9 \u6536\u5230\u8fde\u63a5\u65f6\u6267\u884c\u7684\u56de\u8c03\nuv_connection_cb connection_cb;\n\n10 socket\u64cd\u4f5c\u5931\u8d25\u7684\u9519\u8bef\u7801\nint delayed_error;             \n\n11 accept\u8fd4\u56de\u7684fd\nint accepted_fd;               \n\n12 \u5df2\u7ecfaccept\u4e86\u4e00\u4e2afd\uff0c\u53c8\u6709\u65b0\u7684fd\uff0c\u6682\u5b58\u8d77\u6765\nvoid* queued_fds;\n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#222-uv_async_s","title":"2.2.2 uv_async_s","text":"<p>uv_async_s\u662fLibuv\u4e2d\u5b9e\u73b0\u5f02\u6b65\u901a\u4fe1\u7684\u7ed3\u6784\u4f53\u3002\u7ee7\u627f\u4e8euv_handle_t\uff0c\u5e76\u989d\u5916\u5b9a\u4e49\u4e86\u4ee5\u4e0b\u5b57\u6bb5\u3002</p> <pre><code>1 \u5f02\u6b65\u4e8b\u4ef6\u89e6\u53d1\u65f6\u6267\u884c\u7684\u56de\u8c03\nuv_async_cb async_cb; \n\n2 \u7528\u4e8e\u63d2\u5165async-handles\u961f\u5217\nvoid* queue[2]; \n\n3 async_handles\u961f\u5217\u4e2d\u7684\u8282\u70b9pending\u5b57\u6bb5\u4e3a1\u8bf4\u660e\u5bf9\u5e94\u7684\u4e8b\u4ef6\u89e6\u53d1\u4e86\nint pending;  \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#223-uv_tcp_s","title":"2.2.3 uv_tcp_s","text":"<p>uv_tcp_s\u7ee7\u627fuv_handle_s\u548cuv_stream_s\u3002</p>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#224-uv_udp_s","title":"2.2.4 uv_udp_s","text":"<pre><code>1 \u53d1\u9001\u5b57\u8282\u6570\nsize_t send_queue_size;\n\n2 \u5199\u961f\u5217\u8282\u70b9\u7684\u4e2a\u6570\nsize_t send_queue_count;\n\n3 \u5206\u914d\u63a5\u6536\u6570\u636e\u7684\u5185\u5b58\nuv_alloc_cb alloc_cb;  \n\n4 \u63a5\u6536\u5b8c\u6570\u636e\u540e\u6267\u884c\u7684\u56de\u8c03\nuv_udp_recv_cb recv_cb;\n\n5 \u63d2\u5165epoll\u91cc\u7684IO\u89c2\u5bdf\u8005\uff0c\u5b9e\u73b0\u6570\u636e\u8bfb\u5199\nuv__io_t io_watcher;   \n6 \u5f85\u53d1\u9001\u961f\u5217\nvoid* write_queue[2];  \n\n7 \u53d1\u9001\u5b8c\u6210\u7684\u961f\u5217\uff08\u53d1\u9001\u6210\u529f\u6216\u5931\u8d25\uff09\uff0c\u548c\u5f85\u53d1\u9001\u961f\u5217\u76f8\u5173\nvoid* write_completed_queue[2];  \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#225-uv_tty_s","title":"2.2.5 uv_tty_s","text":"<p>uv_tty_s\u7ee7\u627f\u4e8euv_handle_t\u548cuv_stream_t\u3002\u989d\u5916\u5b9a\u4e49\u4e86\u4e0b\u9762\u5b57\u6bb5\u3002</p> <pre><code>1 \u7ec8\u7aef\u7684\u53c2\u6570 \nstruct termios orig_termios; \n\n2 \u7ec8\u7aef\u7684\u5de5\u4f5c\u6a21\u5f0f\nint mode;\n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#226-uv_pipe_s","title":"2.2.6 uv_pipe_s","text":"<p>uv_pipe_s\u7ee7\u627f\u4e8euv_handle_t\u548cuv_stream_t\u3002\u989d\u5916\u5b9a\u4e49\u4e86\u4e0b\u9762\u5b57\u6bb5\u3002</p> <pre><code>1 \u6807\u8bb0\u7ba1\u9053\u662f\u5426\u53ef\u7528\u4e8e\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\nint ipc; \n\n2 \u7528\u4e8eUnix\u57df\u901a\u4fe1\u7684\u6587\u4ef6\u8def\u5f84\nconst char* pipe_fname; \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#227-uv_prepare_suv_check_suv_idle_s","title":"2.2.7 uv_prepare_s\u3001uv_check_s\u3001uv_idle_s","text":"<p>\u4e0a\u9762\u4e09\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u662f\u7c7b\u4f3c\u7684\uff0c\u5b83\u4eec\u90fd\u7ee7\u627fuv_handle_t\uff0c\u989d\u5916\u5b9a\u4e49\u4e86\u4e24\u4e2a\u5b57\u6bb5\u3002</p> <pre><code>1 prepare\u3001check\u3001idle\u9636\u6bb5\u56de\u8c03\nuv_xxx_cb xxx_cb; \n\n2 \u7528\u4e8e\u63d2\u5165prepare\u3001check\u3001idle\u961f\u5217\nvoid* queue[2];   \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#228-uv_timer_s","title":"2.2.8 uv_timer_s","text":"<p>uv_timer_s\u7ee7\u627fuv_handle_t\uff0c\u989d\u5916\u5b9a\u4e49\u4e86\u4e0b\u9762\u51e0\u4e2a\u5b57\u6bb5\u3002</p> <pre><code>1 \u8d85\u65f6\u56de\u8c03 \nuv_timer_cb timer_cb; \n\n2 \u63d2\u5165\u4e8c\u53c9\u5806\u7684\u5b57\u6bb5\nvoid* heap_node[3];\n\n3 \u8d85\u65f6\u65f6\u95f4\nuint64_t timeout; \n\n4 \u8d85\u65f6\u540e\u662f\u5426\u7ee7\u7eed\u5f00\u59cb\u91cd\u65b0\u8ba1\u65f6\uff0c\u662f\u7684\u8bdd\u91cd\u65b0\u63d2\u5165\u4e8c\u53c9\u5806\nuint64_t repeat; \n\n5 id\u6807\u8bb0\uff0c\u7528\u4e8e\u63d2\u5165\u4e8c\u53c9\u5806\u7684\u65f6\u5019\u5bf9\u6bd4\nuint64_t start_id\n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#229-uv_process_s","title":"2.2.9 uv_process_s","text":"<p>uv_process_s\u7ee7\u627fuv_handle_t\uff0c\u989d\u5916\u5b9a\u4e49\u4e86</p> <pre><code>1 \u8fdb\u7a0b\u9000\u51fa\u65f6\u6267\u884c\u7684\u56de\u8c03\nuv_exit_cb exit_cb;\n\n2 \u8fdb\u7a0bid\nint pid;\n\n3 \u7528\u4e8e\u63d2\u5165\u961f\u5217\uff0c\u8fdb\u7a0b\u961f\u5217\u6216\u8005pending\u961f\u5217\nvoid* queue[2];\n\n4 \u9000\u51fa\u7801\uff0c\u8fdb\u7a0b\u9000\u51fa\u65f6\u8bbe\u7f6e\nint status;  \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#2210-uv_fs_event_s","title":"2.2.10 uv_fs_event_s","text":"<p>uv_fs_event_s\u7528\u4e8e\u76d1\u542c\u6587\u4ef6\u6539\u52a8\u3002uv_fs_event_s\u7ee7\u627fuv_handle_t\uff0c\u989d\u5916\u5b9a\u4e49\u4e86</p> <pre><code>1 \u76d1\u542c\u7684\u6587\u4ef6\u8def\u5f84(\u6587\u4ef6\u6216\u76ee\u5f55)\nchar* path;\n\n2 \u6587\u4ef6\u6539\u53d8\u65f6\u6267\u884c\u7684\u56de\u8c03\nuv_fs_event_cb cb;\n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#2211-uv_fs_poll_s","title":"2.2.11 uv_fs_poll_s","text":"<p>uv_fs_poll_s\u7ee7\u627fuv_handle_t\uff0c\u989d\u5916\u5b9a\u4e49\u4e86</p> <pre><code>1 poll_ctx\u6307\u5411poll_ctx\u7ed3\u6784\u4f53\nvoid* poll_ctx;\n\nstruct poll_ctx {\n// \u5bf9\u5e94\u7684handle\nuv_fs_poll_t* parent_handle; \n// \u6807\u8bb0\u662f\u5426\u5f00\u59cb\u8f6e\u8be2\u548c\u8f6e\u8be2\u65f6\u7684\u5931\u8d25\u539f\u56e0\nint busy_polling;\n// \u591a\u4e45\u68c0\u6d4b\u4e00\u6b21\u6587\u4ef6\u5185\u5bb9\u662f\u5426\u6539\u53d8\nunsigned int interval;\n// \u6bcf\u4e00\u8f6e\u8f6e\u8be2\u65f6\u7684\u5f00\u59cb\u65f6\u95f4\nuint64_t start_time;\n// \u6240\u5c5e\u4e8b\u4ef6\u5faa\u73af\nuv_loop_t* loop;\n// \u6587\u4ef6\u6539\u53d8\u65f6\u56de\u8c03\nuv_fs_poll_cb poll_cb;\n// \u5b9a\u65f6\u5668\uff0c\u7528\u4e8e\u5b9a\u65f6\u8d85\u65f6\u540e\u8f6e\u8be2\nuv_timer_t timer_handle;\n// \u8bb0\u5f55\u8f6e\u8be2\u7684\u4e00\u4e0b\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u6587\u4ef6\u8def\u5f84\u3001\u56de\u8c03\u7b49\nuv_fs_t fs_req; \n// \u8f6e\u8be2\u65f6\u4fdd\u5b58\u64cd\u4f5c\u7cfb\u7edf\u8fd4\u56de\u7684\u6587\u4ef6\u4fe1\u606f\nuv_stat_t statbuf;\n // \u76d1\u542c\u7684\u6587\u4ef6\u8def\u5f84\uff0c\u5b57\u7b26\u4e32\u7684\u503c\u8ffd\u52a0\u5728\u7ed3\u6784\u4f53\u540e\u9762\nchar path[1]; /* variable length */\n};\n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#2212-uv_poll_s","title":"2.2.12 uv_poll_s","text":"<p>uv_poll_s\u7ee7\u627f\u4e8euv_handle_t\uff0c\u989d\u5916\u5b9a\u4e49\u4e86\u4e0b\u9762\u5b57\u6bb5\u3002</p> <pre><code>1 \u76d1\u542c\u7684fd\u6709\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u65f6\u6267\u884c\u7684\u56de\u8c03\nuv_poll_cb poll_cb;\n\n2 \u4fdd\u5b58\u4e86fd\u548c\u56de\u8c03\u7684IO\u89c2\u5bdf\u8005\uff0c\u6ce8\u518c\u5230epoll\u4e2d\nuv__io_t io_watcher;\n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#2113-uv_signal_s","title":"2.1.13 uv_signal_s","text":"<p>uv_signal_s\u7ee7\u627fuv_handle_t\uff0c\u989d\u5916\u5b9a\u4e49\u4e86\u4ee5\u4e0b\u5b57\u6bb5</p> <pre><code>1 \u6536\u5230\u4fe1\u53f7\u65f6\u7684\u56de\u8c03\nuv_signal_cb signal_cb;\n\n2 \u6ce8\u518c\u7684\u4fe1\u53f7\nint signum;\n\n3 \u7528\u4e8e\u63d2\u5165\u7ea2\u9ed1\u6811\uff0c\u8fdb\u7a0b\u628a\u611f\u5174\u8da3\u7684\u4fe1\u53f7\u548c\u56de\u8c03\u5c01\u88c5\u6210uv_signal_s\uff0c\u7136\u540e\u63d2\u5165\u5230\u7ea2\u9ed1\u6811\uff0c\u4fe1\u53f7\u5230\u6765\u65f6\uff0c\u8fdb\u7a0b\u5728\u4fe1\u53f7\u5904\u7406\u53f7\u4e2d\u628a\u901a\u77e5\u5199\u5165\u7ba1\u9053\uff0c\u901a\u77e5Libuv\u3002Libuv\u5728Poll IO\u9636\u6bb5\u4f1a\u6267\u884c\u8fdb\u7a0b\u5bf9\u5e94\u7684\u56de\u8c03\u3002\u7ea2\u9ed1\u6811\u8282\u70b9\u7684\u5b9a\u4e49\u5982\u4e0b\nstruct {                         \nstruct uv_signal_s* rbe_left;  \nstruct uv_signal_s* rbe_right; \nstruct uv_signal_s* rbe_parent;\nint rbe_color;                 \n} tree_entry; \n\n4 \u6536\u5230\u7684\u4fe1\u53f7\u4e2a\u6570\nunsigned int caught_signals;     \n\n5 \u5df2\u7ecf\u5904\u7406\u7684\u4fe1\u53f7\u4e2a\u6570\nunsigned int dispatched_signals;\n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#23-uv_req_s","title":"2.3 uv_req_s","text":"<p>\u5728Libuv\u4e2d\uff0cuv_req_s\u4e5f\u7c7b\u4f3cC++\u57fa\u7c7b\u7684\u4f5c\u7528\uff0c\u6709\u5f88\u591a\u5b50\u7c7b\u7ee7\u627f\u4e8e\u5b83\uff0crequest\u4ee3\u8868\u4e00\u6b21\u8bf7\u6c42\uff0c\u6bd4\u5982\u8bfb\u5199\u4e00\u4e2a\u6587\u4ef6\uff0c\u8bfb\u5199socket\uff0c\u67e5\u8be2DNS\u3002\u4efb\u52a1\u5b8c\u6210\u540e\u8fd9\u4e2arequest\u5c31\u7ed3\u675f\u4e86\u3002request\u53ef\u4ee5\u548chandle\u7ed3\u5408\u4f7f\u7528\uff0c\u6bd4\u5982\u5728\u4e00\u4e2aTCP\u670d\u52a1\u5668\u4e0a\uff08handle\uff09\u5199\u4e00\u4e2a\u6570\u636e\uff08request\uff09\uff0c\u4e5f\u53ef\u4ee5\u5355\u72ec\u4f7f\u7528\u4e00\u4e2arequest\uff0c\u6bd4\u5982DNS\u67e5\u8be2\u6216\u8005\u6587\u4ef6\u8bfb\u5199\u3002\u6211\u4eec\u770b\u4e00\u4e0buv_req_s\u7684\u5b9a\u4e49\u3002</p> <pre><code>1 \u81ea\u5b9a\u4e49\u6570\u636e\nvoid* data; \n\n2 request\u7c7b\u578b\nuv_req_type type;  \n\n3 \u4fdd\u7559\u5b57\u6bb5 \nvoid* reserved[6];\n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#231-uv_shutdown_s","title":"2.3.1 uv_shutdown_s","text":"<p>uv_shutdown_s\u7528\u4e8e\u5173\u95ed\u6d41\u7684\u5199\u7aef\uff0c\u989d\u5916\u5b9a\u4e49\u7684\u5b57\u6bb5</p> <pre><code>1 \u8981\u5173\u95ed\u7684\u6d41\uff0c\u6bd4\u5982TCP\nuv_stream_t* handle;\n\n2 \u5173\u95ed\u6d41\u7684\u5199\u7aef\u540e\u6267\u884c\u7684\u56de\u8c03\nuv_shutdown_cb cb;\n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#232-uv_write_s","title":"2.3.2 uv_write_s","text":"<p>uv_write_s\u8868\u793a\u4e00\u6b21\u5199\u8bf7\u6c42\uff0c\u6bd4\u5982\u5728TCP\u6d41\u4e0a\u53d1\u9001\u6570\u636e\uff0c\u989d\u5916\u5b9a\u4e49\u7684\u5b57\u6bb5</p> <pre><code>1 \u5199\u5b8c\u540e\u7684\u56de\u8c03\nuv_write_cb cb;\n\n2 \u9700\u8981\u4f20\u9012\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5728send_handle\u4e2d\nuv_stream_t* send_handle; \n\n3 \u5173\u8054\u7684handle\nuv_stream_t* handle;\n\n4 \u7528\u4e8e\u63d2\u5165\u961f\u5217\nvoid* queue[2];     \n\n5 \u4fdd\u5b58\u9700\u8981\u5199\u7684\u6570\u636e\u76f8\u5173\u7684\u5b57\u6bb5\uff08\u5199\u5165\u7684buffer\u4e2a\u6570\uff0c\u5f53\u524d\u5199\u6210\u529f\u7684\u4f4d\u7f6e\u7b49\uff09     \nunsigned int write_index;\nuv_buf_t* bufs;          \nunsigned int nbufs;                 \nuv_buf_t bufsml[4];\n\n6 \u5199\u51fa\u9519\u7684\u9519\u8bef\u7801 \nint error;    \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#233-uv_connect_s","title":"2.3.3 uv_connect_s","text":"<p>uv_connect_s\u8868\u793a\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\uff0c\u6bd4\u5982TCP\u8fde\u63a5\uff0c\u989d\u5916\u5b9a\u4e49\u7684\u5b57\u6bb5</p> <pre><code>1 \u8fde\u63a5\u6210\u529f\u540e\u6267\u884c\u7684\u56de\u8c03\nuv_connect_cb cb;\n\n2 \u5bf9\u5e94\u7684\u6d41\uff0c\u6bd4\u5982tcp\nuv_stream_t* handle;\n\n3 \u7528\u4e8e\u63d2\u5165\u961f\u5217\nvoid* queue[2]; \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#234-uv_udp_send_s","title":"2.3.4 uv_udp_send_s","text":"<p>uv_udp_send_s\u8868\u793a\u4e00\u6b21\u53d1\u9001UDP\u6570\u636e\u7684\u8bf7\u6c42</p> <pre><code>1 \u6240\u5c5eudp\u7684handle\uff0cudp_send_s\u4ee3\u8868\u4e00\u6b21\u53d1\u9001\nuv_udp_t* handle;\n\n2 \u56de\u8c03\nuv_udp_send_cb cb;\n\n3 \u7528\u4e8e\u63d2\u5165\u5f85\u53d1\u9001\u961f\u5217\nvoid* queue[2];              \n\n4 \u53d1\u9001\u7684\u76ee\u7684\u5730\u5740\nstruct sockaddr_storage addr;\n\n5 \u4fdd\u5b58\u4e86\u53d1\u9001\u6570\u636e\u7684\u7f13\u51b2\u533a\u548c\u4e2a\u6570\nunsigned int nbufs;           \nuv_buf_t* bufs;               \nuv_buf_t bufsml[4];\n\n6 \u53d1\u9001\u72b6\u6001\u6216\u6210\u529f\u53d1\u9001\u7684\u5b57\u8282\u6570\nssize_t status;              \n\n7 \u53d1\u9001\u5b8c\u6267\u884c\u7684\u56de\u8c03\uff08\u53d1\u9001\u6210\u529f\u6216\u5931\u8d25\uff09\nuv_udp_send_cb send_cb;  \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#235-uv_getaddrinfo_s","title":"2.3.5 uv_getaddrinfo_s","text":"<p>uv_getaddrinfo_s\u8868\u793a\u4e00\u6b21\u901a\u8fc7\u57df\u540d\u67e5\u8be2IP\u7684DNS\u8bf7\u6c42\uff0c\u989d\u5916\u5b9a\u4e49\u7684\u5b57\u6bb5</p> <pre><code>1 \u6240\u5c5e\u4e8b\u4ef6\u5faa\u73af\nuv_loop_t* loop;\n\n2 \u7528\u4e8e\u5f02\u6b65DNS\u89e3\u6790\u65f6\u63d2\u5165\u7ebf\u7a0b\u6c60\u4efb\u52a1\u961f\u5217\u7684\u8282\u70b9\nstruct uv__work work_req; \n\n3 DNS\u89e3\u6790\u5b8c\u540e\u6267\u884c\u7684\u56de\u8c03\nuv_getaddrinfo_cb cb;     \n\n4 DNS\u67e5\u8be2\u7684\u914d\u7f6e\nstruct addrinfo* hints;   \nchar* hostname;           \nchar* service;         \n\n5 DNS\u89e3\u6790\u7ed3\u679c   \nstruct addrinfo* addrinfo;\n\n6 DNS\u89e3\u6790\u7684\u8fd4\u56de\u7801\nint retcode;\n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#236-uv_getnameinfo_s","title":"2.3.6 uv_getnameinfo_s","text":"<p>uv_getnameinfo_s\u8868\u793a\u4e00\u6b21\u901a\u8fc7IP\u67e5\u8be2\u57df\u540d\u7684DNS\u67e5\u8be2\u8bf7\u6c42\uff0c\u989d\u5916\u5b9a\u4e49\u7684\u5b57\u6bb5</p> <pre><code>1 \u6240\u5c5e\u4e8b\u4ef6\u5faa\u73af \nuv_loop_t* loop;\n\n2 \u7528\u4e8e\u5f02\u6b65DNS\u89e3\u6790\u65f6\u63d2\u5165\u7ebf\u7a0b\u6c60\u4efb\u52a1\u961f\u5217\u7684\u8282\u70b9\nstruct uv__work work_req;        \n\n3 socket\u8f6c\u57df\u540d\u5b8c\u6210\u7684\u56de\u8c03\nuv_getnameinfo_cb getnameinfo_cb;\n\n4 \u9700\u8981\u8f6c\u57df\u540d\u7684socket\u7ed3\u6784\u4f53\nstruct sockaddr_storage storage; \n\n5 \u6307\u793a\u67e5\u8be2\u8fd4\u56de\u7684\u4fe1\u606f\nint flags;                       \n\n6 \u67e5\u8be2\u8fd4\u56de\u7684\u4fe1\u606f\nchar host[NI_MAXHOST];           \nchar service[NI_MAXSERV];        \n\n7 \u67e5\u8be2\u8fd4\u56de\u7801\nint retcode;\n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#237-uv_work_s","title":"2.3.7 uv_work_s","text":"<p>uv_work_s\u7528\u4e8e\u5f80\u7ebf\u7a0b\u6c60\u63d0\u4ea4\u4efb\u52a1\uff0c\u989d\u5916\u5b9a\u4e49\u7684\u5b57\u6bb5</p> <pre><code>1 \u6240\u5c5e\u4e8b\u4ef6\u5faa\u73af\nuv_loop_t* loop;\n\n2 \u5904\u7406\u4efb\u52a1\u7684\u51fd\u6570\nuv_work_cb work_cb;\n\n3 \u5904\u7406\u5b8c\u4efb\u52a1\u540e\u6267\u884c\u7684\u51fd\u6570\nuv_after_work_cb after_work_cb;\n\n4\u5c01\u88c5\u4e00\u4e2awork\u63d2\u5165\u5230\u7ebf\u7a0b\u6c60\u961f\u5217\uff0cwork_req\u7684work\u548cdone\u51fd\u6570\u662f\u5bf9\u4e0a\u9762work_cb\u548cafter_work_cb\u7684\u5c01\u88c5\nstruct uv__work work_req;\n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#uv_fs_s","title":"uv_fs_s","text":"<p>uv_fs_s\u8868\u793a\u4e00\u6b21\u6587\u4ef6\u64cd\u4f5c\u8bf7\u6c42\uff0c\u989d\u5916\u5b9a\u4e49\u7684\u5b57\u6bb5</p> <pre><code>1 \u6587\u4ef6\u64cd\u4f5c\u7c7b\u578b\nuv_fs_type fs_type;\n\n2 \u6240\u5c5e\u4e8b\u4ef6\u5faa\u73af\nuv_loop_t* loop;\n\n3\u6587\u4ef6\u64cd\u4f5c\u5b8c\u6210\u7684\u56de\u8c03\nuv_fs_cb cb;\n\n4 \u6587\u4ef6\u64cd\u4f5c\u7684\u8fd4\u56de\u7801\nssize_t result;\n\n5 \u6587\u4ef6\u64cd\u4f5c\u8fd4\u56de\u7684\u6570\u636e\nvoid* ptr;\n\n6 \u6587\u4ef6\u64cd\u4f5c\u8def\u5f84\nconst char* path;\n\n7 \u6587\u4ef6\u7684stat\u4fe1\u606f\nuv_stat_t statbuf;  \n\n8 \u6587\u4ef6\u64cd\u4f5c\u6d89\u53ca\u5230\u4e24\u4e2a\u8def\u5f84\u65f6\uff0c\u4fdd\u5b58\u76ee\u7684\u8def\u5f84\nconst char *new_path;    \n\n9 \u6587\u4ef6\u63cf\u8ff0\u7b26\nuv_file file;            \n\n10 \u6587\u4ef6\u6807\u8bb0\nint flags;               \n\n11 \u64cd\u4f5c\u6a21\u5f0f\nmode_t mode;      \n\n12 \u5199\u6587\u4ef6\u65f6\u4f20\u5165\u7684\u6570\u636e\u548c\u4e2a\u6570       \nunsigned int nbufs;      \nuv_buf_t* bufs;          \n\n13 \u6587\u4ef6\u504f\u79fb\noff_t off;               \n\n14 \u4fdd\u5b58\u9700\u8981\u8bbe\u7f6e\u7684uid\u548cgid\uff0c\u4f8b\u5982chmod\u7684\u65f6\u5019\nuv_uid_t uid;            \nuv_gid_t gid;            \n\n15 \u4fdd\u5b58\u9700\u8981\u8bbe\u7f6e\u7684\u6587\u4ef6\u4fee\u6539\u3001\u8bbf\u95ee\u65f6\u95f4\uff0c\u4f8b\u5982fs.utimes\u7684\u65f6\u5019\ndouble atime;            \ndouble mtime;            \n\n16 \u5f02\u6b65\u7684\u65f6\u5019\u7528\u4e8e\u63d2\u5165\u4efb\u52a1\u961f\u5217\uff0c\u4fdd\u5b58\u5de5\u4f5c\u51fd\u6570\uff0c\u56de\u8c03\u51fd\u6570\nstruct uv__work work_req;\n\n17 \u4fdd\u5b58\u8bfb\u53d6\u6570\u636e\u6216\u8005\u957f\u5ea6\u3002\u4f8b\u5982read\u548csendfile\nuv_buf_t bufsml[4];  \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#24-io","title":"2.4 IO\u89c2\u5bdf\u8005","text":"<p>IO\u89c2\u5bdf\u8005\u662fLibuv\u4e2d\u7684\u6838\u5fc3\u6982\u5ff5\u548c\u6570\u636e\u7ed3\u6784\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5b83\u7684\u5b9a\u4e49</p> <pre><code>1.  struct uv__io_s {  \n2.    // \u4e8b\u4ef6\u89e6\u53d1\u540e\u7684\u56de\u8c03  \n3.    uv__io_cb cb;  \n4.    // \u7528\u4e8e\u63d2\u5165\u961f\u5217  \n5.    void* pending_queue[2];  \n6.    void* watcher_queue[2];  \n7.    // \u4fdd\u5b58\u672c\u6b21\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\uff0c\u5728\u63d2\u5165IO\u89c2\u5bdf\u8005\u961f\u5217\u65f6\u8bbe\u7f6e  \n8.    unsigned int pevents; \n9.    // \u4fdd\u5b58\u5f53\u524d\u611f\u5174\u8da3\u7684\u4e8b\u4ef6  \n10.   unsigned int events;   \n11.   int fd;  \n12. };  \n</code></pre> <p>IO\u89c2\u5bdf\u8005\u5c01\u88c5\u4e86\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u4e8b\u4ef6\u548c\u56de\u8c03\uff0c\u7136\u540e\u63d2\u5165\u5230loop\u7ef4\u62a4\u7684IO\u89c2\u5bdf\u8005\u961f\u5217\uff0c\u5728Poll IO\u9636\u6bb5\uff0cLibuv\u4f1a\u6839\u636eIO\u89c2\u5bdf\u8005\u63cf\u8ff0\u7684\u4fe1\u606f\uff0c\u5f80\u5e95\u5c42\u7684\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u6ce8\u518c\u6587\u4ef6\u63cf\u8ff0\u7b26\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u3002\u5f53\u6ce8\u518c\u7684\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0cIO\u89c2\u5bdf\u8005\u7684\u56de\u8c03\u5c31\u4f1a\u88ab\u6267\u884c\u3002\u6211\u4eec\u770b\u5982\u4f55\u521dIO\u89c2\u5bdf\u8005\u7684\u4e00\u4e9b\u903b\u8f91\u3002</p>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#241-io","title":"2.4.1 \u521d\u59cb\u5316IO\u89c2\u5bdf\u8005","text":"<pre><code>1.  void uv__io_init(uv__io_t* w, uv__io_cb cb, int fd) {  \n2.    // \u521d\u59cb\u5316\u961f\u5217\uff0c\u56de\u8c03\uff0c\u9700\u8981\u76d1\u542c\u7684fd  \n3.    QUEUE_INIT(&amp;w-&gt;pending_queue);  \n4.    QUEUE_INIT(&amp;w-&gt;watcher_queue);  \n5.    w-&gt;cb = cb;  \n6.    w-&gt;fd = fd;  \n7.    // \u4e0a\u6b21\u52a0\u5165epoll\u65f6\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\uff0c\u5728\u6267\u884c\u5b8cepoll\u64cd\u4f5c\u51fd\u6570\u540e\u8bbe\u7f6e  \n8.    w-&gt;events = 0;  \n9.    // \u5f53\u524d\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\uff0c\u5728\u518d\u6b21\u6267\u884cepoll\u51fd\u6570\u4e4b\u524d\u8bbe\u7f6e  \n10.   w-&gt;pevents = 0;  \n11. }  \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#242iolibuv","title":"2.4.2\u6ce8\u518c\u4e00\u4e2aIO\u89c2\u5bdf\u8005\u5230Libuv\u3002","text":"<pre><code>1.  void uv__io_start(uv_loop_t* loop, uv__io_t* w, unsigned int events) {  \n2.    // \u8bbe\u7f6e\u5f53\u524d\u611f\u5174\u8da3\u7684\u4e8b\u4ef6  \n3.    w-&gt;pevents |= events;  \n4.    // \u53ef\u80fd\u9700\u8981\u6269\u5bb9  \n5.    maybe_resize(loop, w-&gt;fd + 1); \n6.      // \u4e8b\u4ef6\u6ca1\u6709\u53d8\u5316\u5219\u76f4\u63a5\u8fd4\u56de \n7.    if (w-&gt;events == w-&gt;pevents)  \n8.      return;  \n9.    // IO\u89c2\u5bdf\u8005\u6ca1\u6709\u6302\u8f7d\u5728\u5176\u5b83\u5730\u65b9\u5219\u63d2\u5165Libuv\u7684IO\u89c2\u5bdf\u8005\u961f\u5217  \n10.   if (QUEUE_EMPTY(&amp;w-&gt;watcher_queue))  \n11.     QUEUE_INSERT_TAIL(&amp;loop-&gt;watcher_queue, &amp;w-&gt;watcher_queue);  \n12.   // \u4fdd\u5b58\u6620\u5c04\u5173\u7cfb  \n13.   if (loop-&gt;watchers[w-&gt;fd] == NULL) {  \n14.     loop-&gt;watchers[w-&gt;fd] = w;  \n15.     loop-&gt;nfds++;  \n16.   }  \n17. }  \n</code></pre> <p>uv__io_start\u51fd\u6570\u5c31\u662f\u628a\u4e00\u4e2aIO\u89c2\u5bdf\u8005\u63d2\u5165\u5230Libuv\u7684\u89c2\u5bdf\u8005\u961f\u5217\u4e2d\uff0c\u5e76\u4e14\u5728watchers\u6570\u7ec4\u4e2d\u4fdd\u5b58\u4e00\u4e2a\u6620\u5c04\u5173\u7cfb\u3002Libuv\u5728Poll IO\u9636\u6bb5\u4f1a\u5904\u7406IO\u89c2\u5bdf\u8005\u961f\u5217\u3002</p>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#243-io","title":"2.4.3 \u64a4\u9500IO\u89c2\u5bdf\u8005\u6216\u8005\u4e8b\u4ef6","text":"<p>uv__io_stop\u4fee\u6539IO\u89c2\u5bdf\u8005\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\uff0c\u5982\u679c\u8fd8\u6709\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u7684\u8bdd\uff0cIO\u89c2\u5bdf\u8005\u8fd8\u4f1a\u5728\u961f\u5217\u91cc\uff0c\u5426\u5219\u79fb\u51fa</p> <pre><code>1.  void uv__io_stop(uv_loop_t* loop, \n2.                    uv__io_t* w, \n3.                    unsigned int events) {  \n4.    if (w-&gt;fd == -1)  \n5.      return;  \n6.    assert(w-&gt;fd &gt;= 0);  \n7.    if ((unsigned) w-&gt;fd &gt;= loop-&gt;nwatchers)  \n8.      return;  \n9.    // \u6e05\u9664\u4e4b\u524d\u6ce8\u518c\u7684\u4e8b\u4ef6\uff0c\u4fdd\u5b58\u5728pevents\u91cc\uff0c\u8868\u793a\u5f53\u524d\u611f\u5174\u8da3\u7684\u4e8b\u4ef6  \n10.   w-&gt;pevents &amp;= ~events;  \n11.   // \u5bf9\u6240\u6709\u4e8b\u4ef6\u90fd\u4e0d\u611f\u5174\u8da3\u4e86  \n12.   if (w-&gt;pevents == 0) {  \n13.     // \u79fb\u51faIO\u89c2\u5bdf\u8005\u961f\u5217  \n14.     QUEUE_REMOVE(&amp;w-&gt;watcher_queue);  \n15.     // \u91cd\u7f6e  \n16.     QUEUE_INIT(&amp;w-&gt;watcher_queue);  \n17.     // \u91cd\u7f6e  \n18.     if (loop-&gt;watchers[w-&gt;fd] != NULL) {  \n19.       assert(loop-&gt;watchers[w-&gt;fd] == w);  \n20.       assert(loop-&gt;nfds &gt; 0);  \n21.       loop-&gt;watchers[w-&gt;fd] = NULL;  \n22.       loop-&gt;nfds--;  \n23.       w-&gt;events = 0;  \n24.     }  \n25.   }  \n26.   /* \n27.     \u4e4b\u524d\u8fd8\u6ca1\u6709\u63d2\u5165IO\u89c2\u5bdf\u8005\u961f\u5217\uff0c\u5219\u63d2\u5165\uff0c \n28.     \u7b49\u5230Poll IO\u65f6\u5904\u7406\uff0c\u5426\u5219\u4e0d\u9700\u8981\u5904\u7406 \n29.     */  \n30.   else if (QUEUE_EMPTY(&amp;w-&gt;watcher_queue))  \n31.     QUEUE_INSERT_TAIL(&amp;loop-&gt;watcher_queue, &amp;w-&gt;watcher_queue);  \n32. }  \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#25-libuv","title":"2.5 Libuv\u901a\u7528\u903b\u8f91","text":""},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#251-uv__handle_init","title":"2.5.1   uv__handle_init","text":"<p>uv__handle_init\u521d\u59cb\u5316handle\u7684\u7c7b\u578b\uff0c\u8bbe\u7f6eREF\u6807\u8bb0\uff0c\u63d2\u5165handle\u961f\u5217\u3002</p> <pre><code>1.  #define uv__handle_init(loop_, h, type_)  \n2.    do {                           \n3.      (h)-&gt;loop = (loop_);        \n4.      (h)-&gt;type = (type_);        \n5.      (h)-&gt;flags = UV_HANDLE_REF;                 \n6.      QUEUE_INSERT_TAIL(&amp;(loop_)-&gt;handle_queue, &amp;(h)-&gt;handle_queue);\n7.      (h)-&gt;next_closing = NULL \n8.    }                              \n9.    while (0)  \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#252-uv__handle_start","title":"2.5.2.  uv__handle_start","text":"<p>uv__handle_start\u8bbe\u7f6e\u6807\u8bb0handle\u4e3aACTIVE\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86REF\u6807\u8bb0\uff0c\u5219active handle\u7684\u4e2a\u6570\u52a0\u4e00\uff0cactive handle\u6570\u4f1a\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa\u3002</p> <pre><code>1.  #define uv__handle_start(h)           \n2.    do {                           \n3.      if (((h)-&gt;flags &amp; UV_HANDLE_ACTIVE) != 0) break;                            \n4.      (h)-&gt;flags |= UV_HANDLE_ACTIVE;              \n5.      if (((h)-&gt;flags &amp; UV_HANDLE_REF) != 0)   \n6.        (h)-&gt;loop-&gt;active_handles++;       \n7.    }                             \n8.    while (0)  \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#253-uv__handle_stop","title":"2.5.3.  uv__handle_stop","text":"<p>uv__handle_stop\u548cuv__handle_start\u76f8\u53cd\u3002</p> <pre><code>1.  #define uv__handle_stop(h)           \n2.    do {                         \n3.      if (((h)-&gt;flags &amp; UV_HANDLE_ACTIVE) == 0) break;    \n4.      (h)-&gt;flags &amp;= ~UV_HANDLE_ACTIVE;  \n5.      if (((h)-&gt;flags &amp; UV_HANDLE_REF) != 0) uv__active_handle_rm(h);  \n6.    }                              \n7.    while (0)  \n</code></pre> <p>Libuv\u4e2dhandle\u6709REF\u548cACTIVE\u4e24\u4e2a\u72b6\u6001\u3002\u5f53\u4e00\u4e2ahandle\u8c03\u7528xxx_init\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5b83\u9996\u5148\u88ab\u6253\u4e0aREF\u6807\u8bb0\uff0c\u5e76\u4e14\u63d2\u5165loop-&gt;handle\u961f\u5217\u3002\u5f53handle\u8c03\u7528xxx_start\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5b83\u88ab\u6253\u4e0aACTIVE\u6807\u8bb0\uff0c\u5e76\u4e14\u8bb0\u5f55active handle\u7684\u4e2a\u6570\u52a0\u4e00\u3002\u53ea\u6709REF\u5e76\u4e14ACTIVE\u72b6\u6001\u7684handle\u624d\u4f1a\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa\u3002</p>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#254-uv__req_init","title":"2.5.4.  uv__req_init","text":"<p>uv__req_init\u521d\u59cb\u5316\u8bf7\u6c42\u7684\u7c7b\u578b\uff0c\u8bb0\u5f55\u8bf7\u6c42\u7684\u4e2a\u6570\uff0c\u4f1a\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa\u3002</p> <pre><code>1.  #define uv__req_init(loop, req, typ) \n2.    do {                          \n3.      (req)-&gt;type = (typ);      \n4.      (loop)-&gt;active_reqs.count++;\n5.    }                            \n6.    while (0) \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#255-uv__req_register","title":"2.5.5.  uv__req_register","text":"<p>\u8bf7\u6c42\u7684\u4e2a\u6570\u52a0\u4e00</p> <pre><code>1.  #define uv__req_register(loop, req)            \n2.    do {                           \n3.      (loop)-&gt;active_reqs.count++; \n4.    }                            \n5.    while (0)  \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#256-uv__req_unregister","title":"2.5.6.  uv__req_unregister","text":"<p>\u8bf7\u6c42\u4e2a\u6570\u51cf\u4e00</p> <pre><code>1.  #define uv__req_unregister(loop, req) \n2.    do {                          \n3.      assert(uv__has_active_reqs(loop)); \n4.      (loop)-&gt;active_reqs.count--;\n5.     }                              \n6.    while (0)  \n</code></pre>"},{"location":"chapter02-Libuv%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%9A%E7%94%A8%E9%80%BB%E8%BE%91/#257-uv__handle_ref","title":"2.5.7.  uv__handle_ref","text":"<p>uv__handle_ref\u6807\u8bb0handle\u4e3aREF\u72b6\u6001\uff0c\u5982\u679chandle\u662fACTIVE\u72b6\u6001\uff0c\u5219active handle\u6570\u52a0\u4e00</p> <pre><code>1.  #define uv__handle_ref(h)             \n2.    do {                           \n3.      if (((h)-&gt;flags &amp; UV_HANDLE_REF) != 0) break;         \n4.      (h)-&gt;flags |= UV_HANDLE_REF;     \n5.      if (((h)-&gt;flags &amp; UV_HANDLE_CLOSING) != 0) break;   \n6.      if (((h)-&gt;flags &amp; UV_HANDLE_ACTIVE) != 0) uv__active_handle_add(h);\n7.    }                              \n8.    while (0)  \n9.  uv__handle_unref\n</code></pre> <p>uv__handle_unref\u53bb\u6389handle\u7684REF\u72b6\u6001\uff0c\u5982\u679chandle\u662fACTIVE\u72b6\u6001\uff0c\u5219active handle\u6570\u51cf\u4e00</p> <pre><code>1.  #define uv__handle_unref(h)               \n2.    do {                           \n3.      if (((h)-&gt;flags &amp; UV_HANDLE_REF) == 0) break;  \n4.      (h)-&gt;flags &amp;= ~UV_HANDLE_REF;  \n5.      if (((h)-&gt;flags &amp; UV_HANDLE_CLOSING) != 0) break;\n6.      if (((h)-&gt;flags &amp; UV_HANDLE_ACTIVE) != 0) uv__active_handle_rm(h); \n7.    }                            \n8.    while (0)  \n</code></pre>"},{"location":"chapter03-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/","title":"\u7b2c\u4e09\u7ae0 \u4e8b\u4ef6\u5faa\u73af","text":"<p>Node.js\u5c5e\u4e8e\u5355\u7ebf\u7a0b\u4e8b\u4ef6\u5faa\u73af\u67b6\u6784\uff0c\u8be5\u4e8b\u4ef6\u5faa\u73af\u7531Libuv\u7684uv_run\u51fd\u6570\u5b9e\u73b0\uff0c\u5728\u8be5\u51fd\u6570\u4e2d\u6267\u884cwhile\u5faa\u73af\uff0c\u7136\u540e\u4e0d\u65ad\u5730\u5904\u7406\u5404\u4e2a\u9636\u6bb5\uff08phase\uff09\u7684\u4e8b\u4ef6\u56de\u8c03\u3002\u4e8b\u4ef6\u5faa\u73af\u7684\u5904\u7406\u76f8\u5f53\u4e8e\u4e00\u4e2a\u6d88\u8d39\u8005\uff0c\u6d88\u8d39\u7531\u5404\u79cd\u4ee3\u7801\u4ea7\u751f\u7684\u4efb\u52a1\u3002Node.js\u521d\u59cb\u5316\u5b8c\u6210\u540e\u5c31\u5f00\u59cb\u9677\u5165\u8be5\u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0c\u4e8b\u4ef6\u5faa\u73af\u7684\u7ed3\u675f\u4e5f\u5c31\u610f\u5473\u7740Node.js\u7684\u7ed3\u675f\u3002\u4e0b\u9762\u770b\u4e00\u4e0b\u4e8b\u4ef6\u5faa\u73af\u7684\u6838\u5fc3\u4ee3\u7801\u3002</p> <pre><code>    int uv_run(uv_loop_t* loop, uv_run_mode mode) {  \n      int timeout;  \n      int r;  \n      int ran_pending;  \n      // \u5728uv_run\u4e4b\u524d\u8981\u5148\u63d0\u4ea4\u4efb\u52a1\u5230loop  \n      r = uv__loop_alive(loop);  \n      // \u4e8b\u4ef6\u5faa\u73af\u6ca1\u6709\u4efb\u52a1\u6267\u884c\uff0c\u5373\u5c06\u9000\u51fa\uff0c\u8bbe\u7f6e\u4e00\u4e0b\u5f53\u524d\u5faa\u73af\u7684\u65f6\u95f4  \n      if (!r)  \n        uv__update_time(loop);  \n      // \u6ca1\u6709\u4efb\u52a1\u9700\u8981\u5904\u7406\u6216\u8005\u8c03\u7528\u4e86uv_stop\u5219\u9000\u51fa\u4e8b\u4ef6\u5faa\u73af   \n      while (r != 0 &amp;&amp; loop-&gt;stop_flag == 0) {  \n        // \u66f4\u65b0loop\u7684time\u5b57\u6bb5  \n        uv__update_time(loop);  \n        // \u6267\u884c\u8d85\u65f6\u56de\u8c03  \n        uv__run_timers(loop);  \n        /*\n          \u6267\u884cpending\u56de\u8c03\uff0cran_pending\u4ee3\u8868pending\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\n           \u5373\u6ca1\u6709\u8282\u70b9\u53ef\u4ee5\u6267\u884c  \n         */\n        ran_pending = uv__run_pending(loop);  \n        // \u7ee7\u7eed\u6267\u884c\u5404\u79cd\u961f\u5217  \n        uv__run_idle(loop);  \n        uv__run_prepare(loop);  \n\n        timeout = 0;  \n        /*\n          \u6267\u884c\u6a21\u5f0f\u662fUV_RUN_ONCE\u65f6\uff0c\u5982\u679c\u6ca1\u6709pending\u8282\u70b9\uff0c\n          \u624d\u4f1a\u963b\u585e\u5f0fPoll IO\uff0c\u9ed8\u8ba4\u6a21\u5f0f\u4e5f\u662f  \n        */\n        if ((mode == UV_RUN_ONCE &amp;&amp; !ran_pending) || \n              mode == UV_RUN_DEFAULT)  \n          timeout = uv_backend_timeout(loop);  \n        // Poll IO timeout\u662fepoll_wait\u7684\u8d85\u65f6\u65f6\u95f4  \n        uv__io_poll(loop, timeout);  \n         // \u5904\u7406check\u9636\u6bb5\n        uv__run_check(loop);  \n         // \u5904\u7406close\u9636\u6bb5\n        uv__run_closing_handles(loop);  \n        /*\n          \u8fd8\u6709\u4e00\u6b21\u6267\u884c\u8d85\u65f6\u56de\u8c03\u7684\u673a\u4f1a\uff0c\u56e0\u4e3auv__io_poll\u53ef\u80fd\u662f\u56e0\u4e3a\n          \u5b9a\u65f6\u5668\u8d85\u65f6\u8fd4\u56de\u7684\u3002  \n        */\n        if (mode == UV_RUN_ONCE) {  \n          uv__update_time(loop);  \n          uv__run_timers(loop);  \n        }  \n\n        r = uv__loop_alive(loop);  \n        /*\n          \u53ea\u6267\u884c\u4e00\u6b21\uff0c\u9000\u51fa\u5faa\u73af,UV_RUN_NOWAIT\u8868\u793a\u5728Poll IO\u9636\u6bb5\n           \u4e0d\u4f1a\u963b\u585e\u5e76\u4e14\u5faa\u73af\u53ea\u6267\u884c\u4e00\u6b21  \n         */\n        if (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)  \n          break;  \n      }  \n      // \u662f\u56e0\u4e3a\u8c03\u7528\u4e86uv_stop\u9000\u51fa\u7684\uff0c\u91cd\u7f6eflag  \n      if (loop-&gt;stop_flag != 0)  \n        loop-&gt;stop_flag = 0;  \n      /*\n        \u8fd4\u56de\u662f\u5426\u8fd8\u6709\u6d3b\u8dc3\u7684\u4efb\u52a1\uff08handle\u6216request\uff09\uff0c\n        \u4e1a\u52a1\u4ee3\u8868\u53ef\u4ee5\u518d\u6b21\u6267\u884cuv_run  \n      */\n      return r;  \n    }  \n</code></pre> <p>Libuv\u5206\u4e3a\u51e0\u4e2a\u9636\u6bb5\uff0c\u4e0b\u9762\u4ece\u5148\u5230\u540e\uff0c\u5206\u522b\u5206\u6790\u5404\u4e2a\u9636\u6bb5\u7684\u76f8\u5173\u4ee3\u7801\u3002</p>"},{"location":"chapter03-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/#31","title":"3.1 \u4e8b\u4ef6\u5faa\u73af\u4e4b\u5b9a\u65f6\u5668","text":"<p>Libuv\u4e2d\uff0c\u5b9a\u65f6\u5668\u9636\u6bb5\u662f\u7b2c\u4e00\u4e2a\u88ab\u5904\u7406\u7684\u9636\u6bb5\u3002\u5b9a\u65f6\u5668\u662f\u4ee5\u6700\u5c0f\u5806\u5b9e\u73b0\u7684\uff0c\u6700\u5feb\u8fc7\u671f\u7684\u8282\u70b9\u662f\u6839\u8282\u70b9\u3002Libuv\u5728\u6bcf\u6b21\u4e8b\u4ef6\u5faa\u73af\u5f00\u59cb\u7684\u65f6\u5019\u90fd\u4f1a\u7f13\u5b58\u5f53\u524d\u7684\u65f6\u95f4\uff0c\u5728\u6bcf\u4e00\u8f6e\u7684\u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0c\u4f7f\u7528\u7684\u90fd\u662f\u8fd9\u4e2a\u7f13\u5b58\u7684\u65f6\u95f4\uff0c\u5fc5\u8981\u7684\u65f6\u5019Libuv\u4f1a\u663e\u5f0f\u66f4\u65b0\u8fd9\u4e2a\u65f6\u95f4\uff0c\u56e0\u4e3a\u83b7\u53d6\u65f6\u95f4\u9700\u8981\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u63a5\u53e3\uff0c\u800c\u9891\u7e41\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u4f1a\u5e26\u6765\u4e00\u5b9a\u7684\u8017\u65f6\uff0c\u7f13\u5b58\u65f6\u95f4\u53ef\u4ee5\u51cf\u5c11\u64cd\u4f5c\u7cfb\u7edf\u7684\u8c03\u7528\uff0c\u63d0\u9ad8\u6027\u80fd\u3002Libuv\u7f13\u5b58\u4e86\u5f53\u524d\u6700\u65b0\u7684\u65f6\u95f4\u540e\uff0c\u5c31\u6267\u884cuv__run_timers\uff0c\u8be5\u51fd\u6570\u5c31\u662f\u904d\u5386\u6700\u5c0f\u5806\uff0c\u627e\u51fa\u5f53\u524d\u8d85\u65f6\u7684\u8282\u70b9\u3002\u56e0\u4e3a\u5806\u7684\u6027\u8d28\u662f\u7236\u8282\u70b9\u80af\u5b9a\u6bd4\u5b69\u5b50\u5c0f\u3002\u5e76\u4e14\u6839\u8282\u70b9\u662f\u6700\u5c0f\u7684\uff0c\u6240\u4ee5\u5982\u679c\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u5b83\u6ca1\u6709\u8d85\u65f6\uff0c\u5219\u540e\u9762\u7684\u8282\u70b9\u4e5f\u4e0d\u4f1a\u8d85\u65f6\u3002\u5bf9\u4e8e\u8d85\u65f6\u7684\u8282\u70b9\u5c31\u6267\u884c\u5b83\u7684\u56de\u8c03\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u903b\u8f91\u3002</p> <pre><code>    void uv__run_timers(uv_loop_t* loop) {  \n      struct heap_node* heap_node;  \n      uv_timer_t* handle;  \n      // \u904d\u5386\u4e8c\u53c9\u5806  \n      for (;;) {  \n        // \u627e\u51fa\u6700\u5c0f\u7684\u8282\u70b9  \n        heap_node = heap_min(timer_heap(loop));  \n        // \u6ca1\u6709\u5219\u9000\u51fa  \n        if (heap_node == NULL)  \n          break;  \n        // \u901a\u8fc7\u7ed3\u6784\u4f53\u5b57\u6bb5\u627e\u5230\u7ed3\u6784\u4f53\u9996\u5730\u5740  \n        handle = container_of(heap_node, uv_timer_t, heap_node);  \n        // \u6700\u5c0f\u7684\u8282\u70b9\u90fd\u6ca1\u6709\u8d85\u5e02\uff0c\u5219\u540e\u9762\u7684\u8282\u70b9\u4e5f\u4e0d\u4f1a\u8d85\u65f6  \n        if (handle-&gt;timeout &gt; loop-&gt;time)  \n          break;  \n        // \u5220\u9664\u8be5\u8282\u70b9  \n        uv_timer_stop(handle);  \n        /*\n          \u91cd\u8bd5\u63d2\u5165\u4e8c\u53c9\u5806\uff0c\u5982\u679c\u9700\u8981\u7684\u8bdd\uff08\u8bbe\u7f6e\u4e86repeat\uff0c\u6bd4\u5982\n          setInterval\uff09 \n        */ \n        uv_timer_again(handle);  \n        // \u6267\u884c\u56de\u8c03  \n        handle-&gt;timer_cb(handle);  \n      }  \n    }  \n</code></pre> <p>\u6267\u884c\u5b8c\u56de\u8c03\u540e\uff0c\u8fd8\u6709\u4e24\u4e2a\u5173\u952e\u7684\u64cd\u4f5c\uff0c\u7b2c\u4e00\u5c31\u662fstop\uff0c\u7b2c\u4e8c\u5c31\u662fagain\u3002stop\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u628ahandle\u4ece\u4e8c\u53c9\u5806\u4e2d\u5220\u9664\uff0c\u5e76\u4e14\u4fee\u6539handle\u7684\u72b6\u6001\u3002\u90a3\u4e48again\u53c8\u662f\u4ec0\u4e48\u5462\uff1fagain\u662f\u4e3a\u4e86\u652f\u6301setInterval\u8fd9\u79cd\u573a\u666f\uff0c\u5982\u679chandle\u8bbe\u7f6e\u4e86repeat\u6807\u8bb0\uff0c\u5219\u8be5handle\u5728\u8d85\u65f6\u540e\uff0c\u6bcfrepeat\u7684\u65f6\u95f4\u540e\uff0c\u5c31\u4f1a\u7ee7\u7eed\u6267\u884c\u8d85\u65f6\u56de\u8c03\u3002\u5bf9\u4e8esetInterval\uff0c\u5c31\u662f\u8d85\u65f6\u65f6\u95f4\u662fx\uff0c\u6bcfx\u7684\u65f6\u95f4\u540e\uff0c\u6267\u884c\u56de\u8c03\u3002\u8fd9\u5c31\u662fNode.js\u91cc\u5b9a\u65f6\u5668\u7684\u5e95\u5c42\u539f\u7406\u3002\u4f46Node.js\u4e0d\u662f\u6bcf\u6b21\u8c03setTimeout/setInterval\u7684\u65f6\u5019\u90fd\u5f80\u6700\u5c0f\u5806\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0cNode.js\u91cc\uff0c\u53ea\u6709\u4e00\u4e2a\u5173\u4e8euv_timer_s\u7684handle\uff0c\u5b83\u5728JS\u5c42\u7ef4\u62a4\u4e86\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u6b21\u8ba1\u7b97\u51fa\u6700\u65e9\u5230\u671f\u7684\u8282\u70b9\uff0c\u7136\u540e\u4fee\u6539handle\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u5177\u4f53\u5728\u5b9a\u65f6\u5668\u7ae0\u8282\u8bb2\u89e3\u3002 \u00a0\u00a0\u00a0\u00a0\u53e6\u5916timer\u9636\u6bb5\u548cPoll IO\u9636\u6bb5\u4e5f\u6709\u4e00\u4e9b\u8054\u7cfb\uff0c\u56e0\u4e3aPoll IO\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e3b\u7ebf\u7a0b\u963b\u585e\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4e3b\u7ebf\u7a0b\u53ef\u4ee5\u5c3d\u5feb\u6267\u884c\u5b9a\u65f6\u5668\u7684\u56de\u8c03\uff0cPoll IO\u4e0d\u80fd\u4e00\u76f4\u963b\u585e\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019\uff0c\u963b\u585e\u7684\u65f6\u957f\u5c31\u662f\u6700\u5feb\u5230\u671f\u7684\u5b9a\u65f6\u5668\u8282\u70b9\u7684\u65f6\u957f\uff08\u5177\u4f53\u53ef\u53c2\u8003libuv core.c\u4e2d\u7684uv_backend_timeout\u51fd\u6570\uff09\u3002</p>"},{"location":"chapter03-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/#32-pending","title":"3.2 pending\u9636\u6bb5","text":"<p>\u5b98\u7f51\u5bf9pending\u9636\u6bb5\u7684\u89e3\u91ca\u662f\u5728\u4e0a\u4e00\u8f6e\u7684Poll IO\u9636\u6bb5\u6ca1\u6709\u6267\u884c\u7684IO\u56de\u8c03\uff0c\u4f1a\u5728\u4e0b\u4e00\u8f6e\u5faa\u73af\u7684pending\u9636\u6bb5\u88ab\u6267\u884c\u3002\u4ece\u6e90\u7801\u6765\u770b\uff0cPoll IO\u9636\u6bb5\u5904\u7406\u4efb\u52a1\u65f6\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5f53\u524d\u6267\u884c\u7684\u64cd\u4f5c\u5931\u8d25\u9700\u8981\u6267\u884c\u56de\u8c03\u901a\u77e5\u8c03\u7528\u65b9\u4e00\u4e9b\u4fe1\u606f\uff0c\u8be5\u56de\u8c03\u51fd\u6570\u4e0d\u4f1a\u7acb\u523b\u6267\u884c\uff0c\u800c\u662f\u5728\u4e0b\u4e00\u8f6e\u4e8b\u4ef6\u5faa\u73af\u7684pending\u9636\u6bb5\u6267\u884c\uff08\u6bd4\u5982\u5199\u5165\u6570\u636e\u6210\u529f\uff0c\u6216\u8005TCP\u8fde\u63a5\u5931\u8d25\u65f6\u56de\u8c03C++\u5c42\uff09\uff0c\u6211\u4eec\u5148\u770bpending\u9636\u6bb5\u7684\u5904\u7406\u3002</p> <pre><code>    static int uv__run_pending(uv_loop_t* loop) {  \n      QUEUE* q;  \n      QUEUE pq;  \n      uv__io_t* w;  \n\n      if (QUEUE_EMPTY(&amp;loop-&gt;pending_queue))  \n        return 0;  \n      // \u628apending_queue\u961f\u5217\u7684\u8282\u70b9\u79fb\u5230pq\uff0c\u5373\u6e05\u7a7a\u4e86pending_queue  \n      QUEUE_MOVE(&amp;loop-&gt;pending_queue, &amp;pq);  \n\n      // \u904d\u5386pq\u961f\u5217  \n      while (!QUEUE_EMPTY(&amp;pq)) {  \n        // \u53d6\u51fa\u5f53\u524d\u7b2c\u4e00\u4e2a\u9700\u8981\u5904\u7406\u7684\u8282\u70b9\uff0c\u5373pq.next  \n        q = QUEUE_HEAD(&amp;pq);  \n        // \u628a\u5f53\u524d\u9700\u8981\u5904\u7406\u7684\u8282\u70b9\u79fb\u51fa\u961f\u5217  \n        QUEUE_REMOVE(q);  \n        /*\n          \u91cd\u7f6e\u4e00\u4e0bprev\u548cnext\u6307\u9488\uff0c\u56e0\u4e3a\u8fd9\u65f6\u5019\u8fd9\u4e24\u4e2a\u6307\u9488\u662f\n          \u6307\u5411\u961f\u5217\u4e2d\u7684\u4e24\u4e2a\u8282\u70b9  \n         */\n        QUEUE_INIT(q);  \n        w = QUEUE_DATA(q, uv__io_t, pending_queue);  \n        w-&gt;cb(loop, w, POLLOUT);  \n      }  \n\n      return 1;  \n    }  \n</code></pre> <p>pending\u9636\u6bb5\u7684\u5904\u7406\u903b\u8f91\u5c31\u662f\u628apending\u961f\u5217\u91cc\u7684\u8282\u70b9\u9010\u4e2a\u6267\u884c\u3002\u6211\u4eec\u770b\u4e00\u4e0bpending\u961f\u5217\u7684\u8282\u70b9\u662f\u5982\u4f55\u751f\u4ea7\u51fa\u6765\u7684\u3002</p> <pre><code>    void uv__io_feed(uv_loop_t* loop, uv__io_t* w) {  \n      if (QUEUE_EMPTY(&amp;w-&gt;pending_queue))  \n        QUEUE_INSERT_TAIL(&amp;loop-&gt;pending_queue, &amp;w-&gt;pending_queue);  \n    }  \n</code></pre> <p>Libuv\u901a\u8fc7uv__io_feed\u51fd\u6570\u751f\u4ea7pending\u4efb\u52a1\uff0c\u4eceLibuv\u7684\u4ee3\u7801\u4e2d\u6211\u4eec\u770b\u5230IO\u9519\u8bef\u7684\u65f6\u5019\u4f1a\u8c03\u8fd9\u4e2a\u51fd\u6570\uff08\u5982tcp.c\u7684uv__tcp_connect\u51fd\u6570\uff09\u3002</p> <pre><code>    if (handle-&gt;delayed_error)  \n        uv__io_feed(handle-&gt;loop, &amp;handle-&gt;io_watcher);  \n</code></pre> <p>\u5728\u5199\u5165\u6570\u636e\u6210\u529f\u540e\uff08\u6bd4\u5982TCP\u3001UDP\uff09\uff0c\u4e5f\u4f1a\u5f80pending\u961f\u5217\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u7b49\u5f85\u56de\u8c03\u3002\u6bd4\u5982\u53d1\u9001\u6570\u636e\u6210\u529f\u540e\u6267\u884c\u7684\u4ee3\u7801\uff08udp.c\u7684uv__udp_sendmsg\u51fd\u6570\uff09</p> <pre><code>    // \u53d1\u9001\u5b8c\u79fb\u51fa\u5199\u961f\u5217  \n    QUEUE_REMOVE(&amp;req-&gt;queue);  \n    // \u52a0\u5165\u5199\u5b8c\u6210\u961f\u5217  \n    QUEUE_INSERT_TAIL(&amp;handle-&gt;write_completed_queue, &amp;req-&gt;queue);  \n    /*\n      \u6709\u8282\u70b9\u6570\u636e\u5199\u5b8c\u4e86\uff0c\u628aIO\u89c2\u5bdf\u8005\u63d2\u5165pending\u961f\u5217\uff0c\n      pending\u9636\u6bb5\u6267\u884c\u56de\u8c03\n    */  \n    uv__io_feed(handle-&gt;loop, &amp;handle-&gt;io_watcher);  \n</code></pre> <p>\u6700\u540e\u5173\u95edIO\u7684\u65f6\u5019\uff08\u5982\u5173\u95ed\u4e00\u4e2aTCP\u8fde\u63a5\uff09\u4f1a\u4ecepending\u961f\u5217\u79fb\u9664\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5173\u95ed\u4e86\uff0c\u81ea\u7136\u5c31\u4e0d\u9700\u8981\u6267\u884c\u56de\u8c03\u3002</p> <pre><code>    void uv__io_close(uv_loop_t* loop, uv__io_t* w) {  \n      uv__io_stop(loop, \n                    w, \n                    POLLIN | POLLOUT | UV__POLLRDHUP | UV__POLLPRI);  \n      QUEUE_REMOVE(&amp;w-&gt;pending_queue);   \n    }  \n</code></pre>"},{"location":"chapter03-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/#33-preparecheckidle","title":"3.3 \u4e8b\u4ef6\u5faa\u73af\u4e4bprepare,check,idle","text":"<p>prepare,check,idle\u662fLibuv\u4e8b\u4ef6\u5faa\u73af\u4e2d\u5c5e\u4e8e\u6bd4\u8f83\u7b80\u5355\u7684\u4e00\u4e2a\u9636\u6bb5\uff0c\u5b83\u4eec\u7684\u5b9e\u73b0\u662f\u4e00\u6837\u7684\uff08\u89c1loop-watcher.c\uff09\u3002\u672c\u8282\u53ea\u8bb2\u89e3prepare\u9636\u6bb5\uff0c\u6211\u4eec\u77e5\u9053Libuv\u4e2d\u5206\u4e3ahandle\u548crequest\uff0c\u800cprepare\u9636\u6bb5\u7684\u4efb\u52a1\u662f\u5c5e\u4e8ehandle\u7c7b\u578b\u3002\u8fd9\u610f\u5473\u7740\u9664\u975e\u6211\u4eec\u663e\u5f0f\u79fb\u9664\uff0c\u5426\u5219prepare\u9636\u6bb5\u7684\u8282\u70b9\u5728\u6bcf\u6b21\u4e8b\u4ef6\u5faa\u73af\u4e2d\u90fd\u4f1a\u88ab\u6267\u884c\u3002\u4e0b\u9762\u6211\u4eec\u5148\u770b\u770b\u600e\u4e48\u4f7f\u7528\u5b83\u3002</p> <pre><code>    void prep_cb(uv_prepare_t *handle) {  \n        printf(\"Prep callback\\n\");  \n    }  \n\n    int main() {  \n        uv_prepare_t prep;  \n        // \u521d\u59cb\u5316\u4e00\u4e2ahandle\uff0cuv_default_loop\u662f\u4e8b\u4ef6\u5faa\u73af\u7684\u6838\u5fc3\u7ed3\u6784\u4f53  \n        uv_prepare_init(uv_default_loop(), &amp;prep); \n            // \u6ce8\u518chandle\u7684\u56de\u8c03 \n        uv_prepare_start(&amp;prep, prep_cb);\n            // \u5f00\u59cb\u4e8b\u4ef6\u5faa\u73af  \n        uv_run(uv_default_loop(), UV_RUN_DEFAULT);  \n        return 0;  \n    }  \n</code></pre> <p>\u6267\u884cmain\u51fd\u6570\uff0cLibuv\u5c31\u4f1a\u5728prepare\u9636\u6bb5\u6267\u884c\u56de\u8c03prep_cb\u3002\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u3002</p> <pre><code>    int uv_prepare_init(uv_loop_t* loop, uv_prepare_t* handle) {\n        uv__handle_init(loop, (uv_handle_t*)handle, UV_PREPARE);  \n        handle-&gt;prepare_cb = NULL;    \n        return 0;                   \n    }   \n</code></pre> <p>init\u51fd\u6570\u4e3b\u8981\u662f\u505a\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\u3002\u6211\u4eec\u7ee7\u7eed\u8981\u770bstart\u51fd\u6570\u3002</p> <pre><code>    int uv_prepare_start(uv_prepare_t* handle, uv_prepare_cb cb) { \n       // \u5982\u679c\u5df2\u7ecf\u6267\u884c\u8fc7start\u51fd\u6570\u5219\u76f4\u63a5\u8fd4\u56de  \n       if (uv__is_active(handle)) return 0;  \n       if (cb == NULL) return UV_EINVAL;\n       QUEUE_INSERT_HEAD(&amp;handle-&gt;loop-&gt;prepare_handles, \n                            &amp;handle-&gt;queue);           \n       handle-&gt;prepare_cb = cb;     \n       uv__handle_start(handle);    \n       return 0;    \n     }   \n</code></pre> <p>uv_prepare_start\u51fd\u6570\u4e3b\u8981\u7684\u903b\u8f91\u4e3b\u8981\u662f\u8bbe\u7f6e\u56de\u8c03\uff0c\u628ahandle\u63d2\u5165loop\u7684prepare_handles\u961f\u5217\uff0cprepare_handles\u961f\u5217\u4fdd\u5b58\u4e86prepare\u9636\u6bb5\u7684\u4efb\u52a1\u3002\u5728\u4e8b\u4ef6\u5faa\u73af\u7684prepare\u9636\u6bb5\u4f1a\u9010\u4e2a\u6267\u884c\u91cc\u9762\u7684\u8282\u70b9\u7684\u56de\u8c03\u3002\u7136\u540e\u6211\u4eec\u770b\u770bLibuv\u5728\u4e8b\u4ef6\u5faa\u73af\u7684prepare\u9636\u6bb5\u662f\u5982\u4f55\u5904\u7406\u7684\u3002</p> <pre><code>    void uv__run_prepare(uv_loop_t* loop) {           \n        uv_prepare_t* h;               \n        QUEUE queue;               \n        QUEUE* q;  \n        /* \n          \u628a\u8be5\u7c7b\u578b\u5bf9\u5e94\u7684\u961f\u5217\u4e2d\u6240\u6709\u8282\u70b9\u6458\u4e0b\u6765\u6302\u8f7d\u5230queue\u53d8\u91cf\uff0c \n          \u76f8\u5f53\u4e8e\u6e05\u7a7aprepare_handles\u961f\u5217\uff0c\u56e0\u4e3a\u5982\u679c\u76f4\u63a5\u904d\u5386 \n          prepare_handles\u961f\u5217\uff0c\u5728\u6267\u884c\u56de\u8c03\u7684\u65f6\u5019\u4e00\u76f4\u5f80prepare_handles \n          \u961f\u5217\u52a0\u8282\u70b9\uff0c\u4f1a\u5bfc\u81f4\u4e0b\u9762\u7684while\u5faa\u73af\u65e0\u6cd5\u9000\u51fa\u3002 \n          \u5148\u79fb\u9664\u7684\u8bdd\uff0c\u65b0\u63d2\u5165\u7684\u8282\u70b9\u5728\u4e0b\u4e00\u8f6e\u4e8b\u4ef6\u5faa\u73af\u624d\u4f1a\u88ab\u5904\u7406\u3002 \n        */                              \n         QUEUE_MOVE(&amp;loop-&gt;prepare_handles, &amp;queue);      \n        // \u904d\u5386\u961f\u5217\uff0c\u6267\u884c\u6bcf\u4e2a\u8282\u70b9\u91cc\u9762\u7684\u51fd\u6570  \n        while (!QUEUE_EMPTY(&amp;queue)) {             \n          // \u53d6\u4e0b\u5f53\u524d\u5f85\u5904\u7406\u7684\u8282\u70b9\uff0c\u5373\u961f\u5217\u7684\u5934  \n          q = QUEUE_HEAD(&amp;queue);        \n          /* \n                  \u53d6\u5f97\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u6574\u4e2a\u7ed3\u6784\u4f53\u7684\u57fa\u5730\u5740\uff0c \n                  \u5373\u901a\u8fc7\u7ed3\u6784\u4f53\u6210\u5458\u53d6\u5f97\u7ed3\u6784\u4f53\u9996\u5730\u5740 \n                */  \n          h = QUEUE_DATA(q, uv_prepare_t, queue); \n          // \u628a\u8be5\u8282\u70b9\u79fb\u51fa\u5f53\u524d\u961f\u5217  \n          QUEUE_REMOVE(q);          \n           // \u91cd\u65b0\u63d2\u5165\u539f\u6765\u7684\u961f\u5217  \n          QUEUE_INSERT_TAIL(&amp;loop-&gt;prepare_handles, q);\n           // \u6267\u884c\u56de\u8c03\u51fd\u6570  \n          h-&gt;prepare_cb(h);           \n        }                           \n      }   \n</code></pre> <p>uv__run_prepare\u51fd\u6570\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u91cd\u70b9\u7684\u5730\u65b9\u5c31\u662f\u6267\u884c\u5b8c\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0cLibuv\u4f1a\u628a\u8be5\u8282\u70b9\u91cd\u65b0\u63d2\u5165\u961f\u5217\u4e2d\uff0c\u6240\u4ee5prepare\uff08\u5305\u62ecidle\u3001check\uff09\u9636\u6bb5\u7684\u8282\u70b9\u5728\u6bcf\u4e00\u8f6e\u4e8b\u4ef6\u5faa\u73af\u4e2d\u90fd\u4f1a\u88ab\u6267\u884c\u3002\u800c\u50cf\u5b9a\u65f6\u5668\u3001pending\u3001closing\u9636\u6bb5\u7684\u8282\u70b9\u662f\u4e00\u6b21\u6027\u7684\uff0c\u88ab\u6267\u884c\u540e\u5c31\u4f1a\u4ece\u961f\u5217\u91cc\u5220\u9664\u3002 \u00a0\u00a0\u00a0\u00a0\u6211\u4eec\u56de\u987e\u4e00\u5f00\u59cb\u7684\u6d4b\u8bd5\u4ee3\u7801\u3002\u56e0\u4e3a\u5b83\u8bbe\u7f6e\u4e86Libuv\u7684\u8fd0\u884c\u6a21\u5f0f\u662f\u9ed8\u8ba4\u6a21\u5f0f\u3002\u800cprepare\u961f\u5217\u53c8\u4e00\u76f4\u6709\u4e00\u4e2ahandle\u8282\u70b9\uff0c\u6240\u4ee5\u5b83\u662f\u4e0d\u4f1a\u9000\u51fa\u7684\u3002\u5b83\u4f1a\u4e00\u76f4\u6267\u884c\u56de\u8c03\u3002\u90a3\u5982\u679c\u6211\u4eec\u8981\u9000\u51fa\u600e\u4e48\u529e\u5462\uff1f\u6216\u8005\u8bf4\u4e0d\u8981\u6267\u884cprepare\u961f\u5217\u7684\u67d0\u4e2a\u8282\u70b9\u4e86\u3002\u6211\u4eec\u53ea\u9700\u8981stop\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>       int uv_prepare_stop(uv_prepare_t* handle) {\n        if (!uv__is_active(handle)) return 0;\n        // \u628ahandle\u4eceprepare\u961f\u5217\u4e2d\u79fb\u9664\uff0c\u4f46\u8fd8\u6302\u8f7d\u5230handle_queue\u4e2d  \n        QUEUE_REMOVE(&amp;handle-&gt;queue);  \n         // \u6e05\u9664active\u6807\u8bb0\u4f4d\u5e76\u4e14\u51cf\u53bbloop\u4e2dhandle\u7684active\u6570  \n        uv__handle_stop(handle);     \n        return 0;                    \n      }   \n</code></pre> <p>stop\u51fd\u6570\u548cstart\u51fd\u6570\u662f\u76f8\u53cd\u7684\u4f5c\u7528\uff0c\u8fd9\u5c31\u662fNode.js\u4e2dprepare\u3001check\u3001idle\u9636\u6bb5\u7684\u539f\u7406\u3002</p>"},{"location":"chapter03-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/#34-poll-io","title":"3.4 \u4e8b\u4ef6\u5faa\u73af\u4e4bPoll IO","text":"<p>Poll IO\u662fLibuv\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u9636\u6bb5\uff0c\u6587\u4ef6IO\u3001\u7f51\u7edcIO\u3001\u4fe1\u53f7\u5904\u7406\u7b49\u90fd\u5728\u8fd9\u4e2a\u9636\u6bb5\u5904\u7406\uff0c\u8fd9\u4e5f\u662f\u6700\u590d\u6742\u7684\u4e00\u4e2a\u9636\u6bb5\u3002\u5904\u7406\u903b\u8f91\u5728core.c\u7684uv__io_poll\u8fd9\u4e2a\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u6bd4\u8f83\u590d\u6742\uff0c\u6211\u4eec\u5206\u5f00\u5206\u6790\u3002\u5728\u5f00\u59cb\u5206\u6790Poll IO\u4e4b\u524d\uff0c\u5148\u4e86\u89e3\u4e00\u4e0b\u5b83\u76f8\u5173\u7684\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u3002 1 IO\u89c2\u5bdf\u8005uv__io_t\u3002\u8fd9\u4e2a\u7ed3\u6784\u4f53\u662fPoll IO\u9636\u6bb5\u6838\u5fc3\u7ed3\u6784\u4f53\u3002\u5b83\u4e3b\u8981\u662f\u4fdd\u5b58\u4e86IO\u76f8\u5173\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u56de   \u8c03\u3001\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u7b49\u4fe1\u606f\u3002 2 watcher_queue\u89c2\u5bdf\u8005\u961f\u5217\u3002\u6240\u6709\u9700\u8981Libuv\u5904\u7406\u7684IO\u89c2\u5bdf\u8005\u90fd\u6302\u8f7d\u5728\u8fd9\u4e2a\u961f\u5217\u91cc\uff0cLibuv\u5728Poll IO\u9636\u6bb5\u4f1a\u9010\u4e2a\u5904\u7406\u3002</p> <p>\u4e0b\u9762\u6211\u4eec\u5f00\u59cb\u5206\u6790Poll IO\u9636\u6bb5\u3002\u5148\u770b\u7b2c\u4e00\u6bb5\u903b\u8f91\u3002</p> <pre><code>     // \u6ca1\u6709IO\u89c2\u5bdf\u8005\uff0c\u5219\u76f4\u63a5\u8fd4\u56de  \n     if (loop-&gt;nfds == 0) {  \n        assert(QUEUE_EMPTY(&amp;loop-&gt;watcher_queue));  \n        return;  \n      }  \n      // \u904d\u5386IO\u89c2\u5bdf\u8005\u961f\u5217  \n      while (!QUEUE_EMPTY(&amp;loop-&gt;watcher_queue)) {  \n          // \u53d6\u51fa\u5f53\u524d\u5934\u8282\u70b9  \n        q = QUEUE_HEAD(&amp;loop-&gt;watcher_queue);  \n        // \u8131\u79bb\u961f\u5217  \n        QUEUE_REMOVE(q);  \n        // \u521d\u59cb\u5316\uff08\u91cd\u7f6e\uff09\u8282\u70b9\u7684\u524d\u540e\u6307\u9488  \n        QUEUE_INIT(q);  \n        // \u901a\u8fc7\u7ed3\u6784\u4f53\u6210\u529f\u83b7\u53d6\u7ed3\u6784\u4f53\u9996\u5730\u5740  \n        w = QUEUE_DATA(q, uv__io_t, watcher_queue);  \n        // \u8bbe\u7f6e\u5f53\u524d\u611f\u5174\u8da3\u7684\u4e8b\u4ef6  \n        e.events = w-&gt;pevents;  \n        /* \n              \u8fd9\u91cc\u4f7f\u7528\u4e86fd\u5b57\u6bb5\uff0c\u4e8b\u4ef6\u89e6\u53d1\u540e\u518d\u901a\u8fc7fd\u4ecewatchs\n              \u5b57\u6bb5\u91cc\u627e\u5230\u5bf9\u5e94\u7684IO\u89c2\u5bdf\u8005\uff0c\u6ca1\u6709\u4f7f\u7528ptr\u6307\u5411IO\u89c2\u5bdf\u8005\u7684\u65b9\u6848  \n            */\n        e.data.fd = w-&gt;fd;  \n        // \u5982\u679cw-&gt;events\u521d\u59cb\u5316\u7684\u65f6\u5019\u4e3a0\uff0c\u5219\u65b0\u589e\uff0c\u5426\u5219\u4fee\u6539  \n        if (w-&gt;events == 0)  \n          op = EPOLL_CTL_ADD;  \n        else  \n          op = EPOLL_CTL_MOD;  \n        // \u4fee\u6539epoll\u7684\u6570\u636e  \n        epoll_ctl(loop-&gt;backend_fd, op, w-&gt;fd, &amp;e)  \n        // \u8bb0\u5f55\u5f53\u524d\u52a0\u5230epoll\u65f6\u7684\u72b6\u6001   \n        w-&gt;events = w-&gt;pevents;  \n      }  \n</code></pre> <p>\u7b2c\u4e00\u6b65\u9996\u5148\u904d\u5386IO\u89c2\u5bdf\u8005\uff0c\u4fee\u6539epoll\u7684\u6570\u636e\u3002\u7136\u540e\u51c6\u5907\u8fdb\u5165\u7b49\u5f85\u3002</p> <p><pre><code>      psigset = NULL;  \n     if (loop-&gt;flags &amp; UV_LOOP_BLOCK_SIGPROF) {  \n       sigemptyset(&amp;sigset);  \n       sigaddset(&amp;sigset, SIGPROF);  \n       psigset = &amp;sigset;  \n     }  \n       /* \n        http://man7.org/Linux/man-pages/man2/epoll_wait.2.html \n        pthread_sigmask(SIG_SETMASK, &amp;sigmask, &amp;origmask); \n        ready = epoll_wait(epfd, &amp;events, maxevents, timeout); \n        pthread_sigmask(SIG_SETMASK, &amp;origmask, NULL); \n        \u5373\u5c4f\u853dSIGPROF\u4fe1\u53f7\uff0c\u907f\u514dSIGPROF\u4fe1\u53f7\u5524\u9192epoll_wait\uff0c\u4f46\u662f\u5374\u6ca1\n            \u6709\u5c31\u7eea\u7684\u4e8b\u4ef6 \n       */  \n       nfds = epoll_pwait(loop-&gt;backend_fd,  \n                          events,  \n                          ARRAY_SIZE(events),  \n                          timeout,  \n                          psigset);  \n       // epoll\u53ef\u80fd\u963b\u585e\uff0c\u8fd9\u91cc\u9700\u8981\u66f4\u65b0\u4e8b\u4ef6\u5faa\u73af\u7684\u65f6\u95f4  \n       uv__update_time(loop)   ```\n</code></pre> epoll_wait\u53ef\u80fd\u4f1a\u5f15\u8d77\u4e3b\u7ebf\u7a0b\u963b\u585e\uff0c\u6240\u4ee5wait\u8fd4\u56de\u540e\u9700\u8981\u66f4\u65b0\u5f53\u524d\u7684\u65f6\u95f4\uff0c\u5426\u5219\u5728\u4f7f\u7528\u7684\u65f6\u5019\u65f6\u95f4\u5dee\u4f1a\u6bd4\u8f83\u5927\uff0c\u56e0\u4e3aLibuv\u4f1a\u5728\u6bcf\u8f6e\u65f6\u95f4\u5faa\u73af\u5f00\u59cb\u7684\u65f6\u5019\u7f13\u5b58\u5f53\u524d\u65f6\u95f4\u8fd9\u4e2a\u503c\u3002\u5176\u5b83\u5730\u65b9\u76f4\u63a5\u4f7f\u7528\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u90fd\u53bb\u83b7\u53d6\u3002\u4e0b\u9762\u6211\u4eec\u63a5\u7740\u770bepoll\u8fd4\u56de\u540e\u7684\u5904\u7406\uff08\u5047\u8bbe\u6709\u4e8b\u4ef6\u89e6\u53d1\uff09\u3002</p> <pre><code>       // \u4fdd\u5b58epoll_wait\u8fd4\u56de\u7684\u4e00\u4e9b\u6570\u636e\uff0cmaybe_resize\u7533\u8bf7\u7a7a\u95f4\u7684\u65f6\u5019+2\u4e86\n       loop-&gt;watchers[loop-&gt;nwatchers] = (void*) events;  \n       loop-&gt;watchers[loop-&gt;nwatchers + 1] = (void*) (uintptr_t) nfds;  \n       for (i = 0; i &lt; nfds; i++) {  \n         // \u89e6\u53d1\u7684\u4e8b\u4ef6\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26  \n         pe = events + i;  \n         fd = pe-&gt;data.fd;  \n         // \u6839\u636efd\u83b7\u53d6IO\u89c2\u5bdf\u8005\uff0c\u89c1\u4e0a\u9762\u7684\u56fe  \n         w = loop-&gt;watchers[fd];  \n         // \u4f1a\u5176\u5b83\u56de\u8c03\u91cc\u88ab\u5220\u9664\u4e86\uff0c\u5219\u4eceepoll\u4e2d\u5220\u9664  \n         if (w == NULL) {  \n           epoll_ctl(loop-&gt;backend_fd, EPOLL_CTL_DEL, fd, pe);  \n           continue;  \n         }  \n         if (pe-&gt;events != 0) {  \n            /*\n                \u7528\u4e8e\u4fe1\u53f7\u5904\u7406\u7684IO\u89c2\u5bdf\u8005\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u89e6\u53d1\u4e86\uff0c\n                \u5373\u6709\u4fe1\u53f7\u53d1\u751f\u3002  \n            */\n           if (w == &amp;loop-&gt;signal_io_watcher)  \n             have_signals = 1;  \n           else  \n             // \u4e00\u822c\u7684IO\u89c2\u5bdf\u8005\u5219\u6267\u884c\u56de\u8c03  \n             w-&gt;cb(loop, w, pe-&gt;events);  \n           nevents++;  \n         }  \n       }  \n       // \u6709\u4fe1\u53f7\u53d1\u751f\uff0c\u89e6\u53d1\u56de\u8c03  \n       if (have_signals != 0)  \n         loop-&gt;signal_io_watcher.cb(loop, \n                                    &amp;loop-&gt;signal_io_watcher, \n                                    POLLIN);  \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u5904\u7406IO\u4e8b\u4ef6\u5e76\u6267\u884cIO\u89c2\u5bdf\u8005\u91cc\u7684\u56de\u8c03\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u5730\u65b9\u5c31\u662f\u4fe1\u53f7\u5904\u7406\u7684IO\u89c2\u5bdf\u8005\u9700\u8981\u5355\u72ec\u5224\u65ad\uff0c\u5b83\u662f\u4e00\u4e2a\u5168\u5c40\u7684IO\u89c2\u5bdf\u8005\uff0c\u548c\u4e00\u822c\u52a8\u6001\u7533\u8bf7\u548c\u9500\u6bc1\u7684IO\u89c2\u5bdf\u8005\u4e0d\u4e00\u6837\uff0c\u5b83\u662f\u5b58\u5728\u4e8eLibuv\u8fd0\u884c\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u3002\u8fd9\u5c31\u662fPoll IO\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002</p>"},{"location":"chapter03-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/#35-close","title":"3.5 \u4e8b\u4ef6\u5faa\u73af\u4e4bclose","text":"<p>close\u662fLibuv\u6bcf\u8f6e\u4e8b\u4ef6\u5faa\u73af\u4e2d\u6700\u540e\u7684\u4e00\u4e2a\u9636\u6bb5\u3002uv_close\u7528\u4e8e\u5173\u95ed\u4e00\u4e2ahandle\uff0c\u5e76\u4e14\u6267\u884c\u4e00\u4e2a\u56de\u8c03\u3002uv_close\u4ea7\u751f\u7684\u4efb\u52a1\u4f1a\u63d2\u5165\u5230close\u9636\u6bb5\u7684\u961f\u5217\uff0c\u7136\u540e\u5728close\u9636\u6bb5\u88ab\u5904\u7406\u3002\u6211\u4eec\u770b\u4e00\u4e0buv_close\u51fd\u6570\u7684\u5b9e\u73b0\u3002</p> <pre><code>    void uv_close(uv_handle_t* handle, uv_close_cb close_cb) {  \n      // \u6b63\u5728\u5173\u95ed\uff0c\u4f46\u662f\u8fd8\u6ca1\u6267\u884c\u56de\u8c03\u7b49\u540e\u7f6e\u64cd\u4f5c  \n      handle-&gt;flags |= UV_HANDLE_CLOSING;  \n      handle-&gt;close_cb = close_cb;  \n\n      switch (handle-&gt;type) { \n      case UV_PREPARE:  \n        uv__prepare_close((uv_prepare_t*)handle);  \n        break;  \n      case UV_CHECK:  \n        uv__check_close((uv_check_t*)handle);  \n        break;  \n        ...  \n      default:  \n        assert(0);  \n      }  \n      uv__make_close_pending(handle);  \n    }  \n</code></pre> <p>uv_close\u8bbe\u7f6e\u56de\u8c03\u548c\u72b6\u6001\uff0c\u7136\u540e\u6839\u636ehandle\u7c7b\u578b\u8c03\u5bf9\u5e94\u7684close\u51fd\u6570\uff0c\u4e00\u822c\u5c31\u662fstop\u8fd9\u4e2ahandle\uff0c\u89e3\u9664IO\u89c2\u5bdf\u8005\u6ce8\u518c\u7684\u4e8b\u4ef6\uff0c\u4ece\u4e8b\u4ef6\u5faa\u73af\u7684handle\u961f\u5217\u79fb\u9664\u8be5handle\u7b49\u7b49\uff0c\u6bd4\u5982prepare\u7684close\u51fd\u6570\u53ea\u662f\u628ahandle\u4ece\u961f\u5217\u4e2d\u79fb\u9664\u3002</p> <pre><code>    void uv__prepare_close(uv_prepare_t* handle) {   \n        uv_prepare_stop(handle);       \n    }\n    int uv_prepare_stop(uv_prepare__t* handle) {                                  \n       QUEUE_REMOVE(&amp;handle-&gt;queue);                                             \n       uv__handle_stop(handle);                                                  \n       return 0;                                                                 \n    }      \n</code></pre> <p>\u6839\u636e\u4e0d\u540c\u7684handle\u505a\u4e0d\u540c\u7684\u5904\u7406\u540e\uff0c\u63a5\u7740\u6267\u884cuv__make_close_pending\u5f80close\u961f\u5217\u8ffd\u52a0\u8282\u70b9\u3002</p> <pre><code>    // \u5934\u63d2\u6cd5\u63d2\u5165closing\u961f\u5217\uff0c\u5728closing\u9636\u6bb5\u88ab\u6267\u884c  \n    void uv__make_close_pending(uv_handle_t* handle) {  \n      handle-&gt;next_closing = handle-&gt;loop-&gt;closing_handles;  \n      handle-&gt;loop-&gt;closing_handles = handle;  \n    }  \n</code></pre> <p>\u7136\u540e\u5728close\u9636\u6bb5\u9010\u4e2a\u5904\u7406\u3002\u6211\u4eec\u770b\u4e00\u4e0bclose\u9636\u6bb5\u7684\u5904\u7406\u903b\u8f91</p> <pre><code>    // \u6267\u884cclosing\u9636\u6bb5\u7684\u7684\u56de\u8c03  \n    static void uv__run_closing_handles(uv_loop_t* loop) {  \n      uv_handle_t* p;  \n      uv_handle_t* q;  \n\n      p = loop-&gt;closing_handles;  \n      loop-&gt;closing_handles = NULL;  \n\n      while (p) {  \n        q = p-&gt;next_closing;  \n        uv__finish_close(p);  \n        p = q;  \n      }  \n    }  \n\n    // \u6267\u884cclosing\u9636\u6bb5\u7684\u56de\u8c03  \n    static void uv__finish_close(uv_handle_t* handle) {  \n      handle-&gt;flags |= UV_HANDLE_CLOSED;  \n      ...  \n      uv__handle_unref(handle); \n        // \u4ecehandle\u961f\u5217\u91cc\u79fb\u9664 \n      QUEUE_REMOVE(&amp;handle-&gt;handle_queue);  \n      if (handle-&gt;close_cb) {  \n        handle-&gt;close_cb(handle);  \n      }  \n    }  \n</code></pre> <p>uv__run_closing_handles\u4f1a\u9010\u4e2a\u6267\u884c\u6bcf\u4e2a\u4efb\u52a1\u8282\u70b9\u7684\u56de\u8c03\u3002</p>"},{"location":"chapter03-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/#36","title":"3.6 \u63a7\u5236\u4e8b\u4ef6\u5faa\u73af","text":"<p>Libuv\u901a\u8fc7uv__loop_alive\u51fd\u6570\u5224\u65ad\u4e8b\u4ef6\u5faa\u73af\u662f\u5426\u8fd8\u9700\u8981\u7ee7\u7eed\u6267\u884c\u3002\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9a\u4e49\u3002</p> <pre><code>    static int uv__loop_alive(const uv_loop_t* loop) {  \n      return uv__has_active_handles(loop) ||  \n             uv__has_active_reqs(loop) ||  \n             loop-&gt;closing_handles != NULL;  \n    }  \n</code></pre> <p>\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4e00\u4e2aclosing_handle\u7684\u5224\u65ad\u5462\uff1f\u4eceuv_run\u7684\u4ee3\u7801\u6765\u770b\uff0c\u6267\u884c\u5b8cclose\u9636\u6bb5\u540e\uff0c\u4f1a\u7acb\u523b\u6267\u884cuv__loop_alive\uff0c\u6b63\u5e38\u6765\u8bf4\uff0cclose\u9636\u6bb5\u7684\u961f\u5217\u662f\u7a7a\u7684\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u5728close\u56de\u8c03\u91cc\u53c8\u5f80close\u961f\u5217\u65b0\u589e\u4e86\u4e00\u4e2a\u8282\u70b9\uff0c\u800c\u8be5\u8282\u70b9\u4e0d\u4f1a\u5728\u672c\u8f6e\u7684close\u9636\u6bb5\u88ab\u6267\u884c\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6267\u884c\u5b8cclose\u9636\u6bb5\uff0c\u4f46\u662fclose\u961f\u5217\u4f9d\u7136\u6709\u8282\u70b9\uff0c\u5982\u679c\u76f4\u63a5\u9000\u51fa\uff0c\u5219\u65e0\u6cd5\u6267\u884c\u5bf9\u5e94\u7684\u56de\u8c03\u3002 \u6211\u4eec\u770b\u5230\u6709\u4e09\u79cd\u60c5\u51b5\uff0cLibuv\u8ba4\u4e3a\u4e8b\u4ef6\u5faa\u73af\u662f\u5b58\u6d3b\u7684\u3002\u5982\u679c\u6211\u4eec\u63a7\u5236\u8fd9\u4e09\u79cd\u6761\u4ef6\u5c31\u53ef\u4ee5\u63a7\u5236\u4e8b\u4ef6\u5faa\u73af\u7684\u7684\u9000\u51fa\u3002\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u7406\u89e3\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u3002</p> <pre><code>    const timeout = setTimeout(() =&gt; {  \n      console.log('never console')  \n    }, 5000);  \n    timeout.unref();  \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0csetTimeout\u7684\u56de\u8c03\u662f\u4e0d\u4f1a\u6267\u884c\u7684\u3002\u9664\u975e\u8d85\u65f6\u65f6\u95f4\u975e\u5e38\u77ed\uff0c\u77ed\u5230\u7b2c\u4e00\u8f6e\u4e8b\u4ef6\u5faa\u73af\u7684\u65f6\u5019\u5c31\u5230\u671f\u4e86\uff0c\u5426\u5219\u5728\u7b2c\u4e00\u8f6e\u4e8b\u4ef6\u5faa\u73af\u4e4b\u540e\uff0c\u7531\u4e8eunref\u7684\u5f71\u54cd\uff0c\u4e8b\u4ef6\u5faa\u73af\u76f4\u63a5\u9000\u51fa\u4e86\u3002unref\u5f71\u54cd\u7684\u5c31\u662fhandle\u8fd9\u4e2a\u6761\u4ef6\u3002\u8fd9\u65f6\u5019\u4e8b\u4ef6\u5faa\u73af\u4ee3\u7801\u5982\u4e0b\u3002</p> <pre><code>    while (r != 0 &amp;&amp; loop-&gt;stop_flag == 0) {  \n        uv__update_time(loop);  \n        uv__run_timers(loop);  \n        // ...  \n        // uv__loop_alive\u8fd4\u56defalse\uff0c\u76f4\u63a5\u8df3\u51fawhile\uff0c\u4ece\u800c\u9000\u51fa\u4e8b\u4ef6\u5faa\u73af  \n        r = uv__loop_alive(loop);  \n    }  \n</code></pre>"},{"location":"chapter04-%E7%BA%BF%E7%A8%8B%E6%B1%A0/","title":"\u7b2c\u56db\u7ae0 \u7ebf\u7a0b\u6c60","text":"<p>Libuv\u662f\u5355\u7ebf\u7a0b\u4e8b\u4ef6\u9a71\u52a8\u7684\u5f02\u6b65IO\u5e93\uff0c\u5bf9\u4e8e\u963b\u585e\u5f0f\u6216\u8017\u65f6\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u5728Libuv\u7684\u4e3b\u5faa\u73af\u91cc\u6267\u884c\u7684\u8bdd\uff0c\u5c31\u4f1a\u963b\u585e\u540e\u9762\u7684\u4efb\u52a1\u6267\u884c\uff0c\u6240\u4ee5Libuv\u91cc\u7ef4\u62a4\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u6c60\uff0c\u5b83\u8d1f\u8d23\u5904\u7406Libuv\u4e2d\u8017\u65f6\u6216\u8005\u5bfc\u81f4\u963b\u585e\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u6587\u4ef6IO\u3001DNS\u3001\u81ea\u5b9a\u4e49\u7684\u8017\u65f6\u4efb\u52a1\u3002\u7ebf\u7a0b\u6c60\u5728Libuv\u67b6\u6784\u4e2d\u7684\u4f4d\u7f6e\u5982\u56fe4-1\u6240\u793a\u3002</p> <p></p> <p>Libuv\u4e3b\u7ebf\u7a0b\u901a\u8fc7\u7ebf\u7a0b\u6c60\u63d0\u4f9b\u7684\u63a5\u53e3\u628a\u4efb\u52a1\u63d0\u4ea4\u7ed9\u7ebf\u7a0b\u6c60\uff0c\u7136\u540e\u7acb\u523b\u8fd4\u56de\u5230\u4e8b\u4ef6\u5faa\u73af\u4e2d\u7ee7\u7eed\u6267\u884c\uff0c\u7ebf\u7a0b\u6c60\u7ef4\u62a4\u4e86\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\uff0c\u591a\u4e2a\u5b50\u7ebf\u7a0b\u4f1a\u4e92\u65a5\u5730\u4ece\u4e2d\u6458\u4e0b\u4efb\u52a1\u8282\u70b9\u6267\u884c\uff0c\u5f53\u5b50\u7ebf\u7a0b\u6267\u884c\u4efb\u52a1\u5b8c\u6bd5\u540e\u4f1a\u901a\u77e5\u4e3b\u7ebf\u7a0b\uff0c\u4e3b\u7ebf\u7a0b\u5728\u4e8b\u4ef6\u5faa\u73af\u7684Poll IO\u9636\u6bb5\u5c31\u4f1a\u6267\u884c\u5bf9\u5e94\u7684\u56de\u8c03\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u7ebf\u7a0b\u6c60\u5728Libuv\u4e2d\u7684\u5b9e\u73b0\u3002</p>"},{"location":"chapter04-%E7%BA%BF%E7%A8%8B%E6%B1%A0/#41","title":"4.1\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u95f4\u901a\u4fe1","text":"<p>Libuv\u5b50\u7ebf\u7a0b\u548c\u4e3b\u7ebf\u7a0b\u7684\u901a\u4fe1\u662f\u4f7f\u7528uv_async_t\u7ed3\u6784\u4f53\u5b9e\u73b0\u7684\u3002Libuv\u4f7f\u7528loop-&gt;async_handles\u961f\u5217\u8bb0\u5f55\u6240\u6709\u7684uv_async_t\u7ed3\u6784\u4f53\uff0c\u4f7f\u7528loop-&gt;async_io_watcher\u4f5c\u4e3a\u6240\u6709uv_async_t\u7ed3\u6784\u4f53\u7684IO\u89c2\u5bdf\u8005\uff0c\u5373loop-&gt; async_handles\u961f\u5217\u4e0a\u6240\u6709\u7684handle\u90fd\u662f\u5171\u4eabasync_io_watcher\u8fd9\u4e2aIO\u89c2\u5bdf\u8005\u7684\u3002\u7b2c\u4e00\u6b21\u63d2\u5165\u4e00\u4e2auv_async_t\u7ed3\u6784\u4f53\u5230async_handle\u961f\u5217\u65f6\uff0c\u4f1a\u521d\u59cb\u5316IO\u89c2\u5bdf\u8005\uff0c\u5982\u679c\u518d\u6b21\u6ce8\u518c\u4e00\u4e2aasync_handle\uff0c\u53ea\u4f1a\u5728loop-&gt;async_handle\u961f\u5217\u548chandle\u961f\u5217\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u800c\u4e0d\u4f1a\u65b0\u589e\u4e00\u4e2aIO\u89c2\u5bdf\u8005\u3002\u5f53uv_async_t\u7ed3\u6784\u4f53\u5bf9\u5e94\u7684\u4efb\u52a1\u5b8c\u6210\u65f6\uff0c\u5b50\u7ebf\u7a0b\u4f1a\u8bbe\u7f6eIO\u89c2\u5bdf\u8005\u4e3a\u53ef\u8bfb\u3002Libuv\u5728\u4e8b\u4ef6\u5faa\u73af\u7684Poll IO\u9636\u6bb5\u5c31\u4f1a\u5904\u7406IO\u89c2\u5bdf\u8005\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0buv_async_t\u5728Libuv\u4e2d\u7684\u4f7f\u7528\u3002</p>"},{"location":"chapter04-%E7%BA%BF%E7%A8%8B%E6%B1%A0/#411","title":"4.1.1 \u521d\u59cb\u5316","text":"<p>\u4f7f\u7528uv_async_t\u4e4b\u524d\u9996\u5148\u9700\u8981\u6267\u884cuv_async_init\u8fdb\u884c\u521d\u59cb\u5316\u3002</p> <pre><code>    int uv_async_init(uv_loop_t* loop, \n                       uv_async_t* handle, \n                       uv_async_cb async_cb) {  \n      int err;  \n      // \u7ed9Libuv\u6ce8\u518c\u4e00\u4e2a\u89c2\u5bdf\u8005io  \n      err = uv__async_start(loop);  \n      if (err)  \n        return err;  \n      // \u8bbe\u7f6e\u76f8\u5173\u5b57\u6bb5\uff0c\u7ed9Libuv\u63d2\u5165\u4e00\u4e2ahandle  \n      uv__handle_init(loop, (uv_handle_t*)handle, UV_ASYNC);\n        // \u8bbe\u7f6e\u56de\u8c03  \n      handle-&gt;async_cb = async_cb;  \n        // \u521d\u59cb\u5316\u6807\u8bb0\u5b57\u6bb5\uff0c0\u8868\u793a\u6ca1\u6709\u4efb\u52a1\u5b8c\u6210\n      handle-&gt;pending = 0;  \n      // \u628auv_async_t\u63d2\u5165async_handle\u961f\u5217\n      QUEUE_INSERT_TAIL(&amp;loop-&gt;async_handles, &amp;handle-&gt;queue);  \n      uv__handle_start(handle); \n      return 0;  \n    }  \n</code></pre> <p>uv_async_init\u51fd\u6570\u4e3b\u8981\u521d\u59cb\u5316\u7ed3\u6784\u4f53uv_async_t\u7684\u4e00\u4e9b\u5b57\u6bb5\uff0c\u7136\u540e\u6267\u884cQUEUE_INSERT_TAIL\u7ed9Libuv\u7684async_handles\u961f\u5217\u8ffd\u52a0\u4e00\u4e2a\u8282\u70b9\u3002\u6211\u4eec\u770b\u5230\u8fd8\u6709\u4e00\u4e2auv__async_start\u51fd\u6570\u3002\u6211\u4eec\u770b\u4e00\u4e0buv__async_start\u7684\u5b9e\u73b0\u3002 </p> <pre><code>    static int uv__async_start(uv_loop_t* loop) {  \n      int pipefd[2];  \n      int err;  \n      // uv__async_start\u53ea\u6267\u884c\u4e00\u6b21\uff0c\u6709fd\u5219\u4e0d\u9700\u8981\u6267\u884c\u4e86  \n      if (loop-&gt;async_io_watcher.fd != -1)  \n        return 0;  \n      // \u83b7\u53d6\u4e00\u4e2a\u7528\u4e8e\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684fd\uff08Linux\u7684eventfd\u673a\u5236\uff09  \n      err = uv__async_eventfd();  \n      /*\n         \u6210\u529f\u5219\u4fdd\u5b58fd\uff0c\u5931\u8d25\u8bf4\u660e\u4e0d\u652f\u6301eventfd\uff0c\n          \u5219\u4f7f\u7528\u7ba1\u9053\u901a\u4fe1\u4f5c\u4e3a\u8fdb\u7a0b\u95f4\u901a\u4fe1  \n        */\n      if (err &gt;= 0) {  \n        pipefd[0] = err;  \n        pipefd[1] = -1;  \n      }  \n      else if (err == UV_ENOSYS) {  \n        // \u4e0d\u652f\u6301eventfd\u5219\u4f7f\u7528\u533f\u540d\u7ba1\u9053  \n        err = uv__make_pipe(pipefd, UV__F_NONBLOCK);  \n    #if defined(__Linux__)  \n        if (err == 0) {  \n          char buf[32];  \n          int fd;  \n          snprintf(buf, sizeof(buf), \"/proc/self/fd/%d\", pipefd[0]);         // \u901a\u8fc7\u4e00\u4e2afd\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u7ba1\u9053\u7684\u8bfb\u5199\uff0c\u9ad8\u7ea7\u7528\u6cd5  \n          fd = uv__open_cloexec(buf, O_RDWR);  \n          if (fd &gt;= 0) {  \n            // \u5173\u6389\u65e7\u7684  \n            uv__close(pipefd[0]);  \n            uv__close(pipefd[1]);  \n            // \u8d4b\u503c\u65b0\u7684  \n            pipefd[0] = fd;  \n            pipefd[1] = fd;  \n          }  \n        }  \n    #endif  \n      }  \n      // err\u5927\u4e8e\u7b49\u4e8e0\u8bf4\u660e\u62ff\u5230\u4e86\u901a\u4fe1\u7684\u8bfb\u5199\u4e24\u7aef  \n      if (err &lt; 0)  \n        return err;  \n      /*\n          \u521d\u59cb\u5316IO\u89c2\u5bdf\u8005async_io_watcher\uff0c\n          \u628a\u8bfb\u7aef\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fdd\u5b58\u5230IO\u89c2\u5bdf\u8005\n        */  \n      uv__io_init(&amp;loop-&gt;async_io_watcher, uv__async_io, pipefd[0]);  \n      // \u6ce8\u518cIO\u89c2\u5bdf\u8005\u5230loop\u91cc\uff0c\u5e76\u6ce8\u518c\u611f\u5174\u8da3\u7684\u4e8b\u4ef6POLLIN\uff0c\u7b49\u5f85\u53ef\u8bfb  \n      uv__io_start(loop, &amp;loop-&gt;async_io_watcher, POLLIN);\n        // \u4fdd\u5b58\u5199\u7aef\u6587\u4ef6\u63cf\u8ff0\u7b26  \n      loop-&gt;async_wfd = pipefd[1]; \n      return 0;  \n    }  \n</code></pre> <p>uv__async_start\u53ea\u4f1a\u6267\u884c\u4e00\u6b21\uff0c\u65f6\u673a\u5728\u7b2c\u4e00\u6b21\u6267\u884cuv_async_init\u7684\u65f6\u5019\u3002uv__async_start\u4e3b\u8981\u7684\u903b\u8f91\u5982\u4e0b 1 \u83b7\u53d6\u901a\u4fe1\u63cf\u8ff0\u7b26\uff08\u901a\u8fc7eventfd\u751f\u6210\u4e00\u4e2a\u901a\u4fe1\u7684fd\uff08\u5145\u5f53\u8bfb\u5199\u4e24\u7aef\uff09\u6216\u8005\u7ba1\u9053\u751f\u6210\u7ebf\u7a0b\u95f4\u901a\u4fe1\u7684\u4e24\u4e2afd\u8868\u793a\u8bfb\u7aef\u548c\u5199\u7aef\uff09\u3002 2 \u5c01\u88c5\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u548c\u56de\u8c03\u5230IO\u89c2\u5bdf\u8005\u7136\u540e\u8ffd\u52a0\u5230watcher_queue\u961f\u5217\uff0c\u5728Poll IO\u9636\u6bb5\uff0cLibuv\u4f1a\u6ce8\u518c\u5230epoll\u91cc\u9762\uff0c\u5982\u679c\u6709\u4efb\u52a1\u5b8c\u6210\uff0c\u4e5f\u4f1a\u5728Poll IO\u9636\u6bb5\u6267\u884c\u56de\u8c03\u3002 3 \u4fdd\u5b58\u5199\u7aef\u63cf\u8ff0\u7b26\u3002\u4efb\u52a1\u5b8c\u6210\u65f6\u901a\u8fc7\u5199\u7aeffd\u901a\u77e5\u4e3b\u7ebf\u7a0b\u3002 \u6211\u4eec\u770b\u5230uv__async_start\u51fd\u6570\u91cc\u6709\u5f88\u591a\u83b7\u53d6\u901a\u4fe1\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u903b\u8f91\uff0c\u603b\u7684\u6765\u8bf4\uff0c\u662f\u4e3a\u4e86\u5b8c\u6210\u4e24\u7aef\u901a\u4fe1\u7684\u529f\u80fd\u3002\u521d\u59cb\u5316async\u7ed3\u6784\u4f53\u540e\uff0cLibuv\u7ed3\u6784\u5982\u56fe4-2\u6240\u793a\u3002</p> <p></p>"},{"location":"chapter04-%E7%BA%BF%E7%A8%8B%E6%B1%A0/#412","title":"4.1.2 \u901a\u77e5\u4e3b\u7ebf\u7a0b","text":"<p>\u521d\u59cb\u5316async\u7ed3\u6784\u4f53\u540e\uff0c\u5982\u679casync\u7ed3\u6784\u4f53\u5bf9\u5e94\u7684\u4efb\u52a1\u5b8c\u6210\u540e\uff0c\u5c31\u4f1a\u901a\u77e5\u4e3b\u7ebf\u7a0b\uff0c\u5b50\u7ebf\u7a0b\u901a\u8fc7\u8bbe\u7f6e\u8fd9\u4e2ahandle\u7684pending\u4e3a1\u6807\u8bb0\u4efb\u52a1\u5b8c\u6210\uff0c\u7136\u540e\u518d\u5f80\u7ba1\u9053\u5199\u7aef\u5199\u5165\u6807\u8bb0\uff0c\u901a\u77e5\u4e3b\u7ebf\u7a0b\u6709\u4efb\u52a1\u5b8c\u6210\u4e86\u3002</p> <pre><code>    int uv_async_send(uv_async_t* handle) {  \n      /* Do a cheap read first. */  \n      if (ACCESS_ONCE(int, handle-&gt;pending) != 0)  \n        return 0;  \n      /*\n          \u5982pending\u662f0\uff0c\u5219\u8bbe\u7f6e\u4e3a1\uff0c\u8fd4\u56de0\uff0c\u5982\u679c\u662f1\u5219\u8fd4\u56de1\uff0c\n          \u6240\u4ee5\u5982\u679c\u591a\u6b21\u8c03\u7528\u8be5\u51fd\u6570\u662f\u4f1a\u88ab\u5408\u5e76\u7684\n        */\n      if (cmpxchgi(&amp;handle-&gt;pending, 0, 1) == 0)  \n        uv__async_send(handle-&gt;loop); \n      return 0;  \n    }  \n\n    static void uv__async_send(uv_loop_t* loop) {  \n      const void* buf;  \n      ssize_t len;  \n      int fd;  \n      int r;  \n\n      buf = \"\";  \n      len = 1;  \n      fd = loop-&gt;async_wfd;  \n\n    #if defined(__Linux__)  \n      // \u8bf4\u660e\u7528\u7684\u662feventfd\u800c\u4e0d\u662f\u7ba1\u9053,eventfd\u65f6\u8bfb\u5199\u4e24\u7aef\u5bf9\u5e94\u540c\u4e00\u4e2afd  \n      if (fd == -1) {  \n        static const uint64_t val = 1;  \n        buf = &amp;val;  \n        len = sizeof(val);  \n        // \u89c1uv__async_start  \n        fd = loop-&gt;async_io_watcher.fd;  /* eventfd */  \n      }  \n    #endif  \n      // \u901a\u77e5\u8bfb\u7aef  \n      do  \n        r = write(fd, buf, len);  \n      while (r == -1 &amp;&amp; errno == EINTR);  \n\n      if (r == len)  \n        return;  \n\n      if (r == -1)  \n        if (errno == EAGAIN || errno == EWOULDBLOCK)  \n          return;  \n\n      abort();  \n    }  \n</code></pre> <p>uv_async_send\u9996\u5148\u62ff\u5230\u5199\u7aef\u5bf9\u5e94\u7684fd\uff0c\u7136\u540e\u8c03\u7528write\u51fd\u6570\uff0c\u6b64\u65f6\uff0c\u5f80\u7ba1\u9053\u7684\u5199\u7aef\u5199\u5165\u6570\u636e\uff0c\u6807\u8bb0\u6709\u4efb\u52a1\u5b8c\u6210\u3002\u6709\u5199\u5219\u5fc5\u7136\u6709\u8bfb\u3002\u8bfb\u7684\u903b\u8f91\u662f\u5728uv__io_poll\u4e2d\u5b9e\u73b0\u7684\u3002uv__io_poll\u51fd\u6570\u5373Libuv\u4e2dPoll IO\u9636\u6bb5\u6267\u884c\u7684\u51fd\u6570\u3002\u5728uv__io_poll\u4e2d\u4f1a\u53d1\u73b0\u7ba1\u9053\u53ef\u8bfb\uff0c\u7136\u540e\u6267\u884c\u5bf9\u5e94\u7684\u56de\u8c03uv__async_io\u3002</p>"},{"location":"chapter04-%E7%BA%BF%E7%A8%8B%E6%B1%A0/#413","title":"4.1.3 \u4e3b\u7ebf\u7a0b\u5904\u7406\u56de\u8c03","text":"<pre><code>    static void uv__async_io(uv_loop_t* loop, \n                               uv__io_t* w, \n                               unsigned int events) {  \n      char buf[1024];  \n      ssize_t r;  \n      QUEUE queue;  \n      QUEUE* q;  \n      uv_async_t* h;    \n\n      for (;;) {  \n        // \u6d88\u8d39\u6240\u6709\u7684\u6570\u636e  \n        r = read(w-&gt;fd, buf, sizeof(buf)); \n            // \u6570\u636e\u5927\u5c0f\u5927\u4e8ebuf\u957f\u5ea6\uff081024\uff09\uff0c\u5219\u7ee7\u7eed\u6d88\u8d39\n        if (r == sizeof(buf))  \n          continue; \n            // \u6210\u529f\u6d88\u8d39\u5b8c\u6bd5\uff0c\u8df3\u51fa\u6d88\u8d39\u7684\u903b\u8f91\n        if (r != -1)  \n          break;  \n            // \u8bfb\u7e41\u5fd9\n        if (errno == EAGAIN || errno == EWOULDBLOCK)  \n          break;  \n            // \u8bfb\u88ab\u4e2d\u65ad\uff0c\u7ee7\u7eed\u8bfb\n        if (errno == EINTR)  \n          continue;  \n        abort();  \n      }  \n      // \u628aasync_handles\u961f\u5217\u91cc\u7684\u6240\u6709\u8282\u70b9\u90fd\u79fb\u5230queue\u53d8\u91cf\u4e2d  \n      QUEUE_MOVE(&amp;loop-&gt;async_handles, &amp;queue);  \n      while (!QUEUE_EMPTY(&amp;queue)) {  \n        // \u9010\u4e2a\u53d6\u51fa\u8282\u70b9  \n        q = QUEUE_HEAD(&amp;queue);  \n        // \u6839\u636e\u7ed3\u6784\u4f53\u5b57\u6bb5\u83b7\u53d6\u7ed3\u6784\u4f53\u9996\u5730\u5740  \n        h = QUEUE_DATA(q, uv_async_t, queue);  \n        // \u4ece\u961f\u5217\u4e2d\u79fb\u9664\u8be5\u8282\u70b9  \n        QUEUE_REMOVE(q);  \n        // \u91cd\u65b0\u63d2\u5165async_handles\u961f\u5217\uff0c\u7b49\u5f85\u4e0b\u6b21\u4e8b\u4ef6  \n        QUEUE_INSERT_TAIL(&amp;loop-&gt;async_handles, q);  \n        /* \n         \u5c06\u7b2c\u4e00\u4e2a\u53c2\u6570\u548c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u7b49\uff0c \n         \u5219\u5c06\u7b2c\u4e09\u53c2\u6570\u5199\u5165\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u503c\uff0c \n         \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u503c\u3002 \n        */  \n        /*\n              \u5224\u65ad\u89e6\u53d1\u4e86\u54ea\u4e9basync\u3002pending\u5728uv_async_send\u91cc\u8bbe\u7f6e\u62101\uff0c          \n              \u5982\u679cpending\u7b49\u4e8e1\uff0c\u5219\u6e050\uff0c\u8fd4\u56de1.\u5982\u679cpending\u7b49\u4e8e0\uff0c\u5219\u8fd4\u56de0\n            */\n        if (cmpxchgi(&amp;h-&gt;pending, 1, 0) == 0)  \n          continue;  \n\n        if (h-&gt;async_cb == NULL)  \n          continue;  \n        // \u6267\u884c\u4e0a\u5c42\u56de\u8c03  \n        h-&gt;async_cb(h);  \n      }  \n    }  \n</code></pre> <p>uv__async_io\u4f1a\u904d\u5386async_handles\u961f\u5217\uff0cpending\u7b49\u4e8e1\u7684\u8bdd\u8bf4\u660e\u4efb\u52a1\u5b8c\u6210\uff0c\u7136\u540e\u6267\u884c\u5bf9\u5e94\u7684\u56de\u8c03\u5e76\u6e05\u9664\u6807\u8bb0\u4f4d\u3002</p>"},{"location":"chapter04-%E7%BA%BF%E7%A8%8B%E6%B1%A0/#42","title":"4.2 \u7ebf\u7a0b\u6c60\u7684\u5b9e\u73b0","text":"<p>\u4e86\u89e3\u4e86Libuv\u4e2d\u5b50\u7ebf\u7a0b\u548c\u4e3b\u7ebf\u7a0b\u7684\u901a\u4fe1\u673a\u5236\u540e\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u7ebf\u7a0b\u6c60\u7684\u5b9e\u73b0\u3002</p>"},{"location":"chapter04-%E7%BA%BF%E7%A8%8B%E6%B1%A0/#421","title":"4.2.1 \u7ebf\u7a0b\u6c60\u7684\u521d\u59cb\u5316","text":"<p>\u7ebf\u7a0b\u6c60\u662f\u61d2\u521d\u59cb\u5316\u7684\uff0cNode.js\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u521b\u5efa\u5b50\u7ebf\u7a0b\uff0c\u800c\u662f\u5728\u63d0\u4ea4\u7b2c\u4e00\u4e2a\u4efb\u52a1\u7ed9\u7ebf\u7a0b\u6c60\u65f6\uff0c\u7ebf\u7a0b\u6c60\u624d\u5f00\u59cb\u521d\u59cb\u5316\u3002\u6211\u4eec\u5148\u770b\u7ebf\u7a0b\u6c60\u7684\u521d\u59cb\u5316\u903b\u8f91\uff0c\u7136\u540e\u518d\u770b\u5b83\u7684\u4f7f\u7528\u3002</p> <pre><code>    static void init_threads(void) {  \n      unsigned int i;  \n      const char* val; \n      // \u9ed8\u8ba4\u7ebf\u7a0b\u65704\u4e2a\uff0cstatic uv_thread_t default_threads[4];  \n      nthreads = ARRAY_SIZE(default_threads);  \n      // \u5224\u65ad\u7528\u6237\u662f\u5426\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6e\u4e86\u7ebf\u7a0b\u6570\uff0c\u662f\u7684\u8bdd\u53d6\u7528\u6237\u5b9a\u4e49\u7684  \n      val = getenv(\"UV_THREADPOOL_SIZE\");  \n      if (val != NULL)  \n        nthreads = atoi(val);  \n      if (nthreads == 0)  \n        nthreads = 1;  \n      // #define MAX_THREADPOOL_SIZE 128\u6700\u591a128\u4e2a\u7ebf\u7a0b  \n      if (nthreads &gt; MAX_THREADPOOL_SIZE)  \n        nthreads = MAX_THREADPOOL_SIZE;  \n\n      threads = default_threads;  \n      // \u8d85\u8fc7\u9ed8\u8ba4\u5927\u5c0f\uff0c\u91cd\u65b0\u5206\u914d\u5185\u5b58  \n      if (nthreads &gt; ARRAY_SIZE(default_threads)) {  \n            threads = uv__malloc(nthreads * sizeof(threads[0]));  \n       }  \n      // \u521d\u59cb\u5316\u6761\u4ef6\u53d8\u91cf\uff0c\u7528\u4e8e\u6709\u4efb\u52a1\u65f6\u5524\u9192\u5b50\u7ebf\u7a0b\uff0c\u6ca1\u6709\u4efb\u52a1\u65f6\u6302\u8d77\u5b50\u7ebf\u7a0b  \n      if (uv_cond_init(&amp;cond))  \n        abort();  \n      // \u521d\u59cb\u5316\u4e92\u65a5\u53d8\u91cf\uff0c\u7528\u4e8e\u591a\u4e2a\u5b50\u7ebf\u7a0b\u4e92\u65a5\u8bbf\u95ee\u4efb\u52a1\u961f\u5217  \n      if (uv_mutex_init(&amp;mutex))  \n        abort();  \n\n      // \u521d\u59cb\u5316\u4e09\u4e2a\u961f\u5217  \n      QUEUE_INIT(&amp;wq);  \n      QUEUE_INIT(&amp;slow_io_pending_wq);  \n      QUEUE_INIT(&amp;run_slow_work_message);  \n\n      // \u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\uff0c\u5de5\u4f5c\u51fd\u6570\u4e3aworker\uff0csem\u4e3aworker\u5165\u53c2  \n      for (i = 0; i &lt; nthreads; i++)  \n        if (uv_thread_create(threads + i, worker, &amp;sem))  \n          abort();  \n    }  \n</code></pre> <p>\u7ebf\u7a0b\u6c60\u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u6839\u636e\u914d\u7f6e\u7684\u5b50\u7ebf\u7a0b\u6570\u521b\u5efa\u5bf9\u5e94\u6570\u91cf\u7684\u7ebf\u7a0b\u3002\u9ed8\u8ba4\u662f4\u4e2a\uff0c\u6700\u5927128\u4e2a\u5b50\u7ebf\u7a0b\uff08\u4e0d\u540c\u7248\u672c\u7684Libuv\u53ef\u80fd\u4f1a\u4e0d\u4e00\u6837\uff09\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u7684\u5927\u5c0f\u3002\u7ebf\u7a0b\u6c60\u7684\u521d\u59cb\u5316\u4e3b\u8981\u662f\u521d\u59cb\u5316\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\uff0c\u7136\u540e\u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\uff0c\u63a5\u7740\u5728\u6bcf\u4e2a\u7ebf\u7a0b\u91cc\u6267\u884cworker\u51fd\u6570\u5904\u7406\u4efb\u52a1\u3002\u540e\u9762\u6211\u4eec\u4f1a\u5206\u6790worker\u7684\u903b\u8f91\u3002</p>"},{"location":"chapter04-%E7%BA%BF%E7%A8%8B%E6%B1%A0/#422","title":"4.2.2 \u63d0\u4ea4\u4efb\u52a1\u5230\u7ebf\u7a0b\u6c60","text":"<p>\u4e86\u89e3\u7ebf\u7a0b\u6c60\u7684\u521d\u59cb\u5316\u4e4b\u540e\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u4f55\u7ed9\u7ebf\u7a0b\u6c60\u63d0\u4ea4\u4efb\u52a1</p> <pre><code>    // \u7ed9\u7ebf\u7a0b\u6c60\u63d0\u4ea4\u4e00\u4e2a\u4efb\u52a1  \n    void uv__work_submit(uv_loop_t* loop,  \n               struct uv__work* w,  \n               enum uv__work_kind kind,  \n               void (*work)(struct uv__work* w),  \n               void (*done)(struct uv__work* w, int status)){  \n       /* \n         \u4fdd\u8bc1\u5df2\u7ecf\u521d\u59cb\u5316\u7ebf\u7a0b\uff0c\u5e76\u53ea\u6267\u884c\u4e00\u6b21\uff0c\u6240\u4ee5\u7ebf\u7a0b\u6c60\u662f\u5728\u63d0\u4ea4\u7b2c\u4e00\u4e2a \n        \u4efb\u52a1\u7684\u65f6\u5019\u624d\u88ab\u521d\u59cb\u5316\uff0cinit_once -&gt; init_threads\n        */  \n      uv_once(&amp;once, init_once);  \n      w-&gt;loop = loop;  \n      w-&gt;work = work;  \n      w-&gt;done = done;  \n      post(&amp;w-&gt;wq, kind);  \n    }  \n</code></pre> <p>\u8fd9\u91cc\u628a\u4e1a\u52a1\u76f8\u5173\u7684\u51fd\u6570\u548c\u4efb\u52a1\u5b8c\u6210\u540e\u7684\u56de\u8c03\u51fd\u6570\u5c01\u88c5\u5230uv__work\u7ed3\u6784\u4f53\u4e2d\u3002uv__work\u7ed3\u6784\u5b9a\u4e49\u5982\u4e0b\u3002</p> <pre><code>    struct uv__work {  \n      void (*work)(struct uv__work *w);  \n      void (*done)(struct uv__work *w, int status);  \n      struct uv_loop_s* loop;  \n      void* wq[2];  \n    };  \n</code></pre> <p>\u7136\u540e\u8c03\u8c03\u7528post\u51fd\u6570\u5f80\u7ebf\u7a0b\u6c60\u7684\u961f\u5217\u4e2d\u52a0\u5165\u4e00\u4e2a\u65b0\u7684\u4efb\u52a1\u3002Libuv\u628a\u4efb\u52a1\u5206\u4e3a\u4e09\u79cd\u7c7b\u578b\uff0c\u6162IO\uff08DNS\u89e3\u6790\uff09\u3001\u5febIO\uff08\u6587\u4ef6\u64cd\u4f5c\uff09\u3001CPU\u5bc6\u96c6\u578b\u7b49\uff0ckind\u5c31\u662f\u8bf4\u660e\u4efb\u52a1\u7684\u7c7b\u578b\u7684\u3002\u6211\u4eec\u63a5\u7740\u770bpost\u51fd\u6570\u3002</p> <pre><code>    static void post(QUEUE* q, enum uv__work_kind kind) {  \n      // \u52a0\u9501\u8bbf\u95ee\u4efb\u52a1\u961f\u5217\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u961f\u5217\u662f\u7ebf\u7a0b\u6c60\u5171\u4eab\u7684  \n      uv_mutex_lock(&amp;mutex);  \n      // \u7c7b\u578b\u662f\u6162IO  \n      if (kind == UV__WORK_SLOW_IO) {  \n        /*  \n        \u63d2\u5165\u6162IO\u5bf9\u5e94\u7684\u961f\u5217\uff0cLibuv\u8fd9\u4e2a\u7248\u672c\u628a\u4efb\u52a1\u5206\u4e3a\u51e0\u79cd\u7c7b\u578b\uff0c \n       \u5bf9\u4e8e\u6162IO\u7c7b\u578b\u7684\u4efb\u52a1\uff0cLibuv\u662f\u5f80\u4efb\u52a1\u961f\u5217\u91cc\u9762\u63d2\u5165\u4e00\u4e2a\u7279\u6b8a\u7684\u8282\u70b9 \n       run_slow_work_message\uff0c\u7136\u540e\u7528slow_io_pending_wq\u7ef4\u62a4\u4e86\u4e00\u4e2a\u6162IO\n          \u4efb\u52a1\u7684\u961f\u5217\uff0c\u5f53\u5904\u7406\u5230run_slow_work_message\u8fd9\u4e2a\u8282\u70b9\u7684\u65f6\u5019\uff0c\n          Libuv\u4f1a\u4eceslow_io_pending_wq\u961f\u5217\u91cc\u9010\u4e2a\u53d6\u51fa\u4efb\u52a1\u8282\u70b9\u6765\u6267\u884c\u3002  \n        */  \n        QUEUE_INSERT_TAIL(&amp;slow_io_pending_wq, q);  \n        /* \n          \u6709\u6162IO\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u9700\u8981\u7ed9\u4e3b\u961f\u5217wq\u63d2\u5165\u4e00\u4e2a\u6d88\u606f\u8282\u70b9\n              run_slow_work_message,\u8bf4\u660e\u6709\u6162IO\u4efb\u52a1\uff0c\u6240\u4ee5\u5982\u679c\n              run_slow_work_message\u662f\u7a7a\uff0c\u8bf4\u660e\u8fd8\u6ca1\u6709\u63d2\u5165\u4e3b\u961f\u5217\u3002\u9700\u8981\u8fdb\u884c\n              q = &amp;run_slow_work_message;\u8d4b\u503c\uff0c\u7136\u540e\u628a\n              run_slow_work_message\u63d2\u5165\u4e3b\u961f\u5217\u3002\u5982\u679crun_slow_work_message\n              \u975e\u7a7a\uff0c\u8bf4\u660e\u5df2\u7ecf\u63d2\u5165\u7ebf\u7a0b\u6c60\u7684\u4efb\u52a1\u961f\u5217\u4e86\u3002\u89e3\u9501\u7136\u540e\u76f4\u63a5\u8fd4\u56de\u3002 \n        */  \n        if (!QUEUE_EMPTY(&amp;run_slow_work_message)) {  \n          uv_mutex_unlock(&amp;mutex);  \n          return;  \n            }  \n            // \u8bf4\u660erun_slow_work_message\u8fd8\u6ca1\u6709\u63d2\u5165\u961f\u5217\uff0c\u51c6\u5907\u63d2\u5165\u961f\u5217  \n        q = &amp;run_slow_work_message;  \n      }  \n      // \u628a\u8282\u70b9\u63d2\u5165\u4e3b\u961f\u5217\uff0c\u53ef\u80fd\u662f\u6162IO\u6d88\u606f\u8282\u70b9\u6216\u8005\u4e00\u822c\u4efb\u52a1  \n      QUEUE_INSERT_TAIL(&amp;wq, q);  \n      /*\n         \u6709\u7a7a\u95f2\u7ebf\u7a0b\u5219\u5524\u9192\u5b83\uff0c\u5982\u679c\u5927\u5bb6\u90fd\u5728\u5fd9\uff0c\n          \u5219\u7b49\u5230\u5b83\u5fd9\u5b8c\u540e\u5c31\u4f1a\u91cd\u65b0\u5224\u65ad\u662f\u5426\u8fd8\u6709\u65b0\u4efb\u52a1\n         */  \n      if (idle_threads &gt; 0)  \n        uv_cond_signal(&amp;cond); \n        // \u64cd\u4f5c\u5b8c\u961f\u5217\uff0c\u89e3\u9501 \n      uv_mutex_unlock(&amp;mutex);  \n    }  \n</code></pre> <p>\u8fd9\u5c31\u662fLibuv\u4e2d\u7ebf\u7a0b\u6c60\u7684\u751f\u4ea7\u8005\u903b\u8f91\u3002\u4efb\u52a1\u961f\u5217\u7684\u67b6\u6784\u5982\u56fe4-3\u6240\u793a\u3002</p> <p></p> <p>\u9664\u4e86\u4e0a\u9762\u63d0\u5230\u7684\uff0cLibuv\u8fd8\u63d0\u4f9b\u4e86\u53e6\u5916\u4e00\u79cd\u751f\u4ea7\u4efb\u52a1\u7684\u65b9\u5f0f\uff0c\u5373uv_queue_work\u51fd\u6570\uff0c\u5b83\u53ea\u63d0\u4ea4CPU\u5bc6\u96c6\u578b\u7684\u4efb\u52a1\uff08\u5728Node.js\u7684crypto\u6a21\u5757\u4e2d\u4f7f\u7528\uff09\u3002\u4e0b\u9762\u6211\u4eec\u770buv_queue_work\u7684\u5b9e\u73b0\u3002</p> <pre><code>    int uv_queue_work(uv_loop_t* loop,  \n                      uv_work_t* req,  \n                      uv_work_cb work_cb,  \n                      uv_after_work_cb after_work_cb) {  \n      if (work_cb == NULL)  \n        return UV_EINVAL;  \n\n      uv__req_init(loop, req, UV_WORK);  \n      req-&gt;loop = loop;  \n      req-&gt;work_cb = work_cb;  \n      req-&gt;after_work_cb = after_work_cb;  \n      uv__work_submit(loop,  \n              &amp;req-&gt;work_req,  \n              UV__WORK_CPU,  \n              uv__queue_work,  \n              uv__queue_done);  \n      return 0;  \n    }  \n</code></pre> <p>uv_queue_work\u51fd\u6570\u5176\u5b9e\u4e5f\u6ca1\u6709\u592a\u591a\u7684\u903b\u8f91\uff0c\u5b83\u4fdd\u5b58\u7528\u6237\u7684\u5de5\u4f5c\u51fd\u6570\u548c\u56de\u8c03\u5230request\u4e2d\u3002\u7136\u540e\u628auv__queue_work\u548cuv__queue_done\u5c01\u88c5\u5230uv__work\u4e2d\uff0c\u63a5\u7740\u63d0\u4ea4\u4efb\u52a1\u5230\u7ebf\u7a0b\u6c60\u4e2d\u3002\u6240\u4ee5\u5f53\u8fd9\u4e2a\u4efb\u52a1\u88ab\u6267\u884c\u7684\u65f6\u5019\u3002\u5b83\u4f1a\u6267\u884c\u5de5\u4f5c\u51fd\u6570uv__queue_work\u3002</p> <pre><code>    static void uv__queue_work(struct uv__work* w) {  \n      // \u901a\u8fc7\u7ed3\u6784\u4f53\u67d0\u5b57\u6bb5\u62ff\u5230\u7ed3\u6784\u4f53\u5730\u5740  \n      uv_work_t* req = container_of(w, uv_work_t, work_req);  \n      req-&gt;work_cb(req);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230uv__queue_work\u5176\u5b9e\u5c31\u662f\u5bf9\u7528\u6237\u5b9a\u4e49\u7684\u4efb\u52a1\u51fd\u6570\u8fdb\u884c\u4e86\u5c01\u88c5\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u731c\u5230\uff0cuv__queue_done\u4e5f\u53ea\u662f\u5bf9\u7528\u6237\u56de\u8c03\u7684\u7b80\u5355\u5c01\u88c5\uff0c\u5373\u5b83\u4f1a\u6267\u884c\u7528\u6237\u7684\u56de\u8c03\u3002</p>"},{"location":"chapter04-%E7%BA%BF%E7%A8%8B%E6%B1%A0/#423","title":"4.2.3 \u5904\u7406\u4efb\u52a1","text":"<p>\u6211\u4eec\u63d0\u4ea4\u4e86\u4efb\u52a1\u540e\uff0c\u7ebf\u7a0b\u81ea\u7136\u8981\u5904\u7406\uff0c\u521d\u59cb\u5316\u7ebf\u7a0b\u6c60\u7684\u65f6\u5019\u6211\u4eec\u5206\u6790\u8fc7\uff0cworker\u51fd\u6570\u662f\u8d1f\u8d23\u5904\u7406\u4efb\u52a1\u3002\u6211\u4eec\u770b\u4e00\u4e0bworker\u51fd\u6570\u7684\u903b\u8f91\u3002</p> <pre><code>    static void worker(void* arg) {  \n      struct uv__work* w;  \n      QUEUE* q;  \n      int is_slow_work;  \n      // \u7ebf\u7a0b\u542f\u52a8\u6210\u529f  \n      uv_sem_post((uv_sem_t*) arg);  \n      arg = NULL;  \n      // \u52a0\u9501\u4e92\u65a5\u8bbf\u95ee\u4efb\u52a1\u961f\u5217  \n      uv_mutex_lock(&amp;mutex);  \n      for (;;) {  \n        /* \n          1 \u961f\u5217\u4e3a\u7a7a \n          2 \u961f\u5217\u4e0d\u4e3a\u7a7a\uff0c\u4f46\u662f\u961f\u5217\u4e2d\u53ea\u6709\u6162IO\u4efb\u52a1\u4e14\u6b63\u5728\u6267\u884c\u7684\u6162IO\u4efb\u52a1\n                \u4e2a\u6570\u8fbe\u5230\u9608\u503c\u5219\u7a7a\u95f2\u7ebf\u7a0b\u52a0\u4e00\uff0c\u9632\u6b62\u6162IO\u5360\u7528\u8fc7\u591a\u7ebf\u7a0b\uff0c\u5bfc\u81f4\n                \u5176\u5b83\u5feb\u7684\u4efb\u52a1\u65e0\u6cd5\u5f97\u5230\u6267\u884c \n        */  \n        while (QUEUE_EMPTY(&amp;wq) ||  \n            (QUEUE_HEAD(&amp;wq) == &amp;run_slow_work_message &amp;&amp;  \n            QUEUE_NEXT(&amp;run_slow_work_message) == &amp;wq &amp;&amp;  \n            slow_io_work_running &gt;= slow_work_thread_threshold()))       {  \n          idle_threads += 1;  \n          // \u963b\u585e\uff0c\u7b49\u5f85\u5524\u9192  \n          uv_cond_wait(&amp;cond, &amp;mutex);  \n            // \u88ab\u5524\u9192\uff0c\u5f00\u59cb\u5e72\u6d3b\uff0c\u7a7a\u95f2\u7ebf\u7a0b\u6570\u51cf\u4e00   \n          idle_threads -= 1;  \n        }  \n        // \u53d6\u51fa\u5934\u7ed3\u70b9\uff0c\u5934\u6307\u70b9\u53ef\u80fd\u662f\u9000\u51fa\u6d88\u606f\u3001\u6162IO\uff0c\u4e00\u822c\u8bf7\u6c42  \n        q = QUEUE_HEAD(&amp;wq);  \n         // \u5982\u679c\u5934\u7ed3\u70b9\u662f\u9000\u51fa\u6d88\u606f\uff0c\u5219\u7ed3\u675f\u7ebf\u7a0b  \n            if (q == &amp;exit_message) {  \n              /*\n                 \u5524\u9192\u5176\u5b83\u56e0\u4e3a\u6ca1\u6709\u4efb\u52a1\u6b63\u963b\u585e\u7b49\u5f85\u4efb\u52a1\u7684\u7ebf\u7a0b\uff0c\n                  \u544a\u8bc9\u5b83\u4eec\u51c6\u5907\u9000\u51fa \n                */ \n          uv_cond_signal(&amp;cond);  \n          uv_mutex_unlock(&amp;mutex);  \n          break;  \n        }  \n        // \u79fb\u9664\u8282\u70b9   \n            QUEUE_REMOVE(q);  \n            // \u91cd\u7f6e\u524d\u540e\u6307\u9488  \n        QUEUE_INIT(q);    \n        is_slow_work = 0;  \n            /*  \n          \u5982\u679c\u5f53\u524d\u8282\u70b9\u7b49\u4e8e\u6162IO\u8282\u70b9\uff0c\u4e0a\u9762\u7684while\u53ea\u5224\u65ad\u4e86\u662f\u4e0d\u662f\u53ea\u6709\u6162\n              IO\u4efb\u52a1\u4e14\u8fbe\u5230\u9608\u503c\uff0c\u8fd9\u91cc\u662f\u4efb\u52a1\u961f\u5217\u91cc\u80af\u5b9a\u6709\u975e\u6162IO\u4efb\u52a1\uff0c\u53ef\u80fd\u6709\n              \u6162IO\uff0c\u5982\u679c\u6709\u6162IO\u5e76\u4e14\u6b63\u5728\u6267\u884c\u7684\u4e2a\u6570\u8fbe\u5230\u9608\u503c\uff0c\u5219\u5148\u4e0d\u5904\u7406\u8be5\u6162\n              IO\u4efb\u52a1\uff0c\u7ee7\u7eed\u5224\u65ad\u662f\u5426\u8fd8\u6709\u975e\u6162IO\u4efb\u52a1\u53ef\u6267\u884c\u3002 \n            */  \n        if (q == &amp;run_slow_work_message) {   \n          // \u8fbe\u5230\u9608\u503c\uff0c\u8be5\u8282\u70b9\u91cd\u65b0\u5165\u961f\uff0c\u56e0\u4e3a\u521a\u624d\u88ab\u5220\u9664\u4e86   \n          if (slow_io_work_running &gt;= slow_work_thread_threshold())          {  \n            QUEUE_INSERT_TAIL(&amp;wq, q);  \n            continue;  \n          }  \n          /* \n                  \u6ca1\u6709\u6162IO\u4efb\u52a1\u5219\u7ee7\u7eed\uff0c\u8fd9\u65f6\u5019run_slow_work_message\n                  \u5df2\u7ecf\u4ece\u961f\u5217\u4e2d\u88ab\u5220\u9664\uff0c\u4e0b\u6b21\u6709\u6162IO\u7684\u65f6\u5019\u91cd\u65b0\u5165\u961f  \n                */\n          if (QUEUE_EMPTY(&amp;slow_io_pending_wq))  \n            continue;  \n          // \u6709\u6162IO\uff0c\u5f00\u59cb\u5904\u7406\u6162IO\u4efb\u52a1  \n          is_slow_work = 1;  \n          /*\n                  \u6b63\u5728\u5904\u7406\u6162IO\u4efb\u52a1\u7684\u4e2a\u6570\u7d2f\u52a0\uff0c\u7528\u4e8e\u5176\u5b83\u7ebf\u7a0b\u5224\u65ad\u6162IO\u4efb\u52a1\u4e2a\n                  \u6570\u662f\u5426\u8fbe\u5230\u9608\u503c, slow_io_work_running\u662f\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u7684\u53d8\u91cf\n                */  \n          slow_io_work_running++;  \n          // \u6458\u4e0b\u4e00\u4e2a\u6162IO\u4efb\u52a1  \n          q = QUEUE_HEAD(&amp;slow_io_pending_wq);\n                // \u4ece\u6162IO\u961f\u5217\u79fb\u9664  \n          QUEUE_REMOVE(q);  \n          QUEUE_INIT(q);  \n          /* \n              \u53d6\u51fa\u4e00\u4e2a\u4efb\u52a1\u540e\uff0c\u5982\u679c\u8fd8\u6709\u6162IO\u4efb\u52a1\u5219\u628a\u6162IO\u6807\u8bb0\u8282\u70b9\u91cd\u65b0\u5165\n                   \u961f\uff0c\u8868\u793a\u8fd8\u6709\u6162IO\u4efb\u52a1\uff0c\u56e0\u4e3a\u4e0a\u9762\u628a\u8be5\u6807\u8bb0\u8282\u70b9\u51fa\u961f\u4e86  \n            */  \n          if (!QUEUE_EMPTY(&amp;slow_io_pending_wq)) {  \n            QUEUE_INSERT_TAIL(&amp;wq, &amp;run_slow_work_message);  \n            // \u6709\u7a7a\u95f2\u7ebf\u7a0b\u5219\u5524\u9192\u5b83\uff0c\u56e0\u4e3a\u8fd8\u6709\u4efb\u52a1\u5904\u7406  \n            if (idle_threads &gt; 0)  \n              uv_cond_signal(&amp;cond);  \n          }  \n        }  \n        // \u4e0d\u9700\u8981\u64cd\u4f5c\u961f\u5217\u4e86\uff0c\u5c3d\u5feb\u91ca\u653e\u9501  \n        uv_mutex_unlock(&amp;mutex);  \n        // q\u662f\u6162IO\u6216\u8005\u4e00\u822c\u4efb\u52a1  \n        w = QUEUE_DATA(q, struct uv__work, wq);  \n        // \u6267\u884c\u4e1a\u52a1\u7684\u4efb\u52a1\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4e00\u822c\u4f1a\u963b\u585e  \n        w-&gt;work(w);  \n        // \u51c6\u5907\u64cd\u4f5cloop\u7684\u4efb\u52a1\u5b8c\u6210\u961f\u5217\uff0c\u52a0\u9501  \n            uv_mutex_lock(&amp;w-&gt;loop-&gt;wq_mutex);  \n            // \u7f6e\u7a7a\u8bf4\u660e\u6267\u884c\u5b8c\u4e86\uff0c\u89c1cancel\u903b\u8f91  \n        w-&gt;work = NULL;    \n        /*\n              \u6267\u884c\u5b8c\u4efb\u52a1,\u63d2\u5165\u5230loop\u7684wq\u961f\u5217,\u5728uv__work_done\u7684\u65f6\u5019\u4f1a\n              \u6267\u884c\u8be5\u961f\u5217\u7684\u8282\u70b9  \n            */\n        QUEUE_INSERT_TAIL(&amp;w-&gt;loop-&gt;wq, &amp;w-&gt;wq);  \n        // \u901a\u77e5loop\u7684wq_async\u8282\u70b9  \n        uv_async_send(&amp;w-&gt;loop-&gt;wq_async);  \n            uv_mutex_unlock(&amp;w-&gt;loop-&gt;wq_mutex);  \n            // \u4e3a\u4e0b\u4e00\u8f6e\u64cd\u4f5c\u4efb\u52a1\u961f\u5217\u52a0\u9501  \n        uv_mutex_lock(&amp;mutex);  \n        /*\n              \u6267\u884c\u5b8c\u6162IO\u4efb\u52a1\uff0c\u8bb0\u5f55\u6b63\u5728\u6267\u884c\u7684\u6162IO\u4e2a\u6570\u53d8\u91cf\u51cf1\uff0c\n              \u4e0a\u9762\u52a0\u9501\u4fdd\u8bc1\u4e86\u4e92\u65a5\u8bbf\u95ee\u8fd9\u4e2a\u53d8\u91cf \n            */ \n        if (is_slow_work) {  \n          slow_io_work_running--;  \n        }  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u6d88\u8d39\u8005\u7684\u903b\u8f91\u4f3c\u4e4e\u6bd4\u8f83\u590d\u6742\uff0c\u5bf9\u4e8e\u6162IO\u7c7b\u578b\u7684\u4efb\u52a1\uff0cLibuv\u9650\u5236\u4e86\u5904\u7406\u6162IO\u4efb\u52a1\u7684\u7ebf\u7a0b\u6570\uff0c\u907f\u514d\u8017\u65f6\u6bd4\u8f83\u5c11\u7684\u4efb\u52a1\u5f97\u4e0d\u5230\u5904\u7406\u3002\u5176\u4f59\u7684\u903b\u8f91\u548c\u4e00\u822c\u7684\u7ebf\u7a0b\u6c60\u7c7b\u4f3c\uff0c\u5c31\u662f\u4e92\u65a5\u8bbf\u95ee\u4efb\u52a1\u961f\u5217\uff0c\u7136\u540e\u53d6\u51fa\u8282\u70b9\u6267\u884c\uff0c\u6267\u884c\u5b8c\u540e\u901a\u77e5\u4e3b\u7ebf\u7a0b\u3002\u7ed3\u6784\u5982\u56fe4-4\u6240\u793a\u3002</p> <p></p>"},{"location":"chapter04-%E7%BA%BF%E7%A8%8B%E6%B1%A0/#424","title":"4.2.4 \u901a\u77e5\u4e3b\u7ebf\u7a0b","text":"<p>\u7ebf\u7a0b\u6267\u884c\u5b8c\u4efb\u52a1\u540e\uff0c\u5e76\u4e0d\u662f\u76f4\u63a5\u6267\u884c\u7528\u6237\u56de\u8c03\uff0c\u800c\u662f\u901a\u77e5\u4e3b\u7ebf\u7a0b\uff0c\u7531\u4e3b\u7ebf\u7a0b\u7edf\u4e00\u5904\u7406\uff0c\u8fd9\u662fNode.js\u5355\u7ebf\u7a0b\u4e8b\u4ef6\u5faa\u73af\u7684\u8981\u6c42\uff0c\u4e5f\u907f\u514d\u4e86\u591a\u7ebf\u7a0b\u5e26\u6765\u7684\u590d\u6742\u95ee\u9898\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u5757\u7684\u903b\u8f91\u3002\u4e00\u5207\u8981\u4eceLibuv\u7684\u521d\u59cb\u5316\u5f00\u59cb</p> <pre><code>uv_default_loop();-&gt; uv_loop_init();-&gt; uv_async_init(loop, &amp;loop-&gt;wq_async, uv__work_done);\n</code></pre> <p>\u521a\u624d\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u8fc7\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u7684\u901a\u4fe1\u673a\u5236\uff0cwq_async\u662f\u7528\u4e8e\u7ebf\u7a0b\u6c60\u4e2d\u5b50\u7ebf\u7a0b\u548c\u4e3b\u7ebf\u7a0b\u901a\u4fe1\u7684async handle\uff0c\u5b83\u5bf9\u5e94\u7684\u56de\u8c03\u662fuv__work_done\u3002\u6240\u4ee5\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u7684\u7ebf\u7a0b\u4efb\u52a1\u5b8c\u6210\u65f6\uff0c\u901a\u8fc7uv_async_send(&amp;w-&gt;loop-&gt;wq_async)\u8bbe\u7f6eloop-&gt;wq_async.pending = 1\uff0c\u7136\u540e\u901a\u77e5IO\u89c2\u5bdf\u8005\uff0cLibuv\u5728Poll IO\u9636\u6bb5\u5c31\u4f1a\u6267\u884c\u8be5handle\u5bf9\u5e94\u7684\u56de\u8c03uv__work_done\u51fd\u6570\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u770b\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u903b\u8f91\u3002</p> <pre><code>    void uv__work_done(uv_async_t* handle) {  \n      struct uv__work* w;  \n      uv_loop_t* loop;  \n      QUEUE* q;  \n      QUEUE wq;  \n      int err;  \n      // \u901a\u8fc7\u7ed3\u6784\u4f53\u5b57\u6bb5\u83b7\u5f97\u7ed3\u6784\u4f53\u9996\u5730\u5740  \n      loop = container_of(handle, uv_loop_t, wq_async);  \n      // \u51c6\u5907\u5904\u7406\u961f\u5217\uff0c\u52a0\u9501  \n      uv_mutex_lock(&amp;loop-&gt;wq_mutex);  \n      /*   \n        loop-&gt;wq\u662f\u5df2\u5b8c\u6210\u7684\u4efb\u52a1\u961f\u5217\u3002\u628aloop-&gt;wq\u961f\u5217\u7684\u8282\u70b9\u5168\u90e8\u79fb\u5230\n          wp\u53d8\u91cf\u4e2d\uff0c\u8fd9\u6837\u4e00\u6765\u53ef\u4ee5\u5c3d\u5feb\u91ca\u653e\u9501  \n        */  \n      QUEUE_MOVE(&amp;loop-&gt;wq, &amp;wq);  \n      // \u4e0d\u9700\u8981\u4f7f\u7528\u4e86\uff0c\u89e3\u9501  \n      uv_mutex_unlock(&amp;loop-&gt;wq_mutex);  \n      // wq\u961f\u5217\u7684\u8282\u70b9\u6765\u81ea\u5b50\u7ebf\u7a0b\u63d2\u5165  \n      while (!QUEUE_EMPTY(&amp;wq)) {  \n        q = QUEUE_HEAD(&amp;wq);  \n        QUEUE_REMOVE(q); \n        w = container_of(q, struct uv__work, wq); \n            // \u7b49\u4e8euv__canceled\u8bf4\u660e\u8fd9\u4e2a\u4efb\u52a1\u88ab\u53d6\u6d88\u4e86 \n        err = (w-&gt;work == uv__cancelled) ? UV_ECANCELED : 0;  \n        // \u6267\u884c\u56de\u8c03  \n        w-&gt;done(w, err);  \n      }  \n    }  \n</code></pre> <p>\u8be5\u51fd\u6570\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u9010\u4e2a\u5904\u7406\u5df2\u5b8c\u6210\u7684\u4efb\u52a1\u8282\u70b9\uff0c\u6267\u884c\u56de\u8c03\uff0c\u5728Node.js\u4e2d\uff0c\u8fd9\u91cc\u7684\u56de\u8c03\u662fC++\u5c42\uff0c\u7136\u540e\u518d\u5230JS\u5c42\u3002\u7ed3\u6784\u56fe\u5982\u56fe4-5\u6240\u793a\u3002</p> <p></p>"},{"location":"chapter04-%E7%BA%BF%E7%A8%8B%E6%B1%A0/#425","title":"4.2.5 \u53d6\u6d88\u4efb\u52a1","text":"<p>\u7ebf\u7a0b\u6c60\u7684\u8bbe\u8ba1\u4e2d\uff0c\u53d6\u6d88\u4efb\u52a1\u662f\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u80fd\u529b\uff0c\u56e0\u4e3a\u5728\u7ebf\u7a0b\u91cc\u6267\u884c\u7684\u90fd\u662f\u4e00\u4e9b\u8017\u65f6\u6216\u8005\u5f15\u8d77\u963b\u585e\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u80fd\u53ca\u65f6\u53d6\u6d88\u4e00\u4e2a\u4efb\u52a1\uff0c\u5c06\u4f1a\u51cf\u8f7b\u5f88\u591a\u6ca1\u5fc5\u8981\u7684\u5904\u7406\u3002\u4e0d\u8fc7Libuv\u5b9e\u73b0\u4e2d\uff0c\u53ea\u6709\u5f53\u4efb\u52a1\u8fd8\u5728\u7b49\u5f85\u961f\u5217\u4e2d\u624d\u80fd\u88ab\u53d6\u6d88\uff0c\u5982\u679c\u4e00\u4e2a\u4efb\u52a1\u6b63\u5728\u88ab\u7ebf\u7a0b\u5904\u7406\uff0c\u5219\u65e0\u6cd5\u53d6\u6d88\u4e86\u3002\u6211\u4eec\u5148\u770b\u4e00\u4e0bLibuv\u4e2d\u662f\u5982\u4f55\u5b9e\u73b0\u53d6\u6d88\u4efb\u52a1\u7684\u3002Libuv\u63d0\u4f9b\u4e86uv__work_cancel\u51fd\u6570\u652f\u6301\u7528\u6237\u53d6\u6d88\u63d0\u4ea4\u7684\u4efb\u52a1\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5b83\u7684\u903b\u8f91\u3002 </p> <pre><code>    static int uv__work_cancel(uv_loop_t* loop, uv_req_t* req, struct uv__work* w) {  \n      int cancelled;  \n      // \u52a0\u9501\uff0c\u4e3a\u4e86\u628a\u8282\u70b9\u79fb\u51fa\u961f\u5217  \n      uv_mutex_lock(&amp;mutex);  \n      // \u52a0\u9501\uff0c\u4e3a\u4e86\u5224\u65adw-&gt;wq\u662f\u5426\u4e3a\u7a7a  \n      uv_mutex_lock(&amp;w-&gt;loop-&gt;wq_mutex);  \n      /* \n        cancelled\u4e3atrue\u8bf4\u660e\u4efb\u52a1\u8fd8\u5728\u7ebf\u7a0b\u6c60\u961f\u5217\u7b49\u5f85\u5904\u7406\n          1 \u5904\u7406\u5b8c\uff0cw-&gt;work == NULL\n          2 \u5904\u7406\u4e2d\uff0cQUEUE_EMPTY(&amp;w-&gt;wq)\u4e3atrue\uff0c\u56e0\n            \u4e3aworker\u5728\u6458\u4e0b\u4e00\u4e2a\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u91cd\u7f6eprev\u548cnext\u6307\u9488\n          3 \u672a\u5904\u7406\uff0c!QUEUE_EMPTY(&amp;w-&gt;wq)\u662ftrue \u4e14w-&gt;work != NULL\n      */  \n      cancelled = !QUEUE_EMPTY(&amp;w-&gt;wq) &amp;&amp; w-&gt;work != NULL;  \n      // \u4ece\u7ebf\u7a0b\u6c60\u4efb\u52a1\u961f\u5217\u4e2d\u5220\u9664\u8be5\u8282\u70b9  \n      if (cancelled)  \n        QUEUE_REMOVE(&amp;w-&gt;wq);  \n\n      uv_mutex_unlock(&amp;w-&gt;loop-&gt;wq_mutex);  \n      uv_mutex_unlock(&amp;mutex);  \n      // \u6b63\u5728\u6267\u884c\u6216\u8005\u5df2\u7ecf\u6267\u884c\u5b8c\u4e86\uff0c\u5219\u4e0d\u80fd\u53d6\u6d88  \n      if (!cancelled)  \n        return UV_EBUSY;  \n      // \u6253\u53d6\u6d88\u6807\u8bb0\uff0cLibuv\u6267\u884c\u56de\u8c03\u7684\u65f6\u5019\u7528\u5230  \n      w-&gt;work = uv__cancelled;  \n\n      uv_mutex_lock(&amp;loop-&gt;wq_mutex);  \n       /* \n         \u63d2\u5165loop\u7684wq\u961f\u5217\uff0c\u5bf9\u4e8e\u53d6\u6d88\u7684\u52a8\u4f5c\uff0cLibuv\u8ba4\u4e3a\u662f\u4efb\u52a1\u6267\u884c\u5b8c\u4e86\u3002\n            \u6240\u4ee5\u63d2\u5165\u5df2\u5b8c\u6210\u7684\u961f\u5217\uff0c\u6267\u884c\u56de\u8c03\u7684\u65f6\u5019\u4f1a\u901a\u77e5\u7528\u6237\u8be5\u4efb\u52a1\u7684\u6267\u884c\u7ed3\u679c\n            \u662f\u53d6\u6d88\uff0c\u9519\u8bef\u7801\u662fUV_ECANCELED\n       */  \n      QUEUE_INSERT_TAIL(&amp;loop-&gt;wq, &amp;w-&gt;wq);  \n      // \u901a\u77e5\u4e3b\u7ebf\u7a0b\u6709\u4efb\u52a1\u5b8c\u6210  \n      uv_async_send(&amp;loop-&gt;wq_async);  \n      uv_mutex_unlock(&amp;loop-&gt;wq_mutex);  \n\n      return 0;  \n    }  \n</code></pre> <p>\u5728Libuv\u4e2d\uff0c\u53d6\u6d88\u4efb\u52a1\u7684\u65b9\u5f0f\u5c31\u662f\u628a\u8282\u70b9\u4ece\u7ebf\u7a0b\u6c60\u5f85\u5904\u7406\u961f\u5217\u4e2d\u5220\u9664\uff0c\u7136\u540e\u6253\u4e0a\u53d6\u6d88\u7684\u6807\u8bb0\uff08w-&gt;work = uv__cancelled\uff09\uff0c\u63a5\u7740\u628a\u8be5\u8282\u70b9\u63d2\u5165\u5df2\u5b8c\u6210\u961f\u5217\uff0cLibuv\u5728\u5904\u7406\u5df2\u5b8c\u6210\u961f\u5217\u7684\u8282\u70b9\u65f6\uff0c\u5224\u65ad\u5982\u679cw-&gt;work == uv__cancelled\u5219\u5728\u6267\u884c\u7528\u6237\u56de\u8c03\u65f6\uff0c\u4f20\u5165\u9519\u8bef\u7801UV_ECANCELED\uff0c\u6211\u4eec\u770b\u5230uv__work_cancel\u8fd9\u4e2a\u51fd\u6570\u5b9a\u4e49\u524d\u9762\u52a0\u4e86\u4e00\u4e2astatic\uff0c\u8bf4\u660e\u8fd9\u4e2a\u51fd\u6570\u662f\u53ea\u5728\u672c\u6587\u4ef6\u5185\u4f7f\u7528\u7684\uff0cLibuv\u5bf9\u5916\u63d0\u4f9b\u7684\u53d6\u6d88\u4efb\u52a1\u7684\u63a5\u53e3\u662fuv_cancel\u3002</p>"},{"location":"chapter05-Libuv%E6%B5%81/","title":"\u7b2c\u4e94\u7ae0 Libuv\u6d41","text":"<p>\u6d41\u7684\u5b9e\u73b0\u5728Libuv\u91cc\u5360\u4e86\u5f88\u5927\u7684\u7bc7\u5e45\uff0c\u662f\u975e\u5e38\u6838\u5fc3\u7684\u903b\u8f91\u3002\u6d41\u7684\u672c\u8d28\u662f\u5c01\u88c5\u4e86\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u8bfb\u3001\u5199\uff0c\u8fde\u63a5\u3001\u76d1\u542c\u3002\u6211\u4eec\u9996\u5148\u770b\u770b\u6570\u636e\u7ed3\u6784\uff0c\u6d41\u5728Libuv\u91cc\u7528uv_stream_s\u8868\u793a\uff0c\u7ee7\u627f\u4e8euv_handle_s\u3002</p> <pre><code>    struct uv_stream_s {  \n        // uv_handle_s\u7684\u5b57\u6bb5  \n        void* data;          \n        // \u6240\u5c5e\u4e8b\u4ef6\u5faa\u73af     \n        uv_loop_t* loop;    \n        // handle\u7c7b\u578b      \n        uv_handle_type type;    \n        // \u5173\u95edhandle\u65f6\u7684\u56de\u8c03  \n        uv_close_cb close_cb;   \n        // \u7528\u4e8e\u63d2\u5165\u4e8b\u4ef6\u5faa\u73af\u7684handle\u961f\u5217  \n        void* handle_queue[2];  \n        union {                 \n            int fd;               \n            void* reserved[4];    \n        } u;        \n        // \u7528\u4e8e\u63d2\u5165\u4e8b\u4ef6\u5faa\u73af\u7684closing\u9636\u6bb5  \n        uv_handle_t* next_closing;   \n        // \u5404\u79cd\u6807\u8bb0   \n        unsigned int flags;  \n        // \u6d41\u62d3\u5c55\u7684\u5b57\u6bb5  \n        /*\n            \u6237\u5199\u5165\u6d41\u7684\u5b57\u8282\u5927\u5c0f\uff0c\u6d41\u7f13\u5b58\u7528\u6237\u7684\u8f93\u5165\uff0c\n            \u7136\u540e\u7b49\u5230\u53ef\u5199\u7684\u65f6\u5019\u624d\u6267\u884c\u771f\u6b63\u7684\u5199 \n            */ \n        size_t write_queue_size;   \n        // \u5206\u914d\u5185\u5b58\u7684\u51fd\u6570\uff0c\u5185\u5b58\u7531\u7528\u6237\u5b9a\u4e49\uff0c\u7528\u6765\u4fdd\u5b58\u8bfb\u53d6\u7684\u6570\u636e\n        uv_alloc_cb alloc_cb;    \n        // \u8bfb\u56de\u8c03                   \n        uv_read_cb read_cb;   \n        // \u8fde\u63a5\u8bf7\u6c42\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53  \n        uv_connect_t *connect_req;   \n        /*\n            \u5173\u95ed\u5199\u7aef\u7684\u65f6\u5019\uff0c\u53d1\u9001\u5b8c\u7f13\u5b58\u7684\u6570\u636e\uff0c\n            \u6267\u884cshutdown_req\u7684\u56de\u8c03\uff08shutdown_req\u5728uv_shutdown\u7684\u65f6\u5019\u8d4b\u503c\uff09 \n            */     \n        uv_shutdown_t *shutdown_req;  \n        /*\n            \u6d41\u5bf9\u5e94\u7684IO\u89c2\u5bdf\u8005\n            */\n        uv__io_t io_watcher;    \n        // \u7f13\u5b58\u5f85\u5199\u7684\u6570\u636e\uff0c\u8be5\u5b57\u6bb5\u7528\u4e8e\u63d2\u5165\u961f\u5217           \n        void* write_queue[2];         \n        // \u5df2\u7ecf\u5b8c\u6210\u4e86\u6570\u636e\u5199\u5165\u7684\u961f\u5217\uff0c\u8be5\u5b57\u6bb5\u7528\u4e8e\u63d2\u5165\u961f\u5217     \n        void* write_completed_queue[2];  \n        // \u6709\u8fde\u63a5\u5230\u6765\u5e76\u4e14\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u540e\uff0c\u6267\u884c\u7684\u56de\u8c03  \n        uv_connection_cb connection_cb;  \n        // \u64cd\u4f5c\u6d41\u65f6\u51fa\u9519\u7801  \n        int delayed_error;    \n        // accept\u8fd4\u56de\u7684\u901a\u4fe1socket\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0    \n            int accepted_fd;      \n        // \u540c\u4e0a\uff0c\u7528\u4e8eIPC\u65f6\uff0c\u7f13\u5b58\u591a\u4e2a\u4f20\u9012\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\n        void* queued_fds;  \n    }  \n</code></pre> <p>\u6d41\u7684\u5b9e\u73b0\u4e2d\uff0c\u6700\u6838\u5fc3\u7684\u5b57\u6bb5\u662fIO\u89c2\u5bdf\u8005\uff0c\u5176\u4f59\u7684\u5b57\u6bb5\u662f\u548c\u6d41\u7684\u6027\u8d28\u76f8\u5173\u7684\u3002IO\u89c2\u5bdf\u8005\u5c01\u88c5\u4e86\u6d41\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e8b\u4ef6\u89e6\u53d1\u65f6\u7684\u56de\u8c03\u3002\u6bd4\u5982\u8bfb\u4e00\u4e2a\u6d41\u3001\u5199\u4e00\u4e2a\u6d41\u3001\u5173\u95ed\u4e00\u4e2a\u6d41\u3001\u8fde\u63a5\u4e00\u4e2a\u6d41\u3001\u76d1\u542c\u4e00\u4e2a\u6d41\uff0c\u5728uv_stream_s\u4e2d\u90fd\u6709\u5bf9\u5e94\u7684\u5b57\u6bb5\u53bb\u652f\u6301\u3002\u4f46\u662f\u672c\u8d28\u4e0a\u662f\u9760IO\u89c2\u5bdf\u8005\u53bb\u9a71\u52a8\u7684\u3002</p> <p>1 \u8bfb\u4e00\u4e2a\u6d41\uff0c\u5c31\u662fIO\u89c2\u5bdf\u8005\u4e2d\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u53ef\u8bfb\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u6267\u884c\u7528\u6237\u7684\u8bfb\u56de\u8c03\u3002 2 \u5199\u4e00\u4e2a\u6d41\uff0c\u5148\u628a\u6570\u636e\u5199\u5230\u6d41\u4e2d\uff0c\u7b49\u5230IO\u89c2\u5bdf\u8005\u4e2d\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u5199\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u6267\u884c\u771f\u6b63\u7684\u5199\u5165\uff0c\u5e76\u6267\u884c\u7528\u6237\u7684\u5199\u7ed3\u675f\u56de\u8c03\u3002 3 \u5173\u95ed\u4e00\u4e2a\u6d41\uff0c\u5c31\u662fIO\u89c2\u5bdf\u8005\u4e2d\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u5199\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u5c31\u4f1a\u6267\u884c\u5173\u95ed\u6d41\u7684\u5199\u7aef\u3002\u5982\u679c\u6d41\u4e2d\u8fd8\u6709\u6570\u636e\u6ca1\u6709\u5199\u5b8c\uff0c\u5219\u5148\u5199\u5b8c\uff08\u6bd4\u5982\u53d1\u9001\uff09\u540e\u518d\u6267\u884c\u5173\u95ed\u64cd\u4f5c\uff0c\u63a5\u7740\u6267\u884c\u7528\u6237\u7684\u56de\u8c03\u3002 4 \u8fde\u63a5\u6d41\uff0c\u6bd4\u5982\u4f5c\u4e3a\u5ba2\u6237\u7aef\u53bb\u8fde\u63a5\u670d\u52a1\u5668\u3002\u5c31\u662fIO\u89c2\u5bdf\u8005\u4e2d\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u8bfb\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff08\u6bd4\u5982\u5efa\u7acb\u4e09\u6b21\u63e1\u624b\u6210\u529f\uff09\uff0c\u6267\u884c\u7528\u6237\u7684\u56de\u8c03\u3002 5 \u76d1\u542c\u6d41\uff0c\u5c31\u662fIO\u89c2\u5bdf\u8005\u4e2d\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u8bfb\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff08\u6bd4\u5982\u6709\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u7684\u8fde\u63a5\uff09\uff0c\u6267\u884c\u7528\u6237\u7684\u56de\u8c03\u3002</p> <p>\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u6d41\u7684\u5177\u4f53\u5b9e\u73b0</p>"},{"location":"chapter05-Libuv%E6%B5%81/#51","title":"5.1 \u521d\u59cb\u5316\u6d41","text":"<p>\u5728\u4f7f\u7528uv_stream_t\u4e4b\u524d\u9700\u8981\u9996\u5148\u521d\u59cb\u5316\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u4f55\u521d\u59cb\u5316\u4e00\u4e2a\u6d41\u3002</p> <pre><code>    void uv__stream_init(uv_loop_t* loop,\n                          uv_stream_t* stream, \n                          uv_handle_type type) {  \n        int err;  \n        // \u8bb0\u5f55handle\u7684\u7c7b\u578b  \n        uv__handle_init(loop, (uv_handle_t*)stream, type);  \n        stream-&gt;read_cb = NULL;  \n        stream-&gt;alloc_cb = NULL;  \n        stream-&gt;close_cb = NULL;  \n        stream-&gt;connection_cb = NULL;  \n        stream-&gt;connect_req = NULL;  \n        stream-&gt;shutdown_req = NULL;  \n        stream-&gt;accepted_fd = -1;  \n        stream-&gt;queued_fds = NULL;  \n        stream-&gt;delayed_error = 0;  \n        QUEUE_INIT(&amp;stream-&gt;write_queue);  \n        QUEUE_INIT(&amp;stream-&gt;write_completed_queue);  \n        stream-&gt;write_queue_size = 0;  \n        /* \n            \u521d\u59cb\u5316IO\u89c2\u5bdf\u8005\uff0c\u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08\u8fd9\u91cc\u8fd8\u6ca1\u6709\uff0c\u6240\u4ee5\u662f-1\uff09\u548c\n            \u56de\u8c03uv__stream_io\u8bb0\u5f55\u5728io_watcher\u4e0a\uff0cfd\u7684\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u7edf\u4e00\n            \u7531uv__stream_io\u51fd\u6570\u5904\u7406\uff0c\u4f46\u4e5f\u4f1a\u6709\u7279\u6b8a\u60c5\u51b5\uff08\u4e0b\u9762\u4f1a\u8bb2\u5230\uff09  \n            */\n        uv__io_init(&amp;stream-&gt;io_watcher, uv__stream_io, -1);  \n    }  \n</code></pre> <p>\u521d\u59cb\u5316\u4e00\u4e2a\u6d41\u7684\u903b\u8f91\u5f88\u7b80\u5355\u660e\u4e86\uff0c\u5c31\u662f\u521d\u59cb\u5316\u76f8\u5173\u7684\u5b57\u6bb5\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u521d\u59cb\u5316IO\u89c2\u5bdf\u8005\u65f6\uff0c\u8bbe\u7f6e\u7684\u5904\u7406\u51fd\u6570\u662fuv__stream_io\uff0c\u540e\u9762\u6211\u4eec\u4f1a\u5206\u6790\u8fd9\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u903b\u8f91\u3002</p>"},{"location":"chapter05-Libuv%E6%B5%81/#52","title":"5.2 \u6253\u5f00\u6d41","text":"<pre><code>    int uv__stream_open(uv_stream_t* stream, int fd, int flags) {  \n        // \u8fd8\u6ca1\u6709\u8bbe\u7f6efd\u6216\u8005\u8bbe\u7f6e\u7684\u540c\u4e00\u4e2afd\u5219\u7ee7\u7eed\uff0c\u5426\u5219\u8fd4\u56deUV_EBUSY\n        if (!(stream-&gt;io_watcher.fd == -1 || \n                stream-&gt;io_watcher.fd == fd))  \n            return UV_EBUSY;  \n        // \u8bbe\u7f6e\u6d41\u7684\u6807\u8bb0  \n        stream-&gt;flags |= flags;  \n        // \u662fTCP\u6d41\u5219\u53ef\u4ee5\u8bbe\u7f6e\u4e0b\u9762\u7684\u5c5e\u6027\n        if (stream-&gt;type == UV_TCP) {  \n        // \u5173\u95ednagle\u7b97\u6cd5  \n        if ((stream-&gt;flags &amp; UV_HANDLE_TCP_NODELAY) &amp;&amp; \n                uv__tcp_nodelay(fd, 1))  \n        return UV__ERR(errno); \n        /* \n            \u5f00\u542fkeepalive\u673a\u5236\n            */\n        if ((stream-&gt;flags &amp; UV_HANDLE_TCP_KEEPALIVE) &amp;&amp;  \n        uv__tcp_keepalive(fd, 1, 60)) {  \n        return UV__ERR(errno);  \n        }  \n        }  \n        /*\n        \u4fdd\u5b58socket\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5230IO\u89c2\u5bdf\u8005\u4e2d\uff0cLibuv\u4f1a\u5728\n        Poll IO\u9636\u6bb5\u76d1\u542c\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26  \n        */\n        stream-&gt;io_watcher.fd = fd;  \n        return 0;  \n    }  \n</code></pre> <p>\u6253\u5f00\u4e00\u4e2a\u6d41\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u7ed9\u8fd9\u4e2a\u6d41\u5173\u8054\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u540e\u7eed\u7684\u64cd\u4f5c\u7684\u65f6\u5019\u90fd\u662f\u57fa\u4e8e\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9b\u5c5e\u6027\u7684\u8bbe\u7f6e\u3002</p>"},{"location":"chapter05-Libuv%E6%B5%81/#53","title":"5.3 \u8bfb\u6d41","text":"<p>\u6211\u4eec\u5728\u4e00\u4e2a\u6d41\u4e0a\u6267\u884cuv_read_start\u540e\uff0c\u6d41\u7684\u6570\u636e\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u5c31\u4f1a\u901a\u8fc7read_cb\u56de\u8c03\u6e90\u6e90\u4e0d\u65ad\u5730\u6d41\u5411\u8c03\u7528\u65b9\u3002</p> <pre><code>    int uv_read_start(uv_stream_t* stream, \n                       uv_alloc_cb alloc_cb, \n                       uv_read_cb read_cb) {  \n        // \u6d41\u5df2\u7ecf\u5173\u95ed\uff0c\u4e0d\u80fd\u8bfb  \n        if (stream-&gt;flags &amp; UV_HANDLE_CLOSING)  \n            return UV_EINVAL;  \n        // \u6d41\u4e0d\u53ef\u8bfb\uff0c\u8bf4\u660e\u53ef\u80fd\u662f\u53ea\u5199\u6d41  \n        if (!(stream-&gt;flags &amp; UV_HANDLE_READABLE))  \n            return -ENOTCONN;  \n        // \u6807\u8bb0\u6b63\u5728\u8bfb  \n        stream-&gt;flags |= UV_HANDLE_READING;  \n        // \u8bb0\u5f55\u8bfb\u56de\u8c03\uff0c\u6709\u6570\u636e\u7684\u65f6\u5019\u4f1a\u6267\u884c\u8fd9\u4e2a\u56de\u8c03  \n        stream-&gt;read_cb = read_cb;  \n        // \u5206\u914d\u5185\u5b58\u51fd\u6570\uff0c\u7528\u4e8e\u5b58\u50a8\u8bfb\u53d6\u7684\u6570\u636e  \n        stream-&gt;alloc_cb = alloc_cb;  \n        // \u6ce8\u518c\u7b49\u5f85\u8bfb\u4e8b\u4ef6  \n        uv__io_start(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLIN);  \n        // \u6fc0\u6d3bhandle\uff0c\u6709\u6fc0\u6d3b\u7684handle\uff0c\u4e8b\u4ef6\u5faa\u73af\u4e0d\u4f1a\u9000\u51fa  \n        uv__handle_start(stream);  \n        return 0;  \n    }  \n</code></pre> <p>\u6267\u884cuv_read_start\u672c\u8d28\u4e0a\u662f\u7ed9\u6d41\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5728epoll\u4e2d\u6ce8\u518c\u4e86\u4e00\u4e2a\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6\uff0c\u5e76\u8bb0\u5f55\u76f8\u5e94\u7684\u4e0a\u4e0b\u6587\uff0c\u6bd4\u5982\u8bfb\u56de\u8c03\u51fd\u6570\uff0c\u5206\u914d\u5185\u5b58\u7684\u51fd\u6570\u3002\u63a5\u7740\u6253\u4e0a\u6b63\u5728\u505a\u8bfb\u53d6\u64cd\u4f5c\u7684\u6807\u8bb0\u3002\u5f53\u53ef\u8bfb\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0c\u8bfb\u56de\u8c03\u5c31\u4f1a\u88ab\u6267\u884c\uff0c\u9664\u4e86\u8bfb\u53d6\u6570\u636e\uff0c\u8fd8\u6709\u4e00\u4e2a\u8bfb\u64cd\u4f5c\u5c31\u662f\u505c\u6b62\u8bfb\u53d6\u3002\u5bf9\u5e94\u7684\u51fd\u6570\u662fuv_read_stop\u3002</p> <pre><code>    int uv_read_stop(uv_stream_t* stream) {  \n        // \u662f\u5426\u6b63\u5728\u6267\u884c\u8bfb\u53d6\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u6ca1\u6709\u5fc5\u8981\u505c\u6b62  \n        if (!(stream-&gt;flags &amp; UV_HANDLE_READING))  \n            return 0;  \n        // \u6e05\u9664\u6b63\u5728\u8bfb\u53d6\u7684\u6807\u8bb0  \n        stream-&gt;flags &amp;= ~UV_HANDLE_READING;  \n        // \u64a4\u9500\u7b49\u5f85\u8bfb\u4e8b\u4ef6  \n        uv__io_stop(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLIN);  \n        // \u5bf9\u5199\u4e8b\u4ef6\u4e5f\u4e0d\u611f\u5174\u8da3\uff0c\u505c\u6389handle\u3002\u5141\u8bb8\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa  \n        if (!uv__io_active(&amp;stream-&gt;io_watcher, POLLOUT))  \n            uv__handle_stop(stream);  \n        stream-&gt;read_cb = NULL;  \n        stream-&gt;alloc_cb = NULL;  \n        return 0;  \n    }  \n</code></pre> <p>\u53e6\u5916\u8fd8\u6709\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff0c\u5224\u65ad\u6d41\u662f\u5426\u8bbe\u7f6e\u4e86\u53ef\u8bfb\u5c5e\u6027\u3002</p> <pre><code>    int uv_is_readable(const uv_stream_t* stream) {  \n      return !!(stream-&gt;flags &amp; UV_HANDLE_READABLE);  \n    }  \n</code></pre> <p>\u4e0a\u9762\u7684\u51fd\u6570\u53ea\u662f\u6ce8\u518c\u548c\u6ce8\u9500\u8bfb\u4e8b\u4ef6\uff0c\u5982\u679c\u53ef\u8bfb\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u81ea\u5df1\u53bb\u8bfb\u53d6\u6570\u636e\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u771f\u6b63\u7684\u8bfb\u903b\u8f91</p> <pre><code>    static void uv__read(uv_stream_t* stream) {  \n      uv_buf_t buf;  \n      ssize_t nread;  \n      struct msghdr msg;  \n      char cmsg_space[CMSG_SPACE(UV__CMSG_FD_SIZE)];  \n      int count;  \n      int err;  \n      int is_ipc;  \n      // \u6e05\u9664\u8bfb\u53d6\u90e8\u5206\u6807\u8bb0  \n      stream-&gt;flags &amp;= ~UV_STREAM_READ_PARTIAL;  \n      count = 32;  \n      /*\n          \u6d41\u662fUnix\u57df\u7c7b\u578b\u5e76\u4e14\u7528\u4e8eIPC\uff0cUnix\u57df\u4e0d\u4e00\u5b9a\u7528\u4e8eIPC\uff0c\n          \u7528\u4f5cIPC\u53ef\u4ee5\u652f\u6301\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26  \n        */\n      is_ipc = stream-&gt;type == UV_NAMED_PIPE &amp;&amp; \n                                    ((uv_pipe_t*) stream)-&gt;ipc;  \n      // \u8bbe\u7f6e\u4e86\u8bfb\u56de\u8c03\uff0c\u6b63\u5728\u8bfb\uff0ccount\u5927\u4e8e0  \n      while (stream-&gt;read_cb  \n          &amp;&amp; (stream-&gt;flags &amp; UV_STREAM_READING)  \n          &amp;&amp; (count-- &gt; 0)) {  \n        buf = uv_buf_init(NULL, 0);  \n        // \u8c03\u7528\u8c03\u7528\u65b9\u63d0\u4f9b\u7684\u5206\u914d\u5185\u5b58\u51fd\u6570\uff0c\u5206\u914d\u5185\u5b58\u627f\u8f7d\u6570\u636e  \n        stream-&gt;alloc_cb((uv_handle_t*)stream, 64 * 1024, &amp;buf);  \n        /*\n             \u4e0d\u662fIPC\u5219\u76f4\u63a5\u8bfb\u53d6\u6570\u636e\u5230buf\uff0c\u5426\u5219\u7528recvmsg\u8bfb\u53d6\u6570\u636e                       \n              \u548c\u4f20\u9012\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\n            */  \n        if (!is_ipc) {  \n          do {  \n            nread = read(uv__stream_fd(stream), \n                                                buf.base, \n                                                buf.len);  \n          }  \n          while (nread &lt; 0 &amp;&amp; errno == EINTR);  \n        } else {  \n          /* ipc uses recvmsg */  \n          msg.msg_flags = 0;  \n          msg.msg_iov = (struct iovec*) &amp;buf;  \n          msg.msg_iovlen = 1;  \n          msg.msg_name = NULL;  \n          msg.msg_namelen = 0;  \n          msg.msg_controllen = sizeof(cmsg_space);  \n          msg.msg_control = cmsg_space; \n          do {  \n            nread = uv__recvmsg(uv__stream_fd(stream), &amp;msg, 0);\n          }  \n          while (nread &lt; 0 &amp;&amp; errno == EINTR);  \n        }  \n        // \u8bfb\u5931\u8d25  \n        if (nread &lt; 0) { \n          // \u8bfb\u7e41\u5fd9  \n          if (errno == EAGAIN || errno == EWOULDBLOCK) {  \n            // \u6267\u884c\u8bfb\u56de\u8c03  \n            stream-&gt;read_cb(stream, 0, &amp;buf);  \n          } else {  \n            /* Error. User should call uv_close(). */  \n            // \u8bfb\u5931\u8d25  \n            stream-&gt;read_cb(stream, -errno, &amp;buf);  \n          }  \n          return;  \n        } else if (nread == 0) {  \n          // \u8bfb\u5230\u7ed3\u5c3e\u4e86  \n          uv__stream_eof(stream, &amp;buf);  \n          return;  \n        } else {   \n          // \u8bfb\u6210\u529f\uff0c\u8bfb\u53d6\u6570\u636e\u7684\u957f\u5ea6  \n          ssize_t buflen = buf.len;  \n          /*\n                    \u662fIPC\u5219\u89e3\u6790\u8bfb\u53d6\u7684\u6570\u636e\uff0c\u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\u89e3\u6790\u51fa\u6765\uff0c\n                    \u653e\u5230stream\u7684accepted_fd\u548cqueued_fds\u5b57\u6bb5  \n                */\n          if (is_ipc) {  \n            err = uv__stream_recv_cmsg(stream, &amp;msg);  \n            if (err != 0) {  \n              stream-&gt;read_cb(stream, err, &amp;buf);  \n              return;  \n            }  \n          }  \n          // \u6267\u884c\u8bfb\u56de\u8c03  \n          stream-&gt;read_cb(stream, nread, &amp;buf);  \n        }  \n      }  \n    }  \n</code></pre> <p>uv_read\u9664\u4e86\u53ef\u4ee5\u8bfb\u53d6\u4e00\u822c\u7684\u6570\u636e\u5916\uff0c\u8fd8\u652f\u6301\u8bfb\u53d6\u4f20\u9012\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u63cf\u8ff0\u7b26\u4f20\u9012\u7684\u539f\u7406\u3002\u6211\u4eec\u77e5\u9053\uff0c\u7236\u8fdb\u7a0bfork\u51fa\u5b50\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u5b50\u8fdb\u7a0b\u662f\u7ee7\u627f\u7236\u8fdb\u7a0b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5217\u8868\u7684\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u8fdb\u7a0b\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5173\u7cfb\u3002 fork\u4e4b\u524d\u5982\u56fe5-1\u6240\u793a\u3002</p> <p></p> <p>\u6211\u4eec\u518d\u770b\u4e00\u4e0bfork\u4e4b\u540e\u7684\u7ed3\u6784\u5982\u56fe5-2\u6240\u793a\u3002</p> <p></p> <p>\u5982\u679c\u7236\u8fdb\u7a0b\u6216\u8005\u5b50\u8fdb\u7a0b\u5728fork\u4e4b\u540e\u521b\u5efa\u4e86\u65b0\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u90a3\u7236\u5b50\u8fdb\u7a0b\u95f4\u5c31\u4e0d\u80fd\u5171\u4eab\u4e86\uff0c\u5047\u8bbe\u7236\u8fdb\u7a0b\u8981\u628a\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u7ed9\u5b50\u8fdb\u7a0b\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f\u6839\u636e\u8fdb\u7a0b\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5173\u7cfb\u3002\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u8981\u505a\u7684\u4e8b\u60c5\uff0c\u4e0d\u4ec5\u4ec5\u662f\u5728\u5b50\u8fdb\u7a0b\u4e2d\u65b0\u5efa\u4e00\u4e2afd\uff0c\u8fd8\u8981\u5efa\u7acb\u8d77fd-&gt;file-&gt;inode\u7684\u5173\u8054\uff0c\u4e0d\u8fc7\u6211\u4eec\u4e0d\u9700\u8981\u5173\u6ce8\u8fd9\u4e9b\uff0c\u56e0\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u90fd\u5e2e\u6211\u4eec\u5904\u7406\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7sendmsg\u628a\u60f3\u4f20\u9012\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u9001\u7ed9Unix\u57df\u7684\u53e6\u4e00\u7aef\u3002Unix\u57df\u53e6\u4e00\u7aef\u5c31\u53ef\u4ee5\u901a\u8fc7recvmsg\u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4ece\u6570\u636e\u4e2d\u8bfb\u53d6\u51fa\u6765\u3002\u63a5\u7740\u4f7f\u7528uv__stream_recv_cmsg\u51fd\u6570\u4fdd\u5b58\u6570\u636e\u91cc\u89e3\u6790\u51fa\u6765\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002</p> <pre><code>    static int uv__stream_recv_cmsg(uv_stream_t* stream, \n                                       struct msghdr* msg) {  \n      struct cmsghdr* cmsg;  \n      // \u904d\u5386msg  \n      for (cmsg = CMSG_FIRSTHDR(msg); \n            cmsg != NULL; \n            cmsg = CMSG_NXTHDR(msg, cmsg)) {  \n         char* start;  \n         char* end;  \n        int err;  \n        void* pv;  \n        int* pi;  \n        unsigned int i;  \n        unsigned int count;  \n\n        pv = CMSG_DATA(cmsg);  \n        pi = pv;  \n        start = (char*) cmsg;  \n        end = (char*) cmsg + cmsg-&gt;cmsg_len;  \n        count = 0;  \n        while (start + CMSG_LEN(count * sizeof(*pi)) &lt; end)  \n          count++;  \n        for (i = 0; i &lt; count; i++) {  \n          /* \n            accepted_fd\u4ee3\u8868\u5f53\u524d\u5f85\u5904\u7406\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c \n            \u5982\u679c\u5df2\u7ecf\u6709\u503c\u5219\u5269\u4f59\u63cf\u8ff0\u7b26\u5c31\u901a\u8fc7uv__stream_queue_fd\u6392\u961f \n            \u5982\u679c\u8fd8\u6ca1\u6709\u503c\u5219\u5148\u8d4b\u503c \n          */  \n          if (stream-&gt;accepted_fd != -1) {  \n            err = uv__stream_queue_fd(stream, pi[i]);  \n          } else {  \n            stream-&gt;accepted_fd = pi[i];  \n          }  \n        }  \n      }  \n\n      return 0;  \n    }  \n</code></pre> <p>uv__stream_recv_cmsg\u4f1a\u4ece\u6570\u636e\u4e2d\u89e3\u6790\u51fa\u4e00\u4e2a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u5b58\u5230stream\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fdd\u5b58\u5728accepted_fd\uff0c\u5269\u4e0b\u7684\u4f7f\u7528uv__stream_queue_fd\u5904\u7406\u3002</p> <pre><code>    struct uv__stream_queued_fds_s {  \n      unsigned int size;  \n      unsigned int offset;  \n      int fds[1];  \n    };  \n\n    static int uv__stream_queue_fd(uv_stream_t* stream, int fd) {  \n      uv__stream_queued_fds_t* queued_fds;  \n      unsigned int queue_size;  \n      // \u539f\u6765\u7684\u5185\u5b58  \n      queued_fds = stream-&gt;queued_fds;  \n      // \u6ca1\u6709\u5185\u5b58\uff0c\u5219\u5206\u914d  \n      if (queued_fds == NULL) {  \n        // \u9ed8\u8ba48\u4e2a  \n        queue_size = 8;  \n        /* \n          \u4e00\u4e2a\u5143\u6570\u636e\u5185\u5b58+\u591a\u4e2afd\u7684\u5185\u5b58\n          \uff08\u524d\u9762\u52a0*\u4ee3\u8868\u89e3\u5f15\u7528\u540e\u7684\u503c\u7684\u7c7b\u578b\u6240\u5360\u7684\u5185\u5b58\u5927\u5c0f\uff0c\n          \u51cf\u4e00\u662f\u56e0\u4e3auv__stream_queued_fds_t\n          \u7ed3\u6784\u4f53\u672c\u8eab\u6709\u4e00\u4e2a\u7a7a\u95f4\uff09\n        */\n        queued_fds = uv__malloc((queue_size - 1) * \n                                   sizeof(*queued_fds-&gt;fds) +  \n                                sizeof(*queued_fds));  \n        if (queued_fds == NULL)  \n          return UV_ENOMEM;  \n        // \u5bb9\u91cf  \n        queued_fds-&gt;size = queue_size;  \n        // \u5df2\u4f7f\u7528\u4e2a\u6570  \n        queued_fds-&gt;offset = 0;  \n        // \u6307\u5411\u53ef\u7528\u7684\u5185\u5b58  \n        stream-&gt;queued_fds = queued_fds;  \n      // \u4e4b\u524d\u7684\u5185\u5b58\u7528\u5b8c\u4e86\uff0c\u6269\u5bb9  \n      } else if (queued_fds-&gt;size == queued_fds-&gt;offset) {  \n        // \u6bcf\u6b21\u52a08\u4e2a  \n        queue_size = queued_fds-&gt;size + 8;  \n        queued_fds = uv__realloc(queued_fds,  \n                                 (queue_size - 1) * sizeof(*queued_fds-&gt;fds) + sizeof(*queued_fds));  \n\n        if (queued_fds == NULL)  \n          return UV_ENOMEM;  \n        // \u66f4\u65b0\u5bb9\u91cf\u5927\u5c0f  \n        queued_fds-&gt;size = queue_size;  \n        // \u4fdd\u5b58\u65b0\u7684\u5185\u5b58  \n        stream-&gt;queued_fds = queued_fds;  \n      }  \n\n      /* Put fd in a queue */  \n      // \u4fdd\u5b58fd  \n      queued_fds-&gt;fds[queued_fds-&gt;offset++] = fd;  \n\n      return 0;  \n    }  \n</code></pre> <p>\u5185\u5b58\u7ed3\u6784\u5982\u56fe5-3\u6240\u793a\u3002</p> <p></p> <p>\u6700\u540e\u6211\u4eec\u770b\u4e00\u4e0b\u8bfb\u7ed3\u675f\u540e\u7684\u5904\u7406\uff0c</p> <pre><code>    static void uv__stream_eof(uv_stream_t* stream,\n                                 const uv_buf_t* buf) {\n      // \u6253\u4e0a\u8bfb\u7ed3\u675f\u6807\u8bb0\n      stream-&gt;flags |= UV_STREAM_READ_EOF;\n      // \u6ce8\u9500\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6\n      uv__io_stop(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLIN);\n      // \u6ca1\u6709\u6ce8\u518c\u7b49\u5f85\u53ef\u5199\u4e8b\u4ef6\u5219\u505c\u6389handle\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa\n      if (!uv__io_active(&amp;stream-&gt;io_watcher, POLLOUT))\n        uv__handle_stop(stream);\n      uv__stream_osx_interrupt_select(stream);\n      // \u6267\u884c\u8bfb\u56de\u8c03\n      stream-&gt;read_cb(stream, UV_EOF, buf);\n      // \u6e05\u9664\u6b63\u5728\u8bfb\u6807\u8bb0\n      stream-&gt;flags &amp;= ~UV_STREAM_READING;\n    }\n</code></pre> <p>\u6211\u4eec\u770b\u5230\uff0c\u6d41\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u9996\u5148\u6ce8\u9500\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6\uff0c\u7136\u540e\u901a\u8fc7\u56de\u8c03\u901a\u77e5\u4e0a\u5c42\u3002</p>"},{"location":"chapter05-Libuv%E6%B5%81/#54","title":"5.4 \u5199\u6d41","text":"<p>\u6211\u4eec\u5728\u6d41\u4e0a\u6267\u884cuv_write\u5c31\u53ef\u4ee5\u5f80\u6d41\u4e2d\u5199\u5165\u6570\u636e\u3002</p> <pre><code>    int uv_write(  \n            /* \n                  \u4e00\u4e2a\u5199\u8bf7\u6c42\uff0c\u8bb0\u5f55\u4e86\u9700\u8981\u5199\u5165\u7684\u6570\u636e\u548c\u4fe1\u606f\u3002\n                   \u6570\u636e\u6765\u81ea\u4e0b\u9762\u7684const uv_buf_t bufs[]  \n                 */\n           uv_write_t* req,  \n           // \u5f80\u54ea\u4e2a\u6d41\u5199  \n           uv_stream_t* handle,  \n           // \u9700\u8981\u5199\u5165\u7684\u6570\u636e  \n           const uv_buf_t bufs[],  \n           // uv_buf_t\u4e2a\u6570  \n           unsigned int nbufs,  \n           // \u5199\u5b8c\u540e\u6267\u884c\u7684\u56de\u8c03  \n           uv_write_cb cb  \n    ) {  \n      return uv_write2(req, handle, bufs, nbufs, NULL, cb);  \n    }\n</code></pre> <p>uv_write\u662f\u76f4\u63a5\u8c03\u7528uv_write2\u3002\u7b2c\u56db\u4e2a\u53c2\u6570\u662fNULL\u3002\u4ee3\u8868\u662f\u4e00\u822c\u7684\u5199\u6570\u636e\uff0c\u4e0d\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002</p> <pre><code>    int uv_write2(uv_write_t* req,  \n                  uv_stream_t* stream,  \n                  const uv_buf_t bufs[],  \n                  unsigned int nbufs,  \n                  uv_stream_t* send_handle,  \n                  uv_write_cb cb) {  \n      int empty_queue; \n      // \u5f85\u53d1\u9001\u961f\u5217\u662f\u5426\u4e3a\u7a7a  \n      empty_queue = (stream-&gt;write_queue_size == 0);  \n      // \u6784\u9020\u4e00\u4e2a\u5199\u8bf7\u6c42  \n      uv__req_init(stream-&gt;loop, req, UV_WRITE);  \n        // \u5199\u8bf7\u6c42\u5bf9\u5e94\u7684\u56de\u8c03\n      req-&gt;cb = cb; \n        // \u5199\u8bf7\u6c42\u5bf9\u5e94\u7684\u6d41 \n      req-&gt;handle = stream;  \n      req-&gt;error = 0;  \n        // \u9700\u8981\u53d1\u9001\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u4e5f\u53ef\u4ee5\u662fNULL\u8bf4\u660e\u4e0d\u9700\u8981\u53d1\u9001\u6587\u4ef6\u63cf\u8ff0\u7b26\n      req-&gt;send_handle = send_handle;  \n      QUEUE_INIT(&amp;req-&gt;queue);  \n      // bufs\u6307\u5411\u5f85\u5199\u7684\u6570\u636e  \n      req-&gt;bufs = req-&gt;bufsml;  \n      // \u590d\u5236\u8c03\u7528\u65b9\u7684\u6570\u636e\u8fc7\u6765  \n      memcpy(req-&gt;bufs, bufs, nbufs * sizeof(bufs[0]));  \n      // buf\u4e2a\u6570  \n      req-&gt;nbufs = nbufs;  \n      // \u5f53\u524d\u5199\u6210\u529f\u7684buf\u7d22\u5f15\uff0c\u9488\u5bf9bufs\u6570\u7ec4  \n      req-&gt;write_index = 0;  \n      // \u5f85\u5199\u7684\u6570\u636e\u5927\u5c0f = \u4e4b\u524d\u7684\u5927\u5c0f + \u672c\u6b21\u5927\u5c0f  \n      stream-&gt;write_queue_size += uv__count_bufs(bufs, nbufs);  \n      // \u63d2\u5165\u5f85\u5199\u961f\u5217  \n      QUEUE_INSERT_TAIL(&amp;stream-&gt;write_queue, &amp;req-&gt;queue);  \n      // \u975e\u7a7a\u8bf4\u660e\u6b63\u5728\u8fde\u63a5\uff0c\u8fd8\u4e0d\u80fd\u5199\uff0c\u6bd4\u5982TCP\u6d41  \n      if (stream-&gt;connect_req) {  \n        /* Still connecting, do nothing. */  \n      }  \n      else if (empty_queue) { // \u5f53\u524d\u5f85\u5199\u961f\u5217\u4e3a\u7a7a\uff0c\u76f4\u63a5\u5199  \n        uv__write(stream);  \n      }  \n      else {  \n        // \u8fd8\u6709\u6570\u636e\u6ca1\u6709\u5199\u5b8c\uff0c\u6ce8\u518c\u7b49\u5f85\u5199\u4e8b\u4ef6  \n        uv__io_start(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLOUT);  \n        uv__stream_osx_interrupt_select(stream);  \n      }  \n      return 0;  \n    }  \n</code></pre> <p>uv_write2\u7684\u4e3b\u8981\u903b\u8f91\u5c31\u662f\u5c01\u88c5\u4e00\u4e2a\u5199\u8bf7\u6c42\uff0c\u63d2\u5165\u5230\u6d41\u7684\u5f85\u5199\u961f\u5217\u3002\u7136\u540e\u6839\u636e\u5f53\u524d\u6d41\u7684\u60c5\u51b5\u3002\u770b\u662f\u76f4\u63a5\u5199\u5165\u8fd8\u662f\u7b49\u5f85\u4f1a\u518d\u5199\u5165\u3002\u5173\u7cfb\u56fe\u5927\u81f4\u5982\u56fe5-4\u6240\u793a\u3002</p> <p></p> <p>uv_write2\u53ea\u662f\u5bf9\u5199\u8bf7\u6c42\u8fdb\u884c\u4e00\u4e9b\u9884\u5904\u7406\uff0c\u771f\u6b63\u6267\u884c\u5199\u7684\u51fd\u6570\u662fuv__write </p> <pre><code>    static void uv__write(uv_stream_t* stream) {  \n      struct iovec* iov;  \n      QUEUE* q;  \n      uv_write_t* req;  \n      int iovmax;  \n      int iovcnt;  \n      ssize_t n;  \n      int err;  \n\n    start:  \n      // \u6ca1\u6709\u6570\u636e\u9700\u8981\u5199\n      if (QUEUE_EMPTY(&amp;stream-&gt;write_queue))  \n        return;  \n      q = QUEUE_HEAD(&amp;stream-&gt;write_queue);  \n      req = QUEUE_DATA(q, uv_write_t, queue); \n      // \u4ece\u54ea\u91cc\u5f00\u59cb\u5199  \n      iov = (struct iovec*) &amp;(req-&gt;bufs[req-&gt;write_index]);  \n      // \u8fd8\u6709\u591a\u5c11\u6ca1\u5199  \n      iovcnt = req-&gt;nbufs - req-&gt;write_index;  \n      // \u6700\u591a\u53ef\u4ee5\u5199\u591a\u5c11  \n      iovmax = uv__getiovmax();  \n      // \u53d6\u6700\u5c0f\u503c  \n      if (iovcnt &gt; iovmax)  \n        iovcnt = iovmax;  \n      // \u9700\u8981\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26  \n      if (req-&gt;send_handle) {  \n        int fd_to_send;  \n        struct msghdr msg;  \n        struct cmsghdr *cmsg;  \n        union {  \n          char data[64];  \n          struct cmsghdr alias;  \n        } scratch;  \n\n        if (uv__is_closing(req-&gt;send_handle)) {  \n          err = -EBADF;  \n          goto error;  \n        }  \n        // \u5f85\u53d1\u9001\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26  \n        fd_to_send = uv__handle_fd((uv_handle_t*) req-&gt;send_handle);\n        memset(&amp;scratch, 0, sizeof(scratch));  \n\n        msg.msg_name = NULL;  \n        msg.msg_namelen = 0;  \n        msg.msg_iov = iov;  \n        msg.msg_iovlen = iovcnt;  \n        msg.msg_flags = 0;  \n\n        msg.msg_control = &amp;scratch.alias;  \n        msg.msg_controllen = CMSG_SPACE(sizeof(fd_to_send));  \n\n        cmsg = CMSG_FIRSTHDR(&amp;msg);  \n        cmsg-&gt;cmsg_level = SOL_SOCKET;  \n        cmsg-&gt;cmsg_type = SCM_RIGHTS;  \n        cmsg-&gt;cmsg_len = CMSG_LEN(sizeof(fd_to_send));  \n\n        {  \n          void* pv = CMSG_DATA(cmsg);  \n          int* pi = pv;  \n          *pi = fd_to_send;  \n        }  \n\n        do {  \n          // \u4f7f\u7528sendmsg\u51fd\u6570\u53d1\u9001\u6587\u4ef6\u63cf\u8ff0\u7b26  \n          n = sendmsg(uv__stream_fd(stream), &amp;msg, 0);  \n        }  \n        while (n == -1 &amp;&amp; errno == EINTR);  \n      } else {  \n        do {  \n          // \u5199\u4e00\u4e2a\u6216\u8005\u5199\u6279\u91cf\u5199  \n          if (iovcnt == 1) {  \n            n = write(uv__stream_fd(stream), \n                                iov[0].iov_base, \n                                iov[0].iov_len);  \n          } else {  \n            n = writev(uv__stream_fd(stream), iov, iovcnt);  \n          }  \n        }  \n        while (n == -1 &amp;&amp; errno == EINTR);  \n      }  \n      // \u5199\u5931\u8d25  \n      if (n &lt; 0) {  \n        /*\n            \u4e0d\u662f\u5199\u7e41\u5fd9\uff0c\u5219\u62a5\u9519\uff0c\n             \u5426\u5219\u5982\u679c\u8bbe\u7f6e\u4e86\u540c\u6b65\u5199\u6807\u8bb0\uff0c\u5219\u7ee7\u7eed\u5c1d\u8bd5\u5199\n            */  \n        if (errno != EAGAIN &amp;&amp; \n                 errno != EWOULDBLOCK &amp;&amp; \n                 errno != ENOBUFS) {  \n          err = -errno;  \n          goto error;  \n        } else if (stream-&gt;flags &amp; UV_STREAM_BLOCKING) {  \n          /* If this is a blocking stream, try again. */  \n          goto start;  \n        }  \n      } else {  \n        // \u5199\u6210\u529f  \n        while (n &gt;= 0) {  \n          // \u5f53\u524dbuf\u9996\u5730\u5740  \n          uv_buf_t* buf = &amp;(req-&gt;bufs[req-&gt;write_index]);  \n          // \u5f53\u524dbuf\u7684\u6570\u636e\u957f\u5ea6  \n          size_t len = buf-&gt;len;  \n          // \u5c0f\u4e8e\u8bf4\u660e\u5f53\u524dbuf\u8fd8\u6ca1\u6709\u5199\u5b8c\uff08\u8fd8\u6ca1\u6709\u88ab\u6d88\u8d39\u5b8c\uff09  \n          if ((size_t)n &lt; len) {  \n            // \u66f4\u65b0\u5f85\u5199\u7684\u9996\u5730\u5740  \n            buf-&gt;base += n;  \n            // \u66f4\u65b0\u5f85\u5199\u7684\u6570\u636e\u957f\u5ea6  \n            buf-&gt;len -= n;  \n            /*\n                     \u66f4\u65b0\u5f85\u5199\u961f\u5217\u7684\u957f\u5ea6\uff0c\u8fd9\u4e2a\u961f\u5217\u662f\u5f85\u5199\u6570\u636e\u7684\n                      \u603b\u957f\u5ea6\uff0c\u7b49\u4e8e\u591a\u4e2abuf\u7684\u548c\n                    */  \n            stream-&gt;write_queue_size -= n;  \n            n = 0;  \n            /*\n                      \u8fd8\u6ca1\u5199\u5b8c\uff0c\u8bbe\u7f6e\u4e86\u540c\u6b65\u5199\uff0c\u5219\u7ee7\u7eed\u5c1d\u8bd5\u5199\uff0c\n                      \u5426\u5219\u9000\u51fa\uff0c\u6ce8\u518c\u5f85\u5199\u4e8b\u4ef6\n                    */  \n            if (stream-&gt;flags &amp; UV_STREAM_BLOCKING) {  \n              goto start;  \n            } else {  \n              break;  \n            } \n          } else {  \n            /* \n                      \u5f53\u524dbuf\u7684\u6570\u636e\u90fd\u5199\u5b8c\u4e86\uff0c\u5219\u66f4\u65b0\u5f85\u5199\u6570\u636e\u7684\u7684\u9996\n                      \u5730\u5740\uff0c\u5373\u4e0b\u4e00\u4e2abuf\uff0c\u56e0\u4e3a\u5f53\u524dbuf\u5199\u5b8c\u4e86  \n                    */\n            req-&gt;write_index++;  \n            // \u66f4\u65b0n\uff0c\u7528\u4e8e\u4e0b\u4e00\u4e2a\u5faa\u73af\u7684\u8ba1\u7b97  \n            n -= len;  \n            // \u66f4\u65b0\u5f85\u5199\u961f\u5217\u7684\u957f\u5ea6  \n            stream-&gt;write_queue_size -= len;  \n            /*\n                     \u7b49\u4e8e\u6700\u540e\u4e00\u4e2abuf\u4e86\uff0c\u8bf4\u660e\u5f85\u5199\u961f\u5217\u7684\u6570\u636e\n                      \u90fd\u5199\u5b8c\u4e86\n                    */  \n            if (req-&gt;write_index == req-&gt;nbufs) { \n              /* \n                          \u91ca\u653ebuf\u5bf9\u5e94\u7684\u5185\u5b58\uff0c\u5e76\u628a\u8bf7\u6c42\u63d2\u5165\u5199\u5b8c\u6210\n                          \u961f\u5217\uff0c\u7136\u540e\u51c6\u5907\u89e6\u53d1\u5199\u5b8c\u6210\u56de\u8c03  \n                        */\n              uv__write_req_finish(req);  \n              return;  \n            }  \n          }  \n        }  \n      }  \n      /*\n          \u5199\u6210\u529f\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u5199\u5b8c\uff0c\u6ce8\u518c\u5f85\u5199\u4e8b\u4ef6\uff0c\n          \u7b49\u5f85\u53ef\u5199\u7684\u65f6\u5019\u7ee7\u7eed\u5199  \n        */\n      uv__io_start(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLOUT);  \n      uv__stream_osx_interrupt_select(stream);  \n\n      return;  \n    // \u5199\u51fa\u9519  \n    error:  \n      // \u8bb0\u5f55\u9519\u8bef  \n      req-&gt;error = err;  \n      /*\n         \u91ca\u653e\u5185\u5b58\uff0c\u4e22\u5f03\u6570\u636e\uff0c\u63d2\u5165\u5199\u5b8c\u6210\u961f\u5217\uff0c\n          \u628aIO\u89c2\u5bdf\u8005\u63d2\u5165pending\u961f\u5217\uff0c\u7b49\u5f85pending\u9636\u6bb5\u6267\u884c\u56de\u8c03 \n        */ \n      uv__write_req_finish(req);  \n      // \u6ce8\u9500\u5f85\u5199\u4e8b\u4ef6  \n      uv__io_stop(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLOUT);  \n      // \u5982\u679c\u4e5f\u6ca1\u6709\u6ce8\u518c\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6\uff0c\u5219\u628ahandle\u5173\u95ed  \n      if (!uv__io_active(&amp;stream-&gt;io_watcher, POLLIN))  \n        uv__handle_stop(stream);  \n      uv__stream_osx_interrupt_select(stream);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u4e00\u4e2a\u5199\u8bf7\u6c42\u7ed3\u675f\u540e\uff08\u6210\u529f\u6216\u8005\u5931\u8d25\uff09\uff0cLibuv\u5982\u4f55\u5904\u7406\u7684\u3002\u903b\u8f91\u5728uv__write_req_finish\u51fd\u6570\u3002</p> <pre><code>    static void uv__write_req_finish(uv_write_t* req) {  \n      uv_stream_t* stream = req-&gt;handle;\n        // \u4ece\u5f85\u5199\u961f\u5217\u4e2d\u79fb\u9664  \n      QUEUE_REMOVE(&amp;req-&gt;queue);  \n        // \u5199\u6210\u529f\uff0c\u5e76\u4e14\u5206\u914d\u4e86\u989d\u5916\u7684\u5806\u5185\u5b58\uff0c\u5219\u9700\u8981\u91ca\u653e\uff0c\u89c1uv__write\n      if (req-&gt;error == 0) {  \n        if (req-&gt;bufs != req-&gt;bufsml)  \n          uv__free(req-&gt;bufs);  \n        req-&gt;bufs = NULL;  \n      }  \n        // \u63d2\u5165\u5199\u5b8c\u6210\u961f\u5217\n      QUEUE_INSERT_TAIL(&amp;stream-&gt;write_completed_queue, &amp;req-&gt;queue); \n        /*\n          \u628aIO\u89c2\u5bdf\u8005\u63d2\u5165pending\u961f\u5217\uff0cLibuv\u5728\u5904\u7406pending\u9636\u6bb5\u65f6,\n          \u4f1a\u89e6\u53d1IO\u89c2\u5bdf\u8005\u7684\u5199\u4e8b\u4ef6\n        */\n      uv__io_feed(stream-&gt;loop, &amp;stream-&gt;io_watcher);  \n    }  \n</code></pre> <p>uv__write_req_finish\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355</p> <p>1\u628a\u8282\u70b9\u4ece\u5f85\u5199\u961f\u5217\u4e2d\u79fb\u9664 2 req-&gt;bufs != req-&gt;bufsml\u4e0d\u76f8\u7b49\u8bf4\u660e\u5206\u914d\u4e86\u5806\u5185\u5b58\uff0c\u9700\u8981\u81ea\u5df1\u91ca\u653e 3\u5e76\u628a\u8bf7\u6c42\u63d2\u5165\u5199\u5b8c\u6210\u961f\u5217\uff0c\u628aIO\u89c2\u5bdf\u8005\u63d2\u5165pending\u961f\u5217\uff0c\u7b49\u5f85pending\u9636\u6bb5\u6267\u884c\u56de\u8c03\uff0c\u5728pending\u8282\u70b9\u4f1a\u6267\u884cIO\u89c2\u5bdf\u8005\u7684\u56de\u8c03\uff08uv__stream_io\uff09\u3002</p> <p>\u6211\u4eec\u770b\u4e00\u4e0buv__stream_io\u5982\u4f55\u5904\u7406\u7684\uff0c\u4e0b\u9762\u662f\u5177\u4f53\u7684\u5904\u7406\u903b\u8f91\u3002</p> <pre><code>    // \u53ef\u5199\u4e8b\u4ef6\u89e6\u53d1  \n    if (events &amp; (POLLOUT | POLLERR | POLLHUP)) {  \n        // \u7ee7\u7eed\u6267\u884c\u5199  \n        uv__write(stream);  \n        // \u5904\u7406\u5199\u6210\u529f\u56de\u8c03  \n        uv__write_callbacks(stream);\n        // \u5f85\u5199\u961f\u5217\u7a7a\uff0c\u6ce8\u9500\u7b49\u5f85\u53ef\u5199\u4e8b\u4ef6\uff0c\u5373\u4e0d\u9700\u8981\u5199\u4e86  \n        if (QUEUE_EMPTY(&amp;stream-&gt;write_queue))  \n          uv__drain(stream);  \n    }  \n</code></pre> <p>\u6211\u4eec\u53ea\u5173\u6ce8uv__write_callbacks\u3002</p> <pre><code>    static void uv__write_callbacks(uv_stream_t* stream) {  \n      uv_write_t* req;  \n      QUEUE* q;  \n      // \u5199\u5b8c\u6210\u961f\u5217\u975e\u7a7a  \n      while (!QUEUE_EMPTY(&amp;stream-&gt;write_completed_queue)) {  \n        q = QUEUE_HEAD(&amp;stream-&gt;write_completed_queue);  \n        req = QUEUE_DATA(q, uv_write_t, queue);  \n        QUEUE_REMOVE(q);  \n        uv__req_unregister(stream-&gt;loop, req);  \n        // bufs\u7684\u5185\u5b58\u8fd8\u6ca1\u6709\u88ab\u91ca\u653e  \n        if (req-&gt;bufs != NULL) {  \n          // \u66f4\u65b0\u5f85\u5199\u961f\u5217\u7684\u5927\u5c0f\uff0c\u5373\u51cf\u53bbreq\u5bf9\u5e94\u7684\u6240\u6709\u6570\u636e\u7684\u5927\u5c0f  \n          stream-&gt;write_queue_size -= uv__write_req_size(req);  \n          /*\n                 bufs\u9ed8\u8ba4\u6307\u5411bufsml\uff0c\u8d85\u8fc7\u9ed8\u8ba4\u5927\u5c0f\u65f6\uff0c\n                  bufs\u6307\u5411\u65b0\u7533\u8bf7\u7684\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u91ca\u653e \n                 */ \n          if (req-&gt;bufs != req-&gt;bufsml)  \n            uv__free(req-&gt;bufs);  \n          req-&gt;bufs = NULL;  \n        }  \n        // \u6267\u884c\u56de\u8c03  \n        if (req-&gt;cb)  \n          req-&gt;cb(req, req-&gt;error);  \n      }    \n    }\n</code></pre> <p>uv__write_callbacks\u8d1f\u8d23\u66f4\u65b0\u6d41\u7684\u5f85\u5199\u961f\u5217\u5927\u5c0f\u3001\u91ca\u653e\u989d\u5916\u7533\u8bf7\u7684\u5806\u5185\u5b58\u3001\u6267\u884c\u6bcf\u4e2a\u5199\u8bf7\u6c42\u7684\u56de\u8c03\u3002</p>"},{"location":"chapter05-Libuv%E6%B5%81/#55","title":"5.5 \u5173\u95ed\u6d41\u7684\u5199\u7aef","text":"<pre><code>    // \u5173\u95ed\u6d41\u7684\u5199\u7aef  \n    int uv_shutdown(uv_shutdown_t* req, \n                     uv_stream_t* stream, \n                     uv_shutdown_cb cb) {    \n      // \u521d\u59cb\u5316\u4e00\u4e2a\u5173\u95ed\u8bf7\u6c42\uff0c\u5173\u8054\u7684handle\u662fstream  \n      uv__req_init(stream-&gt;loop, req, UV_SHUTDOWN);  \n      req-&gt;handle = stream;  \n      // \u5173\u95ed\u540e\u6267\u884c\u7684\u56de\u8c03  \n      req-&gt;cb = cb;  \n      stream-&gt;shutdown_req = req;  \n      // \u8bbe\u7f6e\u6b63\u5728\u5173\u95ed\u7684\u6807\u8bb0  \n      stream-&gt;flags |= UV_HANDLE_SHUTTING;  \n      // \u6ce8\u518c\u7b49\u5f85\u53ef\u5199\u4e8b\u4ef6  \n      uv__io_start(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLOUT);  \n      return 0;  \n    }  \n</code></pre> <p>\u5173\u95ed\u6d41\u7684\u5199\u7aef\u5c31\u662f\u76f8\u5f53\u4e8e\u7ed9\u6d41\u53d1\u9001\u4e00\u4e2a\u5173\u95ed\u8bf7\u6c42\uff0c\u628a\u8bf7\u6c42\u6302\u8f7d\u5230\u6d41\u4e2d\uff0c\u7136\u540e\u6ce8\u518c\u7b49\u5f85\u53ef\u5199\u4e8b\u4ef6\uff0c\u5728\u53ef\u5199\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\u5c31\u4f1a\u6267\u884c\u5173\u95ed\u64cd\u4f5c\u3002\u5728\u5206\u6790\u5199\u6d41\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u63d0\u5230\uff0c\u53ef\u5199\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0c\u4f1a\u6267\u884cuv__drain\u6ce8\u9500\u7b49\u5f85\u53ef\u5199\u4e8b\u4ef6\uff0c\u9664\u6b64\u4e4b\u5916\uff0cuv__drain\u8fd8\u505a\u4e86\u4e00\u4e2a\u4e8b\u60c5\uff0c\u5c31\u662f\u5173\u95ed\u6d41\u7684\u5199\u7aef\u3002\u6211\u4eec\u770b\u770b\u5177\u4f53\u7684\u903b\u8f91\u3002</p> <pre><code>    static void uv__drain(uv_stream_t* stream) {  \n      uv_shutdown_t* req;  \n      int err;  \n      // \u64a4\u9500\u7b49\u5f85\u53ef\u5199\u4e8b\u4ef6\uff0c\u56e0\u4e3a\u6ca1\u6709\u6570\u636e\u9700\u8981\u5199\u5165\u4e86  \n      uv__io_stop(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLOUT);  \n      uv__stream_osx_interrupt_select(stream);  \n\n      // \u8bbe\u7f6e\u4e86\u5173\u95ed\u5199\u7aef\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u5173\u95ed\uff0c\u5219\u6267\u884c\u5173\u95ed\u5199\u7aef  \n      if ((stream-&gt;flags &amp; UV_HANDLE_SHUTTING) &amp;&amp;  \n          !(stream-&gt;flags &amp; UV_HANDLE_CLOSING) &amp;&amp;  \n          !(stream-&gt;flags &amp; UV_HANDLE_SHUT)) {  \n        req = stream-&gt;shutdown_req;  \n        stream-&gt;shutdown_req = NULL;  \n        // \u6e05\u9664\u6807\u8bb0  \n        stream-&gt;flags &amp;= ~UV_HANDLE_SHUTTING;  \n        uv__req_unregister(stream-&gt;loop, req);  \n\n        err = 0;  \n        // \u5173\u95ed\u5199\u7aef  \n        if (shutdown(uv__stream_fd(stream), SHUT_WR))  \n          err = UV__ERR(errno);  \n        // \u6807\u8bb0\u5df2\u5173\u95ed\u5199\u7aef  \n        if (err == 0)  \n          stream-&gt;flags |= UV_HANDLE_SHUT;  \n        // \u6267\u884c\u56de\u8c03  \n        if (req-&gt;cb != NULL)  \n          req-&gt;cb(req, err);  \n      }  \n    }  \n</code></pre> <p>\u901a\u8fc7\u8c03\u7528shutdown\u5173\u95ed\u6d41\u7684\u5199\u7aef\uff0c\u6bd4\u5982TCP\u6d41\u53d1\u9001\u5b8c\u6570\u636e\u540e\u53ef\u4ee5\u5173\u95ed\u5199\u7aef\u3002\u4f46\u662f\u4ecd\u7136\u53ef\u4ee5\u8bfb\u3002</p>"},{"location":"chapter05-Libuv%E6%B5%81/#56","title":"5.6 \u5173\u95ed\u6d41","text":"<pre><code>    void uv__stream_close(uv_stream_t* handle) {  \n      unsigned int i;  \n      uv__stream_queued_fds_t* queued_fds;  \n      // \u4ece\u4e8b\u4ef6\u5faa\u73af\u4e2d\u5220\u9664IO\u89c2\u5bdf\u8005\uff0c\u79fb\u51fapending\u961f\u5217  \n      uv__io_close(handle-&gt;loop, &amp;handle-&gt;io_watcher);  \n      // \u505c\u6b62\u8bfb  \n      uv_read_stop(handle);  \n      // \u505c\u6389handle  \n      uv__handle_stop(handle);  \n      // \u4e0d\u53ef\u8bfb\u3001\u5199  \n      handle-&gt;flags &amp;= ~(UV_HANDLE_READABLE | UV_HANDLE_WRITABLE);  \n      // \u5173\u95ed\u975e\u6807\u51c6\u6d41\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26  \n      if (handle-&gt;io_watcher.fd != -1) {  \n        /* \n              Don't close stdio file descriptors.  \n              Nothing good comes from it. \n             */  \n        if (handle-&gt;io_watcher.fd &gt; STDERR_FILENO)  \n          uv__close(handle-&gt;io_watcher.fd);  \n        handle-&gt;io_watcher.fd = -1;  \n      }  \n      // \u5173\u95ed\u901a\u4fe1socket\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26  \n      if (handle-&gt;accepted_fd != -1) {  \n        uv__close(handle-&gt;accepted_fd);  \n        handle-&gt;accepted_fd = -1;  \n      }  \n      // \u540c\u4e0a\uff0c\u8fd9\u662f\u5728\u6392\u961f\u7b49\u5f85\u5904\u7406\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26  \n      if (handle-&gt;queued_fds != NULL) {  \n        queued_fds = handle-&gt;queued_fds;  \n        for (i = 0; i &lt; queued_fds-&gt;offset; i++)  \n          uv__close(queued_fds-&gt;fds[i]);  \n        uv__free(handle-&gt;queued_fds);  \n        handle-&gt;queued_fds = NULL;  \n      }  \n    }  \n</code></pre> <p>\u5173\u95ed\u6d41\u5c31\u662f\u628a\u6d41\u6ce8\u518c\u5728epoll\u7684\u4e8b\u4ef6\u6ce8\u9500\uff0c\u5173\u95ed\u6240\u6301\u6709\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002</p>"},{"location":"chapter05-Libuv%E6%B5%81/#57","title":"5.7 \u8fde\u63a5\u6d41","text":"<p>\u8fde\u63a5\u6d41\u662f\u9488\u5bf9TCP\u548cUnix\u57df\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u4e00\u4e9b\u7f51\u7edc\u7f16\u7a0b\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u9996\u5148\u6211\u4eec\u5148\u8981\u6709\u4e00\u4e2asocket\u3002\u6211\u4eec\u770bLibuv\u4e2d\u5982\u4f55\u65b0\u5efa\u4e00\u4e2asocket\u3002</p> <pre><code>    int uv__socket(int domain, int type, int protocol) {  \n      int sockfd;  \n      int err;  \n      // \u65b0\u5efa\u4e00\u4e2asocket\uff0c\u5e76\u8bbe\u7f6e\u975e\u963b\u585e\u548cLOEXEC\u6807\u8bb0  \n      sockfd = socket(domain, type | SOCK_NONBLOCK | SOCK_CLOEXEC, protocol);  \n      // \u4e0d\u89e6\u53d1SIGPIPE\u4fe1\u53f7\uff0c\u6bd4\u5982\u5bf9\u7aef\u5df2\u7ecf\u5173\u95ed\uff0c\u672c\u7aef\u53c8\u6267\u884c\u5199  \n    #if defined(SO_NOSIGPIPE)  \n      {  \n        int on = 1;  \n        setsockopt(sockfd, SOL_SOCKET, SO_NOSIGPIPE, &amp;on, sizeof(on));  \n      }  \n    #endif  \n\n      return sockfd;  \n    }  \n</code></pre> <p>\u5728Libuv\u4e2d\uff0csocket\u7684\u6a21\u5f0f\u90fd\u662f\u975e\u963b\u585e\u7684\uff0cuv__socket\u662fLibuv\u4e2d\u7533\u8bf7socket\u7684\u51fd\u6570\uff0c\u4e0d\u8fc7Libuv\u4e0d\u76f4\u63a5\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u800c\u662f\u5c01\u88c5\u4e86\u4e00\u4e0b\u3002</p> <pre><code>    /* \n      1 \u83b7\u53d6\u4e00\u4e2a\u65b0\u7684socket fd \n      2 \u628afd\u4fdd\u5b58\u5230handle\u91cc\uff0c\u5e76\u6839\u636eflag\u8fdb\u884c\u76f8\u5173\u8bbe\u7f6e \n      3 \u7ed1\u5b9a\u5230\u672c\u673a\u968f\u610f\u7684\u5730\u5740\uff08\u5982\u679c\u8bbe\u7f6e\u4e86\u8be5\u6807\u8bb0\u7684\u8bdd\uff09 \n    */  \n    static int new_socket(uv_tcp_t* handle, \n                            int domain, \n                            unsigned long flags) {  \n      struct sockaddr_storage saddr;  \n      socklen_t slen;  \n      int sockfd;   \n      // \u83b7\u53d6\u4e00\u4e2asocket  \n      sockfd = uv__socket(domain, SOCK_STREAM, 0); \n\n      // \u8bbe\u7f6e\u9009\u9879\u548c\u4fdd\u5b58socket\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5230IO\u89c2\u5bdf\u8005\u4e2d  \n      uv__stream_open((uv_stream_t*) handle, sockfd, flags);  \n      // \u8bbe\u7f6e\u4e86\u9700\u8981\u7ed1\u5b9a\u6807\u8bb0UV_HANDLE_BOUND      \n      if (flags &amp; UV_HANDLE_BOUND) {  \n        slen = sizeof(saddr);  \n        memset(&amp;saddr, 0, sizeof(saddr));  \n        // \u83b7\u53d6fd\u5bf9\u5e94\u7684socket\u4fe1\u606f\uff0c\u6bd4\u5982IP\uff0c\u7aef\u53e3\uff0c\u53ef\u80fd\u6ca1\u6709  \n        getsockname(uv__stream_fd(handle), \n                        (struct sockaddr*) &amp;saddr, \n                        &amp;slen);\n\n        // \u7ed1\u5b9a\u5230socket\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\u5219\u7ed1\u5b9a\u5230\u7cfb\u7edf\u968f\u673a\u9009\u62e9\u7684\u5730\u5740  \n        bind(uv__stream_fd(handle),(struct sockaddr*) &amp;saddr, slen);\n     }  \n\n      return 0;  \n    }  \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u5c31\u662f\u5728Libuv\u7533\u8bf7\u4e00\u4e2asocket\u7684\u903b\u8f91\uff0c\u53e6\u5916\u5b83\u8fd8\u652f\u6301\u65b0\u5efa\u7684socket\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u5230\u4e00\u4e2a\u7528\u6237\u8bbe\u7f6e\u7684\uff0c\u6216\u8005\u64cd\u4f5c\u7cfb\u7edf\u968f\u673a\u9009\u62e9\u7684\u5730\u5740\u3002\u4e0d\u8fc7Libuv\u5e76\u4e0d\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u3002\u800c\u662f\u53c8\u5c01\u88c5\u4e86\u4e00\u5c42\u3002</p> <pre><code>    // \u5982\u679c\u6d41\u8fd8\u6ca1\u6709\u5bf9\u5e94\u7684fd\uff0c\u5219\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684\uff0c\u5982\u679c\u6709\u5219\u4fee\u6539\u6d41\u7684\u914d\u7f6e  \n    static int maybe_new_socket(uv_tcp_t* handle, \n                                  int domain, \n                                  unsigned long flags) {  \n      struct sockaddr_storage saddr;  \n      socklen_t slen;  \n\n      // \u5df2\u7ecf\u6709fd\u4e86  \n      if (uv__stream_fd(handle) != -1) {  \n        // \u8be5\u6d41\u9700\u8981\u7ed1\u5b9a\u5230\u4e00\u4e2a\u5730\u5740  \n        if (flags &amp; UV_HANDLE_BOUND) {  \n          /* \n            \u6d41\u662f\u5426\u5df2\u7ecf\u7ed1\u5b9a\u5230\u4e00\u4e2a\u5730\u5740\u4e86\u3002handle\u7684flag\u662f\u5728\n                  new_socket\u91cc\u8bbe\u7f6e\u7684\uff0c\u5982\u679c\u6709\u8fd9\u4e2a\u6807\u8bb0\u8bf4\u660e\u5df2\u7ecf\u6267\u884c\u8fc7\u7ed1\u5b9a\u4e86\uff0c\n                  \u76f4\u63a5\u66f4\u65b0flags\u5c31\u884c\u3002 \n          */  \n          if (handle-&gt;flags &amp; UV_HANDLE_BOUND) {  \n            handle-&gt;flags |= flags;  \n            return 0;  \n          }  \n          // \u6709fd\uff0c\u4f46\u662f\u53ef\u80fd\u8fd8\u6ca1\u7ed1\u5b9a\u5230\u4e00\u4e2a\u5730\u5740  \n          slen = sizeof(saddr);  \n          memset(&amp;saddr, 0, sizeof(saddr));  \n          // \u83b7\u53d6socket\u7ed1\u5b9a\u5230\u7684\u5730\u5740  \n          if (getsockname(uv__stream_fd(handle), \n                                 (struct sockaddr*) &amp;saddr, \n                                 &amp;slen))  \n            return UV__ERR(errno);  \n          // \u7ed1\u5b9a\u8fc7\u4e86socket\u5730\u5740\uff0c\u5219\u66f4\u65b0flags\u5c31\u884c  \n          if ((saddr.ss_family == AF_INET6 &amp;&amp;  \n            ((struct sockaddr_in6*) &amp;saddr)-&gt;sin6_port != 0) ||\n            (saddr.ss_family == AF_INET &amp;&amp;  \n            ((struct sockaddr_in*) &amp;saddr)-&gt;sin_port != 0)) { \n            handle-&gt;flags |= flags;  \n            return 0;  \n          }  \n          // \u6ca1\u7ed1\u5b9a\u5219\u7ed1\u5b9a\u5230\u968f\u673a\u5730\u5740\uff0cbind\u4e2d\u5b9e\u73b0  \n          if (bind(uv__stream_fd(handle), \n                          (struct sockaddr*) &amp;saddr, \n                          slen))  \n            return UV__ERR(errno);  \n        }  \n\n        handle-&gt;flags |= flags;  \n        return 0;  \n      }  \n      // \u7533\u8bf7\u4e00\u4e2a\u65b0\u7684fd\u5173\u8054\u5230\u6d41  \n      return new_socket(handle, domain, flags);  \n    }  \n</code></pre> <p>maybe_new_socket\u51fd\u6570\u7684\u903b\u8f91\u5206\u652f\u5f88\u591a\uff0c\u4e3b\u8981\u5982\u4e0b 1 \u5982\u679c\u6d41\u8fd8\u6ca1\u6709\u5173\u8054\u5230fd\uff0c\u5219\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684fd\u5173\u8054\u5230\u6d41\u4e0a 2 \u5982\u679c\u6d41\u5df2\u7ecf\u5173\u8054\u4e86\u4e00\u4e2afd\u3002 \u00a0\u00a0\u00a0\u00a0\u5982\u679c\u6d41\u8bbe\u7f6e\u4e86\u7ed1\u5b9a\u5730\u5740\u7684\u6807\u8bb0\uff0c\u4f46\u662f\u5df2\u7ecf\u901a\u8fc7Libuv\u7ed1\u5b9a\u4e86\u4e00\u4e2a\u5730\u5740\uff08Libuv\u4f1a\u8bbe\u7f6eUV_HANDLE_BOUND\u6807\u8bb0\uff0c\u7528\u6237\u4e5f\u53ef\u80fd\u662f\u76f4\u63a5\u8c03bind\u51fd\u6570\u7ed1\u5b9a\u4e86\uff09\u3002\u5219\u4e0d\u9700\u8981\u518d\u6b21\u7ed1\u5b9a\uff0c\u66f4\u65b0flags\u5c31\u884c\u3002 \u00a0\u00a0\u00a0\u00a0\u5982\u679c\u6d41\u8bbe\u7f6e\u4e86\u7ed1\u5b9a\u5730\u5740\u7684\u6807\u8bb0\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u901a\u8fc7Libuv\u7ed1\u5b9a\u4e00\u4e2a\u5730\u5740\uff0c\u8fd9\u65f6\u5019\u901a\u8fc7getsocketname\u5224\u65ad\u7528\u6237\u662f\u5426\u81ea\u5df1\u901a\u8fc7bind\u51fd\u6570\u7ed1\u5b9a\u4e86\u4e00\u4e2a\u5730\u5740\uff0c\u662f\u7684\u8bdd\u5219\u4e0d\u9700\u8981\u518d\u6b21\u6267\u884c\u7ed1\u5b9a\u64cd\u4f5c\u3002\u5426\u5219\u968f\u673a\u7ed1\u5b9a\u5230\u4e00\u4e2a\u5730\u5740\u3002</p> <p>\u4ee5\u4e0a\u4e24\u4e2a\u51fd\u6570\u7684\u903b\u8f91\u4e3b\u8981\u662f\u7533\u8bf7\u4e00\u4e2asocket\u548c\u7ed9socket\u7ed1\u5b9a\u4e00\u4e2a\u5730\u5740\u3002\u4e0b\u9762\u6211\u4eec\u5f00\u770b\u4e00\u4e0b\u8fde\u63a5\u6d41\u7684\u5b9e\u73b0\u3002</p> <pre><code>    int uv__tcp_connect(uv_connect_t* req,  \n               uv_tcp_t* handle,  \n               const struct sockaddr* addr,  \n               unsigned int addrlen,  \n               uv_connect_cb cb) {  \n      int err;  \n      int r;  \n\n      // \u5df2\u7ecf\u53d1\u8d77\u4e86connect\u4e86  \n      if (handle-&gt;connect_req != NULL)  \n        return UV_EALREADY;    \n      // \u7533\u8bf7\u4e00\u4e2asocket\u548c\u7ed1\u5b9a\u4e00\u4e2a\u5730\u5740\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u7684\u8bdd  \n      err = maybe_new_socket(handle, addr-&gt;sa_family,  \n                   UV_HANDLE_READABLE | UV_HANDLE_WRITABLE \n        if (err)  \n        return err;  \n      handle-&gt;delayed_error = 0;  \n\n      do {  \n        // \u6e05\u9664\u5168\u5c40\u9519\u8bef\u53d8\u91cf\u7684\u503c  \n        errno = 0;  \n        // \u975e\u963b\u585e\u53d1\u8d77\u4e09\u6b21\u63e1\u624b  \n        r = connect(uv__stream_fd(handle), addr, addrlen);  \n      } while (r == -1 &amp;&amp; errno == EINTR);  \n\n      if (r == -1 &amp;&amp; errno != 0) {  \n        // \u4e09\u6b21\u63e1\u624b\u8fd8\u6ca1\u6709\u5b8c\u6210  \n        if (errno == EINPROGRESS)  \n          ; /* not an error */  \n        else if (errno == ECONNREFUSED)  \n          // \u5bf9\u65b9\u62d2\u7edd\u5efa\u7acb\u8fde\u63a5\uff0c\u5ef6\u8fdf\u62a5\u9519  \n          handle-&gt;delayed_error = UV__ERR(errno);  \n        else  \n          // \u76f4\u63a5\u62a5\u9519  \n          return UV__ERR(errno);  \n      }  \n      // \u521d\u59cb\u5316\u4e00\u4e2a\u8fde\u63a5\u578brequest\uff0c\u5e76\u8bbe\u7f6e\u67d0\u4e9b\u5b57\u6bb5  \n      uv__req_init(handle-&gt;loop, req, UV_CONNECT);  \n      req-&gt;cb = cb;  \n      req-&gt;handle = (uv_stream_t*) handle;  \n      QUEUE_INIT(&amp;req-&gt;queue);\n        // \u8fde\u63a5\u8bf7\u6c42  \n      handle-&gt;connect_req = req;  \n      // \u6ce8\u518c\u5230Libuv\u89c2\u5bdf\u8005\u961f\u5217  \n      uv__io_start(handle-&gt;loop, &amp;handle-&gt;io_watcher, POLLOUT);  \n      // \u8fde\u63a5\u51fa\u9519\uff0c\u63d2\u5165pending\u961f\u5c3e  \n      if (handle-&gt;delayed_error)  \n        uv__io_feed(handle-&gt;loop, &amp;handle-&gt;io_watcher);  \n\n      return 0;  \n    }  \n</code></pre> <p>\u8fde\u63a5\u6d41\u7684\u903b\u8f91\uff0c\u5927\u81f4\u5982\u4e0b 1 \u7533\u8bf7\u4e00\u4e2asocket\uff0c\u7ed1\u5b9a\u4e00\u4e2a\u5730\u5740\u3002 2 \u6839\u636e\u7ed9\u5b9a\u7684\u670d\u52a1\u5668\u5730\u5740\uff0c\u53d1\u8d77\u4e09\u6b21\u63e1\u624b\uff0c\u975e\u963b\u585e\u7684\uff0c\u4f1a\u76f4\u63a5\u8fd4\u56de\u7ee7\u7eed\u6267\u884c\uff0c\u4e0d\u4f1a\u7b49\u5230\u4e09\u6b21\u63e1\u624b\u5b8c\u6210\u3002 3 \u5f80\u6d41\u4e0a\u6302\u8f7d\u4e00\u4e2aconnect\u578b\u7684\u8bf7\u6c42\u3002 4 \u8bbe\u7f6eIO\u89c2\u5bdf\u8005\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u4e3a\u53ef\u5199\u3002\u7136\u540e\u628aIO\u89c2\u5bdf\u8005\u63d2\u5165\u4e8b\u4ef6\u5faa\u73af\u7684IO\u89c2\u5bdf\u8005\u961f\u5217\u3002\u7b49\u5f85\u53ef\u5199\u7684\u65f6\u5019\u65f6\u5019\uff08\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\uff09\uff0c\u5c31\u4f1a\u6267\u884ccb\u56de\u8c03\u3002</p> <p>\u53ef\u5199\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u4f1a\u6267\u884cuv__stream_io\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u903b\u8f91\u3002</p> <pre><code>    if (stream-&gt;connect_req) {  \n        uv__stream_connect(stream);  \n        return;  \n    }  \n</code></pre> <p>\u6211\u4eec\u7ee7\u7eed\u770buv__stream_connect\u3002</p> <pre><code>    static void uv__stream_connect(uv_stream_t* stream) {  \n      int error;  \n      uv_connect_t* req = stream-&gt;connect_req;  \n      socklen_t errorsize = sizeof(int);  \n      // \u8fde\u63a5\u51fa\u9519  \n      if (stream-&gt;delayed_error) {  \n        error = stream-&gt;delayed_error;  \n        stream-&gt;delayed_error = 0;  \n      } else {  \n        // \u8fd8\u662f\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u662f\u4e0d\u662f\u51fa\u9519\u4e86  \n        getsockopt(uv__stream_fd(stream),  \n                   SOL_SOCKET,  \n                   SO_ERROR,  \n                   &amp;error,  \n                   &amp;errorsize);  \n        error = UV__ERR(error);  \n      }  \n      // \u8fd8\u6ca1\u8fde\u63a5\u6210\u529f\uff0c\u5148\u8fd4\u56de\uff0c\u7b49\u5f85\u4e0b\u6b21\u53ef\u5199\u4e8b\u4ef6\u7684\u89e6\u53d1  \n      if (error == UV__ERR(EINPROGRESS))  \n        return;  \n      // \u6e05\u7a7a  \n      stream-&gt;connect_req = NULL;  \n      uv__req_unregister(stream-&gt;loop, req);  \n      /* \n       \u8fde\u63a5\u51fa\u9519\u5219\u6ce8\u9500\u4e4b\u524d\u6ce8\u518c\u7684\u7b49\u5f85\u53ef\u5199\u961f\u5217\uff0c \n       \u8fde\u63a5\u6210\u529f\u5982\u679c\u5f85\u5199\u961f\u5217\u4e3a\u7a7a\uff0c\u4e5f\u6ce8\u9500\u4e8b\u4ef6\uff0c\u6709\u6570\u636e\u9700\u8981\u5199\u7684\u65f6\u5019\u518d\u6ce8\u518c \n      */  \n      if (error &lt; 0 || QUEUE_EMPTY(&amp;stream-&gt;write_queue)) {  \n        uv__io_stop(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLOUT);  \n      }  \n      // \u6267\u884c\u56de\u8c03\uff0c\u901a\u77e5\u4e0a\u5c42\u8fde\u63a5\u7ed3\u679c  \n      if (req-&gt;cb)  \n        req-&gt;cb(req, error);  \n\n      if (uv__stream_fd(stream) == -1)  \n        return;  \n      // \u8fde\u63a5\u5931\u8d25\uff0c\u6e05\u7a7a\u5f85\u5199\u7684\u6570\u636e\u548c\u6267\u884c\u5199\u8bf7\u6c42\u7684\u56de\u8c03\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09  \n      if (error &lt; 0) {  \n        uv__stream_flush_write_queue(stream, UV_ECANCELED);  \n        uv__write_callbacks(stream);  \n      }  \n    }  \n</code></pre> <p>\u8fde\u63a5\u6d41\u7684\u903b\u8f91\u662f 1\u53d1\u8d77\u975e\u963b\u585e\u5f0f\u8fde\u63a5 2 \u6ce8\u518c\u7b49\u5f85\u53ef\u5199\u4e8b\u4ef6 3 \u53ef\u5199\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u628a\u8fde\u63a5\u7ed3\u679c\u544a\u8bc9\u8c03\u7528\u65b9 4 \u8fde\u63a5\u6210\u529f\u5219\u53d1\u9001\u5199\u961f\u5217\u7684\u6570\u636e\uff0c\u8fde\u63a5\u5931\u8d25\u5219\u6e05\u9664\u5199\u961f\u5217\u7684\u6570\u636e\u5e76\u6267\u884c\u6bcf\u4e2a\u5199\u8bf7\u6c42\u7684\u56de\u8c03\uff08\u6709\u7684\u8bdd\uff09\u3002</p>"},{"location":"chapter05-Libuv%E6%B5%81/#58","title":"5.8 \u76d1\u542c\u6d41","text":"<p>\u76d1\u542c\u6d41\u662f\u9488\u5bf9TCP\u6216Unix\u57df\u7684\uff0c\u4e3b\u8981\u662f\u628a\u4e00\u4e2asocket\u53d8\u6210listen\u72b6\u6001\u3002\u5e76\u4e14\u8bbe\u7f6e\u4e00\u4e9b\u5c5e\u6027\u3002</p> <pre><code>    int uv_tcp_listen(uv_tcp_t* tcp, int backlog, uv_connection_cb cb) {  \n      static int single_accept = -1;  \n      unsigned long flags;  \n      int err;  \n\n      if (tcp-&gt;delayed_error)  \n        return tcp-&gt;delayed_error;  \n      // \u662f\u5426\u8bbe\u7f6e\u4e86\u4e0d\u8fde\u7eedaccept\u3002\u9ed8\u8ba4\u662f\u8fde\u7eedaccept\u3002  \n      if (single_accept == -1) {  \n        const char* val = getenv(\"UV_TCP_SINGLE_ACCEPT\");  \n        single_accept = (val != NULL &amp;&amp; atoi(val) != 0);  \n      }  \n      // \u8bbe\u7f6e\u4e0d\u8fde\u7eedaccept  \n      if (single_accept)  \n        tcp-&gt;flags |= UV_HANDLE_TCP_SINGLE_ACCEPT;  \n\n      flags = 0;  \n      /* \n        \u53ef\u80fd\u8fd8\u6ca1\u6709\u7528\u4e8elisten\u7684fd\uff0csocket\u5730\u5740\u7b49\u3002 \n        \u8fd9\u91cc\u7533\u8bf7\u4e00\u4e2asocket\u548c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u5730\u5740\n           \uff08\u5982\u679c\u8c03listen\u4e4b\u524d\u6ca1\u6709\u8c03bind\u5219\u7ed1\u5b9a\u5230\u968f\u673a\u5730\u5740\uff09 \n      */  \n      err = maybe_new_socket(tcp, AF_INET, flags);  \n      if (err)  \n        return err;  \n      // \u8bbe\u7f6efd\u4e3alisten\u72b6\u6001  \n      if (listen(tcp-&gt;io_watcher.fd, backlog))  \n        return UV__ERR(errno);  \n      // \u5efa\u7acb\u8fde\u63a5\u540e\u7684\u4e1a\u52a1\u56de\u8c03  \n      tcp-&gt;connection_cb = cb;  \n      tcp-&gt;flags |= UV_HANDLE_BOUND;  \n      //  \u8bbe\u7f6eio\u89c2\u5bdf\u8005\u7684\u56de\u8c03\uff0c\u7531epoll\u76d1\u542c\u5230\u8fde\u63a5\u5230\u6765\u65f6\u6267\u884c  \n      tcp-&gt;io_watcher.cb = uv__server_io;  \n      /*\n          \u63d2\u5165\u89c2\u5bdf\u8005\u961f\u5217\uff0c\u8fd9\u65f6\u5019\u8fd8\u6ca1\u6709\u589e\u52a0\u5230epoll\uff0c\n          Poll IO\u9636\u6bb5\u518d\u904d\u5386\u89c2\u5bdf\u8005\u961f\u5217\u8fdb\u884c\u5904\u7406\uff08epoll_ctl\uff09\n        */  \n      uv__io_start(tcp-&gt;loop, &amp;tcp-&gt;io_watcher, POLLIN);  \n\n      return 0;  \n    }  \n</code></pre> <p>\u76d1\u542c\u6d41\u7684\u903b\u8f91\u770b\u8d77\u6765\u5f88\u591a\uff0c\u4f46\u662f\u4e3b\u8981\u7684\u903b\u8f91\u662f\u628a\u6d41\u5bf9\u7684fd\u6539\u6210listen\u72b6\u6001\uff0c\u8fd9\u6837\u6d41\u5c31\u53ef\u4ee5\u63a5\u6536\u8fde\u63a5\u8bf7\u6c42\u4e86\u3002\u63a5\u7740\u8bbe\u7f6e\u8fde\u63a5\u5230\u6765\u65f6\u6267\u884c\u7684\u56de\u8c03\u3002\u6700\u540e\u6ce8\u518cIO\u89c2\u5bdf\u8005\u5230\u4e8b\u4ef6\u5faa\u73af\u3002\u7b49\u5f85\u8fde\u63a5\u5230\u6765\u3002\u5c31\u4f1a\u6267\u884cuv__server_io\u3002uv__server_io\u518d\u6267\u884cconnection_cb\u3002\u76d1\u542c\u6d41\u548c\u5176\u5b83\u6d41\u6709\u4e00\u4e2a\u533a\u522b\u662f\uff0c\u5f53IO\u89c2\u5bdf\u8005\u7684\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u76d1\u542c\u6d41\u6267\u884c\u7684\u56de\u8c03\u662fuv__server_io\u51fd\u6570\u3002\u800c\u5176\u5b83\u6d41\u662f\u5728uv__stream_io\u91cc\u7edf\u4e00\u5904\u7406\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u8fde\u63a5\u5230\u6765\u6216\u8005Unix\u57df\u4e0a\u6709\u6570\u636e\u5230\u6765\u65f6\u7684\u5904\u7406\u903b\u8f91\u3002  </p> <pre><code>    void uv__server_io(uv_loop_t* loop, uv__io_t* w, unsigned int events) {  \n      uv_stream_t* stream;  \n      int err;  \n      stream = container_of(w, uv_stream_t, io_watcher);   \n      // \u6ce8\u518c\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6  \n      uv__io_start(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLIN);  \n      while (uv__stream_fd(stream) != -1) {  \n        /*\n              \u901a\u8fc7accept\u62ff\u5230\u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u7684fd\uff0c\u6211\u4eec\u770b\u5230\u8fd9\u4e2a\n              fd\u548c\u670d\u52a1\u5668\u7684fd\u662f\u4e0d\u4e00\u6837\u7684 \n            */ \n        err = uv__accept(uv__stream_fd(stream));\n            // \u9519\u8bef\u5904\u7406 \n        if (err &lt; 0) { \n                /* \n                   uv__stream_fd(stream)\u5bf9\u5e94\u7684fd\u662f\u975e\u963b\u585e\u7684\uff0c\n                   \u8fd4\u56de\u8fd9\u4e2a\u9519\u8bf4\u660e\u6ca1\u6709\u8fde\u63a5\u53ef\u7528accept\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de\n                */  \n          if (err == -EAGAIN || err == -EWOULDBLOCK)  \n            return;  /* Not an error. */  \n          if (err == -ECONNABORTED)  \n            continue;  \n                // \u8fdb\u7a0b\u7684\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e2a\u6570\u8fbe\u5230\u9608\u503c\uff0c\u770b\u662f\u5426\u6709\u5907\u7528\u7684\n          if (err == -EMFILE || err == -ENFILE) {  \n            err = uv__emfile_trick(loop, uv__stream_fd(stream));\n            if (err == -EAGAIN || err == -EWOULDBLOCK)  \n              break;  \n          }  \n          // \u53d1\u751f\u9519\u8bef\uff0c\u6267\u884c\u56de\u8c03  \n          stream-&gt;connection_cb(stream, err);  \n          continue;  \n        }   \n        // \u8bb0\u5f55\u62ff\u5230\u7684\u901a\u4fe1socket\u5bf9\u5e94\u7684fd  \n        stream-&gt;accepted_fd = err;  \n        // \u6267\u884c\u4e0a\u4f20\u56de\u8c03  \n        stream-&gt;connection_cb(stream, 0);  \n        /*\n              stream-&gt;accepted_fd\u4e3a-1\u8bf4\u660e\u5728\u56de\u8c03connection_cb\u91cc\u5df2\u7ecf\u6d88\u8d39\n              \u4e86 accepted_fd\uff0c\u5426\u5219\u5148\u6ce8\u9500\u670d\u52a1\u5668\u5728epoll\u4e2d\u7684fd\u7684\u8bfb\u4e8b\u4ef6\uff0c\u7b49\n              \u5f85\u6d88\u8d39\u540e\u518d\u6ce8\u518c\uff0c\u5373\u4e0d\u518d\u5904\u7406\u8bf7\u6c42\u4e86        \n            */  \n        if (stream-&gt;accepted_fd != -1) {  \n          /* \n                  The user hasn't yet accepted called uv_accept() \n                */  \n          uv__io_stop(loop, &amp;stream-&gt;io_watcher, POLLIN);  \n          return;  \n        }  \n        /* \n          \u662fTCP\u7c7b\u578b\u7684\u6d41\u5e76\u4e14\u8bbe\u7f6e\u6bcf\u6b21\u53eaaccpet\u4e00\u4e2a\u8fde\u63a5\uff0c\u5219\u5b9a\u65f6\u963b\u585e\uff0c\n              \u88ab\u5524\u9192\u540e\u518daccept\uff0c\u5426\u5219\u4e00\u76f4accept\uff08\u5982\u679c\u7528\u6237\u5728connect\u56de\n              \u8c03\u91cc\u6d88\u8d39\u4e86accept_fd\u7684\u8bdd\uff09\uff0c\u5b9a\u65f6\u963b\u585e\u7528\u4e8e\u591a\u8fdb\u7a0b\u7ade\u4e89\u5904\u7406\u8fde\u63a5 \n        */  \n        if (stream-&gt;type == UV_TCP &amp;&amp; \n                 (stream-&gt;flags &amp; UV_TCP_SINGLE_ACCEPT)) { \n          struct timespec timeout = { 0, 1 };  \n          nanosleep(&amp;timeout, NULL);  \n        }  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u8fde\u63a5\u5230\u6765\u65f6\uff0cLibuv\u4f1a\u4ece\u5df2\u5b8c\u6210\u8fde\u63a5\u7684\u961f\u5217\u4e2d\u6458\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u6267\u884cconnection_cb\u56de\u8c03\u3002\u5728connection_cb\u56de\u8c03\u91cc\uff0c\u9700\u8981uv_accept\u6d88\u8d39accpet_fd\u3002</p> <pre><code>    int uv_accept(uv_stream_t* server, uv_stream_t* client) {  \n      int err;  \n      switch (client-&gt;type) {  \n        case UV_NAMED_PIPE:  \n        case UV_TCP:  \n          // \u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fdd\u5b58\u5230client  \n          err = uv__stream_open(client,\n                                        server-&gt;accepted_fd,\n                                        UV_STREAM_READABLE \n                                        | UV_STREAM_WRITABLE);  \n          if (err) {  \n            uv__close(server-&gt;accepted_fd);  \n            goto done;  \n          }  \n          break;  \n\n        case UV_UDP:  \n          err = uv_udp_open((uv_udp_t*) client, \n                                    server-&gt;accepted_fd);  \n          if (err) {  \n            uv__close(server-&gt;accepted_fd);  \n            goto done;  \n          }  \n          break; \n        default:  \n          return -EINVAL;  \n      }  \n      client-&gt;flags |= UV_HANDLE_BOUND;  \n\n    done:  \n      // \u975e\u7a7a\u5219\u7ee7\u7eed\u653e\u4e00\u4e2a\u5230accpet_fd\u4e2d\u7b49\u5f85accept,\u7528\u4e8e\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u9012  \n      if (server-&gt;queued_fds != NULL) {  \n        uv__stream_queued_fds_t* queued_fds;  \n        queued_fds = server-&gt;queued_fds;  \n        // \u628a\u7b2c\u4e00\u4e2a\u8d4b\u503c\u5230accept_fd  \n        server-&gt;accepted_fd = queued_fds-&gt;fds[0];  \n        /*\n             offset\u51cf\u53bb\u4e00\u4e2a\u5355\u4f4d\uff0c\u5982\u679c\u6ca1\u6709\u4e86\uff0c\u5219\u91ca\u653e\u5185\u5b58\uff0c\n              \u5426\u5219\u9700\u8981\u628a\u540e\u9762\u7684\u5f80\u524d\u632a\uff0coffset\u6267\u884c\u6700\u540e\u4e00\u4e2a\n            */  \n        if (--queued_fds-&gt;offset == 0) {  \n          uv__free(queued_fds);  \n          server-&gt;queued_fds = NULL;  \n        } else {   \n          memmove(queued_fds-&gt;fds,  \n                  queued_fds-&gt;fds + 1,  \n                  queued_fds-&gt;offset * sizeof(*queued_fds-&gt;fds));  \n        }  \n      } else {  \n        // \u6ca1\u6709\u6392\u961f\u7684fd\u4e86\uff0c\u5219\u6ce8\u518c\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6\uff0c\u7b49\u5f85accept\u65b0\u7684fd  \n        server-&gt;accepted_fd = -1;  \n        if (err == 0)  \n          uv__io_start(server-&gt;loop, &amp;server-&gt;io_watcher, POLLIN); \n      }  \n      return err;  \n    }  \n</code></pre> <p>client\u662f\u7528\u4e8e\u548c\u5ba2\u6237\u7aef\u8fdb\u884c\u901a\u4fe1\u7684\u6d41\uff0caccept\u5c31\u662f\u628aaccept_fd\u4fdd\u5b58\u5230client\u4e2d\uff0cclient\u5c31\u53ef\u4ee5\u901a\u8fc7fd\u548c\u5bf9\u7aef\u8fdb\u884c\u901a\u4fe1\u4e86\u3002\u6d88\u8d39\u5b8caccept_fd\u540e\uff0c\u5982\u679c\u8fd8\u6709\u5f85\u5904\u7406\u7684fd\u7684\u8bdd\uff0c\u9700\u8981\u8865\u5145\u4e00\u4e2a\u5230accept_fd\uff08\u9488\u5bf9Unix\u57df\uff09\uff0c\u5176\u5b83\u7684\u7ee7\u7eed\u6392\u961f\u7b49\u5f85\u5904\u7406\uff0c\u5982\u679c\u6ca1\u6709\u5f85\u5904\u7406\u7684fd\u5219\u6ce8\u518c\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6\uff0c\u7ee7\u7eed\u5904\u7406\u65b0\u7684\u8fde\u63a5\u3002</p>"},{"location":"chapter05-Libuv%E6%B5%81/#59","title":"5.9 \u9500\u6bc1\u6d41","text":"<p>\u5f53\u6211\u4eec\u4e0d\u518d\u9700\u8981\u4e00\u4e2a\u6d41\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u9996\u5148\u8c03\u7528uv_close\u5173\u95ed\u8fd9\u4e2a\u6d41\uff0c\u5173\u95ed\u6d41\u53ea\u662f\u6ce8\u9500\u4e86\u4e8b\u4ef6\u548c\u91ca\u653e\u4e86\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u8c03\u7528uv_close\u4e4b\u540e\uff0c\u6d41\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u5c31\u4f1a\u88ab\u52a0\u5165\u5230closing\u961f\u5217\uff0c\u5728closing\u9636\u6bb5\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u6267\u884c\u9500\u6bc1\u6d41\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u4e22\u5f03\u8fd8\u6ca1\u6709\u5199\u5b8c\u6210\u7684\u6570\u636e\uff0c\u6267\u884c\u5bf9\u5e94\u6d41\u7684\u56de\u8c03\uff0c\u6211\u4eec\u770b\u770b\u9500\u6bc1\u6d41\u7684\u51fd\u6570uv__stream_destroy\u3002</p> <pre><code>    void uv__stream_destroy(uv_stream_t* stream) {  \n      // \u6b63\u5728\u8fde\u63a5\uff0c\u5219\u6267\u884c\u56de\u8c03  \n      if (stream-&gt;connect_req) {  \n        uv__req_unregister(stream-&gt;loop, stream-&gt;connect_req);  \n        stream-&gt;connect_req-&gt;cb(stream-&gt;connect_req, -ECANCELED);  \n        stream-&gt;connect_req = NULL;  \n      }  \n      // \u4e22\u5f03\u5f85\u5199\u7684\u6570\u636e\uff0c\u5982\u679c\u6709\u7684\u8bdd  \n      uv__stream_flush_write_queue(stream, -ECANCELED);  \n      // \u5904\u7406\u5199\u5b8c\u6210\u961f\u5217\uff0c\u8fd9\u91cc\u662f\u5904\u7406\u88ab\u4e22\u5f03\u7684\u6570\u636e  \n      uv__write_callbacks(stream);  \n      // \u6b63\u5728\u5173\u95ed\u6d41\uff0c\u76f4\u63a5\u56de\u8c03  \n      if (stream-&gt;shutdown_req) {  \n        uv__req_unregister(stream-&gt;loop, stream-&gt;shutdown_req);  \n        stream-&gt;shutdown_req-&gt;cb(stream-&gt;shutdown_req, -ECANCELED);  \n        stream-&gt;shutdown_req = NULL;  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\uff0c\u9500\u6bc1\u6d41\u7684\u65f6\u5019\uff0c\u5982\u679c\u6d41\u4e2d\u8fd8\u6709\u5f85\u5199\u7684\u6570\u636e\uff0c\u5219\u4f1a\u4e22\u5f03\u3002\u6211\u4eec\u770b\u4e00\u4e0buv__stream_flush_write_queue\u548cuv__write_callbacks\u3002</p> <pre><code>    void uv__stream_flush_write_queue(uv_stream_t* stream, int error) {\n      uv_write_t* req;  \n      QUEUE* q;  \n      while (!QUEUE_EMPTY(&amp;stream-&gt;write_queue)) {  \n        q = QUEUE_HEAD(&amp;stream-&gt;write_queue);  \n        QUEUE_REMOVE(q); \n        req = QUEUE_DATA(q, uv_write_t, queue);  \n        // \u628a\u9519\u8bef\u5199\u5230\u6bcf\u4e2a\u8bf7\u6c42\u4e2d  \n        req-&gt;error = error; \n        QUEUE_INSERT_TAIL(&amp;stream-&gt;write_completed_queue, &amp;req-&gt;queue);\n      }  \n    }  \n</code></pre> <p>uv__stream_flush_write_queue\u4e22\u5f03\u5f85\u5199\u961f\u5217\u4e2d\u7684\u8bf7\u6c42\uff0c\u5e76\u76f4\u63a5\u63d2\u5165\u5199\u5b8c\u6210\u961f\u5217\u4e2d\u3002uv__write_callbacks\u662f\u5199\u5b8c\u6216\u8005\u5199\u51fa\u9519\u65f6\u6267\u884c\u7684\u51fd\u6570\uff0c\u5b83\u9010\u4e2a\u5904\u7406\u5199\u5b8c\u6210\u961f\u5217\u4e2d\u7684\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a\u5199\u8bf7\u6c42\uff0c\u6267\u884c\u5b83\u7684\u56de\u8c03\uff0c\u5982\u4f55\u5206\u914d\u4e86\u5806\u5185\u5b58\uff0c\u5219\u91ca\u653e\u5185\u5b58\u3002\u5728\u5199\u6d41\u7ae0\u8282\u5df2\u7ecf\u5206\u6790\uff0c\u4e0d\u518d\u5177\u4f53\u5c55\u5f00\u3002</p>"},{"location":"chapter05-Libuv%E6%B5%81/#510","title":"5.10 \u4e8b\u4ef6\u89e6\u53d1\u7684\u5904\u7406","text":"<p>\u5728\u6d41\u7684\u5b9e\u73b0\u4e2d\uff0c\u8bfb\u5199\u7b49\u64cd\u4f5c\u90fd\u53ea\u662f\u6ce8\u518c\u4e8b\u4ef6\u5230epoll\uff0c\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0c\u4f1a\u6267\u884c\u7edf\u4e00\u7684\u56de\u8c03\u51fd\u6570uv__stream_io\u3002\u4e0b\u9762\u5217\u4e00\u4e0b\u8be5\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u5177\u4f53\u5b9e\u73b0\u5728\u5176\u5b83\u7ae0\u8282\u5df2\u7ecf\u5206\u6790\u3002</p> <pre><code>    static void uv__stream_io(uv_loop_t* loop, \n                                uv__io_t* w, \n                                unsigned int events) {  \n      uv_stream_t* stream;  \n      stream = container_of(w, uv_stream_t, io_watcher); \n      // \u662f\u8fde\u63a5\u6d41\uff0c\u5219\u6267\u884c\u8fde\u63a5\u5904\u7406\u51fd\u6570  \n      if (stream-&gt;connect_req) {  \n        uv__stream_connect(stream);  \n        return;  \n      }    \n      /*\n          Ignore POLLHUP here. Even it it's set, \n          there may still be data to read. \n        */  \n      // \u53ef\u8bfb\u662f\u89e6\u53d1\uff0c\u5219\u6267\u884c\u8bfb\u5904\u7406  \n      if (events &amp; (POLLIN | POLLERR | POLLHUP))  \n        uv__read(stream);  \n      // \u8bfb\u56de\u8c03\u5173\u95ed\u4e86\u6d41  \n      if (uv__stream_fd(stream) == -1)  \n        return;  /* read_cb closed stream. */  \n      /* \u00ac\u00ac\n         POLLHUP\u8bf4\u660e\u5bf9\u7aef\u5173\u95ed\u4e86\uff0c\u5373\u4e0d\u4f1a\u53d1\u751f\u6570\u636e\u8fc7\u6765\u4e86\u3002\n              \u5982\u679c\u6d41\u7684\u6a21\u5f0f\u662f\u6301\u7eed\u8bfb\uff0c \n          1 \u5982\u679c\u53ea\u8bfb\u53d6\u4e86\u90e8\u5206\uff08\u8bbe\u7f6eUV_STREAM_READ_PARTIAL\uff09\uff0c\n                  \u5e76\u4e14\u6ca1\u6709\u8bfb\u5230\u7ed3\u5c3e(\u6ca1\u6709\u8bbe\u7f6eUV_STREAM_READ_EOF)\uff0c \n           \u5219\u76f4\u63a5\u4f5c\u8bfb\u7ed3\u675f\u5904\u7406\uff0c \n          2 \u5982\u679c\u53ea\u8bfb\u53d6\u4e86\u90e8\u5206\uff0c\u4e0a\u9762\u7684\u8bfb\u56de\u8c03\u6267\u884c\u4e86\u8bfb\u7ed3\u675f\u64cd\u4f5c\uff0c\n                  \u5219\u8fd9\u91cc\u5c31\u4e0d\u9700\u8981\u5904\u7406\u4e86 \n          3 \u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u53ea\u8bfb\u4e86\u90e8\u5206\uff0c\u8fd8\u6ca1\u6709\u6267\u884c\u8bfb\u7ed3\u675f\u64cd\u4f5c\uff0c\n                  \u5219\u4e0d\u80fd\u4f5c\u8bfb\u7ed3\u675f\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5bf9\u7aef\u867d\u7136\u5173\u95ed\u4e86\uff0c\u4f46\u662f\u4e4b\n                  \u524d\u7684\u4f20\u8fc7\u6765\u7684\u6570\u636e\u53ef\u80fd\u8fd8\u6ca1\u6709\u88ab\u6d88\u8d39\u5b8c \n          4 \u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u53ea\u8bfb\u4e86\u90e8\u5206\uff0c\u6267\u884c\u4e86\u8bfb\u7ed3\u675f\u64cd\u4f5c\uff0c\u90a3\u8fd9\n                  \u91cc\u4e5f\u4e0d\u9700\u8981\u5904\u7406 \n      */  \n      if ((events &amp; POLLHUP) &amp;&amp;  \n          (stream-&gt;flags &amp; UV_STREAM_READING) &amp;&amp;  \n          (stream-&gt;flags &amp; UV_STREAM_READ_PARTIAL) &amp;&amp;  \n          !(stream-&gt;flags &amp; UV_STREAM_READ_EOF)) {  \n        uv_buf_t buf = { NULL, 0 };  \n        uv__stream_eof(stream, &amp;buf);  \n      }  \n\n      if (uv__stream_fd(stream) == -1)  \n        return;  /* read_cb closed stream. */  \n      // \u53ef\u5199\u4e8b\u4ef6\u89e6\u53d1  \n      if (events &amp; (POLLOUT | POLLERR | POLLHUP)) {  \n        // \u5199\u6570\u636e  \n        uv__write(stream);  \n        // \u5199\u5b8c\u540e\u505a\u540e\u7f6e\u5904\u7406\uff0c\u91ca\u653e\u5185\u5b58\uff0c\u6267\u884c\u56de\u8c03\u7b49  \n        uv__write_callbacks(stream); \n        // \u5f85\u5199\u961f\u5217\u4e3a\u7a7a\uff0c\u5219\u6ce8\u9500\u7b49\u5f85\u5199\u4e8b\u4ef6  \n        if (QUEUE_EMPTY(&amp;stream-&gt;write_queue))  \n          uv__drain(stream);  \n      }  \n    }  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/","title":"06-C++\u5c42","text":"<p>\u672c\u7ae0\u4ecb\u7ecdNode.js\u4e2dC++\u5c42\u7684\u4e00\u4e9b\u6838\u5fc3\u6a21\u5757\u7684\u539f\u7406\u548c\u5b9e\u73b0\uff0c\u8fd9\u4e9b\u6a21\u5757\u662fNode.js\u4e2d\u5f88\u591a\u6a21\u5757\u90fd\u4f1a\u4f7f\u7528\u7684\u3002\u7406\u89e3\u8fd9\u4e9b\u6a21\u5757\u7684\u539f\u7406\uff0c\u624d\u80fd\u66f4\u597d\u5730\u7406\u89e3\u5728Node.js\u4e2d\uff0cJS\u662f\u5982\u4f55\u901a\u8fc7C++\u5c42\u8c03\u7528Libuv\uff0c\u53c8\u662f\u5982\u4f55\u4eceLibuv\u8fd4\u56de\u7684\u3002</p>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#61-baseobject","title":"6.1 BaseObject","text":"<p>BaseObject\u662fC++\u5c42\u5927\u591a\u6570\u7c7b\u7684\u57fa\u7c7b\u3002 <pre><code>    class BaseObject : public MemoryRetainer {  \n     public:  \n     // \u2026\n     private:  \n      v8::Local&lt;v8::Object&gt; WrappedObject() const override;\n      // \u6307\u5411\u5c01\u88c5\u7684\u5bf9\u8c61  \n      v8::Global&lt;v8::Object&gt; persistent_handle_;  \n      Environment* env_;  \n    };  \n</code></pre> BaseObject\u7684\u5b9e\u73b0\u5f88\u590d\u6742\uff0c\u8fd9\u91cc\u53ea\u4ecb\u7ecd\u5e38\u7528\u7684\u4e00\u4e9b\u5b9e\u73b0\u3002</p>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#611","title":"6.1.1 \u6784\u9020\u51fd\u6570","text":"<pre><code>    // \u628a\u5bf9\u8c61\u5b58\u50a8\u5230persistent_handle_\u4e2d\uff0c\u5fc5\u8981\u7684\u65f6\u5019\u901a\u8fc7object()\u53d6\u51fa\u6765  \n    BaseObject::BaseObject(Environment* env, \n                             v8::Local&lt;v8::Object&gt; object) \n    : persistent_handle_(env-&gt;isolate(), object), \n      env_(env) {  \n      // \u628athis\u5b58\u5230object\u4e2d  \n      object-&gt;SetAlignedPointerInInternalField(0, static_cast&lt;void*&gt;(this));    \n    }  \n</code></pre> <p>\u6784\u9020\u51fd\u6570\u7528\u4e8e\u4fdd\u5b58\u5bf9\u8c61\u95f4\u7684\u5173\u7cfb\uff08JS\u4f7f\u7528\u7684\u5bf9\u8c61\u548c\u4e0e\u5176\u5173\u7cfb\u7684C++\u5c42\u5bf9\u8c61\uff0c\u4e0b\u56fe\u4e2d\u7684\u5bf9\u8c61\u5373\u6211\u4eec\u5e73\u65f6\u5728JS\u5c42\u4f7f\u7528C++\u6a21\u5757\u521b\u5efa\u7684\u5bf9\u8c61\uff0c\u6bd4\u5982new TCP()\uff09\u3002\u540e\u9762\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7528\u5904\uff0c\u5173\u7cfb\u5982\u56fe6-1\u6240\u793a\u3002  \u56fe6-1</p>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#612","title":"6.1.2 \u83b7\u53d6\u5c01\u88c5\u7684\u5bf9\u8c61","text":"<pre><code>    v8::Local&lt;v8::Object&gt; BaseObject::object() const {  \n      return PersistentToLocal::Default(env()-&gt;isolate(), \n                                            persistent_handle_);  \n    }  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#613-baseobject","title":"6.1.3 \u4ece\u5bf9\u8c61\u4e2d\u83b7\u53d6\u4fdd\u5b58\u7684BaseObject\u5bf9\u8c61","text":"<pre><code>    // \u901a\u8fc7obj\u53d6\u51fa\u91cc\u9762\u4fdd\u5b58\u7684BaseObject\u5bf9\u8c61  \n    BaseObject* BaseObject::FromJSObject(v8::Local&lt;v8::Object&gt; obj) {\n      return static_cast&lt;BaseObject*&gt;(obj-&gt;GetAlignedPointerFromInternalField(0));  \n    }  \n\n    template &lt;typename T&gt;  \n    T* BaseObject::FromJSObject(v8::Local&lt;v8::Object&gt; object) {  \n      return static_cast&lt;T*&gt;(FromJSObject(object));  \n    }  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#614","title":"6.1.4 \u89e3\u5305","text":"<pre><code>    // \u4eceobj\u4e2d\u53d6\u51fa\u5bf9\u5e94\u7684BaseObject\u5bf9\u8c61  \n    template &lt;typename T&gt;  \n    inline T* Unwrap(v8::Local&lt;v8::Object&gt; obj) {  \n      return BaseObject::FromJSObject&lt;T&gt;(obj);  \n    }  \n\n    // \u4eceobj\u4e2d\u83b7\u53d6\u5bf9\u5e94\u7684BaseObject\u5bf9\u8c61\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u8fd4\u56de\u7b2c\u4e09\u4e2a\u53c2\u6570\u7684\u503c\uff08\u9ed8\u8ba4\u503c\uff09  \n    #define ASSIGN_OR_RETURN_UNWRAP(ptr, obj, ...) \\  \n      do {       \\  \n        *ptr = static_cast&lt;typename std::remove_reference&lt;decltype(*ptr)&gt;::type&gt;( \\  \n            BaseObject::FromJSObject(obj));   \\  \n        if (*ptr == nullptr)  \\  \n          return __VA_ARGS__; \\  \n      } while (0)  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#62-asyncwrap","title":"6.2 AsyncWrap","text":"<p>AsyncWrap\u5b9e\u73b0async_hook\u7684\u6a21\u5757\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6211\u4eec\u53ea\u5173\u6ce8\u5b83\u56de\u8c03JS\u7684\u529f\u80fd\u3002</p> <pre><code>    inline v8::MaybeLocal&lt;v8::Value&gt; AsyncWrap::MakeCallback(  \n        const v8::Local&lt;v8::Name&gt; symbol,  \n        int argc,  \n        v8::Local&lt;v8::Value&gt;* argv) {  \n      v8::Local&lt;v8::Value&gt; cb_v;  \n      // \u6839\u636e\u5b57\u7b26\u4e32\u8868\u793a\u7684\u5c5e\u6027\u503c\uff0c\u4ece\u5bf9\u8c61\u4e2d\u53d6\u51fa\u8be5\u5c5e\u6027\u5bf9\u5e94\u7684\u503c\u3002\u662f\u4e2a\u51fd\u6570  \n      if (!object()-&gt;Get(env()-&gt;context(), symbol).ToLocal(&amp;cb_v))  \n        return v8::MaybeLocal&lt;v8::Value&gt;();  \n      // \u662f\u4e2a\u51fd\u6570  \n      if (!cb_v-&gt;IsFunction()) {  \n        return v8::MaybeLocal&lt;v8::Value&gt;();  \n      }  \n      // \u56de\u8c03,\u89c1async_wrap.cc  \n      return MakeCallback(cb_v.As&lt;v8::Function&gt;(), argc, argv);  \n    }  \n</code></pre> <p>\u4ee5\u4e0a\u53ea\u662f\u5165\u53e3\u51fd\u6570\uff0c\u6211\u4eec\u770b\u770b\u771f\u6b63\u7684\u5b9e\u73b0\u3002</p> <pre><code>    MaybeLocal&lt;Value&gt; AsyncWrap::MakeCallback(const Local&lt;Function&gt; cb,  \n                                              int argc,  \n                                              Local&lt;Value&gt;* argv) {  \n\n      MaybeLocal&lt;Value&gt; ret = InternalMakeCallback(env(), object(), cb, argc, argv, context);  \n      return ret;  \n    }  \n</code></pre> <p>\u63a5\u7740\u770b\u4e00\u4e0bInternalMakeCallback</p> <pre><code>    MaybeLocal&lt;Value&gt; InternalMakeCallback(Environment* env,  \n                                           Local&lt;Object&gt; recv,  \n                                           const Local&lt;Function&gt; callback,  \n                                           int argc,  \n                                           Local&lt;Value&gt; argv[],  \n                                           async_context asyncContext) {  \n      // \u2026\u7701\u7565\u5176\u4ed6\u4ee3\u7801\n      // \u6267\u884c\u56de\u8c03  \n      callback-&gt;Call(env-&gt;context(), recv, argc, argv);}  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#63-handlewrap","title":"6.3 HandleWrap","text":"<p>HandleWrap\u662f\u5bf9Libuv uv_handle_t\u7684\u5c01\u88c5,\u4e5f\u662f\u5f88\u591aC++\u7c7b\u7684\u57fa\u7c7b\u3002</p> <pre><code>    class HandleWrap : public AsyncWrap {  \n     public:  \n      // \u64cd\u4f5c\u548c\u5224\u65adhandle\u72b6\u6001\u51fd\u6570\uff0c\u89c1Libuv  \n      static void Close(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n      static void Ref(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n      static void Unref(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n      static void HasRef(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n      static inline bool IsAlive(const HandleWrap* wrap) {  \n        return wrap != nullptr &amp;&amp; wrap-&gt;state_ != kClosed;  \n      }  \n\n      static inline bool HasRef(const HandleWrap* wrap) {  \n        return IsAlive(wrap) &amp;&amp; uv_has_ref(wrap-&gt;GetHandle());  \n      }  \n      // \u83b7\u53d6\u5c01\u88c5\u7684handle  \n      inline uv_handle_t* GetHandle() const { return handle_; }  \n      // \u5173\u95edhandle\uff0c\u5173\u95ed\u6210\u529f\u540e\u6267\u884c\u56de\u8c03  \n      virtual void Close(  \n          v8::Local&lt;v8::Value&gt; close_callback = \n           v8::Local&lt;v8::Value&gt;());  \n\n      static v8::Local&lt;v8::FunctionTemplate&gt; GetConstructorTemplate(\n      Environment* env);  \n\n     protected:  \n      HandleWrap(Environment* env,  \n                 v8::Local&lt;v8::Object&gt; object,  \n                 uv_handle_t* handle,  \n                 AsyncWrap::ProviderType provider);  \n      virtual void OnClose() {}  \n      // handle\u72b6\u6001  \n      inline bool IsHandleClosing() const {  \n        return state_ == kClosing || state_ == kClosed;  \n      }  \n\n     private:  \n      friend class Environment;  \n      friend void GetActiveHandles(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;);  \n      static void OnClose(uv_handle_t* handle);  \n\n      // handle\u961f\u5217  \n      ListNode&lt;HandleWrap&gt; handle_wrap_queue_;  \n      // handle\u7684\u72b6\u6001  \n      enum { kInitialized, kClosing, kClosed } state_;  \n      // \u6240\u6709handle\u7684\u57fa\u7c7b  \n      uv_handle_t* const handle_;  \n    };  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#631-handle","title":"6.3.1 \u65b0\u5efahandle\u548c\u521d\u59cb\u5316","text":"<pre><code>    Local&lt;FunctionTemplate&gt; HandleWrap::GetConstructorTemplate(Environment* env) {  \n      Local&lt;FunctionTemplate&gt; tmpl = env-&gt;handle_wrap_ctor_template();  \n      if (tmpl.IsEmpty()) {  \n        tmpl = env-&gt;NewFunctionTemplate(nullptr);  \n        tmpl-&gt;SetClassName(FIXED_ONE_BYTE_STRING(env-&gt;isolate(), \n                             \"HandleWrap\"));  \n        tmpl-&gt;Inherit(AsyncWrap::GetConstructorTemplate(env));  \n        env-&gt;SetProtoMethod(tmpl, \"close\", HandleWrap::Close);  \n        env-&gt;SetProtoMethodNoSideEffect(tmpl, \n                                            \"hasRef\", \n                                           HandleWrap::HasRef);  \n        env-&gt;SetProtoMethod(tmpl, \"ref\", HandleWrap::Ref);  \n        env-&gt;SetProtoMethod(tmpl, \"unref\", HandleWrap::Unref);  \n        env-&gt;set_handle_wrap_ctor_template(tmpl);  \n      }  \n      return tmpl;  \n    }  \n    /* \n      object\u4e3aC++\u5c42\u4e3aJS\u5c42\u63d0\u4f9b\u7684\u5bf9\u8c61 \n      handle\u4e3a\u5b50\u7c7b\u5177\u4f53\u7684handle\u7c7b\u578b\uff0c\u4e0d\u540c\u6a21\u5757\u4e0d\u4e00\u6837 \n    */  \n    HandleWrap::HandleWrap(Environment* env,  \n                           Local&lt;Object&gt; object,  \n                           uv_handle_t* handle,  \n                           AsyncWrap::ProviderType provider)  \n        : AsyncWrap(env, object, provider),  \n          state_(kInitialized),  \n          handle_(handle) {  \n      // \u4fdd\u5b58Libuv handle\u548cC++\u5bf9\u8c61\u7684\u5173\u7cfb  \n      handle_-&gt;data = this;  \n      HandleScope scope(env-&gt;isolate());  \n      CHECK(env-&gt;has_run_bootstrapping_code());  \n      // \u63d2\u5165handle\u961f\u5217  \n      env-&gt;handle_wrap_queue()-&gt;PushBack(this);  \n    }  \n</code></pre> <p>HandleWrap\u7ee7\u627fBaseObject\u7c7b\uff0c\u521d\u59cb\u5316\u540e\u5173\u7cfb\u56fe\u5982\u56fe6-2\u6240\u793a\u3002  \u56fe6-2</p>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#632-handle","title":"6.3.2 \u5224\u65ad\u548c\u64cd\u4f5chandle\u72b6\u6001","text":"<pre><code>    // \u4fee\u6539handle\u4e3a\u6d3b\u8dc3\u72b6\u6001  \n    void HandleWrap::Ref(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      HandleWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, args.Holder());  \n\n      if (IsAlive(wrap))  \n        uv_ref(wrap-&gt;GetHandle());  \n    }  \n\n    // \u4fee\u6539hande\u4e3a\u4e0d\u6d3b\u8dc3\u72b6\u6001  \n    void HandleWrap::Unref(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      HandleWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, args.Holder());  \n\n      if (IsAlive(wrap))  \n        uv_unref(wrap-&gt;GetHandle());  \n    }  \n\n    // \u5224\u65adhandle\u662f\u5426\u5904\u4e8e\u6d3b\u8dc3\u72b6\u6001  \n    void HandleWrap::HasRef(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      HandleWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, args.Holder());  \n      args.GetReturnValue().Set(HasRef(wrap));  \n    }  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#633-handle","title":"6.3.3 \u5173\u95edhandle","text":"<pre><code>    // \u5173\u95edhandle\uff08JS\u5c42\u8c03\u7528\uff09\uff0c\u6210\u529f\u540e\u6267\u884c\u56de\u8c03  \n    void HandleWrap::Close(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      HandleWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, args.Holder());  \n      // \u4f20\u5165\u56de\u8c03  \n      wrap-&gt;Close(args[0]);  \n    }  \n    // \u771f\u6b63\u5173\u95edhandle\u7684\u51fd\u6570  \n    void HandleWrap::Close(Local&lt;Value&gt; close_callback) {  \n      // \u6b63\u5728\u5173\u95ed\u6216\u5df2\u7ecf\u5173\u95ed  \n      if (state_ != kInitialized)  \n        return;  \n      // \u8c03\u7528Libuv\u51fd\u6570  \n      uv_close(handle_, OnClose);  \n      // \u5173\u95ed\u4e2d  \n      state_ = kClosing;  \n      // \u4f20\u4e86\u56de\u8c03\u5219\u4fdd\u5b58\u8d77\u6765  \n      if (!close_callback.IsEmpty() &amp;&amp; \n           close_callback-&gt;IsFunction() &amp;&amp;  \n          !persistent().IsEmpty()) {  \n        object()-&gt;Set(env()-&gt;context(),  \n                      env()-&gt;handle_onclose_symbol(),  \n                      close_callback).Check();  \n      }  \n    }  \n\n    // \u5173\u95edhandle\u6210\u529f\u540e\u56de\u8c03  \n    void HandleWrap::OnClose(uv_handle_t* handle) {  \n      BaseObjectPtr&lt;HandleWrap&gt; wrap { \n         static_cast&lt;HandleWrap*&gt;(handle-&gt;data) \n      };  \n      wrap-&gt;Detach();  \n\n      Environment* env = wrap-&gt;env();  \n      HandleScope scope(env-&gt;isolate());  \n      Context::Scope context_scope(env-&gt;context());  \n      wrap-&gt;state_ = kClosed;  \n\n      wrap-&gt;OnClose();  \n      wrap-&gt;handle_wrap_queue_.Remove();  \n      // \u6709onclose\u56de\u8c03\u5219\u6267\u884c  \n      if (!wrap-&gt;persistent().IsEmpty() &amp;&amp;  \n          wrap-&gt;object()-&gt;Has(env-&gt;context(), \n                                 env-&gt;handle_onclose_symbol())  \n          .FromMaybe(false)) {  \n        wrap-&gt;MakeCallback(env-&gt;handle_onclose_symbol(), \n                             0, \n                             nullptr);  \n      }  \n    }  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#64-reqwrap","title":"6.4 ReqWrap","text":"<p>ReqWrap\u8868\u793a\u901a\u8fc7Libuv\u5bf9handle\u7684\u4e00\u6b21\u8bf7\u6c42\u3002</p>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#641-reqwrapbase","title":"6.4.1 ReqWrapBase","text":"<pre><code>    class ReqWrapBase {  \n     public:  \n      explicit inline ReqWrapBase(Environment* env);  \n      virtual ~ReqWrapBase() = default;  \n      virtual void Cancel() = 0;  \n      virtual AsyncWrap* GetAsyncWrap() = 0;  \n\n     private:  \n      // \u4e00\u4e2a\u5e26\u524d\u540e\u6307\u9488\u7684\u8282\u70b9  \n      ListNode&lt;ReqWrapBase&gt; req_wrap_queue_;  \n    };  \n</code></pre> <p>ReqWrapBase\u4e3b\u8981\u662f\u5b9a\u4e49\u63a5\u53e3\u7684\u534f\u8bae\u3002\u6211\u4eec\u770b\u4e00\u4e0bReqWrapBase\u7684\u5b9e\u73b0</p> <pre><code>    ReqWrapBase::ReqWrapBase(Environment* env) {  \n      env-&gt;req_wrap_queue()-&gt;PushBack(this);  \n    }  \n</code></pre> <p>ReqWrapBase\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u4f1a\u628a\u81ea\u5df1\u52a0\u5230env\u5bf9\u8c61\u7684req\u961f\u5217\u4e2d\u3002</p>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#642-reqwrap","title":"6.4.2 ReqWrap","text":"<pre><code>    template &lt;typename T&gt;  \n    class ReqWrap : public AsyncWrap, public ReqWrapBase {  \n     public:  \n      inline ReqWrap(Environment* env,  \n                     v8::Local&lt;v8::Object&gt; object,  \n                     AsyncWrap::ProviderType provider);  \n      inline ~ReqWrap() override;  \n      inline void Dispatched();  \n      inline void Reset();  \n      T* req() { return &amp;req_; }  \n      inline void Cancel() final;  \n      inline AsyncWrap* GetAsyncWrap() override;  \n      static ReqWrap* from_req(T* req);  \n      template &lt;typename LibuvFunction, typename... Args&gt;  \n      // \u8c03\u7528Libuv\n      inline int Dispatch(LibuvFunction fn, Args... args);  \n\n     public:  \n      typedef void (*callback_t)();  \n      callback_t original_callback_ = nullptr;  \n\n     protected:  \n      T req_;  \n    };  \n\n    }   \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u5b9e\u73b0</p> <pre><code>    template &lt;typename T&gt;  \n    ReqWrap&lt;T&gt;::ReqWrap(Environment* env,  \n                        v8::Local&lt;v8::Object&gt; object,  \n                        AsyncWrap::ProviderType provider)  \n        : AsyncWrap(env, object, provider),  \n          ReqWrapBase(env) {  \n      // \u521d\u59cb\u5316\u72b6\u6001  \n      Reset();  \n    }  \n\n    // \u4fdd\u5b58libuv\u6570\u636e\u7ed3\u6784\u548cReqWrap\u5b9e\u4f8b\u7684\u5173\u7cfb  \n    template &lt;typename T&gt;  \n    void ReqWrap&lt;T&gt;::Dispatched() {  \n      req_.data = this;  \n    }  \n\n    // \u91cd\u7f6e\u5b57\u6bb5  \n    template &lt;typename T&gt;  \n    void ReqWrap&lt;T&gt;::Reset() {  \n      original_callback_ = nullptr;  \n      req_.data = nullptr;  \n    }  \n\n    // \u901a\u8fc7req\u6210\u5458\u627e\u6240\u5c5e\u5bf9\u8c61\u7684\u5730\u5740  \n    template &lt;typename T&gt;  \n    ReqWrap&lt;T&gt;* ReqWrap&lt;T&gt;::from_req(T* req) {  \n      return ContainerOf(&amp;ReqWrap&lt;T&gt;::req_, req);  \n    }  \n\n    // \u53d6\u6d88\u7ebf\u7a0b\u6c60\u4e2d\u7684\u8bf7\u6c42  \n    template &lt;typename T&gt;  \n    void ReqWrap&lt;T&gt;::Cancel() {  \n      if (req_.data == this)  \n        uv_cancel(reinterpret_cast&lt;uv_req_t*&gt;(&amp;req_));  \n    }  \n\n    template &lt;typename T&gt;\n    AsyncWrap* ReqWrap&lt;T&gt;::GetAsyncWrap() {\n      return this;\n    }\n    // \u8c03\u7528Libuv\u51fd\u6570  \n    template &lt;typename T&gt;  \n    template &lt;typename LibuvFunction, typename... Args&gt;  \n    int ReqWrap&lt;T&gt;::Dispatch(LibuvFunction fn, Args... args) {  \n      Dispatched();  \n      int err = CallLibuvFunction&lt;T, LibuvFunction&gt;::Call(  \n          // Libuv\u51fd\u6570\n          fn,  \n          env()-&gt;event_loop(),  \n          req(),  \n          MakeLibuvRequestCallback&lt;T, Args&gt;::For(this, args)...);  \n      if (err &gt;= 0)  \n        env()-&gt;IncreaseWaitingRequestCounter();  \n      return err;  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230ReqWrap\u62bd\u8c61\u4e86\u8bf7\u6c42Libuv\u7684\u8fc7\u7a0b\uff0c\u5177\u4f53\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u7531\u5b50\u7c7b\u5b9e\u73b0\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u67d0\u4e2a\u5b50\u7c7b\u7684\u5b9e\u73b0\u3002</p> <pre><code>    // \u8bf7\u6c42Libuv\u65f6\uff0c\u6570\u636e\u7ed3\u6784\u662fuv_connect_t\uff0c\u8868\u793a\u4e00\u6b21\u8fde\u63a5\u8bf7\u6c42  \n    class ConnectWrap : public ReqWrap&lt;uv_connect_t&gt; {  \n     public:  \n      ConnectWrap(Environment* env,  \n                  v8::Local&lt;v8::Object&gt; req_wrap_obj,  \n                  AsyncWrap::ProviderType provider);  \n    };  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#65-jsc","title":"6.5 JS\u5982\u4f55\u4f7f\u7528C++","text":"<p>JS\u8c03\u7528C++\u6a21\u5757\u662fV8\u63d0\u4f9b\u7684\u80fd\u529b\uff0cNode.js\u662f\u4f7f\u7528\u4e86\u8fd9\u4e2a\u80fd\u529b\u3002\u8fd9\u6837\u6211\u4eec\u53ea\u9700\u8981\u9762\u5bf9JS\uff0c\u5269\u4e0b\u7684\u4e8b\u60c5\u4ea4\u7ed9Node.js\u5c31\u884c\u3002\u672c\u6587\u9996\u5148\u8bb2\u4e00\u4e0b\u5229\u7528V8\u5982\u4f55\u5b9e\u73b0JS\u8c03\u7528C++\uff0c\u7136\u540e\u518d\u8bb2\u4e00\u4e0bNode.js\u662f\u600e\u4e48\u505a\u7684\u3002</p> <p>1 JS\u8c03\u7528C++ \u9996\u5148\u4ecb\u7ecd\u4e00\u4e0bV8\u4e2d\u4e24\u4e2a\u975e\u5e38\u6838\u5fc3\u7684\u7c7bFunctionTemplate\u548cObjectTemplate\u3002\u987e\u540d\u601d\u4e49\uff0c\u8fd9\u4e24\u4e2a\u7c7b\u662f\u5b9a\u4e49\u6a21\u677f\u7684\uff0c\u597d\u6bd4\u5efa\u623f\u5b50\u65f6\u7684\u8bbe\u8ba1\u56fe\u4e00\u6837\uff0c\u901a\u8fc7\u8bbe\u8ba1\u56fe\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9020\u51fa\u5bf9\u5e94\u7684\u623f\u5b50\u3002V8\u4e5f\u662f\uff0c\u5b9a\u4e49\u67d0\u79cd\u6a21\u677f\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u6a21\u677f\u521b\u5efa\u51fa\u5bf9\u5e94\u7684\u5b9e\u4f8b\u3002\u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b\u8fd9\u4e9b\u6982\u5ff5\uff08\u4e3a\u4e86\u65b9\u4fbf\uff0c\u4e0b\u9762\u90fd\u662f\u4f2a\u4ee3\u7801)\u3002</p> <p>1.1 \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6a21\u677f</p> <pre><code>    Local&lt;FunctionTemplate&gt; functionTemplate = v8::FunctionTemplate::New(isolate(), New);  \n    // \u5b9a\u4e49\u51fd\u6570\u7684\u540d\u5b57    \n    functionTemplate-&gt;SetClassName(\u2018TCP\u2019)  \n</code></pre> <p>\u9996\u5148\u5b9a\u4e49\u4e00\u4e2aFunctionTemplate\u5bf9\u8c61\u3002\u6211\u4eec\u770b\u5230FunctionTemplate\u7684\u7b2c\u4e8c\u4e2a\u5165\u53c2\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5f53\u6211\u4eec\u6267\u884c\u7531FunctionTemplate\u521b\u5efa\u7684\u51fd\u6570\u65f6\uff0cv8\u5c31\u4f1a\u6267\u884cNew\u51fd\u6570\u3002\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e0d\u4f20\u3002 1.2 \u5b9a\u4e49\u51fd\u6570\u6a21\u677f\u7684prototype\u5185\u5bb9 prototype\u5c31\u662fJS\u91cc\u7684function.prototype\u3002\u5982\u679c\u4f60\u7406\u89e3JS\u91cc\u7684\u77e5\u8bc6\uff0c\u5c31\u5f88\u5bb9\u6613\u7406\u89e3C++\u7684\u4ee3\u7801\u3002</p> <pre><code>    v8::Local&lt;v8::FunctionTemplate&gt; t = v8::FunctionTemplate::New(isolate(), callback);    \n    t-&gt;SetClassName('test');     \n    // \u5728prototype\u4e0a\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027        \n    t-&gt;PrototypeTemplate()-&gt;Set('hello', 'world');  \n</code></pre> <p>1.3 \u5b9a\u4e49\u51fd\u6570\u6a21\u677f\u5bf9\u5e94\u7684\u5b9e\u4f8b\u6a21\u677f\u7684\u5185\u5bb9 \u5b9e\u4f8b\u6a21\u677f\u5c31\u662f\u4e00\u4e2aObjectTemplate\u5bf9\u8c61\u3002\u5b83\u5b9a\u4e49\u4e86\uff0c\u5f53\u4ee5new\u7684\u65b9\u5f0f\u6267\u884c\u7531\u51fd\u6570\u6a21\u677f\u521b\u5efa\u51fa\u6765\u7684\u51fd\u6570\u65f6\uff0c\u8fd4\u56de\u503c\u6240\u5177\u6709\u7684\u5c5e\u6027\u3002</p> <pre><code>    function A() {    \n        this.a = 1;    \n        this.b = 2;    \n    }    \n    new A();    \n</code></pre> <p>\u5b9e\u4f8b\u6a21\u677f\u7c7b\u4f3c\u4e0a\u9762\u4ee3\u7801\u4e2dA\u51fd\u6570\u91cc\u9762\u7684\u4ee3\u7801\u3002\u6211\u4eec\u770b\u770b\u5728V8\u91cc\u600e\u4e48\u5b9a\u4e49\u3002</p> <pre><code>    t-&gt;InstanceTemplate()-&gt;Set(key, val);  \n    t-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);  \n</code></pre> <p>InstanceTemplate\u8fd4\u56de\u7684\u662f\u4e00\u4e2aObjectTemplate\u5bf9\u8c61\u3002SetInternalFieldCount\u8fd9\u4e2a\u51fd\u6570\u6bd4\u8f83\u7279\u6b8a\uff0c\u4e5f\u662f\u6bd4\u8f83\u91cd\u8981\u7684\u4e00\u4e2a\u5730\u65b9\uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u8c61\u5c31\u662f\u4e00\u5757\u5185\u5b58\uff0c\u5bf9\u8c61\u6709\u5b83\u81ea\u5df1\u7684\u5185\u5b58\u5e03\u5c40\uff0c\u6211\u4eec\u77e5\u9053\u5728C++\u91cc\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u4e5f\u5c31\u5b9a\u4e49\u4e86\u5bf9\u8c61\u7684\u5e03\u5c40\u3002\u6bd4\u5982\u6211\u4eec\u6709\u4ee5\u4e0b\u5b9a\u4e49\u3002</p> <pre><code>    class demo    \n    {    \n     private:    \n      int a;    \n      int b;    \n    };  \n</code></pre> <p>\u5728\u5185\u5b58\u4e2d\u5e03\u5c40\u5982\u56fe6-3\u6240\u793a\u3002  \u56fe6-3 \u4e0a\u9762\u8fd9\u79cd\u65b9\u5f0f\u6709\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u7c7b\u5b9a\u4e49\u4e4b\u540e\uff0c\u5185\u5b58\u5e03\u5c40\u5c31\u56fa\u5b9a\u4e86\u3002\u800cV8\u662f\u81ea\u5df1\u53bb\u63a7\u5236\u5bf9\u8c61\u7684\u5185\u5b58\u5e03\u5c40\u7684\u3002\u5f53\u6211\u4eec\u5728V8\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u7684\u65f6\u5019\uff0c\u662f\u6ca1\u6709\u4efb\u4f55\u5c5e\u6027\u7684\u3002\u6211\u4eec\u770b\u4e00\u4e0bV8\u4e2dHeapObject\u7c7b\u7684\u5b9a\u4e49\u3002</p> <pre><code>    class HeapObject: public Object {    \n      static const int kMapOffset = Object::kSize; // Object::kSize\u662f0    \n      static const int kSize = kMapOffset + kPointerSize;    \n    };   \n</code></pre> <p>\u8fd9\u65f6\u5019\u7684\u5185\u5b58\u5e03\u5c40\u5982\u4e0b\u3002  \u7136\u540e\u6211\u4eec\u518d\u770b\u4e00\u4e0bHeapObject\u5b50\u7c7bHeapNumber\u7684\u5b9a\u4e49\u3002</p> <pre><code>    class HeapNumber: public HeapObject {    \n      // kSize\u4e4b\u524d\u7684\u7a7a\u95f4\u5b58\u50a8map\u5bf9\u8c61\u7684\u6307\u9488    \n      static const int kValueOffset = HeapObject::kSize;    \n      // kValueOffset - kSize\u4e4b\u95f4\u5b58\u50a8\u6570\u5b57\u7684\u503c    \n      static const int kSize = kValueOffset + kDoubleSize;    \n    };  \n</code></pre> <p>\u5185\u5b58\u5e03\u5c40\u5982\u56fe6-4\u6240\u793a\u3002  \u56fe6-4</p> <p>\u6211\u4eec\u53d1\u73b0\u8fd9\u4e9b\u7c7b\u53ea\u6709\u51e0\u4e2a\u7c7b\u53d8\u91cf\uff0c\u7c7b\u53d8\u91cf\u662f\u4e0d\u4fdd\u5b58\u5728\u5bf9\u8c61\u5185\u5b58\u7a7a\u95f4\u7684\u3002\u8fd9\u4e9b\u7c7b\u53d8\u91cf\u5c31\u662f\u5b9a\u4e49\u4e86\u5bf9\u8c61\u6bcf\u4e2a\u57df\u6240\u5360\u5185\u5b58\u7a7a\u95f4\u7684\u4fe1\u606f\uff0c\u5f53\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2aHeapObject\u5bf9\u8c61\u7684\u65f6\u5019\uff0cV8\u9996\u5148\u7533\u8bf7\u4e00\u5757\u5185\u5b58\uff0c\u7136\u540e\u628a\u8fd9\u5757\u5185\u5b58\u9996\u5730\u5740\u5f3a\u884c\u8f6c\u6210\u5bf9\u5e94\u5bf9\u8c61\u7684\u6307\u9488\u3002\u7136\u540e\u901a\u8fc7\u7c7b\u53d8\u91cf\u5bf9\u5c5e\u6027\u7684\u5185\u5b58\u8fdb\u884c\u5b58\u53d6\u3002\u6211\u4eec\u770b\u770b\u5728V8\u91cc\u5982\u4f55\u7533\u8bf7\u4e00\u4e2aHeapNumber\u5bf9\u8c61</p> <pre><code>    Object* Heap::AllocateHeapNumber(double value, PretenureFlag pretenure) {    \n      // \u5728\u54ea\u4e2a\u7a7a\u95f4\u5206\u914d\u5185\u5b58\uff0c\u6bd4\u5982\u65b0\u751f\u4ee3\uff0c\u8001\u751f\u4ee3    \n      AllocationSpace space = (pretenure == TENURED) ? CODE_SPACE : NEW_SPACE;    \n      // \u5728space\u4e0a\u5206\u914d\u4e00\u4e2aHeapNumber\u5bf9\u8c61\u5927\u5c0f\u7684\u5185\u5b58    \n      Object* result = AllocateRaw(HeapNumber::kSize, space);    \n      /*  \n          \u8f6c\u6210HeapObect\uff0c\u8bbe\u7f6emap\u5c5e\u6027\uff0cmap\u5c5e\u6027\u662f\u8868\u793a\u5bf9\u8c61\u7c7b\u578b\u3001\u5927\u5c0f\u7b49\u4fe1\u606f\u7684  \n      */    \n      HeapObject::cast(result)-&gt;set_map(heap_number_map());    \n      // \u8f6c\u6210HeapNumber\u5bf9\u8c61    \n      HeapNumber::cast(result)-&gt;set_value(value);    \n      return result;    \n    }   \n</code></pre> <p>\u56de\u5230\u5bf9\u8c61\u6a21\u677f\u7684\u95ee\u9898\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5bf9\u8c61\u6a21\u677f\u7684\u5b9a\u4e49\u3002</p> <pre><code>    class TemplateInfo: public Struct {    \n      static const int kTagOffset          = HeapObject::kSize;    \n      static const int kPropertyListOffset = kTagOffset + kPointerSize;    \n      static const int kHeaderSize         = kPropertyListOffset + kPointerSize;    \n    };    \n\n    class ObjectTemplateInfo: public TemplateInfo {    \n      static const int kConstructorOffset = TemplateInfo::kHeaderSize;    \n      static const int kInternalFieldCountOffset = kConstructorOffset + kPointerSize;    \n      static const int kSize = kInternalFieldCountOffset + kHeaderSize;    \n    };   \n</code></pre> <p>\u5185\u5b58\u5e03\u5c40\u5982\u56fe6-5\u6240\u793a\u3002  \u56fe6-5</p> <p>\u56de\u5230\u5bf9\u8c61\u6a21\u677f\u7684\u95ee\u9898\uff0c\u6211\u4eec\u770b\u770bSet(key, val)\u505a\u4e86\u4ec0\u4e48\u3002</p> <pre><code>    void Template::Set(v8::Handle&lt;String&gt; name, v8::Handle&lt;Data&gt; value,    \n                       v8::PropertyAttribute attribute) {    \n      // ...    \n      i::Handle&lt;i::Object&gt; list(Utils::OpenHandle(this)-&gt;property_list());    \n      NeanderArray array(list);    \n      array.add(Utils::OpenHandle(*name));    \n      array.add(Utils::OpenHandle(*value));    \n      array.add(Utils::OpenHandle(*v8::Integer::New(attribute)));    \n    }    \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u5927\u81f4\u5c31\u662f\u7ed9\u4e00\u4e2alist\u540e\u9762\u8ffd\u52a0\u4e00\u4e9b\u5185\u5bb9\u3002\u6211\u4eec\u770b\u770b\u8fd9\u4e2alist\u662f\u600e\u4e48\u6765\u7684\uff0c\u5373property_list\u51fd\u6570\u7684\u5b9e\u73b0\u3002</p> <pre><code>    // \u8bfb\u53d6\u5bf9\u8c61\u4e2d\u67d0\u4e2a\u5c5e\u6027\u7684\u503c    \n    #define READ_FIELD(p, offset) (*reinterpret_cast&lt;Object**&gt;(FIELD_ADDR(p, offset))    \n\n    static Object* cast(Object* value) {     \n        return value;    \n    }    \n\n    Object* TemplateInfo::property_list() {     \n        return Object::cast(READ_FIELD(this, kPropertyListOffset));     \n    }    \n</code></pre> <p>\u4ece\u4e0a\u9762\u4ee3\u7801\u4e2d\u6211\u4eec\u77e5\u9053\uff0c\u5185\u90e8\u5e03\u5c40\u5982\u56fe6-6\u6240\u793a\u3002  \u56fe6-6</p> <p>\u6839\u636e\u5185\u5b58\u5e03\u5c40\uff0c\u6211\u4eec\u77e5\u9053property_list\u7684\u503c\u662flist\u6307\u5411\u7684\u503c\u3002\u6240\u4ee5Set(key, val)\u64cd\u4f5c\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u5bf9\u8c61\u672c\u8eab\u7684\u5185\u5b58\uff0c\u5bf9\u8c61\u5229\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4e00\u5757\u5185\u5b58\u4fdd\u5b58Set(key, val)\u7684\u503c\u3002SetInternalFieldCount\u51fd\u6570\u5c31\u4e0d\u4e00\u6837\u4e86\uff0c\u5b83\u4f1a\u5f71\u54cd\uff08\u6269\u5f20\uff09\u5bf9\u8c61\u672c\u8eab\u7684\u5185\u5b58\u3002\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5b83\u7684\u5b9e\u73b0\u3002</p> <pre><code>    void ObjectTemplate::SetInternalFieldCount(int value) {    \n      // \u4fee\u6539\u7684\u662fkInternalFieldCountOffset\u5bf9\u5e94\u7684\u5185\u5b58\u7684\u503c    \n      Utils::OpenHandle(this)-&gt;set_internal_field_count(i::Smi::FromInt(value));    \n    }    \n</code></pre> <p>\u6211\u4eec\u770b\u5230SetInternalFieldCount\u51fd\u6570\u7684\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5728\u5bf9\u8c61\u672c\u8eab\u7684\u5185\u5b58\u4e2d\u4fdd\u5b58\u4e00\u4e2a\u6570\u5b57\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\u5b57\u6bb5\u7684\u4f7f\u7528\u3002\u540e\u9762\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u5b83\u7684\u7528\u5904\u3002</p> <pre><code>    Handle&lt;JSFunction&gt; Factory::CreateApiFunction(    \n        Handle&lt;FunctionTemplateInfo&gt; obj,    \n        bool is_global) {    \n\n      int internal_field_count = 0;    \n      if (!obj-&gt;instance_template()-&gt;IsUndefined()) {    \n        // \u83b7\u53d6\u51fd\u6570\u6a21\u677f\u7684\u5b9e\u4f8b\u6a21\u677f    \n        Handle&lt;ObjectTemplateInfo&gt; instance_template = Handle&lt;ObjectTemplateInfo&gt;(ObjectTemplateInfo::cast(obj-&gt;instance_template()));    \n        // \u83b7\u53d6\u5b9e\u4f8b\u6a21\u677f\u7684internal_field_count\u5b57\u6bb5\u7684\u503c\uff08\u901a\u8fc7SetInternalFieldCount\u8bbe\u7f6e\u7684\u90a3\u4e2a\u503c\uff09    \n        internal_field_count = Smi::cast(instance_template-&gt;internal_field_count())-&gt;value();    \n      }    \n      // \u8ba1\u7b97\u65b0\u5efa\u5bf9\u8c61\u9700\u8981\u7684\u7a7a\u95f4\uff0c\u5982\u679c    \n      int instance_size = kPointerSize * internal_field_count;    \n      if (is_global) {    \n        instance_size += JSGlobalObject::kSize;    \n      } else {    \n        instance_size += JSObject::kHeaderSize;    \n      }    \n\n      InstanceType type = is_global ? JS_GLOBAL_OBJECT_TYPE : JS_OBJECT_TYPE;    \n      // \u65b0\u5efa\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61    \n      Handle&lt;JSFunction&gt; result =    \n          Factory::NewFunction(Factory::empty_symbol(), type, instance_size,    \n                               code, true);    \n    }    \n</code></pre> <p>\u6211\u4eec\u770b\u5230internal_field_count\u7684\u503c\u7684\u610f\u4e49\u662f\uff0c\u4f1a\u6269\u5f20\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u6bd4\u5982\u4e00\u4e2a\u5bf9\u8c61\u672c\u8eab\u53ea\u6709n\u5b57\u8282\uff0c\u5982\u679c\u5b9a\u4e49internal_field_count\u7684\u503c\u662f1\uff0c\u5bf9\u8c61\u7684\u5185\u5b58\u5c31\u4f1a\u53d8\u6210n+internal_field_count * \u4e00\u4e2a\u6307\u9488\u7684\u5b57\u8282\u6570\u3002\u5185\u5b58\u5e03\u5c40\u5982\u56fe6-7\u6240\u793a\u3002  \u56fe6-7 1.4 \u901a\u8fc7\u51fd\u6570\u6a21\u677f\u521b\u5efa\u4e00\u4e2a\u51fd\u6570     Local functionTemplate = v8::FunctionTemplate::New(isolate(), New);     global-&gt;Set('demo', functionTemplate -&gt;GetFunction()); \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728JS\u91cc\u76f4\u63a5\u8c03\u7528demo\u8fd9\u4e2a\u53d8\u91cf\uff0c\u7136\u540e\u5bf9\u5e94\u7684\u51fd\u6570\u5c31\u4f1a\u88ab\u6267\u884c\u3002\u8fd9\u5c31\u662fJS\u8c03\u7528C++\u7684\u539f\u7406\u3002 <p>2 Node.js\u662f\u5982\u4f55\u5904\u7406JS\u8c03\u7528C++\u95ee\u9898\u7684 \u6211\u4eec\u4ee5TCP\u6a21\u5757\u4e3a\u4f8b\u3002</p> <pre><code>    const { TCP } = process.binding('tcp_wrap');    \n    new TCP(...);   \n</code></pre> <p>Node.js\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u53d8\u91cfprocess\u7edf\u4e00\u5904\u7406C++\u6a21\u5757\u7684\u8c03\u7528\uff0c\u5177\u4f53\u53c2\u8003\u6a21\u5757\u52a0\u8f7d\u7ae0\u8282\u7684\u5185\u5bb9\u3002\u5728Node.js\u4e2d\uff0cC++\u6a21\u5757\uff08\u7c7b\uff09\u4e00\u822c\u53ea\u4f1a\u5b9a\u4e49\u5bf9\u5e94\u7684Libuv\u7ed3\u6784\u4f53\u548c\u4e00\u7cfb\u5217\u7c7b\u51fd\u6570\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u6a21\u7248\uff0c\u5e76\u4f20\u5165\u4e00\u4e2a\u56de\u8c03\uff0c\u63a5\u7740\u628a\u8fd9\u4e9b\u7c7b\u51fd\u6570\u6302\u8f7d\u5230\u51fd\u6570\u6a21\u677f\u4e2d,\u6700\u540e\u901a\u8fc7\u51fd\u6570\u6a21\u677f\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570F\u7ed9JS\u5c42\u4f7f\u7528\uff0c\u7ffb\u8bd1\u6210JS\u5927\u81f4\u5982\u4e0b</p> <pre><code>    // Libuv  \n    function uv_tcp_connect(uv_tcp_t, addr,cb) { cb(); }    \n\n    // C++  \n    class TCPWrap {    \n\n      uv_tcp_t = {};    \n\n      static Connect(cb) {    \n\n        const tcpWrap = this[0];    \n\n        uv_tcp_connect(  \n\n          tcpWrap.uv_tcp_t,  \n\n          {ip: '127.0.0.1', port: 80},  \n\n         () =&gt; { cb(); }  \n\n        );    \n\n     }    \n\n    }    \n\n    function FunctionTemplate(cb) {    \n       function Tmp() {  \n        Object.assign(this, map);  \n        cb(this);  \n       }  \n       const map = {};  \n       return {  \n        PrototypeTemplate: function() {  \n            return {  \n                set: function(k, v) {  \n                    Tmp.prototype[k] = v;  \n                }  \n            }  \n        },  \n        InstanceTemplate: function() {  \n            return {  \n                set: function(k, v) {  \n                    map[k] = v;  \n                }  \n            }  \n        },  \n        GetFunction() {  \n            return Tmp;  \n        }  \n       }   \n\n    }    \n\n    const TCPFunctionTemplate = FunctionTemplate((target) =&gt; { target[0] = new TCPWrap(); })    \n\n    TCPFunctionTemplate.PrototypeTemplate().set('connect', TCPWrap.Connect);  \n    TCPFunctionTemplate.InstanceTemplate().set('name', 'hi');  \n    const TCP = TCPFunctionTemplate.GetFunction();  \n\n    // js  \n    const tcp = new TCP();  \n    tcp.connect(() =&gt; { console.log('\u8fde\u63a5\u6210\u529f'); });    \n    tcp.name;  \n</code></pre> <p>\u6211\u4eec\u4eceC++\u7684\u5c42\u9762\u5206\u6790\u6267\u884cnew TCP()\u7684\u903b\u8f91\uff0c\u7136\u540e\u518d\u5206\u6790connect\u7684\u903b\u8f91\uff0c\u8fd9\u4e24\u4e2a\u903b\u8f91\u6d89\u53ca\u7684\u673a\u5236\u662f\u5176\u5b83C++\u6a21\u5757\u4e5f\u4f1a\u4f7f\u7528\u5230\u7684\u3002\u56e0\u4e3aTCP\u5bf9\u5e94\u7684\u51fd\u6570\u662fInitialize\u51fd\u6570\u91cc\u7684t-&gt;GetFunction()\u5bf9\u5e94\u7684\u503c\u3002\u6240\u4ee5new TCP()\u7684\u65f6\u5019\uff0cV8\u9996\u5148\u4f1a\u521b\u5efa\u4e00\u4e2aC++\u5bf9\u8c61\uff0c\u7136\u540e\u6267\u884cNew\u51fd\u6570\u3002</p> <pre><code>    void TCPWrap::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n\n      int type_value = args[0].As&lt;Int32&gt;()-&gt;Value();  \n      TCPWrap::SocketType type = static_cast&lt;TCPWrap::SocketType&gt;(type_value);  \n\n      ProviderType provider;  \n      switch (type) {  \n        case SOCKET:  \n          provider = PROVIDER_TCPWRAP;  \n          break;  \n        case SERVER:  \n          provider = PROVIDER_TCPSERVERWRAP;  \n          break;  \n        default:  \n          UNREACHABLE();  \n      }  \n      /*  \n        args.This()\u4e3av8\u63d0\u4f9b\u7684\u4e00\u4e2aC++\u5bf9\u8c61\uff08\u7531Initialize\u51fd\u6570\u5b9a\u4e49\u7684\u6a21\u5757\u521b\u5efa\u7684\uff09  \n        \u8c03\u7528\u8be5C++\u5bf9\u8c61\u7684SetAlignedPointerInInternalField(0,this)\u5173\u8054this\uff08new TCPWrap()\uff09,  \n        \u89c1HandleWrap  \n      */   \n\n      new TCPWrap(env, args.This(), provider);  \n    }  \n</code></pre> <p>\u6211\u4eec\u6cbf\u7740TCPWrap\u7684\u7ee7\u627f\u5173\u7cfb\uff0c\u4e00\u76f4\u5230HandleWrap</p> <pre><code>    HandleWrap::HandleWrap(Environment* env,  \n                           Local&lt;Object&gt; object,  \n                           uv_handle_t* handle,  \n                           AsyncWrap::ProviderType provider)  \n        : AsyncWrap(env, object, provider),  \n          state_(kInitialized),  \n          handle_(handle) {  \n      // \u4fdd\u5b58Libuv handle\u548cC++\u5bf9\u8c61\u7684\u5173\u7cfb  \n      handle_-&gt;data = this;  \n      HandleScope scope(env-&gt;isolate());    \n      // \u63d2\u5165handle\u961f\u5217  \n      env-&gt;handle_wrap_queue()-&gt;PushBack(this);  \n    }  \n</code></pre> <p>HandleWrap\u9996\u5148\u4fdd\u5b58\u4e86Libuv\u7ed3\u6784\u4f53\u548cC++\u5bf9\u8c61\u7684\u5173\u7cfb\u3002\u7136\u540e\u6211\u4eec\u7ee7\u7eed\u6cbf\u7740AsyncWrap\u5206\u6790\uff0cAsyncWrap\u7ee7\u627fBaseObject\uff0c\u6211\u4eec\u76f4\u63a5\u770bBaseObject\u3002</p> <pre><code>    // \u628a\u5bf9\u8c61\u5b58\u50a8\u5230persistent_handle_\u4e2d\uff0c\u5fc5\u8981\u7684\u65f6\u5019\u901a\u8fc7object()\u53d6\u51fa\u6765  \n    BaseObject::BaseObject(Environment* env, v8::Local&lt;v8::Object&gt; object)  \n        : persistent_handle_(env-&gt;isolate(), object), env_(env) {  \n      // \u628athis\u5b58\u5230object\u4e2d  \n      object-&gt;SetAlignedPointerInInternalField(0, static_cast&lt;void*&gt;(this));  \n      env-&gt;AddCleanupHook(DeleteMe, static_cast&lt;void*&gt;(this));  \n      env-&gt;modify_base_object_count(1);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770bSetAlignedPointerInInternalField\u3002</p> <pre><code>    void v8::Object::SetAlignedPointerInInternalField(int index, void* value) {    \n      i::Handle&lt;i::JSReceiver&gt; obj = Utils::OpenHandle(this);    \n      i::Handle&lt;i::JSObject&gt;::cast(obj)-&gt;SetEmbedderField(    \n          index, EncodeAlignedAsSmi(value, location));    \n    }    \n\n    void JSObject::SetEmbedderField(int index, Smi* value) {    \n      // GetHeaderSize\u4e3a\u5bf9\u8c61\u56fa\u5b9a\u5e03\u5c40\u7684\u5927\u5c0f\uff0ckPointerSize * index\u4e3a\u62d3\u5c55\u7684\u5185\u5b58\u5927\u5c0f\uff0c\u6839\u636e\u7d22\u5f15\u627e\u5230\u5bf9\u5e94\u4f4d\u7f6e    \n      int offset = GetHeaderSize() + (kPointerSize * index);    \n      // \u5199\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5185\u5b58\uff0c\u5373\u4fdd\u5b58\u5bf9\u5e94\u7684\u5185\u5bb9\u5230\u5185\u5b58    \n      WRITE_FIELD(this, offset, value);    \n    }   \n</code></pre> <p>SetAlignedPointerInInternalField\u51fd\u6570\u5c55\u5f00\u540e\uff0c\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u628a\u4e00\u4e2a\u503c\u4fdd\u5b58\u5230V8 C++\u5bf9\u8c61\u7684\u5185\u5b58\u91cc\u3002\u90a3\u4fdd\u5b58\u7684\u8fd9\u4e2a\u503c\u662f\u5565\u5462\uff1fBaseObject\u7684\u5165\u53c2object\u662f\u7531\u51fd\u6570\u6a21\u677f\u521b\u5efa\u7684\u5bf9\u8c61\uff0cthis\u662f\u4e00\u4e2aTCPWrap\u5bf9\u8c61\u3002\u6240\u4ee5SetAlignedPointerInInternalField\u51fd\u6570\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u628a\u4e00\u4e2aTCPWrap\u5bf9\u8c61\u4fdd\u5b58\u5230\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\u521b\u5efa\u7684\u5bf9\u8c61\u91cc\uff0c\u5982\u56fe6-8\u6240\u793a\u3002   \u56fe6-8</p> <p>\u8fd9\u6709\u5565\u7528\u5462\uff1f\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u3002\u8fd9\u65f6\u5019new TCP\u5c31\u6267\u884c\u5b8c\u6bd5\u4e86\u3002\u6211\u4eec\u770b\u770b\u8fd9\u65f6\u5019\u6267\u884ctcp.connect()\u51fd\u6570\u7684\u903b\u8f91\u3002</p> <pre><code>    template &lt;typename T&gt;  \n    void TCPWrap::Connect(const FunctionCallbackInfo&lt;Value&gt;&amp; args,  \n        std::function&lt;int(const char* ip_address, T* addr)&gt; uv_ip_addr) {  \n      Environment* env = Environment::GetCurrent(args);  \n\n      TCPWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap,  \n                              args.Holder(),  \n                              args.GetReturnValue().Set(UV_EBADF));  \n      // \u7701\u7565\u90e8\u5206\u4e0d\u76f8\u5173\u4ee3\u7801\n\n      args.GetReturnValue().Set(err);  \n    }  \n</code></pre> <p>\u6211\u4eec\u53ea\u9700\u770b\u4e00\u4e0bASSIGN_OR_RETURN_UNWRAP\u5b8f\u7684\u903b\u8f91\u3002\u5176\u4e2dargs.Holder()\u8868\u793aConnect\u51fd\u6570\u7684\u5c5e\u4e3b\uff0c\u6839\u636e\u524d\u9762\u7684\u5206\u6790\u6211\u4eec\u77e5\u9053\u5c5e\u4e3b\u662fInitialize\u51fd\u6570\u5b9a\u4e49\u7684\u51fd\u6570\u6a21\u677f\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\u3002\u8fd9\u4e2a\u5bf9\u8c61\u4fdd\u5b58\u4e86\u4e00\u4e2aTCPWrap\u5bf9\u8c61\u3002ASSIGN_OR_RETURN_UNWRAP\u4e3b\u8981\u7684\u903b\u8f91\u662f\u628a\u5728C++\u5bf9\u8c61\u4e2d\u4fdd\u5b58\u7684\u90a3\u4e2aTCPWrap\u5bf9\u8c61\u53d6\u51fa\u6765\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528TCPWrap\u5bf9\u8c61\u7684handle\u53bb\u8bf7\u6c42Libuv\u4e86\u3002</p>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#67-clibuv","title":"6.7 C++\u5c42\u8c03\u7528Libuv","text":"<p>\u521a\u624d\u6211\u4eec\u5206\u6790\u4e86JS\u8c03\u7528C++\u5c42\u65f6\u662f\u5982\u4f55\u4e32\u8d77\u6765\u7684\uff0c\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0bC++\u8c03\u7528Libuv\u548cLibuv\u56de\u8c03C++\u5c42\u53c8\u662f\u5982\u4f55\u4e32\u8d77\u6765\u7684\u3002\u6211\u4eec\u901a\u8fc7TCP\u6a21\u5757\u7684connect\u51fd\u6570\u7ee7\u7eed\u5206\u6790\u8be5\u8fc7\u7a0b\u3002</p> <pre><code>    template &lt;typename T&gt;  \n    void TCPWrap::Connect(const FunctionCallbackInfo&lt;Value&gt;&amp; args,  \n        std::function&lt;int(const char* ip_address, T* addr)&gt; uv_ip_addr) {  \n      Environment* env = Environment::GetCurrent(args);  \n\n      TCPWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap,  \n                              args.Holder(),  \n                              args.GetReturnValue().Set(UV_EBADF));  \n\n      // \u7b2c\u4e00\u4e2a\u53c2\u6570\u662fTCPConnectWrap\u5bf9\u8c61\uff0c\u89c1net\u6a21\u5757  \n      Local&lt;Object&gt; req_wrap_obj = args[0].As&lt;Object&gt;();  \n      // \u7b2c\u4e8c\u4e2a\u662fip\u5730\u5740  \n      node::Utf8Value ip_address(env-&gt;isolate(), args[1]);  \n\n      T addr;  \n      // \u628a\u7aef\u53e3\uff0cIP\u8bbe\u7f6e\u5230addr\u4e0a\uff0c\u7aef\u53e3\u4fe1\u606f\u5728uv_ip_addr\u4e0a\u4e0b\u6587\u91cc\u4e86  \n      int err = uv_ip_addr(*ip_address, &amp;addr);  \n\n      if (err == 0) {  \n        ConnectWrap* req_wrap =  \n            new ConnectWrap(env, \n                              req_wrap_obj, \n                              AsyncWrap::PROVIDER_TCPCONNECTWRAP);  \n        err = req_wrap-&gt;Dispatch(uv_tcp_connect,  \n                                 &amp;wrap-&gt;handle_,  \n                                 reinterpret_cast&lt;const sockaddr*&gt;(&amp;addr),  \n                                 AfterConnect);  \n        if (err)  \n          delete req_wrap;  \n      }  \n\n      args.GetReturnValue().Set(err);  \n    }  \n</code></pre> <p>\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0bConnectWrap\u3002\u6211\u4eec\u77e5\u9053ConnectWrap\u662fReqWrap\u7684\u5b50\u7c7b\u3002req_wrap_obj\u662fJS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61\u3002New ConnectWrap\u540e\u7ed3\u6784\u5982\u56fe6-9\u6240\u793a\u3002   \u56fe6-9  </p> <p>\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0bDispatch\u3002</p> <pre><code>    // \u8c03\u7528Libuv\u51fd\u6570  \n    template &lt;typename T&gt;  \n    template &lt;typename LibuvFunction, typename... Args&gt;  \n    int ReqWrap&lt;T&gt;::Dispatch(LibuvFunction fn, Args... args) {  \n      // \u4fdd\u5b58Libuv\u7ed3\u6784\u4f53\u548cC++\u5c42\u5bf9\u8c61ConnectWrap\u7684\u5173\u7cfb    \n      req_.data = this;    \n      int err = CallLibuvFunction&lt;T, LibuvFunction&gt;::Call(  \n          fn,  \n          env()-&gt;event_loop(),  \n          req(),  \n          MakeLibuvRequestCallback&lt;T, Args&gt;::For(this, args)...);  \n      if (err &gt;= 0)  \n        env()-&gt;IncreaseWaitingRequestCounter();  \n      return err;  \n    }  \n</code></pre> <p>\u8c03\u7528Libuv\u4e4b\u524d\u7684\u7ed3\u6784\u5982\u56fe6-10\u6240\u793a\u3002  \u56fe6-10</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u5206\u6790\u8c03\u7528Libuv\u7684\u5177\u4f53\u8fc7\u7a0b\u3002\u6211\u4eec\u770b\u5230Dispatch\u51fd\u6570\u662f\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\u3002 \u9996\u5148\u770b\u4e00\u4e0bCallLibuvFunction\u7684\u5b9e\u73b0\u3002</p> <pre><code>    template &lt;typename ReqT, typename T&gt;  \n    struct CallLibuvFunction;  \n\n    // Detect `int uv_foo(uv_loop_t* loop, uv_req_t* request, ...);`.  \n    template &lt;typename ReqT, typename... Args&gt;  \n    struct CallLibuvFunction&lt;ReqT, int(*)(uv_loop_t*, ReqT*, Args...)&gt; {  \n      using T = int(*)(uv_loop_t*, ReqT*, Args...);  \n      template &lt;typename... PassedArgs&gt;  \n      static int Call(T fn, uv_loop_t* loop, ReqT* req, PassedArgs... args) {  \n        return fn(loop, req, args...);  \n      }  \n    };  \n\n    // Detect `int uv_foo(uv_req_t* request, ...);`.  \n    template &lt;typename ReqT, typename... Args&gt;  \n    struct CallLibuvFunction&lt;ReqT, int(*)(ReqT*, Args...)&gt; {  \n      using T = int(*)(ReqT*, Args...);  \n      template &lt;typename... PassedArgs&gt;  \n      static int Call(T fn, uv_loop_t* loop, ReqT* req, PassedArgs... args) {  \n        return fn(req, args...);  \n      }  \n    };  \n\n    // Detect `void uv_foo(uv_req_t* request, ...);`.  \n    template &lt;typename ReqT, typename... Args&gt;  \n    struct CallLibuvFunction&lt;ReqT, void(*)(ReqT*, Args...)&gt; {  \n      using T = void(*)(ReqT*, Args...);  \n      template &lt;typename... PassedArgs&gt;  \n      static int Call(T fn, uv_loop_t* loop, ReqT* req, PassedArgs... args) {  \n        fn(req, args...);  \n        return 0;  \n      }  \n    };  \n</code></pre> <p>CallLibuvFunction\u7684\u5b9e\u73b0\u770b\u8d77\u6765\u975e\u5e38\u590d\u6742\uff0c\u90a3\u662f\u56e0\u4e3a\u7528\u4e86\u5927\u91cf\u7684\u6a21\u677f\u53c2\u6570\uff0cCallLibuvFunction\u672c\u8d28\u4e0a\u662f\u4e00\u4e2astruct\uff0c\u5728C++\u91cc\u548c\u7c7b\u4f5c\u7528\u7c7b\u4f3c\uff0c\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u7c7b\u51fd\u6570Call\uff0cNode.js\u4e3a\u4e86\u9002\u914dLibuv\u5c42\u5404\u79cd\u7c7b\u578b\u51fd\u6570\u7684\u8c03\u7528\uff0c\u6240\u4ee5\u5b9e\u73b0\u4e86\u4e09\u79cd\u7c7b\u578b\u7684CallLibuvFunction,\u5e76\u4e14\u4f7f\u7528\u4e86\u5927\u91cf\u7684\u6a21\u677f\u53c2\u6570\u3002\u6211\u4eec\u53ea\u9700\u8981\u5206\u6790\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\u3002\u6211\u4eec\u6839\u636eTCP\u7684connect\u51fd\u6570\u5f00\u59cb\u5206\u6790\u3002\u6211\u4eec\u9996\u5148\u5177\u4f53\u4e0bDispatch\u51fd\u6570\u7684\u6a21\u677f\u53c2\u6570\u3002</p> <pre><code>    template &lt;typename T&gt;  \n    template &lt;typename LibuvFunction, typename... Args&gt;  \n</code></pre> <p>T\u5bf9\u5e94ReqWrap\u7684\u7c7b\u578b\uff0cLibuvFunction\u5bf9\u5e94Libuv\u7684\u51fd\u6570\u7c7b\u578b\uff0c\u8fd9\u91cc\u662fint uv_tcp_connect(uv_connect_t* req, ...)\uff0c\u6240\u4ee5\u662f\u5bf9\u5e94LibuvFunction\u7684\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0cArgs\u662f\u6267\u884cDispatch\u65f6\u9664\u4e86\u7b2c\u4e00\u4e2a\u5b9e\u53c2\u5916\u7684\u5269\u4f59\u53c2\u6570\u3002\u4e0b\u9762\u6211\u4eec\u5177\u4f53\u5316Dispatch\u3002</p> <pre><code>    int ReqWrap&lt;uv_connect_t&gt;::Dispatch(int(*)(uv_connect_t*, Args...), Args... args) {  \n      req_.data = this;  \n      int err = CallLibuvFunction&lt;uv_connect_t, int(*)(uv_connect_t*, Args...)&gt;::Call(  \n          fn,  \n          env()-&gt;event_loop(),  \n          req(),  \n          MakeLibuvRequestCallback&lt;T, Args&gt;::For(this, args)...);  \n\n      return err;  \n    }  \n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0bMakeLibuvRequestCallback\u7684\u5b9e\u73b0\u3002</p> <pre><code>    // \u900f\u4f20\u53c2\u6570\u7ed9Libuv  \n    template &lt;typename ReqT, typename T&gt;  \n    struct MakeLibuvRequestCallback {  \n      static T For(ReqWrap&lt;ReqT&gt;* req_wrap, T v) {  \n        static_assert(!is_callable&lt;T&gt;::value,  \n                      \"MakeLibuvRequestCallback missed a callback\");  \n        return v;  \n      }  \n    };  \n\n    template &lt;typename ReqT, typename... Args&gt;   \n    struct MakeLibuvRequestCallback&lt;ReqT, void(*)(ReqT*, Args...)&gt; {  \n      using F = void(*)(ReqT* req, Args... args);  \n      // Libuv\u56de\u8c03  \n      static void Wrapper(ReqT* req, Args... args) {  \n        // \u901a\u8fc7Libuv\u7ed3\u6784\u4f53\u62ff\u5230\u5bf9\u5e94\u7684C++\u5bf9\u8c61  \n        ReqWrap&lt;ReqT&gt;* req_wrap = ReqWrap&lt;ReqT&gt;::from_req(req);  \n        req_wrap-&gt;env()-&gt;DecreaseWaitingRequestCounter();  \n        // \u62ff\u5230\u539f\u59cb\u7684\u56de\u8c03\u6267\u884c  \n        F original_callback = reinterpret_cast&lt;F&gt;(req_wrap-&gt;original_callback_);  \n        original_callback(req, args...);  \n      }  \n\n      static F For(ReqWrap&lt;ReqT&gt;* req_wrap, F v) {  \n        // \u4fdd\u5b58\u539f\u6765\u7684\u51fd\u6570  \n        CHECK_NULL(req_wrap-&gt;original_callback_);  \n        req_wrap-&gt;original_callback_ =  \n            reinterpret_cast&lt;typename ReqWrap&lt;ReqT&gt;::callback_t&gt;(v);  \n        // \u8fd4\u56de\u5305\u88f9\u51fd\u6570  \n        return Wrapper;  \n      }  \n    };  \n</code></pre> <p>MakeLibuvRequestCallback\u7684\u5b9e\u73b0\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u6a21\u7248\u53c2\u6570\u7684\u7b2c\u4e00\u4e2a\u4e00\u822c\u662fReqWrap\u5b50\u7c7b\uff0c\u7b2c\u4e8c\u4e2a\u4e00\u822c\u662fhandle\uff0c\u521d\u59cb\u5316ReqWrap\u7c7b\u7684\u65f6\u5019\uff0cenv\u4e2d\u4f1a\u8bb0\u5f55ReqWrap\u5b9e\u4f8b\u7684\u4e2a\u6570\uff0c\u4ece\u800c\u77e5\u9053\u6709\u591a\u5c11\u4e2a\u8bf7\u6c42\u6b63\u5728\u88abLibuv\u5904\u7406\uff0c\u6a21\u677f\u53c2\u6570\u7684\u7b2c\u4e8c\u4e2a\u5982\u679c\u662f\u51fd\u6570\u5219\u8bf4\u660e\u6ca1\u6709\u4f7f\u7528ReqWrap\u8bf7\u6c42Libuv\uff0c\u5219\u4f7f\u7528\u7b2c\u4e8c\u79cd\u5b9e\u73b0\uff0c\u52ab\u6301\u56de\u8c03\u4ece\u800c\u8bb0\u5f55\u6b63\u5728\u88abLibuv\u5904\u7406\u7684\u8bf7\u6c42\u6570\uff08\u5982GetAddrInfo\u7684\u5b9e\u73b0\uff09\u3002\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u662f\u9002\u914d\u7b2c\u4e00\u79cd\u5b9e\u73b0\u3002\u900f\u4f20C++\u5c42\u53c2\u6570\u7ed9Libuv\u3002\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b Dispatch</p> <pre><code>    int ReqWrap&lt;uv_connect_t&gt;::Dispatch(int(*)(uv_connect_t*, Args...), Args... args) {    \n          req_.data = this;    \n          int err = CallLibuvFunction&lt;uv_connect_t, int(*)(uv_connect_t*, Args...)&gt;::Call(    \n              fn,    \n              env()-&gt;event_loop(),    \n              req(),    \n              args...);    \n\n          return err;    \n      }    \n</code></pre> <p>\u518d\u8fdb\u4e00\u6b65\u5c55\u5f00\u3002</p> <pre><code>    static int Call(int(*fn)(uv_connect_t*, Args...), uv_loop_t* loop, uv_connect_t* req, PassedArgs... args) {  \n        return fn(req, args...);  \n    }  \n</code></pre> <p>\u6700\u540e\u5c55\u5f00</p> <pre><code>    static int Call(int(*fn)(uv_connect_t*, Args...), uv_loop_t* loop, uv_connect_t* req, PassedArgs... args) {  \n        return fn(req, args...);  \n    }  \n\n    Call(  \n      uv_tcp_connect,  \n      env()-&gt;event_loop(),  \n      req(),  \n      &amp;wrap-&gt;handle_,  \n      AfterConnec  \n    )  \n\n    uv_tcp_connect(  \n      env()-&gt;event_loop(),  \n      req(),  \n      &amp;wrap-&gt;handle_,  \n      AfterConnect  \n    );  \n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u770b\u770buv_tcp_connect\u505a\u4e86\u4ec0\u4e48\u3002</p> <pre><code>    int uv_tcp_connect(uv_connect_t* req,  \n                       uv_tcp_t* handle,  \n                       const struct sockaddr* addr,  \n                       uv_connect_cb cb) {  \n      // ...  \n      return uv__tcp_connect(req, handle, addr, addrlen, cb);  \n    }  \n\n    int uv__tcp_connect(uv_connect_t* req,  \n                        uv_tcp_t* handle,  \n                        const struct sockaddr* addr,  \n                        unsigned int addrlen,  \n                        uv_connect_cb cb) {  \n      int err;  \n      int r;  \n\n      // \u5173\u8054\u8d77\u6765  \n      req-&gt;handle = (uv_stream_t*) handle;  \n      // ...  \n    }  \n</code></pre> <p>Libuv\u4e2d\u628areq\u548chandle\u505a\u4e86\u5173\u8054\uff0c\u5982\u56fe6-11\u6240\u793a\u3002  \u56fe6-11</p> <p>\u5206\u6790\u5b8cC++\u8c03\u7528Libuv\u540e\uff0c\u6211\u4eec\u770b\u770bLibuv\u56de\u8c03C++\u548cC++\u56de\u8c03JS\u7684\u8fc7\u7a0b\u3002\u5f53Libuv\u5904\u7406\u5b8c\u8bf7\u6c42\u540e\u4f1a\u6267\u884cAfterConnect  \u3002</p> <pre><code>    template &lt;typename WrapType, typename UVType&gt;  \n    void ConnectionWrap&lt;WrapType, UVType&gt;::AfterConnect(uv_connect_t* req,  \n                                                        int status) {  \n      // \u4eceLibuv\u7ed3\u6784\u4f53\u62ff\u5230C++\u7684\u8bf7\u6c42\u5bf9\u8c61  \n      std::unique_ptr&lt;ConnectWrap&gt; req_wrap  \n        (static_cast&lt;ConnectWrap*&gt;(req-&gt;data));  \n      // \u4eceC++\u5c42\u8bf7\u6c42\u5bf9\u8c61\u62ff\u5230\u5bf9\u5e94\u7684handle\u7ed3\u6784\u4f53\uff08Libuv\u91cc\u5173\u8054\u8d77\u6765\u7684\uff09\uff0c\u518d\u901a\u8fc7handle\u62ff\u5230\u5bf9\u5e94\u7684C++\u5c42handle\u5bf9\u8c61\uff08HandleWrap\u5173\u8054\u7684\uff09  \n      WrapType* wrap = static_cast&lt;WrapType*&gt;(req-&gt;handle-&gt;data);  \n      Environment* env = wrap-&gt;env();  \n      ...  \n      Local&lt;Value&gt; argv[5] = {  \n        Integer::New(env-&gt;isolate(), status),  \n        wrap-&gt;object(),  \n        req_wrap-&gt;object(),  \n        Boolean::New(env-&gt;isolate(), readable),  \n        Boolean::New(env-&gt;isolate(), writable)  \n      };  \n      // \u56de\u8c03JS\u5c42oncomplete  \n      req_wrap-&gt;MakeCallback(env-&gt;oncomplete_string(), \n                               arraysize(argv), \n                               argv);  \n    }    \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#68","title":"6.8 \u6d41\u5c01\u88c5","text":"<p>Node.js\u5728C++\u5c42\u5bf9\u6d41\u8fdb\u884c\u4e86\u975e\u5e38\u591a\u7684\u5c01\u88c5\uff0c\u5f88\u591a\u6a21\u5757\u90fd\u4f9d\u8d56C++\u5c42\u6d41\u7684\u673a\u5236\uff0c\u6d41\u673a\u5236\u7684\u8bbe\u8ba1\u4e2d\uff0c\u4e3b\u8981\u6709\u4e09\u4e2a\u6982\u5ff5  1 \u8d44\u6e90\uff0c\u8fd9\u662f\u6d41\u673a\u5236\u7684\u6838\u5fc3\uff08StreamResource\uff09, 2 \u5bf9\u6d41\u8fdb\u884c\u64cd\u4f5c\uff08StreamReq\uff09 3 \u6d41\u4e8b\u4ef6\u7684\u76d1\u542c\u8005\uff0c\u5f53\u5bf9\u6d41\u8fdb\u884c\u64cd\u4f5c\u6216\u6d41\u672c\u8eab\u6709\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u4f1a\u628a\u4e8b\u4ef6\u548c\u76f8\u5173\u7684\u4e0a\u4e0b\u6587\u4f20\u9012\u7ed9\u76d1\u542c\u8005\uff0c\u76d1\u542c\u8005\u5904\u7406\u5b8c\u540e\uff0c\u518d\u901a\u77e5\u6d41\uff08StreamListener\uff09\u3002 \u901a\u8fc7\u7ee7\u627f\u7684\u6a21\u5f0f\uff0c\u57fa\u7c7b\u5b9a\u4e49\u63a5\u53e3\uff0c\u5b50\u7c7b\u5b9e\u73b0\u63a5\u53e3\u7684\u65b9\u5f0f\u3002\u5bf9\u6d41\u7684\u64cd\u4f5c\u8fdb\u884c\u4e86\u62bd\u8c61\u548c\u5c01\u88c5\u3002\u4e09\u8005\u7684\u7c7b\u5173\u7cfb\u5982\u56fe6-12\u6240\u793a\u3002  \u56fe6-12</p> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u8bfb\u4e00\u4e2a\u6d41\u7684\u6570\u636e\u7684\u8fc7\u7a0b\uff0c\u5982\u56fe6-13\u6240\u793a\u3002  \u56fe6-13</p> <p>\u518d\u770b\u4e00\u4e0b\u5199\u7684\u8fc7\u7a0b\uff0c\u5982\u56fe6-14\u6240\u793a\u3002  \u56fe6-14</p>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#681-streamresource","title":"6.8.1 StreamResource","text":"<p>StreamResource\u5b9a\u4e49\u64cd\u4f5c\u6d41\u7684\u901a\u7528\u903b\u8f91\u548c\u64cd\u4f5c\u7ed3\u675f\u540e\u89e6\u53d1\u7684\u56de\u8c03\u3002\u4f46\u662fStreamResource\u4e0d\u5b9a\u4e49\u6d41\u7684\u7c7b\u578b\uff0c\u6d41\u7684\u7c7b\u578b\u7531\u5b50\u7c7b\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u5728StreamResource\u4e0a\u6ce8\u518clistener\uff0c\u8868\u793a\u5bf9\u6d41\u611f\u5174\u8da3\uff0c\u5f53\u6d41\u4e0a\u6709\u6570\u636e\u53ef\u8bfb\u6216\u8005\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u5c31\u4f1a\u901a\u77e5listener\u3002 </p> <pre><code>    class StreamResource {  \n     public:  \n      virtual ~StreamResource();   \n      // \u6ce8\u518c/\u6ce8\u9500\u7b49\u5f85\u6d41\u53ef\u8bfb\u4e8b\u4ef6  \n      virtual int ReadStart() = 0;  \n      virtual int ReadStop() = 0;  \n      // \u5173\u95ed\u6d41  \n      virtual int DoShutdown(ShutdownWrap* req_wrap) = 0;  \n      // \u5199\u5165\u6d41  \n      virtual int DoTryWrite(uv_buf_t** bufs, size_t* count);  \n      virtual int DoWrite(WriteWrap* w,  \n                          uv_buf_t* bufs,  \n                          size_t count,  \n                          uv_stream_t* send_handle) = 0;  \n      // ...\u5ffd\u7565\u4e00\u4e9b  \n      // \u7ed9\u6d41\u589e\u52a0\u6216\u5220\u9664\u76d1\u542c\u8005  \n      void PushStreamListener(StreamListener* listener);  \n      void RemoveStreamListener(StreamListener* listener);  \n\n     protected:  \n      uv_buf_t EmitAlloc(size_t suggested_size);  \n      void EmitRead(ssize_t nread, \n                      const uv_buf_t&amp; buf = uv_buf_init(nullptr, 0));\n      // \u6d41\u7684\u76d1\u542c\u8005\uff0c\u5373\u6570\u636e\u6d88\u8d39\u8005  \n      StreamListener* listener_ = nullptr;  \n      uint64_t bytes_read_ = 0;  \n      uint64_t bytes_written_ = 0;  \n      friend class StreamListener;  \n    };  \n</code></pre> <p>StreamResource\u662f\u4e00\u4e2a\u57fa\u7c7b\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u6210\u5458\u662fStreamListener\u7c7b\u7684\u5b9e\u4f8b\uff0c\u6211\u4eec\u540e\u9762\u5206\u6790\u3002\u6211\u4eec\u770b\u4e00\u4e0bStreamResource\u7684\u5b9e\u73b0\u3002 1\u589e\u52a0\u4e00\u4e2alistener</p> <pre><code>    // \u589e\u52a0\u4e00\u4e2alistener  \n    inline void StreamResource::PushStreamListener(StreamListener* listener) {  \n      // \u5934\u63d2\u6cd5   \n      listener-&gt;previous_listener_ = listener_;  \n      listener-&gt;stream_ = this;  \n      listener_ = listener;  \n    }  \n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u4e2a\u6d41\u4e0a\u6ce8\u518c\u591a\u4e2alistener\uff0c\u6d41\u7684listener_\u5b57\u6bb5\u7ef4\u62a4\u4e86\u6d41\u4e0a\u6240\u6709\u7684listener\u961f\u5217\u3002\u5173\u7cfb\u56fe\u5982\u56fe6-15\u6240\u793a\u3002   \u56fe6-15 2\u5220\u9664listener</p> <pre><code>    inline void StreamResource::RemoveStreamListener(StreamListener* listener) {  \n      StreamListener* previous;  \n      StreamListener* current;  \n\n      // \u904d\u5386\u5355\u94fe\u8868  \n      for (current = listener_, previous = nullptr;  \n           /* No loop condition because we want a crash if listener is not found */  \n           ; previous = current, current = current-&gt;previous_listener_) {  \n        if (current == listener) {  \n          // \u975e\u7a7a\u8bf4\u660e\u9700\u8981\u5220\u9664\u7684\u4e0d\u662f\u7b2c\u4e00\u4e2a\u8282\u70b9  \n          if (previous != nullptr)  \n            previous-&gt;previous_listener_ = current-&gt;previous_listener_;  \n          else  \n            // \u5220\u9664\u7684\u662f\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u66f4\u65b0\u5934\u6307\u9488\u5c31\u884c  \n            listener_ = listener-&gt;previous_listener_;  \n          break;  \n        }  \n      }  \n      // \u91cd\u7f6e\u88ab\u5220\u9664listener\u7684\u5b57\u6bb5 \n      listener-&gt;stream_ = nullptr;  \n      listener-&gt;previous_listener_ = nullptr;  \n    }  \n</code></pre> <p>3 \u7533\u8bf7\u5b58\u50a8\u6570\u636e</p> <pre><code>    // \u7533\u8bf7\u4e00\u5757\u5185\u5b58  \n    inline uv_buf_t StreamResource::EmitAlloc(size_t suggested_size) {  \n      DebugSealHandleScope handle_scope(v8::Isolate::GetCurrent());  \n      return listener_-&gt;OnStreamAlloc(suggested_size);  \n    }  \n</code></pre> <p>StreamResource\u53ea\u662f\u5b9a\u4e49\u4e86\u64cd\u4f5c\u6d41\u7684\u901a\u7528\u903b\u8f91\uff0c\u6570\u636e\u5b58\u50a8\u548c\u6d88\u8d39\u7531listener\u5b9a\u4e49\u3002 4 \u6570\u636e\u53ef\u8bfb</p> <pre><code>    inline void StreamResource::EmitRead(ssize_t nread, const uv_buf_t&amp; buf) {  \n      if (nread &gt; 0)  \n        // \u8bb0\u5f55\u4ece\u6d41\u4e2d\u8bfb\u53d6\u7684\u6570\u636e\u7684\u5b57\u8282\u5927\u5c0f\n        bytes_read_ += static_cast&lt;uint64_t&gt;(nread);  \n      listener_-&gt;OnStreamRead(nread, buf);  \n    }  \n</code></pre> <p>5 \u5199\u56de\u8c03</p> <pre><code>    inline void StreamResource::EmitAfterWrite(WriteWrap* w, int status) {  \n      DebugSealHandleScope handle_scope(v8::Isolate::GetCurrent());  \n      listener_-&gt;OnStreamAfterWrite(w, status);  \n    }  \n</code></pre> <p>6 \u5173\u95ed\u6d41\u56de\u8c03</p> <pre><code>    inline void StreamResource::EmitAfterShutdown(ShutdownWrap* w, int status) {  \n      DebugSealHandleScope handle_scope(v8::Isolate::GetCurrent());  \n      listener_-&gt;OnStreamAfterShutdown(w, status);  \n    }  \n</code></pre> <p>7 \u6d41\u9500\u6bc1\u56de\u8c03</p> <pre><code>    inline StreamResource::~StreamResource() {  \n      while (listener_ != nullptr) {  \n        StreamListener* listener = listener_;  \n        listener-&gt;OnStreamDestroy();  \n        if (listener == listener_)  \n          RemoveStreamListener(listener_);  \n      }  \n    }  \n</code></pre> <p>\u6d41\u9500\u6bc1\u540e\u9700\u8981\u901a\u77e5listener\uff0c\u5e76\u4e14\u89e3\u9664\u5173\u7cfb\u3002</p>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#682-streambase","title":"6.8.2 StreamBase","text":"<p>StreamBase\u662fStreamResource\u7684\u5b50\u7c7b\uff0c\u62d3\u5c55\u4e86StreamResource\u7684\u529f\u80fd\u3002</p> <pre><code>    class StreamBase : public StreamResource {  \n     public:  \n      static constexpr int kStreamBaseField = 1;  \n      static constexpr int kOnReadFunctionField = 2;  \n      static constexpr int kStreamBaseFieldCount = 3;  \n      // \u5b9a\u4e49\u4e00\u4e9b\u7edf\u4e00\u7684\u903b\u8f91  \n      static void AddMethods(Environment* env,  \n                             v8::Local&lt;v8::FunctionTemplate&gt; target);\n\n      virtual bool IsAlive() = 0;  \n      virtual bool IsClosing() = 0;  \n      virtual bool IsIPCPipe();  \n      virtual int GetFD();  \n\n      // \u6267\u884cJS\u56de\u8c03  \n      v8::MaybeLocal&lt;v8::Value&gt; CallJSOnreadMethod(  \n          ssize_t nread,  \n          v8::Local&lt;v8::ArrayBuffer&gt; ab,  \n          size_t offset = 0,  \n          StreamBaseJSChecks checks = DONT_SKIP_NREAD_CHECKS);  \n\n      Environment* stream_env() const;  \n      // \u5173\u95ed\u6d41  \n      int Shutdown(v8::Local&lt;v8::Object&gt; req_wrap_obj = v8::Local&lt;v8::Object&gt;());  \n      // \u5199\u5165\u6d41  \n      StreamWriteResult Write(  \n          uv_buf_t* bufs,  \n          size_t count,  \n          uv_stream_t* send_handle = nullptr,  \n          v8::Local&lt;v8::Object&gt; req_wrap_obj = v8::Local&lt;v8::Object&gt;());  \n      // \u521b\u5efa\u4e00\u4e2a\u5173\u95ed\u8bf7\u6c42  \n      virtual ShutdownWrap* CreateShutdownWrap(v8::Local&lt;v8::Object&gt; object);  \n      // \u521b\u5efa\u4e00\u4e2a\u5199\u8bf7\u6c42  \n      virtual WriteWrap* CreateWriteWrap(v8::Local&lt;v8::Object&gt; object);  \n\n      virtual AsyncWrap* GetAsyncWrap() = 0;  \n      virtual v8::Local&lt;v8::Object&gt; GetObject();  \n      static StreamBase* FromObject(v8::Local&lt;v8::Object&gt; obj);  \n\n     protected:  \n      explicit StreamBase(Environment* env);  \n\n      // JS Methods  \n      int ReadStartJS(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n      // \u7701\u7565\u7cfb\u5217\u65b9\u6cd5\n      void AttachToObject(v8::Local&lt;v8::Object&gt; obj);  \n\n      template &lt;int (StreamBase::*Method)(  \n          const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args)&gt;  \n      static void JSMethod(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n\n     private:  \n      Environment* env_;  \n      EmitToJSStreamListener default_listener_;  \n\n      void SetWriteResult(const StreamWriteResult&amp; res);  \n      static void AddMethod(Environment* env,  \n                            v8::Local&lt;v8::Signature&gt; sig,  \n                            enum v8::PropertyAttribute attributes,  \n                            v8::Local&lt;v8::FunctionTemplate&gt; t,  \n                            JSMethodFunction* stream_method,  \n                            v8::Local&lt;v8::String&gt; str);   \n    };  \n</code></pre> <p>1 \u521d\u59cb\u5316</p> <pre><code>    inline StreamBase::StreamBase(Environment* env) : env_(env) {  \n      PushStreamListener(&amp;default_listener_);  \n    }  \n</code></pre> <p>StreamBase\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u9ed8\u8ba4\u8bbe\u7f6e\u4e00\u4e2alistener\u3002 2 \u5173\u95ed\u6d41</p> <pre><code>    // \u5173\u95ed\u4e00\u4e2a\u6d41\uff0creq_wrap_obj\u662fJS\u5c42\u4f20\u8fdb\u6765\u7684\u5bf9\u8c61  \n    inline int StreamBase::Shutdown(v8::Local&lt;v8::Object&gt; req_wrap_obj) {  \n      Environment* env = stream_env();  \n      HandleScope handle_scope(env-&gt;isolate());  \n      AsyncHooks::DefaultTriggerAsyncIdScope trigger_scope(GetAsyncWrap());  \n      // \u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u8bf7\u6c42Libuv\u7684\u6570\u636e\u7ed3\u6784  \n      ShutdownWrap* req_wrap = CreateShutdownWrap(req_wrap_obj); \n      // \u5b50\u7c7b\u5b9e\u73b0\uff0c\u4e0d\u540c\u6d41\u5173\u95ed\u7684\u903b\u8f91\u4e0d\u4e00\u6837 \n      int err = DoShutdown(req_wrap);  \n      // \u6267\u884c\u51fa\u9519\u5219\u9500\u6bc1JS\u5c42\u5bf9\u8c61  \n      if (err != 0 &amp;&amp; req_wrap != nullptr) {  \n        req_wrap-&gt;Dispose();  \n      }  \n\n      const char* msg = Error();  \n      if (msg != nullptr) {  \n        req_wrap_obj-&gt;Set(  \n            env-&gt;context(),  \n            env-&gt;error_string(), \n             OneByteString(env-&gt;isolate(), msg)).Check();  \n        ClearError();  \n      }  \n\n      return err;  \n    }  \n</code></pre> <p>3 \u5199</p> <pre><code>    // \u5199Buffer\uff0c\u652f\u6301\u53d1\u9001\u6587\u4ef6\u63cf\u8ff0\u7b26  \n    int StreamBase::WriteBuffer(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n\n      Local&lt;Object&gt; req_wrap_obj = args[0].As&lt;Object&gt;();  \n      uv_buf_t buf;  \n      // \u6570\u636e\u5185\u5bb9\u548c\u957f\u5ea6  \n      buf.base = Buffer::Data(args[1]);  \n      buf.len = Buffer::Length(args[1]);  \n\n      uv_stream_t* send_handle = nullptr;  \n      // \u662f\u5bf9\u8c61\u5e76\u4e14\u6d41\u652f\u6301\u53d1\u9001\u6587\u4ef6\u63cf\u8ff0\u7b26  \n      if (args[2]-&gt;IsObject() &amp;&amp; IsIPCPipe()) {  \n        Local&lt;Object&gt; send_handle_obj = args[2].As&lt;Object&gt;();  \n\n        HandleWrap* wrap;  \n        // \u4ece\u8fd4\u56dejs\u7684\u5bf9\u8c61\u4e2d\u83b7\u53d6internalField\u4e2d\u6307\u5411\u7684C++\u5c42\u5bf9\u8c61  \n        ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, send_handle_obj, UV_EINVAL);  \n        // \u62ff\u5230Libuv\u5c42\u7684handle  \n        send_handle = reinterpret_cast&lt;uv_stream_t*&gt;(wrap-&gt;GetHandle());  \n        // Reference LibuvStreamWrap instance to prevent it from being garbage  \n        // collected before `AfterWrite` is called.  \n        // \u8bbe\u7f6e\u5230JS\u5c42\u8bf7\u6c42\u5bf9\u8c61\u4e2d  \n        req_wrap_obj-&gt;Set(env-&gt;context(),  \n                          env-&gt;handle_string(),  \n                          send_handle_obj).Check();  \n      }  \n\n      StreamWriteResult res = Write(&amp;buf, 1, send_handle, req_wrap_obj);  \n      SetWriteResult(res);  \n\n      return res.err;  \n    }  \n</code></pre> <pre><code>    inline StreamWriteResult StreamBase::Write(  \n        uv_buf_t* bufs,  \n        size_t count,  \n        uv_stream_t* send_handle,  \n        v8::Local&lt;v8::Object&gt; req_wrap_obj) {  \n      Environment* env = stream_env();  \n      int err;  \n\n      size_t total_bytes = 0;  \n      // \u8ba1\u7b97\u9700\u8981\u5199\u5165\u7684\u6570\u636e\u5927\u5c0f  \n      for (size_t i = 0; i &lt; count; ++i)  \n        total_bytes += bufs[i].len;  \n      // \u540c\u4e0a  \n      bytes_written_ += total_bytes;  \n      // \u662f\u5426\u9700\u8981\u53d1\u9001\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u4e0d\u9700\u8981\u5219\u76f4\u63a5\u5199  \n      if (send_handle == nullptr) {  \n        err = DoTryWrite(&amp;bufs, &amp;count);  \n        if (err != 0 || count == 0) {  \n          return StreamWriteResult { false, err, nullptr, total_bytes };  \n        }  \n      }  \n\n      HandleScope handle_scope(env-&gt;isolate());  \n\n      AsyncHooks::DefaultTriggerAsyncIdScope trigger_scope(GetAsyncWrap());  \n      // \u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u8bf7\u6c42Libuv\u7684\u5199\u8bf7\u6c42\u5bf9\u8c61  \n      WriteWrap* req_wrap = CreateWriteWrap(req_wrap_obj);  \n      // \u6267\u884c\u5199\uff0c\u5b50\u7c7b\u5b9e\u73b0\uff0c\u4e0d\u540c\u6d41\u5199\u64cd\u4f5c\u4e0d\u4e00\u6837  \n      err = DoWrite(req_wrap, bufs, count, send_handle);  \n\n      const char* msg = Error();  \n      if (msg != nullptr) {  \n        req_wrap_obj-&gt;Set(env-&gt;context(),  \n                          env-&gt;error_string(),  \n                          OneByteString(env-&gt;isolate(), msg)).Check();  \n        ClearError();  \n      }  \n\n      return StreamWriteResult { async, err, req_wrap, total_bytes };  \n    }  \n</code></pre> <p>4 \u8bfb</p> <pre><code>    // \u64cd\u4f5c\u6d41\uff0c\u542f\u52a8\u8bfb\u53d6  \n    int StreamBase::ReadStartJS(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      return ReadStart();  \n    }  \n\n    // \u64cd\u4f5c\u6d41\uff0c\u505c\u6b62\u8bfb\u53d6  \n    int StreamBase::ReadStopJS(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      return ReadStop();  \n    }  \n\n    // \u89e6\u53d1\u6d41\u4e8b\u4ef6\uff0c\u6709\u6570\u636e\u53ef\u8bfb  \n    MaybeLocal&lt;Value&gt; StreamBase::CallJSOnreadMethod(ssize_t nread, \n                                                      Local&lt;ArrayBuffer&gt; ab,  \n                                                     size_t offset, \n                                                     StreamBaseJSChecks checks) {  \n      Environment* env = env_;  \n      env-&gt;stream_base_state()[kReadBytesOrError] = nread;  \n      env-&gt;stream_base_state()[kArrayBufferOffset] = offset;  \n\n      Local&lt;Value&gt; argv[] = {  \n        ab.IsEmpty() ? Undefined(env-&gt;isolate()).As&lt;Value&gt;() : ab.As&lt;Value&gt;()  \n      };  \n      // GetAsyncWrap\u5728StreamBase\u5b50\u7c7b\u5b9e\u73b0\uff0c\u62ff\u5230StreamBase\u7c7b\u5bf9\u8c61  \n      AsyncWrap* wrap = GetAsyncWrap();  \n      // \u83b7\u53d6\u56de\u8c03\u6267\u884c  \n      Local&lt;Value&gt; onread = wrap-&gt;object()-&gt;GetInternalField(kOnReadFunctionField);   \n      return wrap-&gt;MakeCallback(onread.As&lt;Function&gt;(), arraysize(argv), argv);  \n    }  \n</code></pre> <p>4 \u6d41\u901a\u7528\u65b9\u6cd5</p> <pre><code>    void StreamBase::AddMethod(Environment* env,  \n                               Local&lt;Signature&gt; signature,  \n                               enum PropertyAttribute attributes,  \n                               Local&lt;FunctionTemplate&gt; t,  \n                               JSMethodFunction* stream_method,  \n                               Local&lt;String&gt; string) {  \n      // \u65b0\u5efa\u4e00\u4e2a\u51fd\u6570\u6a21\u677f                             \n      Local&lt;FunctionTemplate&gt; templ =  \n          env-&gt;NewFunctionTemplate(stream_method,  \n                                   signature,  \n                                   v8::ConstructorBehavior::kThrow,  \n                                   v8::SideEffectType::kHasNoSideEffect);  \n      // \u8bbe\u7f6e\u539f\u578b\u5c5e\u6027  \n      t-&gt;PrototypeTemplate()-&gt;SetAccessorProperty(  \n          string, templ, Local&lt;FunctionTemplate&gt;(), attributes);  \n    }  \n\n    void StreamBase::AddMethods(Environment* env, Local&lt;FunctionTemplate&gt; t) {  \n      HandleScope scope(env-&gt;isolate());  \n\n      enum PropertyAttribute attributes =  \n          static_cast&lt;PropertyAttribute&gt;(ReadOnly | DontDelete | DontEnum);  \n      Local&lt;Signature&gt; sig = Signature::New(env-&gt;isolate(), t);  \n      // \u8bbe\u7f6e\u539f\u578b\u5c5e\u6027  \n      AddMethod(env, sig, attributes, t, GetFD, env-&gt;fd_string());  \n      // \u5ffd\u7565\u90e8\u5206\n      env-&gt;SetProtoMethod(t, \"readStart\", JSMethod&lt;&amp;StreamBase::ReadStartJS&gt;);  \n      env-&gt;SetProtoMethod(t, \"readStop\", JSMethod&lt;&amp;StreamBase::ReadStopJS&gt;);  \n      env-&gt;SetProtoMethod(t, \"shutdown\", JSMethod&lt;&amp;StreamBase::Shutdown&gt;);  \n      env-&gt;SetProtoMethod(t, \"writev\", JSMethod&lt;&amp;StreamBase::Writev&gt;);  \n      env-&gt;SetProtoMethod(t, \"writeBuffer\", JSMethod&lt;&amp;StreamBase::WriteBuffer&gt;);  \n      env-&gt;SetProtoMethod(  \n          t, \"writeAsciiString\", JSMethod&lt;&amp;StreamBase::WriteString&lt;ASCII&gt;&gt;);  \n      env-&gt;SetProtoMethod(  \n          t, \"writeUtf8String\", JSMethod&lt;&amp;StreamBase::WriteString&lt;UTF8&gt;&gt;);  \n      t-&gt;PrototypeTemplate()-&gt;Set(FIXED_ONE_BYTE_STRING(env-&gt;isolate(),  \n                                                        \"isStreamBase\"),  \n                                  True(env-&gt;isolate()));  \n      // \u8bbe\u7f6e\u8bbf\u95ee\u5668                              \n      t-&gt;PrototypeTemplate()-&gt;SetAccessor(  \n          // \u952e\u540d  \n          FIXED_ONE_BYTE_STRING(env-&gt;isolate(), \"onread\"),  \n          // getter  \n          BaseObject::InternalFieldGet&lt;kOnReadFunctionField&gt;,  \n          // setter\uff0cValue::IsFunction\u662fset\u4e4b\u524d\u7684\u6821\u9a8c\u51fd\u6570\uff0c\u89c1InternalFieldSet\uff08\u6a21\u677f\u51fd\u6570\uff09\u5b9a\u4e49  \n          BaseObject::InternalFieldSet&lt;kOnReadFunctionField, &amp;Value::IsFunction&gt;);  \n    }  \n</code></pre> <p>5 \u5176\u5b83\u51fd\u6570</p> <pre><code>    // \u9ed8\u8ba4false\uff0c\u5b50\u7c7b\u91cd\u5199  \n    bool StreamBase::IsIPCPipe() {  \n      return false;  \n    }  \n\n    // \u5b50\u7c7b\u91cd\u5199  \n    int StreamBase::GetFD() {  \n      return -1;  \n    }  \n\n    Local&lt;Object&gt; StreamBase::GetObject() {  \n      return GetAsyncWrap()-&gt;object();  \n    }  \n\n    // \u5de5\u5177\u51fd\u6570\u548c\u5b9e\u4f8bthis\u65e0\u5173\uff0c\u548c\u5165\u53c2\u6709\u5173  \n    void StreamBase::GetFD(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      // Mimic implementation of StreamBase::GetFD() and UDPWrap::GetFD().  \n      // \u4eceJS\u5c42\u5bf9\u8c61\u83b7\u53d6\u5b83\u5173\u8054\u7684C++\u5bf9\u8c61\uff0c\u4e0d\u4e00\u5b9a\u662fthis  \n      StreamBase* wrap = StreamBase::FromObject(args.This().As&lt;Object&gt;());  \n      if (wrap == nullptr) return args.GetReturnValue().Set(UV_EINVAL);  \n\n      if (!wrap-&gt;IsAlive()) return args.GetReturnValue().Set(UV_EINVAL);  \n\n      args.GetReturnValue().Set(wrap-&gt;GetFD());  \n    }  \n\n    void StreamBase::GetBytesRead(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      StreamBase* wrap = StreamBase::FromObject(args.This().As&lt;Object&gt;());  \n      if (wrap == nullptr) return args.GetReturnValue().Set(0);  \n\n      // uint64_t -&gt; double. 53bits is enough for all real cases.  \n      args.GetReturnValue().Set(static_cast&lt;double&gt;(wrap-&gt;bytes_read_));  \n    }  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#683-libuvstreamwrap","title":"6.8.3 LibuvStreamWrap","text":"<p>LibuvStreamWrap\u662fStreamBase\u7684\u5b50\u7c7b\u3002\u5b9e\u73b0\u4e86\u7236\u7c7b\u7684\u63a5\u53e3\uff0c\u4e5f\u62d3\u5c55\u4e86\u6d41\u7684\u80fd\u529b\u3002</p> <pre><code>    class LibuvStreamWrap : public HandleWrap, public StreamBase {  \n     public:  \n      static void Initialize(v8::Local&lt;v8::Object&gt; target,  \n                             v8::Local&lt;v8::Value&gt; unused,  \n                             v8::Local&lt;v8::Context&gt; context,  \n                             void* priv);  \n\n      int GetFD() override;  \n      bool IsAlive() override;  \n     bool IsClosing() override;  \n     bool IsIPCPipe() override;  \n\n     // JavaScript functions  \n     int ReadStart() override;  \n     int ReadStop() override;  \n\n     // Resource implementation  \n     int DoShutdown(ShutdownWrap* req_wrap) override;  \n     int DoTryWrite(uv_buf_t** bufs, size_t* count) override;  \n     int DoWrite(WriteWrap* w,  \n                 uv_buf_t* bufs,  \n                 size_t count,  \n                 uv_stream_t* send_handle) override;  \n\n     inline uv_stream_t* stream() const {  \n       return stream_;  \n     }  \n     // \u662f\u5426\u662fUnix\u57df\u6216\u547d\u540d\u7ba1\u9053  \n     inline bool is_named_pipe() const {  \n       return stream()-&gt;type == UV_NAMED_PIPE;  \n     }  \n     // \u662f\u5426\u662fUnix\u57df\u5e76\u4e14\u652f\u6301\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26  \n     inline bool is_named_pipe_ipc() const {  \n       return is_named_pipe() &amp;&amp;  \n              reinterpret_cast&lt;const uv_pipe_t*&gt;(stream())-&gt;ipc != 0;  \n     }  \n\n     inline bool is_tcp() const {  \n       return stream()-&gt;type == UV_TCP;  \n     }  \n     // \u521b\u5efa\u8bf7\u6c42Libuv\u7684\u5bf9\u8c61  \n     ShutdownWrap* CreateShutdownWrap(v8::Local&lt;v8::Object&gt; object) override;  \n     WriteWrap* CreateWriteWrap(v8::Local&lt;v8::Object&gt; object) override;  \n     // \u4eceJS\u5c42\u5bf9\u8c61\u83b7\u53d6\u5bf9\u4e8e\u7684C++\u5bf9\u8c61  \n     static LibuvStreamWrap* From(Environment* env, v8::Local&lt;v8::Object&gt; object);  \n\n    protected:  \n     LibuvStreamWrap(Environment* env,  \n                     v8::Local&lt;v8::Object&gt; object,  \n                     uv_stream_t* stream,  \n                     AsyncWrap::ProviderType provider);  \n\n     AsyncWrap* GetAsyncWrap() override;  \n\n     static v8::Local&lt;v8::FunctionTemplate&gt; GetConstructorTemplate( \n         Environment* env);  \n\n    private:  \n     static void GetWriteQueueSize(  \n         const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; info);  \n     static void SetBlocking(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n\n     // Callbacks for libuv  \n     void OnUvAlloc(size_t suggested_size, uv_buf_t* buf);  \n     void OnUvRead(ssize_t nread, const uv_buf_t* buf);  \n\n     static void AfterUvWrite(uv_write_t* req, int status);  \n     static void AfterUvShutdown(uv_shutdown_t* req, int status);  \n\n     uv_stream_t* const stream_;  \n    };  \n</code></pre> <p>1 \u521d\u59cb\u5316</p> <pre><code>    LibuvStreamWrap::LibuvStreamWrap(Environment* env,  \n                                     Local&lt;Object&gt; object,  \n                                     uv_stream_t* stream,  \n                                     AsyncWrap::ProviderType provider)  \n        : HandleWrap(env,  \n                     object,  \n                     reinterpret_cast&lt;uv_handle_t*&gt;(stream),  \n                     provider),  \n          StreamBase(env),  \n          stream_(stream) {  \n      StreamBase::AttachToObject(object);  \n    }  \n</code></pre> <p>LibuvStreamWrap\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u4f1a\u628aJS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61\u7684\u5185\u90e8\u6307\u9488\u6307\u5411\u81ea\u5df1\uff0c\u89c1HandleWrap\u3002 2 \u5199\u64cd\u4f5c</p> <pre><code>    // \u5de5\u5177\u51fd\u6570\uff0c\u83b7\u53d6\u5f85\u5199\u6570\u636e\u5b57\u8282\u7684\u5927\u5c0f  \n    void LibuvStreamWrap::GetWriteQueueSize(  \n        const FunctionCallbackInfo&lt;Value&gt;&amp; info) {  \n      LibuvStreamWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, info.This());  \n      uint32_t write_queue_size = wrap-&gt;stream()-&gt;write_queue_size;  \n      info.GetReturnValue().Set(write_queue_size);  \n    }  \n\n    // \u8bbe\u7f6e\u975e\u963b\u585e  \n    void LibuvStreamWrap::SetBlocking(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      LibuvStreamWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, args.Holder());\n      bool enable = args[0]-&gt;IsTrue();  \n      args.GetReturnValue().Set(uv_stream_set_blocking(wrap-&gt;stream(), enable));  \n    }  \n    // \u5b9a\u4e49\u4e00\u4e2a\u5173\u95ed\u7684\u8bf7\u6c42  \n    typedef SimpleShutdownWrap&lt;ReqWrap&lt;uv_shutdown_t&gt;&gt; LibuvShutdownWrap;  \n    // \u5b9a\u4e49\u4e00\u4e2a\u5199\u8bf7\u6c42  \n    typedef SimpleWriteWrap&lt;ReqWrap&lt;uv_write_t&gt;&gt; LibuvWriteWrap;  \n\n    ShutdownWrap* LibuvStreamWrap::CreateShutdownWrap(Local&lt;Object&gt; object) {  \n      return new LibuvShutdownWrap(this, object);  \n    }  \n\n    WriteWrap* LibuvStreamWrap::CreateWriteWrap(Local&lt;Object&gt; object) {  \n      return new LibuvWriteWrap(this, object);  \n    }  \n\n    // \u53d1\u8d77\u5173\u95ed\u8bf7\u6c42\uff0c\u7531\u7236\u7c7b\u8c03\u7528\uff0creq_wrap\u662fC++\u5c42\u521b\u5efa\u7684\u5bf9\u8c61  \n    int LibuvStreamWrap::DoShutdown(ShutdownWrap* req_wrap_) {  \n      LibuvShutdownWrap* req_wrap = static_cast&lt;LibuvShutdownWrap*&gt;(req_wrap_);  \n      return req_wrap-&gt;Dispatch(uv_shutdown, stream(), AfterUvShutdown);  \n    }  \n\n    // \u5173\u95ed\u8bf7\u6c42\u7ed3\u675f\u540e\u6267\u884c\u8bf7\u6c42\u7684\u901a\u7528\u56de\u8c03Done  \n    void LibuvStreamWrap::AfterUvShutdown(uv_shutdown_t* req, int status) {  \n      LibuvShutdownWrap* req_wrap = static_cast&lt;LibuvShutdownWrap*&gt;(\n          LibuvShutdownWrap::from_req(req));   \n      HandleScope scope(req_wrap-&gt;env()-&gt;isolate());  \n      Context::Scope context_scope(req_wrap-&gt;env()-&gt;context());  \n      req_wrap-&gt;Done(status);  \n    }  \n\n    int LibuvStreamWrap::DoTryWrite(uv_buf_t** bufs, size_t* count) {  \n      int err;  \n      size_t written;  \n      uv_buf_t* vbufs = *bufs;  \n      size_t vcount = *count;  \n\n      err = uv_try_write(stream(), vbufs, vcount);  \n      if (err == UV_ENOSYS || err == UV_EAGAIN)  \n        return 0;  \n      if (err &lt; 0)  \n        return err;  \n      // \u5199\u6210\u529f\u7684\u5b57\u8282\u6570\uff0c\u66f4\u65b0\u6570\u636e  \n      written = err;  \n      for (; vcount &gt; 0; vbufs++, vcount--) {  \n        // Slice  \n        if (vbufs[0].len &gt; written) {  \n          vbufs[0].base += written;  \n          vbufs[0].len -= written;  \n          written = 0;  \n          break;  \n\n        // Discard  \n        } else {  \n          written -= vbufs[0].len;  \n        }  \n      }  \n\n      *bufs = vbufs;  \n      *count = vcount;  \n\n      return 0;  \n    }  \n\n\n    int LibuvStreamWrap::DoWrite(WriteWrap* req_wrap,  \n                                 uv_buf_t* bufs,  \n                                 size_t count,  \n                                 uv_stream_t* send_handle) {  \n      LibuvWriteWrap* w = static_cast&lt;LibuvWriteWrap*&gt;(req_wrap);  \n      return w-&gt;Dispatch(uv_write2,  \n                         stream(),  \n                         bufs,  \n                         count,  \n                         send_handle,  \n                         AfterUvWrite);  \n    }  \n\n\n\n    void LibuvStreamWrap::AfterUvWrite(uv_write_t* req, int status) {  \n      LibuvWriteWrap* req_wrap = static_cast&lt;LibuvWriteWrap*&gt;(  \n          LibuvWriteWrap::from_req(req));    \n      HandleScope scope(req_wrap-&gt;env()-&gt;isolate());  \n      Context::Scope context_scope(req_wrap-&gt;env()-&gt;context());  \n      req_wrap-&gt;Done(status);  \n    }  \n</code></pre> <p>3 \u8bfb\u64cd\u4f5c</p> <pre><code>    // \u8c03\u7528Libuv\u5b9e\u73b0\u542f\u52a8\u8bfb\u903b\u8f91  \n    int LibuvStreamWrap::ReadStart() {  \n      return uv_read_start(stream(), [](uv_handle_t* handle,  \n                                        size_t suggested_size,  \n                                        uv_buf_t* buf) {  \n        static_cast&lt;LibuvStreamWrap*&gt;(handle-&gt;data)-&gt;OnUvAlloc(suggested_size, buf);  \n      }, [](uv_stream_t* stream, ssize_t nread, const uv_buf_t* buf) {  \n        static_cast&lt;LibuvStreamWrap*&gt;(stream-&gt;data)-&gt;OnUvRead(nread, buf);  \n      });  \n    }  \n\n    // \u5b9e\u73b0\u505c\u6b62\u8bfb\u903b\u8f91  \n    int LibuvStreamWrap::ReadStop() {  \n      return uv_read_stop(stream());  \n    }  \n\n    // \u9700\u8981\u5206\u914d\u5185\u5b58\u65f6\u7684\u56de\u8c03\uff0c\u7531Libuv\u56de\u8c03\uff0c\u5177\u4f53\u5206\u914d\u5185\u5b58\u903b\u8f91\u7531listener\u5b9e\u73b0  \n    void LibuvStreamWrap::OnUvAlloc(size_t suggested_size, uv_buf_t* buf) {  \n      HandleScope scope(env()-&gt;isolate());  \n      Context::Scope context_scope(env()-&gt;context());  \n\n      *buf = EmitAlloc(suggested_size);  \n    }  \n    // \u5904\u7406\u4f20\u9012\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26  \n    template &lt;class WrapType&gt;  \n    static MaybeLocal&lt;Object&gt; AcceptHandle(Environment* env,  \n                                           LibuvStreamWrap* parent) {    \n      EscapableHandleScope scope(env-&gt;isolate());  \n      Local&lt;Object&gt; wrap_obj;  \n      // \u6839\u636e\u7c7b\u578b\u521b\u5efa\u4e00\u4e2a\u8868\u793a\u5ba2\u6237\u7aef\u7684\u5bf9\u8c61\uff0c\u7136\u540e\u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fdd\u5b58\u5176\u4e2d  \n      if (!WrapType::Instantiate(env, parent, WrapType::SOCKET).ToLocal(&amp;wrap_obj))  \n        return Local&lt;Object&gt;();  \n      // \u89e3\u51faC++\u5c42\u5bf9\u8c61  \n      HandleWrap* wrap = Unwrap&lt;HandleWrap&gt;(wrap_obj);  \n      CHECK_NOT_NULL(wrap);  \n      // \u62ff\u5230C++\u5bf9\u8c61\u4e2d\u5c01\u88c5\u7684handle  \n      uv_stream_t* stream = reinterpret_cast&lt;uv_stream_t*&gt;(wrap-&gt;GetHandle());   \n      // \u4ece\u670d\u52a1\u5668\u6d41\u4e2d\u6458\u4e0b\u4e00\u4e2afd\u4fdd\u5b58\u5230steam  \n      if (uv_accept(parent-&gt;stream(), stream))  \n        ABORT();  \n\n      return scope.Escape(wrap_obj);  \n    }  \n\n    // \u5b9e\u73b0OnUvRead\uff0c\u6d41\u4e2d\u6709\u6570\u636e\u6216\u8bfb\u5230\u7ed3\u5c3e\u65f6\u7531Libuv\u56de\u8c03  \n    void LibuvStreamWrap::OnUvRead(ssize_t nread, const uv_buf_t* buf) {  \n      HandleScope scope(env()-&gt;isolate());  \n      Context::Scope context_scope(env()-&gt;context());  \n      uv_handle_type type = UV_UNKNOWN_HANDLE;  \n      // \u662f\u5426\u652f\u6301\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u5e76\u4e14\u6709\u5f85\u5904\u7406\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5219\u5224\u65ad\u6587\u4ef6\u63cf\u8ff0\u7b26\u7c7b\u578b  \n      if (is_named_pipe_ipc() &amp;&amp;  \n          uv_pipe_pending_count(reinterpret_cast&lt;uv_pipe_t*&gt;(stream())) &gt; 0) {  \n        type = uv_pipe_pending_type(reinterpret_cast&lt;uv_pipe_t*&gt;(stream()));  \n      }  \n\n      // \u8bfb\u53d6\u6210\u529f  \n      if (nread &gt; 0) {  \n        MaybeLocal&lt;Object&gt; pending_obj;  \n        // \u6839\u636e\u7c7b\u578b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684C++\u5bf9\u8c61\u8868\u793a\u5ba2\u6237\u7aef\uff0c\u5e76\u4e14\u4ece\u670d\u52a1\u5668\u4e2d\u6458\u4e0b\u4e00\u4e2afd\u4fdd\u5b58\u5230\u5ba2\u6237\u7aef  \n        if (type == UV_TCP) {  \n          pending_obj = AcceptHandle&lt;TCPWrap&gt;(env(), this);  \n        } else if (type == UV_NAMED_PIPE) {  \n          pending_obj = AcceptHandle&lt;PipeWrap&gt;(env(), this);  \n        } else if (type == UV_UDP) {  \n          pending_obj = AcceptHandle&lt;UDPWrap&gt;(env(), this);  \n        } else {  \n          CHECK_EQ(type, UV_UNKNOWN_HANDLE);  \n        }  \n        // \u6709\u9700\u8981\u5904\u7406\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5219\u8bbe\u7f6e\u5230JS\u5c42\u5bf9\u8c61\u4e2d\uff0cJS\u5c42\u4f7f\u7528  \n        if (!pending_obj.IsEmpty()) {  \n          object()  \n              -&gt;Set(env()-&gt;context(),  \n                    env()-&gt;pending_handle_string(),  \n                    pending_obj.ToLocalChecked())  \n              .Check();  \n        }  \n      }  \n      // \u89e6\u53d1\u8bfb\u4e8b\u4ef6\uff0clistener\u5b9e\u73b0  \n      EmitRead(nread, *buf);  \n    }  \n</code></pre> <p>\u8bfb\u64cd\u4f5c\u4e0d\u4ec5\u652f\u6301\u8bfb\u53d6\u4e00\u822c\u7684\u6570\u636e\uff0c\u8fd8\u53ef\u4ee5\u8bfb\u53d6\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0cC++\u5c42\u4f1a\u65b0\u5efa\u4e00\u4e2a\u6d41\u5bf9\u8c61\u8868\u793a\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u5728JS\u5c42\u53ef\u4ee5\u4f7f\u7528\u3002</p>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#684-connectionwrap","title":"6.8.4 ConnectionWrap","text":"<p>ConnectionWrap\u662fLibuvStreamWrap\u5b50\u7c7b\uff0c\u62d3\u5c55\u4e86\u8fde\u63a5\u7684\u63a5\u53e3\u3002\u9002\u7528\u4e8e\u5e26\u6709\u8fde\u63a5\u5c5e\u6027\u7684\u6d41\uff0c\u6bd4\u5982Unix\u57df\u548cTCP\u3002</p> <pre><code>    // WrapType\u662fC++\u5c42\u7684\u7c7b\uff0cUVType\u662fLibuv\u7684\u7c7b\u578b  \n    template &lt;typename WrapType, typename UVType&gt;  \n    class ConnectionWrap : public LibuvStreamWrap {  \n     public:  \n      static void OnConnection(uv_stream_t* handle, int status);  \n      static void AfterConnect(uv_connect_t* req, int status);  \n\n     protected:  \n      ConnectionWrap(Environment* env,  \n                     v8::Local&lt;v8::Object&gt; object,  \n                     ProviderType provider);  \n\n      UVType handle_;  \n    };  \n</code></pre> <p>1 \u53d1\u8d77\u8fde\u63a5\u540e\u7684\u56de\u8c03</p> <pre><code>    template &lt;typename WrapType, typename UVType&gt;  \n    void ConnectionWrap&lt;WrapType, UVType&gt;::AfterConnect(uv_connect_t* req,  \n                                                        int status) {  \n      // \u901a\u8fc7Libuv\u7ed3\u6784\u4f53\u62ff\u5230\u5bf9\u5e94\u7684C++\u5bf9\u8c61     \n      std::unique_ptr&lt;ConnectWrap&gt; req_wrap =\n        (static_cast&lt;ConnectWrap*&gt;(req-&gt;data));  \n      WrapType* wrap = static_cast&lt;WrapType*&gt;(req-&gt;handle-&gt;data);  \n      Environment* env = wrap-&gt;env();  \n\n      HandleScope handle_scope(env-&gt;isolate());  \n      Context::Scope context_scope(env-&gt;context());  \n\n      bool readable, writable;  \n      // \u8fde\u63a5\u7ed3\u679c  \n      if (status) {  \n        readable = writable = false;  \n      } else {  \n        readable = uv_is_readable(req-&gt;handle) != 0;  \n        writable = uv_is_writable(req-&gt;handle) != 0;  \n      }  \n\n      Local&lt;Value&gt; argv[5] = {  \n        Integer::New(env-&gt;isolate(), status),  \n        wrap-&gt;object(),  \n        req_wrap-&gt;object(),  \n        Boolean::New(env-&gt;isolate(), readable),  \n        Boolean::New(env-&gt;isolate(), writable)  \n      };  \n      // \u56de\u8c03js  \n      req_wrap-&gt;MakeCallback(env-&gt;oncomplete_string(), \n                                arraysize(argv), \n                                argv);  \n    }  \n</code></pre> <p>2 \u8fde\u63a5\u5230\u6765\u65f6\u56de\u8c03</p> <pre><code>    // \u6709\u8fde\u63a5\u65f6\u89e6\u53d1\u7684\u56de\u8c03  \n    template &lt;typename WrapType, typename UVType&gt;  \n    void ConnectionWrap&lt;WrapType, UVType&gt;::OnConnection(uv_stream_t* handle,  \n                                                        int status) {  \n      // \u62ff\u5230Libuv\u7ed3\u6784\u4f53\u5bf9\u5e94\u7684C++\u5c42\u5bf9\u8c61                               \n      WrapType* wrap_data = static_cast&lt;WrapType*&gt;(handle-&gt;data);  \n      Environment* env = wrap_data-&gt;env();  \n      HandleScope handle_scope(env-&gt;isolate());  \n      Context::Scope context_scope(env-&gt;context());  \n\n      // \u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u7684\u5bf9\u8c61  \n      Local&lt;Value&gt; client_handle;  \n\n      if (status == 0) {  \n        // Instantiate the client javascript object and handle.  \n        // \u65b0\u5efa\u4e00\u4e2aJS\u5c42\u4f7f\u7528\u5bf9\u8c61  \n        Local&lt;Object&gt; client_obj;  \n        if (!WrapType::Instantiate(env, wrap_data, WrapType::SOCKET)\n                 .ToLocal(&amp;client_obj))  \n          return;  \n\n        // Unwrap the client javascript object.  \n        WrapType* wrap;  \n        // \u628aJS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61client_obj\u6240\u5bf9\u5e94\u7684C++\u5c42\u5bf9\u8c61\u5b58\u5230wrap\u4e2d  \n        ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, client_obj);  \n        // \u62ff\u5230\u5bf9\u5e94\u7684handle  \n        uv_stream_t* client = reinterpret_cast&lt;uv_stream_t*&gt;(&amp;wrap-&gt;handle_);  \n\n        // \u4ecehandleaccpet\u5230\u7684fd\u4e2d\u62ff\u4e00\u4e2a\u4fdd\u5b58\u5230client\uff0cclient\u5c31\u53ef\u4ee5\u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u4e86  \n        if (uv_accept(handle, client))  \n          return;  \n          client_handle = client_obj;  \n      } else {  \n        client_handle = Undefined(env-&gt;isolate());  \n      }  \n      // \u56de\u8c03JS\uff0cclient_handle\u76f8\u5f53\u4e8e\u5728JS\u5c42\u6267\u884cnew TCP  \n      Local&lt;Value&gt; argv[] = { \n                                 Integer::New(env-&gt;isolate(), status), \n                                 client_handle \n                               };  \n      wrap_data-&gt;MakeCallback(env-&gt;onconnection_string(), \n                                 arraysize(argv), \n                                 argv);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0bTCP\u7684Instantiate\u3002</p> <pre><code>    MaybeLocal&lt;Object&gt; TCPWrap::Instantiate(Environment* env,  \n                                            AsyncWrap* parent,  \n                                            TCPWrap::SocketType type) {  \n      EscapableHandleScope handle_scope(env-&gt;isolate());  \n      AsyncHooks::DefaultTriggerAsyncIdScope trigger_scope(parent); \n\n      // \u62ff\u5230\u5bfc\u51fa\u5230JS\u5c42\u7684TCP\u6784\u9020\u51fd\u6570\uff0c\u7f13\u5b58\u5728env\u4e2d  \n      Local&lt;Function&gt; constructor = env-&gt;tcp_constructor_template()  \n                                        -&gt;GetFunction(env-&gt;context())\n                                        .ToLocalChecked();  \n      Local&lt;Value&gt; type_value = Int32::New(env-&gt;isolate(), type);  \n      // \u76f8\u5f53\u4e8e\u6211\u4eec\u5728JS\u5c42\u8c03\u7528new TCP()\u65f6\u62ff\u5230\u7684\u5bf9\u8c61  \n      return handle_scope.EscapeMaybe(  \n          constructor-&gt;NewInstance(env-&gt;context(), 1, &amp;type_value));  \n    }  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#685-streamreq","title":"6.8.5 StreamReq","text":"<p>StreamReq\u8868\u793a\u64cd\u4f5c\u6d41\u7684\u4e00\u6b21\u8bf7\u6c42\u3002\u4e3b\u8981\u4fdd\u5b58\u4e86\u8bf7\u6c42\u4e0a\u4e0b\u6587\u548c\u64cd\u4f5c\u7ed3\u675f\u540e\u7684\u901a\u7528\u903b\u8f91\u3002</p> <pre><code>    // \u8bf7\u6c42Libuv\u7684\u57fa\u7c7b  \n    class StreamReq {  \n     public:  \n     // JS\u5c42\u4f20\u8fdb\u6765\u7684\u5bf9\u8c61\u7684internalField[1]\u4fdd\u5b58\u4e86StreamReq\u7c7b\u5bf9\u8c61  \n      static constexpr int kStreamReqField = 1;  \n      // stream\u4e3a\u6240\u64cd\u4f5c\u7684\u6d41\uff0creq_wrap_obj\u4e3aJS\u5c42\u4f20\u8fdb\u6765\u7684\u5bf9\u8c61  \n      explicit StreamReq(StreamBase* stream,  \n                         v8::Local&lt;v8::Object&gt; req_wrap_obj) : stream_(stream) {  \n        // JS\u5c42\u5bf9\u8c61\u6307\u5411\u5f53\u524dStreamReq\u5bf9\u8c61                     \n        AttachToObject(req_wrap_obj);  \n      }   \n      // \u5b50\u7c7b\u5b9a\u4e49  \n      virtual AsyncWrap* GetAsyncWrap() = 0;  \n      // \u83b7\u53d6\u76f8\u5173\u8054\u7684\u539f\u59cbjs\u5bf9\u8c61  \n      v8::Local&lt;v8::Object&gt; object();  \n      // \u8bf7\u6c42\u7ed3\u675f\u540e\u7684\u56de\u8c03\uff0c\u4f1a\u6267\u884c\u5b50\u7c7b\u7684onDone\uff0conDone\u7531\u5b50\u7c7b\u5b9e\u73b0  \n      void Done(int status, const char* error_str = nullptr);  \n      // JS\u5c42\u5bf9\u8c61\u4e0d\u518d\u6267\u884cStreamReq\u5b9e\u4f8b  \n      void Dispose();  \n      // \u83b7\u53d6\u6240\u64cd\u4f5c\u7684\u6d41  \n      inline StreamBase* stream() const { return stream_; }  \n      // \u4eceJS\u5c42\u5bf9\u8c61\u83b7\u53d6StreamReq\u5bf9\u8c61  \n      static StreamReq* FromObject(v8::Local&lt;v8::Object&gt; req_wrap_obj);  \n      // \u8bf7\u6c42JS\u5c42\u5bf9\u8c61\u7684internalField\u6240\u6709\u6307\u5411  \n      static inline void ResetObject(v8::Local&lt;v8::Object&gt; req_wrap_obj);  \n\n     protected:  \n      // \u8bf7\u6c42\u7ed3\u675f\u540e\u56de\u8c03\n      virtual void OnDone(int status) = 0;  \n      void AttachToObject(v8::Local&lt;v8::Object&gt; req_wrap_obj);  \n\n     private:  \n      StreamBase* const stream_;  \n    };  \n</code></pre> <p>StreamReq\u6709\u4e00\u4e2a\u6210\u5458\u4e3astream_\uff0c\u8868\u793aStreamReq\u8bf7\u6c42\u4e2d\u64cd\u4f5c\u7684\u6d41\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u5b9e\u73b0\u3002 1 JS\u5c42\u8bf7\u6c42\u4e0a\u4e0b\u6587\u548cStreamReq\u7684\u5173\u7cfb\u7ba1\u7406\u3002</p> <pre><code>    inline void StreamReq::AttachToObject(v8::Local&lt;v8::Object&gt; req_wrap_obj) {   \n      req_wrap_obj-&gt;SetAlignedPointerInInternalField(kStreamReqField,                                                      this);  \n    }  \n\n    inline StreamReq* StreamReq::FromObject(v8::Local&lt;v8::Object&gt; req_wrap_obj) {  \n      return static_cast&lt;StreamReq*&gt;(  \n          req_wrap_obj-&gt;GetAlignedPointerFromInternalField(kStreamReqField));  \n    }  \n\n    inline void StreamReq::Dispose() {  \n      object()-&gt;SetAlignedPointerInInternalField(kStreamReqField, nullptr);  \n      delete this;  \n    }  \n\n    inline void StreamReq::ResetObject(v8::Local&lt;v8::Object&gt; obj) { \n      obj-&gt;SetAlignedPointerInInternalField(0, nullptr); // BaseObject field.  \n      obj-&gt;SetAlignedPointerInInternalField(StreamReq::kStreamReqField, nullptr);  \n    }  \n</code></pre> <p>2 \u83b7\u53d6\u539f\u59cbJS\u5c42\u8bf7\u6c42\u5bf9\u8c61</p> <pre><code>    // \u83b7\u53d6\u548c\u8be5\u8bf7\u6c42\u76f8\u5173\u8054\u7684\u539f\u59cbjs\u5bf9\u8c61  \n    inline v8::Local&lt;v8::Object&gt; StreamReq::object() {  \n      return GetAsyncWrap()-&gt;object();  \n    }  \n</code></pre> <p>3 \u8bf7\u6c42\u7ed3\u675f\u56de\u8c03</p> <pre><code>    inline void StreamReq::Done(int status, const char* error_str) {  \n      AsyncWrap* async_wrap = GetAsyncWrap();  \n      Environment* env = async_wrap-&gt;env();  \n      if (error_str != nullptr) {  \n        async_wrap-&gt;object()-&gt;Set(env-&gt;context(),  \n                                  env-&gt;error_string(),  \n                                  OneByteString(env-&gt;isolate(), \n                                                     error_str))  \n                                  .Check();  \n      }  \n      // \u6267\u884c\u5b50\u7c7b\u7684OnDone  \n      OnDone(status);  \n    }  \n</code></pre> <p>\u6d41\u64cd\u4f5c\u8bf7\u6c42\u7ed3\u675f\u540e\u4f1a\u7edf\u4e00\u6267\u884cDone\uff0cDone\u4f1a\u6267\u884c\u5b50\u7c7b\u5b9e\u73b0\u7684OnDone\u51fd\u6570\u3002</p>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#686-shutdownwrap","title":"6.8.6 ShutdownWrap","text":"<p>ShutdownWrap\u662fStreamReq\u7684\u5b50\u7c7b\uff0c\u8868\u793a\u4e00\u6b21\u5173\u95ed\u6d41\u8bf7\u6c42\u3002</p> <pre><code>    class ShutdownWrap : public StreamReq {  \n     public:  \n      ShutdownWrap(StreamBase* stream,  \n                   v8::Local&lt;v8::Object&gt; req_wrap_obj)  \n        : StreamReq(stream, req_wrap_obj) { }  \n\n      void OnDone(int status) override;  \n    };  \n</code></pre> <p>ShutdownWrap\u5b9e\u73b0\u4e86OnDone\u63a5\u53e3\uff0c\u5728\u5173\u95ed\u6d41\u7ed3\u675f\u540e\u88ab\u57fa\u7c7b\u6267\u884c\u3002</p> <pre><code>    /* \n      \u5173\u95ed\u7ed3\u675f\u65f6\u56de\u8c03\uff0c\u7531\u8bf7\u6c42\u7c7b\uff08ShutdownWrap\uff09\u8c03\u7528Libuv\uff0c \n      \u6240\u4ee5Libuv\u64cd\u4f5c\u5b8c\u6210\u540e\uff0c\u9996\u5148\u6267\u884c\u8bf7\u6c42\u7c7b\u7684\u56de\u8c03\uff0c\u8bf7\u6c42\u7c7b\u901a\u77e5\u6d41\uff0c\u6d41\u89e6\u53d1 \n      \u5bf9\u5e94\u7684\u4e8b\u4ef6\uff0c\u8fdb\u4e00\u6b65\u901a\u77e5listener \n    */  \n    inline void ShutdownWrap::OnDone(int status) {  \n      stream()-&gt;EmitAfterShutdown(this, status);  \n      Dispose();  \n    }  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#687-simpleshutdownwrap","title":"6.8.7 SimpleShutdownWrap","text":"<p>SimpleShutdownWrap\u662fShutdownWrap\u7684\u5b50\u7c7b\u3002\u5b9e\u73b0\u4e86GetAsyncWrap\u63a5\u53e3\u3002OtherBase\u53ef\u4ee5\u662fReqWrap\u6216\u8005AsyncWrap\u3002</p> <pre><code>    template &lt;typename OtherBase&gt;  \n    class SimpleShutdownWrap : public ShutdownWrap, public OtherBase {  \n     public:  \n      SimpleShutdownWrap(StreamBase* stream,  \n                         v8::Local&lt;v8::Object&gt; req_wrap_obj);  \n\n      AsyncWrap* GetAsyncWrap() override { return this; }\n    };  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#688-writewrap","title":"6.8.8 WriteWrap","text":"<p>WriteWrap\u662fStreamReq\u7684\u5b50\u7c7b\uff0c\u8868\u793a\u4e00\u6b21\u5f80\u6d41\u5199\u5165\u6570\u636e\u7684\u8bf7\u6c42\u3002</p> <pre><code>    class WriteWrap : public StreamReq {  \n     public:  \n      void SetAllocatedStorage(AllocatedBuffer&amp;&amp; storage);  \n\n      WriteWrap(StreamBase* stream,  \n                v8::Local&lt;v8::Object&gt; req_wrap_obj)  \n        : StreamReq(stream, req_wrap_obj) { }  \n\n      void OnDone(int status) override;  \n\n     private:  \n      AllocatedBuffer storage_;  \n    };  \n</code></pre> <p>WriteWrap\u5b9e\u73b0\u4e86OnDone\u63a5\u53e3\uff0c\u5728\u5199\u7ed3\u675f\u65f6\u88ab\u57fa\u7c7b\u6267\u884c\u3002</p> <pre><code>    inline void WriteWrap::OnDone(int status) {  \n      stream()-&gt;EmitAfterWrite(this, status);  \n      Dispose();  \n    }  \n</code></pre> <p>\u8bf7\u6c42\u7ed3\u675f\u540e\u8c03\u7528\u6d41\u7684\u63a5\u53e3\u901a\u77e5\u6d41\u5199\u7ed3\u675f\u4e86\uff0c\u6d41\u4f1a\u901a\u77e5listener\uff0clistener\u4f1a\u8c03\u7528\u6d41\u7684\u63a5\u53e3\u901a\u77e5JS\u5c42\u3002</p>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#689-simplewritewrap","title":"6.8.9 SimpleWriteWrap","text":"<p>SimpleWriteWrap\u662fWriteWrap\u7684\u5b50\u7c7b\u3002\u5b9e\u73b0\u4e86GetAsyncWrap\u63a5\u53e3\u3002\u548cSimpleShutdownWrap\u7c7b\u578b\u3002</p> <pre><code>    template &lt;typename OtherBase&gt;  \n    class SimpleWriteWrap : public WriteWrap, public OtherBase {  \n     public:  \n      SimpleWriteWrap(StreamBase* stream,  \n                      v8::Local&lt;v8::Object&gt; req_wrap_obj);  \n\n      AsyncWrap* GetAsyncWrap() override { return this; }  \n    };  \n</code></pre>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#6810-streamlistener","title":"6.8.10 StreamListener","text":"<pre><code>    class StreamListener {  \n     public:  \n      virtual ~StreamListener();  \n      // \u5206\u914d\u5b58\u50a8\u6570\u636e\u7684\u5185\u5b58  \n      virtual uv_buf_t OnStreamAlloc(size_t suggested_size) = 0;  \n      // \u6709\u6570\u636e\u53ef\u8bfb\u65f6\u56de\u8c03\uff0c\u6d88\u8d39\u6570\u636e\u7684\u51fd\u6570  \n      virtual void OnStreamRead(ssize_t nread, const uv_buf_t&amp; buf) = 0;  \n      // \u6d41\u9500\u6bc1\u65f6\u56de\u8c03  \n      virtual void OnStreamDestroy() {}  \n      // \u76d1\u542c\u8005\u6240\u5c5e\u6d41  \n      inline StreamResource* stream() { return stream_; }  \n\n     protected:  \n      // \u6d41\u662f\u76d1\u542c\u8005\u662f\u4e00\u6761\u94fe\u8868\uff0c\u8be5\u51fd\u6570\u628a\u7ed3\u6784\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u8282\u70b9  \n      void PassReadErrorToPreviousListener(ssize_t nread);  \n      // \u76d1\u542c\u8005\u6240\u5c5e\u6d41  \n      StreamResource* stream_ = nullptr;  \n      // \u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u5f62\u6210\u94fe\u8868  \n      StreamListener* previous_listener_ = nullptr;  \n      friend class StreamResource;  \n    };  \n</code></pre> <p>StreamListener\u662f\u7c7b\u4f3c\u4e00\u4e2a\u8ba2\u9605\u8005\uff0c\u5b83\u4f1a\u5bf9\u6d41\u7684\u72b6\u6001\u611f\u5174\u8da3\uff0c\u6bd4\u5982\u6570\u636e\u53ef\u8bfb\u3001\u53ef\u5199\u3001\u6d41\u5173\u95ed\u7b49\u3002\u4e00\u4e2a\u6d41\u53ef\u4ee5\u6ce8\u518c\u591a\u4e2alistener\uff0c\u591a\u4e2alistener\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\u3002</p> <pre><code>    // \u4ecelisten\u6240\u5c5e\u7684\u6d41\u7684listener\u961f\u5217\u4e2d\u5220\u9664\u81ea\u5df1  \n    inline StreamListener::~StreamListener() {  \n      if (stream_ != nullptr)  \n        stream_-&gt;RemoveStreamListener(this);  \n    }  \n    // \u8bfb\u51fa\u9519\uff0c\u628a\u4fe1\u606f\u4f20\u9012\u7ed9\u524d\u4e00\u4e2alistener  \n    inline void StreamListener::PassReadErrorToPreviousListener(ssize_t nread) {  \n      CHECK_NOT_NULL(previous_listener_);  \n      previous_listener_-&gt;OnStreamRead(nread, uv_buf_init(nullptr, 0));  \n    }  \n    // \u5b9e\u73b0\u6d41\u5173\u95ed\u65f6\u7684\u5904\u7406\u903b\u8f91  \n    inline void StreamListener::OnStreamAfterShutdown(ShutdownWrap* w, int status) {    \n      previous_listener_-&gt;OnStreamAfterShutdown(w, status);  \n    }  \n    // \u5b9e\u73b0\u5199\u7ed3\u675f\u65f6\u7684\u5904\u7406\u903b\u8f91  \n    inline void StreamListener::OnStreamAfterWrite(WriteWrap* w, int status) {    \n      previous_listener_-&gt;OnStreamAfterWrite(w, status);  \n    }  \n</code></pre> <p>StreamListener\u7684\u903b\u8f91\u4e0d\u591a\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u5728\u5b50\u7c7b\u3002</p>"},{"location":"chapter06-C%2B%2B%E5%B1%82/#6811-reportwritestojsstreamlistener","title":"6.8.11 ReportWritesToJSStreamListener","text":"<p>ReportWritesToJSStreamListener\u662fStreamListener\u7684\u5b50\u7c7b\u3002\u8986\u76d6\u4e86\u90e8\u5206\u63a5\u53e3\u548c\u62d3\u5c55\u4e86\u4e00\u4e9b\u529f\u80fd\u3002</p> <pre><code>    class ReportWritesToJSStreamListener : public StreamListener {  \n     public:  \n      // \u5b9e\u73b0\u7236\u7c7b\u7684\u8fd9\u4e24\u4e2a\u63a5\u53e3\n      void OnStreamAfterWrite(WriteWrap* w, int status) override;  \n      void OnStreamAfterShutdown(ShutdownWrap* w, int status) override;  \n\n     private:  \n      void OnStreamAfterReqFinished(StreamReq* req_wrap, int status);  \n    };  \n</code></pre> <p>1 OnStreamAfterReqFinished OnStreamAfterReqFinished\u662f\u8bf7\u6c42\u64cd\u4f5c\u6d41\u7ed3\u675f\u540e\u7684\u7edf\u4e00\u7684\u56de\u8c03\u3002</p> <pre><code>    void ReportWritesToJSStreamListener::OnStreamAfterWrite(  \n        WriteWrap* req_wrap, int status) {  \n      OnStreamAfterReqFinished(req_wrap, status);  \n    }  \n\n    void ReportWritesToJSStreamListener::OnStreamAfterShutdown(  \n        ShutdownWrap* req_wrap, int status) {  \n      OnStreamAfterReqFinished(req_wrap, status);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u5b9e\u73b0</p> <pre><code>    void ReportWritesToJSStreamListener::OnStreamAfterReqFinished(  \n        StreamReq* req_wrap, int status) {  \n      // \u8bf7\u6c42\u6240\u64cd\u4f5c\u7684\u6d41  \n      StreamBase* stream = static_cast&lt;StreamBase*&gt;(stream_);  \n      Environment* env = stream-&gt;stream_env();  \n      AsyncWrap* async_wrap = req_wrap-&gt;GetAsyncWrap();  \n      HandleScope handle_scope(env-&gt;isolate());  \n      Context::Scope context_scope(env-&gt;context());  \n      // \u83b7\u53d6\u539f\u59cb\u7684JS\u5c42\u5bf9\u8c61  \n      Local&lt;Object&gt; req_wrap_obj = async_wrap-&gt;object();  \n\n      Local&lt;Value&gt; argv[] = {  \n        Integer::New(env-&gt;isolate(), status),  \n        stream-&gt;GetObject(),  \n        Undefined(env-&gt;isolate())  \n      };  \n\n      const char* msg = stream-&gt;Error();  \n      if (msg != nullptr) {  \n        argv[2] = OneByteString(env-&gt;isolate(), msg);  \n        stream-&gt;ClearError();  \n      }  \n      // \u56de\u8c03JS\u5c42  \n      if (req_wrap_obj-&gt;Has(env-&gt;context(), env-&gt;oncomplete_string()).FromJust())  \n        async_wrap-&gt;MakeCallback(env-&gt;oncomplete_string(), arraysize(argv), argv);  \n    }  \n</code></pre> <p>OnStreamAfterReqFinished\u4f1a\u56de\u8c03JS\u5c42\u3002 6.8.12 EmitToJSStreamListener EmitToJSStreamListener\u662fReportWritesToJSStreamListener\u7684\u5b50\u7c7b</p> <pre><code>    class EmitToJSStreamListener : public ReportWritesToJSStreamListener {  \n     public:  \n      uv_buf_t OnStreamAlloc(size_t suggested_size) override;  \n      void OnStreamRead(ssize_t nread, const uv_buf_t&amp; buf) override;  \n    };  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u5b9e\u73b0</p> <pre><code>    // \u5206\u914d\u4e00\u5757\u5185\u5b58  \n    uv_buf_t EmitToJSStreamListener::OnStreamAlloc(size_t suggested_size) {   \n      Environment* env = static_cast&lt;StreamBase*&gt;(stream_)-&gt;stream_env();  \n      return env-&gt;AllocateManaged(suggested_size).release();  \n    }  \n    // \u8bfb\u53d6\u6570\u636e\u7ed3\u675f\u540e\u56de\u8c03   \n    void EmitToJSStreamListener::OnStreamRead(ssize_t nread, const uv_buf_t&amp; buf_) {   \n        StreamBase* stream = static_cast&lt;StreamBase*&gt;(stream_);  \n      Environment* env = stream-&gt;stream_env();  \n      HandleScope handle_scope(env-&gt;isolate());  \n      Context::Scope context_scope(env-&gt;context());  \n      AllocatedBuffer buf(env, buf_);  \n      // \u8bfb\u53d6\u5931\u8d25  \n      if (nread &lt;= 0)  {  \n        if (nread &lt; 0)  \n          stream-&gt;CallJSOnreadMethod(nread, Local&lt;ArrayBuffer&gt;());  \n        return;  \n      }  \n\n      buf.Resize(nread);  \n      // \u8bfb\u53d6\u6210\u529f\u56de\u8c03JS\u5c42  \n      stream-&gt;CallJSOnreadMethod(nread, buf.ToArrayBuffer());  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230listener\u5904\u7406\u5b8c\u6570\u636e\u540e\u53c8\u4f1a\u56de\u8c03\u6d41\u7684\u63a5\u53e3\uff0c\u5177\u4f53\u7684\u903b\u8f91\u7531\u5b50\u7c7b\u5b9e\u73b0\u3002\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5b50\u7c7b\u7684\u5b9e\u73b0\uff08\u6d41\u9ed8\u8ba4\u7684listener\uff09\u3002</p> <pre><code>    class EmitToJSStreamListener : public ReportWritesToJSStreamListener {  \n     public:  \n      uv_buf_t OnStreamAlloc(size_t suggested_size) override;  \n      void OnStreamRead(ssize_t nread, const uv_buf_t&amp; buf) override;\n    };  \n</code></pre> <p>EmitToJSStreamListener\u4f1a\u5b9e\u73b0OnStreamRead\u7b49\u65b9\u6cd5\uff0c\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0b\u521b\u5efa\u4e00\u4e2aC++\u5c42\u7684TCP\u5bf9\u8c61\u662f\u600e\u6837\u7684\u3002\u4e0b\u9762\u662fTCPWrap\u7684\u7ee7\u627f\u5173\u7cfb\u3002</p> <pre><code>    class TCPWrap : public ConnectionWrap&lt;TCPWrap, uv_tcp_t&gt;{}  \n    // ConnectionWrap\u62d3\u5c55\u4e86\u5efa\u7acbTCP\u8fde\u63a5\u65f6\u7684\u903b\u8f91  \n    class ConnectionWrap : public LibuvStreamWrap{}  \n    class LibuvStreamWrap : public HandleWrap, public StreamBase{}  \n    class StreamBase : public StreamResource {}  \n</code></pre> <p>\u6211\u4eec\u770b\u5230TCP\u6d41\u662f\u7ee7\u627f\u4e8eStreamResource\u7684\u3002\u65b0\u5efa\u4e00\u4e2aTCP\u7684C++\u7684\u5bf9\u8c61\u65f6\uff08tcp_wrap.cc\uff09\uff0c\u4f1a\u4e0d\u65ad\u5f80\u4e0a\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u5176\u4e2d\u5728StreamBase\u4e2d\u6709\u4e00\u4e2a\u5173\u952e\u7684\u64cd\u4f5c\u3002</p> <pre><code>    inline StreamBase::StreamBase(Environment* env) : env_(env) {  \n      PushStreamListener(&amp;default_listener_);  \n    }  \n\n    EmitToJSStreamListener default_listener_;  \n</code></pre> <p>StreamBase\u4f1a\u9ed8\u8ba4\u7ed9\u6d41\u6ce8\u518c\u4e00\u4e2alistener\u3002\u6211\u4eec\u770b\u4e0bEmitToJSStreamListener \u5177\u4f53\u7684\u5b9a\u4e49\u3002</p> <pre><code>    class ReportWritesToJSStreamListener : public StreamListener {  \n     public:  \n      void OnStreamAfterWrite(WriteWrap* w, int status) override;  \n      void OnStreamAfterShutdown(ShutdownWrap* w, int status) override;  \n\n     private:  \n      void OnStreamAfterReqFinished(StreamReq* req_wrap, int status);  \n    };  \n\n    class EmitToJSStreamListener : public ReportWritesToJSStreamListener {  \n     public:  \n      uv_buf_t OnStreamAlloc(size_t suggested_size) override;  \n      void OnStreamRead(ssize_t nread, const uv_buf_t&amp; buf) override;  \n    };  \n</code></pre> <p>EmitToJSStreamListener\u7ee7\u627fStreamListener \uff0c\u5b9a\u4e49\u4e86\u5206\u914d\u5185\u5b58\u548c\u8bfb\u53d6\u63a5\u6536\u6570\u636e\u7684\u51fd\u6570\u3002\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0bPushStreamListener\u505a\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002</p> <pre><code>    inline void StreamResource::PushStreamListener(StreamListener* listener) {  \n      // \u5934\u63d2\u6cd5   \n      listener-&gt;previous_listener_ = listener_;  \n      listener-&gt;stream_ = this;  \n      listener_ = listener;  \n    }  \n</code></pre> <p>PushStreamListener\u5c31\u662f\u6784\u9020\u51fa\u4e00\u4e2alistener\u94fe\u8868\u7ed3\u6784\u3002\u7136\u540e\u6211\u4eec\u770b\u4e00\u4e0b\u5bf9\u4e8e\u6d41\u6765\u8bf4\uff0c\u8bfb\u53d6\u6570\u636e\u7684\u6574\u4e2a\u94fe\u8def\u3002\u9996\u5148\u662fJS\u5c42\u8c03\u7528readStart</p> <pre><code>    function tryReadStart(socket) {  \n      socket._handle.reading = true;  \n      const err = socket._handle.readStart();  \n      if (err)  \n        socket.destroy(errnoException(err, 'read'));  \n    }  \n\n    // \u6ce8\u518c\u7b49\u5f85\u8bfb\u4e8b\u4ef6  \n    Socket.prototype._read = function(n) {  \n      tryReadStart(this);  \n    };  \n</code></pre> <p>\u6211\u4eec\u770b\u770breadStart</p> <pre><code>    int LibuvStreamWrap::ReadStart() {  \n      return uv_read_start(stream(), [](uv_handle_t* handle,  \n                                        size_t suggested_size,  \n                                        uv_buf_t* buf) {  \n        static_cast&lt;LibuvStreamWrap*&gt;(handle-&gt;data)-&gt;OnUvAlloc(suggested_size, buf);  \n      }, [](uv_stream_t* stream, ssize_t nread, const uv_buf_t* buf) {  \n        static_cast&lt;LibuvStreamWrap*&gt;(stream-&gt;data)-&gt;OnUvRead(nread, buf);  \n      });  \n    }  \n</code></pre> <p>ReadStart\u8c03\u7528Libuv\u7684uv_read_start\u6ce8\u518c\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6\uff0c\u5e76\u4e14\u6ce8\u518c\u4e86\u4e24\u4e2a\u56de\u8c03\u51fd\u6570OnUvAlloc\u548cOnUvRead\u3002</p> <pre><code>    void LibuvStreamWrap::OnUvRead(ssize_t nread, const uv_buf_t* buf) {  \n       EmitRead(nread, *buf);  \n    }  \n\n    inline void StreamResource::EmitRead(ssize_t nread, const uv_buf_t&amp; buf) {  \n      // bytes_read_\u8868\u793a\u5df2\u8bfb\u7684\u5b57\u8282\u6570  \n      if (nread &gt; 0)  \n        bytes_read_ += static_cast&lt;uint64_t&gt;(nread);  \n      listener_-&gt;OnStreamRead(nread, buf);  \n    }  \n</code></pre> <p>\u901a\u8fc7\u5c42\u5c42\u8c03\u7528\u6700\u540e\u4f1a\u8c03\u7528listener_\u7684OnStreamRead\u3002\u6211\u4eec\u770b\u770bTCP\u7684OnStreamRead</p> <pre><code>    void EmitToJSStreamListener::OnStreamRead(ssize_t nread, const uv_buf_t&amp; buf_) {  \n      StreamBase* stream = static_cast&lt;StreamBase*&gt;(stream_);  \n      Environment* env = stream-&gt;stream_env();  \n      HandleScope handle_scope(env-&gt;isolate());  \n      Context::Scope context_scope(env-&gt;context());  \n      AllocatedBuffer buf(env, buf_);  \n      stream-&gt;CallJSOnreadMethod(nread, buf.ToArrayBuffer());  \n    }  \n</code></pre> <p>\u7ee7\u7eed\u56de\u8c03CallJSOnreadMethod</p> <pre><code>    MaybeLocal&lt;Value&gt; StreamBase::CallJSOnreadMethod(ssize_t nread,  \n                                                     Local&lt;ArrayBuffer&gt; ab,  \n                                                     size_t offset,  \n                                                     StreamBaseJSChecks checks) {  \n      Environment* env = env_;  \n      // ...  \n      AsyncWrap* wrap = GetAsyncWrap();  \n      CHECK_NOT_NULL(wrap);  \n      Local&lt;Value&gt; onread = wrap-&gt;object()-&gt;GetInternalField(kOnReadFunctionField);  \n      CHECK(onread-&gt;IsFunction());  \n      return wrap-&gt;MakeCallback(onread.As&lt;Function&gt;(), arraysize(argv), argv);  \n    }  \n</code></pre> <p>CallJSOnreadMethod\u4f1a\u56de\u8c03JS\u5c42\u7684onread\u56de\u8c03\u51fd\u6570\u3002onread\u4f1a\u628a\u6570\u636epush\u5230\u6d41\u4e2d\uff0c\u7136\u540e\u89e6\u53d1data\u4e8b\u4ef6\u3002</p>"},{"location":"chapter07-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/","title":"07-\u4fe1\u53f7\u5904\u7406","text":""},{"location":"chapter07-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/#71","title":"7.1 \u4fe1\u53f7\u7684\u6982\u5ff5\u548c\u5b9e\u73b0\u539f\u7406","text":"<p>\u4fe1\u53f7\u662f\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u9996\u5148\u4e86\u89e3\u4e00\u4e0b\u4fe1\u53f7\u7684\u6982\u5ff5\u548c\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u5b9e\u73b0\u539f\u7406\u3002\u5728\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u5b9e\u73b0\u4e2d\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u5bf9\u5e94\u4e00\u4e2atask_struct\u7ed3\u6784\u4f53\uff08PCB\uff09\uff0cPCB\u4e2d\u6709\u4e00\u4e2a\u5b57\u6bb5\u8bb0\u5f55\u4e86\u8fdb\u7a0b\u6536\u5230\u7684\u4fe1\u53f7\uff08\u6bcf\u4e00\u4e2a\u6bd4\u7279\u4ee3\u8868\u4e00\u79cd\u4fe1\u53f7\uff09\u548c\u4fe1\u53f7\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\u3002\u8fd9\u4e2a\u548c\u8ba2\u9605\u8005/\u53d1\u5e03\u8005\u6a21\u5f0f\u975e\u5e38\u76f8\u4f3c\uff0c\u6211\u4eec\u770b\u4e00\u4e0bPCB\u4e2d\u4fe1\u53f7\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u3002</p> <pre><code>    struct task_struct {  \n        // \u6536\u5230\u7684\u4fe1\u53f7  \n        long signal;  \n        // \u5904\u7406\u4fe1\u53f7\u8fc7\u7a0b\u4e2d\u5c4f\u853d\u7684\u4fe1\u606f  \n        long blocked;  \n        // \u4fe1\u53f7\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570  \n        struct sigaction sigaction[32];  \n           ...  \n    };  \n\n    struct sigaction {  \n        // \u4fe1\u53f7\u5904\u7406\u51fd\u6570  \n        void (*sa_handler)(int);  \n        // \u5904\u7406\u4fe1\u53f7\u65f6\u5c4f\u853d\u54ea\u4e9b\u4fe1\u606f\uff0c\u548cPCB\u7684block\u5b57\u6bb5\u5bf9\u5e94  \n        sigset_t sa_mask;  \n        // \u4e00\u4e9b\u6807\u8bb0\uff0c\u6bd4\u5982\u5904\u7406\u51fd\u6570\u53ea\u6267\u884c\u4e00\u6b21\uff0c\u7c7b\u4f3cevents\u6a21\u5757\u7684once  \n        int sa_flags;  \n        // \u6e05\u9664\u8c03\u7528\u6808\u4fe1\u606f\uff0cglibc\u4f7f\u7528  \n        void (*sa_restorer)(void);  \n    };  \n</code></pre> <p>Linux\u4e0b\u652f\u6301\u591a\u79cd\u4fe1\u53f7\uff0c\u8fdb\u7a0b\u6536\u5230\u4fe1\u53f7\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u5904\u7406\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u663e\u5f0f\u6ce8\u518c\u5904\u7406\u4fe1\u53f7\u7684\u51fd\u6570\uff0c\u4f46\u662f\u6709\u4e9b\u4fe1\u53f7\u4f1a\u5bfc\u81f4\u8fdb\u7a0b\u9000\u51fa\uff0c\u8fd9\u662f\u6211\u4eec\u65e0\u6cd5\u63a7\u5236\u7684\u3002\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5728Linux\u4e0b\u4fe1\u53f7\u4f7f\u7528\u7684\u4f8b\u5b50\u3002</p> <pre><code>    #include &lt;stdio.h&gt;  \n    #include &lt;unistd.h&gt;  \n    #include &lt;stdlib.h&gt;  \n    #include &lt;signal.h&gt;  \n\n    void handler(int);  \n\n    int main()  \n    {  \n       signal(SIGINT, handler);  \n       while(1);  \n       return(0);  \n    }  \n\n    void sighandler(int signum)  \n    {  \n       printf(\"\u6536\u5230\u4fe1\u53f7%d\", signum);  \n    }  \n</code></pre> <p>\u6211\u4eec\u6ce8\u518c\u4e86\u4e00\u4e2a\u4fe1\u53f7\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u7136\u540e\u8fdb\u5165while\u5faa\u73af\u4fdd\u8bc1\u8fdb\u7a0b\u4e0d\u4f1a\u9000\u51fa\uff0c\u8fd9\u65f6\u5019\uff0c\u5982\u679c\u6211\u4eec\u7ed9\u8fd9\u4e2a\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2aSIGINT\u4fe1\u53f7\uff08ctrl+c\u6216\u8005kill -2 pid\uff09\u3002\u5219\u8fdb\u7a0b\u4f1a\u6267\u884c\u5bf9\u5e94\u7684\u56de\u8c03\uff0c\u7136\u540e\u8f93\u51fa\uff1a\u6536\u5230\u4fe1\u53f72\u3002\u4e86\u89e3\u4e86\u4fe1\u53f7\u7684\u57fa\u672c\u539f\u7406\u540e\uff0c\u6211\u4eec\u770b\u4e00\u4e0bLibuv\u4e2d\u5173\u4e8e\u4fe1\u53f7\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u3002</p>"},{"location":"chapter07-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/#72-libuv","title":"7.2 Libuv\u4fe1\u53f7\u5904\u7406\u7684\u8bbe\u8ba1\u601d\u60f3","text":"<p>\u7531\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u5b9e\u73b0\u7684\u9650\u5236\uff0c\u6211\u4eec\u65e0\u6cd5\u7ed9\u4e00\u4e2a\u4fe1\u53f7\u6ce8\u518c\u591a\u4e2a\u5904\u7406\u51fd\u6570\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u4fe1\u53f7\uff0c\u5982\u679c\u6211\u4eec\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u63a5\u53e3\u591a\u6b21\uff0c\u540e\u9762\u7684\u5c31\u4f1a\u8986\u76d6\u524d\u9762\u8bbe\u7f6e\u7684\u503c\u3002\u60f3\u8981\u5b9e\u73b0\u4e00\u4e2a\u4fe1\u53f7\u88ab\u591a\u4e2a\u51fd\u6570\u5904\u7406\uff0c\u6211\u4eec\u53ea\u80fd\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u4e0a\u518d\u5c01\u88c5\u4e00\u5c42\uff0cLibuv\u6b63\u662f\u8fd9\u6837\u505a\u7684\u3002Libuv\u4e2d\u5173\u4e8e\u4fe1\u53f7\u5904\u7406\u7684\u5c01\u88c5\u548c\u8ba2\u9605\u8005/\u53d1\u5e03\u8005\u6a21\u5f0f\u5f88\u76f8\u4f3c\u3002\u7528\u6237\u8c03\u7528Libuv\u7684\u63a5\u53e3\u6ce8\u518c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0cLibuv\u518d\u5411\u64cd\u4f5c\u7cfb\u7edf\u6ce8\u518c\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u7b49\u5f85\u64cd\u4f5c\u7cfb\u7edf\u6536\u5230\u4fe1\u53f7\u65f6\uff0c\u4f1a\u89e6\u53d1Libuv\u7684\u56de\u8c03\uff0cLibuv\u7684\u56de\u8c03\u4f1a\u901a\u8fc7\u7ba1\u9053\u901a\u77e5\u4e8b\u4ef6\u5faa\u73af\u6536\u5230\u7684\u4fe1\u53f7\u548c\u5bf9\u5e94\u7684\u4e0a\u4e0b\u6587\uff0c\u63a5\u7740\u4e8b\u4ef6\u5faa\u73af\u5728Poll IO\u9636\u6bb5\u5c31\u4f1a\u5904\u7406\u6536\u5230\u6240\u6709\u4fe1\u53f7\u4ee5\u53ca\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\u3002\u6574\u4f53\u67b6\u6784\u5982\u56fe7-1\u6240\u793a  \u56fe7-1</p> <p>\u4e0b\u9762\u6211\u4eec\u5177\u4f53\u5206\u6790Libuv\u4e2d\u4fe1\u53f7\u5904\u7406\u7684\u5b9e\u73b0\u3002</p>"},{"location":"chapter07-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/#73","title":"7.3 \u901a\u4fe1\u673a\u5236\u7684\u5b9e\u73b0","text":"<p>\u5f53\u8fdb\u7a0b\u6536\u5230\u4fe1\u53f7\u7684\u65f6\u5019\uff0c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u9700\u8981\u901a\u77e5Libuv\u4e8b\u4ef6\u5faa\u73af\uff0c\u4ece\u800c\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u6267\u884c\u5bf9\u5e94\u7684\u56de\u8c03\uff0c\u5b9e\u73b0\u51fd\u6570\u662fuv__signal_loop_once_init\uff0c\u6211\u4eec\u770b\u4e00\u4e0buv__signal_loop_once_init\u7684\u903b\u8f91\u3002</p> <pre><code>    static int uv__signal_loop_once_init(uv_loop_t* loop) { \n      /* \n            \u7533\u8bf7\u4e00\u4e2a\u7ba1\u9053\u7528\u4e8e\u548c\u4e8b\u4ef6\u5faa\u73af\u901a\u4fe1\uff0c\u901a\u77e5\u4e8b\u4ef6\u5faa\u73af\u662f\u5426\u6536\u5230\u4fe1\u53f7\uff0c\n            \u5e76\u8bbe\u7f6e\u975e\u963b\u585e\u6807\u8bb0  \n        */\n      uv__make_pipe(loop-&gt;signal_pipefd, UV__F_NONBLOCK); \n      /* \n          \u8bbe\u7f6e\u4fe1\u53f7IO\u89c2\u5bdf\u8005\u7684\u5904\u7406\u51fd\u6570\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c \n          Libuv\u5728Poll IO\u65f6\uff0c\u53d1\u73b0\u7ba1\u9053\u8bfb\u7aefloop-&gt;signal_pipefd[0]\u53ef\u8bfb\uff0c \n          \u5219\u6267\u884cuv__signal_event \n        */  \n      uv__io_init(&amp;loop-&gt;signal_io_watcher,  \n                  uv__signal_event,  \n                  loop-&gt;signal_pipefd[0]);  \n      /* \n          \u63d2\u5165Libuv\u7684IO\u89c2\u5bdf\u8005\u961f\u5217\uff0c\u5e76\u6ce8\u518c\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u4e3a\u53ef\u8bfb\n        */  \n      uv__io_start(loop, &amp;loop-&gt;signal_io_watcher, POLLIN);  \n\n      return 0; \n    } \n</code></pre> <p>uv__signal_loop_once_init\u9996\u5148\u7533\u8bf7\u4e00\u4e2a\u7ba1\u9053\uff0c\u7528\u4e8e\u901a\u77e5\u4e8b\u4ef6\u5faa\u73af\u662f\u5426\u6536\u5230\u4fe1\u53f7\u3002\u7136\u540e\u5f80Libuv\u7684IO\u89c2\u5bdf\u8005\u961f\u5217\u6ce8\u518c\u4e00\u4e2a\u89c2\u5bdf\u8005\uff0cLibuv\u5728Poll IO\u9636\u6bb5\u4f1a\u628a\u89c2\u5bdf\u8005\u52a0\u5230epoll\u4e2d\u3002IO\u89c2\u5bdf\u8005\u91cc\u4fdd\u5b58\u4e86\u7ba1\u9053\u8bfb\u7aef\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26loop-&gt;signal_pipefd[0]\u548c\u56de\u8c03\u51fd\u6570uv__signal_event\u3002uv__signal_event\u662f\u6536\u5230\u4efb\u610f\u4fe1\u53f7\u65f6\u7684\u56de\u8c03\uff0c\u5b83\u4f1a\u7ee7\u7eed\u6839\u636e\u6536\u5230\u7684\u4fe1\u53f7\u8fdb\u884c\u903b\u8f91\u5206\u53d1\u3002\u6267\u884c\u5b8c\u7684\u67b6\u6784\u5982\u56fe7-2\u6240\u793a\u3002  \u56fe7-2</p>"},{"location":"chapter07-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/#74","title":"7.4 \u4fe1\u53f7\u7ed3\u6784\u4f53\u7684\u521d\u59cb\u5316","text":"<p>Libuv\u4e2d\u4fe1\u53f7\u4f7f\u7528uv_signal_t\u8868\u793a\u3002</p> <pre><code>    int uv_signal_init(uv_loop_t* loop, uv_signal_t* handle) { \n      // \u7533\u8bf7\u548cLibuv\u7684\u901a\u4fe1\u7ba1\u9053\u5e76\u4e14\u6ce8\u518cIO\u89c2\u5bdf\u8005  \n      uv__signal_loop_once_init(loop);  \n      uv__handle_init(loop, (uv_handle_t*) handle, UV_SIGNAL);  \n      handle-&gt;signum = 0;  \n      handle-&gt;caught_signals = 0;  \n      handle-&gt;dispatched_signals = 0;  \n\n      return 0;  \n    }   \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u662f\u521d\u59cb\u5316uv_signal_t\u7ed3\u6784\u4f53\u7684\u4e00\u4e9b\u5b57\u6bb5\u3002</p>"},{"location":"chapter07-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/#75","title":"7.5 \u4fe1\u53f7\u5904\u7406\u7684\u6ce8\u518c","text":"<p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7uv_signal_start\u6ce8\u518c\u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u903b\u8f91</p> <pre><code>    static int uv__signal_start(uv_signal_t* handle,  \n                   uv_signal_cb signal_cb,  \n                   int signum,  \n                   int oneshot) {  \n      sigset_t saved_sigmask;  \n      int err;  \n      uv_signal_t* first_handle;  \n      // \u6ce8\u518c\u8fc7\u4e86\uff0c\u91cd\u65b0\u8bbe\u7f6e\u5904\u7406\u51fd\u6570\u5c31\u884c  \n      if (signum == handle-&gt;signum) {  \n        handle-&gt;signal_cb = signal_cb;  \n        return 0;  \n      }  \n      // \u8fd9\u4e2ahandle\u4e4b\u524d\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u5176\u5b83\u4fe1\u53f7\u548c\u5904\u7406\u51fd\u6570\uff0c\u5219\u5148\u89e3\u9664  \n      if (handle-&gt;signum != 0) {  \n        uv__signal_stop(handle);  \n      }  \n      // \u5c4f\u853d\u6240\u6709\u4fe1\u53f7  \n      uv__signal_block_and_lock(&amp;saved_sigmask);  \n      /* \n          \u67e5\u627e\u6ce8\u518c\u4e86\u8be5\u4fe1\u53f7\u7684\u7b2c\u4e00\u4e2ahandle\uff0c \n          \u4f18\u5148\u8fd4\u56de\u8bbe\u7f6e\u4e86UV_SIGNAL_ONE_SHOT flag\u7684\uff0c \n          \u89c1compare\u51fd\u6570 \n        */  \n      first_handle = uv__signal_first_handle(signum);  \n      /*  \n          1 \u4e4b\u524d\u6ca1\u6709\u6ce8\u518c\u8fc7\u8be5\u4fe1\u53f7\u7684\u5904\u7406\u51fd\u6570\u5219\u76f4\u63a5\u8bbe\u7f6e \n          2 \u4e4b\u524d\u8bbe\u7f6e\u8fc7\uff0c\u4f46\u662f\u662fone shot\uff0c\u4f46\u662f\u73b0\u5728\u9700\u8981 \n            \u8bbe\u7f6e\u7684\u89c4\u5219\u4e0d\u662fone shot\uff0c\u9700\u8981\u4fee\u6539\u3002\u5426\u5219\u7b2c \n            \u4e8c\u6b21\u4e0d\u4f1a\u4e0d\u4f1a\u89e6\u53d1\u3002\u56e0\u4e3a\u4e00\u4e2a\u4fe1\u53f7\u53ea\u80fd\u5bf9\u5e94\u4e00 \n            \u4e2a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u6240\u4ee5\uff0c\u4ee5\u89c4\u5219\u5bbd\u7684\u4e3a\u51c6\uff0c\u5728\u56de\u8c03 \n            \u91cc\u518d\u6839\u636eflags\u5224\u65ad\u662f\u4e0d\u662f\u771f\u7684\u9700\u8981\u6267\u884c \n          3 \u5982\u679c\u6ce8\u518c\u8fc7\u4fe1\u53f7\u548c\u5904\u7406\u51fd\u6570\uff0c\u5219\u76f4\u63a5\u63d2\u5165\u7ea2\u9ed1\u6811\u5c31\u884c\u3002 \n        */    \n        if (  \n             first_handle == NULL ||  \n         (!oneshot &amp;&amp; (first_handle-&gt;flags &amp; UV_SIGNAL_ONE_SHOT)) \n        ) {  \n        // \u6ce8\u518c\u4fe1\u53f7\u548c\u5904\u7406\u51fd\u6570  \n        err = uv__signal_register_handler(signum, oneshot);  \n        if (err) {  \n          uv__signal_unlock_and_unblock(&amp;saved_sigmask);  \n          return err;  \n        }  \n      }  \n      // \u8bb0\u5f55\u611f\u5174\u8da3\u7684\u4fe1\u53f7  \n      handle-&gt;signum = signum;  \n      // \u53ea\u5904\u7406\u8be5\u4fe1\u53f7\u4e00\u6b21  \n      if (oneshot)  \n        handle-&gt;flags |= UV_SIGNAL_ONE_SHOT;  \n      // \u63d2\u5165\u7ea2\u9ed1\u6811  \n      RB_INSERT(uv__signal_tree_s, &amp;uv__signal_tree, handle);  \n      uv__signal_unlock_and_unblock(&amp;saved_sigmask); \n      // \u4fe1\u53f7\u89e6\u53d1\u65f6\u7684\u4e1a\u52a1\u5c42\u56de\u8c03  \n        handle-&gt;signal_cb = signal_cb;  \n      uv__handle_start(handle);  \n\n      return 0;  \n    } \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u6bd4\u8f83\u591a\uff0c\u5927\u81f4\u7684\u903b\u8f91\u5982\u4e0b.  1 \u5224\u65ad\u662f\u5426\u9700\u8981\u5411\u64cd\u4f5c\u7cfb\u7edf\u6ce8\u518c\u4e00\u4e2a\u4fe1\u53f7\u7684\u5904\u7406\u51fd\u6570\u3002\u4e3b\u8981\u662f\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u51fd\u6570\u6765\u5904\u7406\u7684\uff0c\u4ee3\u7801\u5982\u4e0b  </p> <pre><code>    // \u7ed9\u5f53\u524d\u8fdb\u7a0b\u6ce8\u518c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u4f1a\u8986\u76d6\u4e4b\u524d\u8bbe\u7f6e\u7684signum\u7684\u5904\u7406\u51fd\u6570  \n    static int uv__signal_register_handler(int signum, int oneshot) {\n      struct sigaction sa;  \n\n      memset(&amp;sa, 0, sizeof(sa));  \n      // \u5168\u7f6e\u4e00\uff0c\u8bf4\u660e\u6536\u5230signum\u4fe1\u53f7\u7684\u65f6\u5019\uff0c\u6682\u65f6\u5c4f\u853d\u5176\u5b83\u4fe1\u53f7  \n      if (sigfillset(&amp;sa.sa_mask))  \n          abort();  \n      // \u6240\u6709\u4fe1\u53f7\u90fd\u7531\u8be5\u51fd\u6570\u5904\u7406  \n      sa.sa_handler = uv__signal_handler;  \n      sa.sa_flags = SA_RESTART;  \n      // \u8bbe\u7f6e\u4e86oneshot\uff0c\u8bf4\u660e\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u53ea\u6267\u884c\u4e00\u6b21\uff0c\u7136\u540e\u88ab\u6062\u590d\u4e3a\u7cfb\u7edf\u7684\u9ed8\u8ba4\u5904\u7406\u51fd\u6570  \n      if (oneshot)  \n        sa.sa_flags |= SA_RESETHAND;  \n\n      // \u6ce8\u518c  \n      if (sigaction(signum, &amp;sa, NULL))  \n        return UV__ERR(errno);  \n\n      return 0;  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u6240\u6709\u4fe1\u53f7\u7684\u5904\u7406\u51fd\u6570\u90fd\u662fuv__signal_handler\uff0c\u6211\u4eec\u4e00\u4f1a\u4f1a\u5206\u6790uv__signal_handler\u7684\u5b9e\u73b0\u3002 2\u8fdb\u7a0b\u6ce8\u518c\u7684\u4fe1\u53f7\u548c\u56de\u8c03\u662f\u5728\u4e00\u68f5\u7ea2\u9ed1\u6811\u7ba1\u7406\u7684\uff0c\u6bcf\u6b21\u6ce8\u518c\u7684\u65f6\u5019\u4f1a\u5f80\u7ea2\u9ed1\u6811\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u3002Libuv\u7528\u9ed1\u7ea2\u6811\u7ef4\u62a4\u4fe1\u53f7\u7684\u4e0a\u4e0b\u6587\uff0c\u63d2\u5165\u7684\u89c4\u5219\u662f\u6839\u636e\u4fe1\u53f7\u7684\u5927\u5c0f\u548cflags\u7b49\u4fe1\u606f\u3002 RB_INSERT\u5b9e\u73b0\u4e86\u5f80\u7ea2\u9ed1\u6811\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u7ea2\u9ed1\u6811\u4e2d\u7684\u8282\u70b9\u662f\u7236\u8282\u70b9\u7684\u503c\u6bd4\u5de6\u5b69\u5b50\u5927\uff0c\u6bd4\u53f3\u5b69\u5b50\u5c0f\u7684\u3002\u6267\u884c\u5b8cRB_INSERT\u540e\u7684\u67b6\u6784\u5982\u56fe7-3\u6240\u793a\u3002  \u56fe7-3</p> <p>\u6211\u4eec\u770b\u5230\uff0c\u5f53\u6211\u4eec\u6bcf\u6b21\u63d2\u5165\u4e0d\u540c\u7684\u4fe1\u53f7\u7684\u65f6\u5019\uff0cLibuv\u4f1a\u5728\u64cd\u4f5c\u7cfb\u7edf\u548c\u7ea2\u9ed1\u6811\u4e2d\u4fee\u6539\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u63d2\u5165\u91cd\u590d\u7684\u4fe1\u53f7\u5462\uff1f\u521a\u624d\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u63d2\u5165\u91cd\u590d\u7684\u4fe1\u53f7\u65f6\uff0c\u5982\u679c\u5728\u64cd\u4f5c\u7cfb\u7edf\u6ce8\u518c\u8fc7\uff0c\u5e76\u4e14\u5f53\u524d\u63d2\u5165\u7684\u4fe1\u53f7flags\u662fone shot\uff0c\u800c\u4e4b\u524d\u662f\u975eone shot\u65f6\uff0cLibuv\u4f1a\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u63a5\u53e3\u53bb\u4fee\u6539\u914d\u7f6e\u3002\u90a3\u4e48\u5bf9\u4e8e\u7ea2\u9ed1\u6811\u6765\u8bf4\uff0c\u63d2\u5165\u91cd\u590d\u4fe1\u53f7\u4f1a\u5982\u4f55\u5904\u7406\u5462\uff1f\u4ece\u521a\u624dRB_INSERT\u7684\u4ee3\u7801\u4e2d\u6211\u4eec\u770b\u5230\u6bcf\u6b21\u63d2\u5165\u7ea2\u9ed1\u6811\u65f6\uff0c\u7ea2\u9ed1\u6811\u4f1a\u5148\u5224\u65ad\u662f\u5426\u5b58\u5728\u76f8\u540c\u503c\u7684\u8282\u70b9\uff0c\u5982\u679c\u662f\u7684\u8bdd\u76f4\u63a5\u8fd4\u56de\uff0c\u4e0d\u8fdb\u884c\u63d2\u5165\u3002\u8fd9\u4e48\u770b\u8d77\u6765\u6211\u4eec\u65e0\u6cd5\u7ed9\u4e00\u4e2a\u4fe1\u53f7\u6ce8\u518c\u591a\u4e2a\u5904\u7406\u51fd\u6570\uff0c\u4f46\u5176\u5b9e\u662f\u53ef\u4ee5\u7684\uff0c\u91cd\u70b9\u5728\u6bd4\u8f83\u5927\u5c0f\u7684\u51fd\u6570\u3002\u6211\u4eec\u770b\u770b\u8be5\u51fd\u6570\u7684\u5b9e\u73b0\u3002</p> <pre><code>    static int uv__signal_compare(uv_signal_t* w1, uv_signal_t* w2) {  \n      int f1;  \n      int f2;  \n\n      // \u8fd4\u56de\u4fe1\u53f7\u503c\u5927\u7684  \n      if (w1-&gt;signum &lt; w2-&gt;signum) return -1;  \n      if (w1-&gt;signum &gt; w2-&gt;signum) return 1;  \n\n      // \u8bbe\u7f6e\u4e86UV_SIGNAL_ONE_SHOT\u7684\u5927  \n      f1 = w1-&gt;flags &amp; UV_SIGNAL_ONE_SHOT;  \n      f2 = w2-&gt;flags &amp; UV_SIGNAL_ONE_SHOT;  \n      if (f1 &lt; f2) return -1;  \n      if (f1 &gt; f2) return 1;  \n\n      // \u5730\u5740\u5927\u7684\u503c\u5c31\u5927  \n      if (w1-&gt;loop &lt; w2-&gt;loop) return -1;  \n      if (w1-&gt;loop &gt; w2-&gt;loop) return 1;  \n\n      if (w1 &lt; w2) return -1;  \n      if (w1 &gt; w2) return 1;  \n\n      return 0;  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230Libuv\u6bd4\u8f83\u7684\u4e0d\u4ec5\u662f\u4fe1\u53f7\u7684\u5927\u5c0f\uff0c\u5728\u4fe1\u53f7\u4e00\u6837\u7684\u60c5\u51b5\u4e0b\uff0cLibuv\u8fd8\u4f1a\u6bd4\u8f83\u5176\u5b83\u7684\u56e0\u5b50\uff0c\u9664\u975e\u4e24\u4e2auv_signal_t\u6307\u9488\u6307\u5411\u7684\u662f\u540c\u4e00\u4e2auv_signal_t\u7ed3\u6784\u4f53\uff0c\u5426\u5219\u5b83\u4eec\u662f\u4e0d\u4f1a\u88ab\u8ba4\u4e3a\u91cd\u590d\u7684\uff0c\u6240\u4ee5\u7ea2\u9ed1\u6811\u4e2d\u4f1a\u5b58\u7740\u4fe1\u53f7\u4e00\u6837\u7684\u8282\u70b9\u3002\u5047\u8bbe\u6211\u4eec\u6309\u71671\uff08flags\u4e3aone shot\uff09\uff0c2\uff08flags\u4e3a\u975eone shot\uff09,3\uff08flags\u4e3aone shot\uff09\u7684\u987a\u5e8f\u63d2\u5165\u7ea2\u9ed1\u6811\uff0c\u5e76\u4e14\u8282\u70b93\u6bd4\u8282\u70b91\u7684\u5730\u5740\u5927\u3002\u6240\u5f62\u6210\u7684\u7ed3\u6784\u5982\u56fe7-4\u6240\u793a\u3002  \u56fe7-4</p>"},{"location":"chapter07-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/#76","title":"7.6 \u4fe1\u53f7\u7684\u5904\u7406","text":"<p>\u6211\u4eec\u4e0a\u4e00\u8282\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u4e0d\u7ba1\u6ce8\u518c\u4ec0\u4e48\u4fe1\u53f7\uff0c\u5b83\u7684\u5904\u7406\u51fd\u6570\u90fd\u662f\u8fd9\u4e2auv__signal_handler\u51fd\u6570\u3002\u6211\u4eec\u81ea\u5df1\u7684\u4e1a\u52a1\u56de\u8c03\u51fd\u6570\uff0c\u662f\u4fdd\u5b58\u5728handle\u91cc\u7684\u3002\u800cLibuv\u7ef4\u62a4\u4e86\u4e00\u68f5\u7ea2\u9ed1\u6811\uff0c\u8bb0\u5f55\u4e86\u6bcf\u4e2ahandle\u6ce8\u518c\u7684\u4fe1\u53f7\u548c\u56de\u8c03\u51fd\u6570\uff0c\u90a3\u4e48\u5f53\u4efb\u610f\u4fe1\u53f7\u5230\u6765\u7684\u65f6\u5019\u3002uv__signal_handler\u5c31\u4f1a\u88ab\u8c03\u7528\u3002\u4e0b\u9762\u6211\u4eec\u770b\u770buv__signal_handler\u51fd\u6570\u3002</p> <pre><code>    /* \n      \u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0csignum\u4e3a\u6536\u5230\u7684\u4fe1\u53f7\uff0c \n      \u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u6536\u5230\u4fe1\u53f7\u7684\u65f6\u5019\u90fd\u7531\u8be5\u51fd\u6570\u5904\u7406\uff0c \n      \u7136\u540e\u901a\u8fc7\u7ba1\u9053\u901a\u77e5Libuv \n    */  \n    static void uv__signal_handler(int signum) {  \n      uv__signal_msg_t msg;  \n      uv_signal_t* handle;  \n      int saved_errno;  \n      // \u4fdd\u6301\u4e0a\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u9519\u8bef\u7801  \n      saved_errno = errno;  \n      memset(&amp;msg, 0, sizeof msg);  \n\n      if (uv__signal_lock()) {  \n        errno = saved_errno;  \n        return;  \n      }  \n      // \u627e\u5230\u8be5\u4fe1\u53f7\u5bf9\u5e94\u7684\u6240\u6709handle\n      for (handle = uv__signal_first_handle(signum);  \n           handle != NULL &amp;&amp; handle-&gt;signum == signum;  \n           handle = RB_NEXT(uv__signal_tree_s,\n                                     &amp;uv__signal_tree, \n                                     handle)) \n       {  \n        int r;  \n            // \u8bb0\u5f55\u4e0a\u4e0b\u6587\n        msg.signum = signum;  \n        msg.handle = handle;  \n        do {  \n          // \u901a\u77e5Libuv\uff0c\u54ea\u4e9bhandle\u9700\u8981\u5904\u7406\u8be5\u4fe1\u53f7\uff0c\n                 \u5728Poll IO\u9636\u6bb5\u5904\u7406  \n          r = write(handle-&gt;loop-&gt;signal_pipefd[1], \n                            &amp;msg, \n                            sizeof msg);  \n        } while (r == -1 &amp;&amp; errno == EINTR);  \n        // \u8be5handle\u6536\u5230\u4fe1\u53f7\u7684\u6b21\u6570  \n        if (r != -1)  \n          handle-&gt;caught_signals++;  \n      }  \n\n      uv__signal_unlock();  \n      errno = saved_errno;  \n    }  \n</code></pre> <p>uv__signal_handler\u51fd\u6570\u4f1a\u8c03\u7528uv__signal_first_handle\u904d\u5386\u7ea2\u9ed1\u6811\uff0c\u627e\u5230\u6ce8\u518c\u4e86\u8be5\u4fe1\u53f7\u7684\u6240\u6709handle\uff0c\u6211\u4eec\u770b\u4e00\u4e0buv__signal_first_handle\u7684\u5b9e\u73b0\u3002</p> <pre><code>    static uv_signal_t* uv__signal_first_handle(int signum) {  \n      uv_signal_t lookup;  \n      uv_signal_t* handle;  \n\n      lookup.signum = signum;  \n      lookup.flags = 0;  \n      lookup.loop = NULL;  \n\n      handle = RB_NFIND(uv__signal_tree_s, \n                         &amp;uv__signal_tree, \n                         &amp;lookup);  \n\n      if (handle != NULL &amp;&amp; handle-&gt;signum == signum)  \n        return handle;  \n      return NULL;  \n    }  \n</code></pre> <p>uv__signal_first_handle\u51fd\u6570\u901a\u8fc7RB_NFIND\u5b9e\u73b0\u7ea2\u9ed1\u6811\u7684\u67e5\u627e\uff0cRB_NFIND\u662f\u4e00\u4e2a\u5b8f\u3002</p> <pre><code>    #define RB_NFIND(name, x, y)    name##_RB_NFIND(x, y)  \n</code></pre> <p>\u6211\u4eec\u770b\u770bname##_RB_NFIND\u5373uv__signal_tree_s_RB_NFIND\u7684\u5b9e\u73b0</p> <pre><code>    static struct uv_signal_t * uv__signal_tree_s_RB_NFIND(struct uv__signal_tree_s *head, struct uv_signal_t *elm)                            \n    {                                    \n      struct uv_signal_t *tmp = RB_ROOT(head);    \n      struct uv_signal_t *res = NULL;    \n      int comp;              \n      while (tmp) {    \n        comp = cmp(elm, tmp);     \n         /* \n           elm\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u5219\u5f80\u5de6\u5b50\u6811\u627e\uff0c\u5927\u4e8e\u5219\u5f80\u53f3\u5b50\u6811\u627e\uff0c\n          \u7b49\u4e8e\u5219\u8fd4\u56de           \n         */\n        if (comp &lt; 0) {            \n          // \u8bb0\u5f55\u7236\u8282\u70b9\n          res = tmp;  \n          tmp = RB_LEFT(tmp, field);    \n        }           \n        else if (comp &gt; 0)    \n          tmp = RB_RIGHT(tmp, field); \n        else         \n          return (tmp);  \n      }             \n      return (res); \n    }     \n</code></pre> <p>uv__signal_tree_s_RB_NFIND\u7684\u903b\u8f91\u5c31\u662f\u6839\u636e\u7ea2\u9ed1\u6811\u7684\u7279\u70b9\u8fdb\u884c\u641c\u7d22\uff0c\u8fd9\u91cc\u7684\u91cd\u70b9\u662fcmp\u51fd\u6570\u3002\u521a\u624d\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u8fc7cmp\u7684\u903b\u8f91\u3002\u8fd9\u91cc\u4f1a\u9996\u5148\u67e5\u627e\u6ca1\u6709\u8bbe\u7f6eone shot\u6807\u8bb0\u7684handle\uff08\u56e0\u4e3a\u5b83\u7684\u503c\u5c0f\uff09\uff0c\u7136\u540e\u518d\u67e5\u627e\u8bbe\u7f6e\u4e86one shot\u7684handle\uff0c\u4e00\u65e6\u9047\u5230\u8bbe\u7f6e\u4e86one shot\u7684handle\uff0c\u5219\u8bf4\u660e\u540e\u9762\u88ab\u5339\u914d\u7684handle\u4e5f\u662f\u8bbe\u7f6e\u4e86one shot\u6807\u8bb0\u7684\u3002\u6bcf\u6b21\u627e\u5230\u4e00\u4e2ahandle\uff0c\u5c31\u4f1a\u5c01\u88c5\u4e00\u4e2amsg\u5199\u5165\u7ba1\u9053\uff08\u5373\u548cLibuv\u901a\u4fe1\u7684\u7ba1\u9053\uff09\u3002\u4fe1\u53f7\u7684\u5904\u7406\u5c31\u5b8c\u6210\u4e86\u3002\u63a5\u4e0b\u6765\u5728Libuv\u7684Poll IO\u9636\u6bb5\u624d\u505a\u771f\u6b63\u7684\u5904\u7406\u3002\u6211\u4eec\u77e5\u9053\u5728Poll IO\u9636\u6bb5\u3002epoll\u4f1a\u68c0\u6d4b\u5230\u7ba1\u9053loop-&gt;signal_pipefd[0]\u53ef\u8bfb\uff0c\u7136\u540e\u4f1a\u6267\u884cuv__signal_event\u51fd\u6570\u3002\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u4ee3\u7801\u3002</p> <pre><code>    // \u5982\u679c\u6536\u5230\u4fe1\u53f7,Libuv Poll IO\u9636\u6bb5,\u4f1a\u6267\u884c\u8be5\u51fd\u6570  \n    static void uv__signal_event(uv_loop_t* loop, uv__io_t* w, \n    unsigned int events) {  \n      uv__signal_msg_t* msg;  \n      uv_signal_t* handle;  \n      char buf[sizeof(uv__signal_msg_t) * 32];  \n      size_t bytes, end, i;  \n      int r;  \n\n      bytes = 0;  \n      end = 0;  \n      // \u8ba1\u7b97\u51fa\u6570\u636e\u7684\u5927\u5c0f\n      do {  \n        // \u8bfb\u51fa\u6240\u6709\u7684uv__signal_msg_t  \n        r = read(loop-&gt;signal_pipefd[0], \n                       buf + bytes, \n                       sizeof(buf) - bytes);  \n        if (r == -1 &amp;&amp; errno == EINTR)  \n          continue;  \n        if (r == -1 &amp;&amp; \n                (errno == EAGAIN || \n                 errno == EWOULDBLOCK)) {  \n          if (bytes &gt; 0)  \n            continue;  \n          return;  \n        }  \n        if (r == -1)  \n          abort();  \n        bytes += r;  \n        /*\n              \u6839\u636e\u6536\u5230\u7684\u5b57\u8282\u6570\u7b97\u51fa\u6709\u591a\u5c11\u4e2auv__signal_msg_t\u7ed3\u6784\u4f53\uff0c\n              \u4ece\u800c\u7b97\u51fa\u7ed3\u675f\u4f4d\u7f6e\n            */ \n        end=(bytes/sizeof(uv__signal_msg_t))*sizeof(uv__signal_msg_t);\n          // \u5faa\u73af\u5904\u7406\u6bcf\u4e00\u4e2amsg\n        for (i = 0; i &lt; end; i += sizeof(uv__signal_msg_t)) {\n          msg = (uv__signal_msg_t*) (buf + i); \n                // \u53d6\u51fa\u4e0a\u4e0b\u6587 \n          handle = msg-&gt;handle;  \n          // \u6536\u5230\u7684\u4fe1\u53f7\u548chandle\u611f\u5174\u8da3\u7684\u4fe1\u53f7\u4e00\u81f4\uff0c\u6267\u884c\u56de\u8c03  \n          if (msg-&gt;signum == handle-&gt;signum) {    \n            handle-&gt;signal_cb(handle, handle-&gt;signum);  \n          }  \n          // \u5904\u7406\u4fe1\u53f7\u4e2a\u6570\uff0c\u548c\u6536\u5230\u7684\u4e2a\u6570\u5bf9\u5e94  \n          handle-&gt;dispatched_signals++;  \n          // \u53ea\u6267\u884c\u4e00\u6b21\uff0c\u6062\u590d\u7cfb\u7edf\u9ed8\u8ba4\u7684\u5904\u7406\u51fd\u6570  \n          if (handle-&gt;flags &amp; UV_SIGNAL_ONE_SHOT)  \n            uv__signal_stop(handle);  \n          /* \n                  \u5904\u7406\u5b8c\u6240\u6709\u6536\u5230\u7684\u4fe1\u53f7\u624d\u80fd\u5173\u95eduv_signal_t\uff0c\n                  \u89c1uv_close\u6216uv__signal_close \n                */ \n          if ((handle-&gt;flags &amp; UV_HANDLE_CLOSING) &amp;&amp;  \n            (handle-&gt;caught_signals==handle-&gt;dispatched_signals))          \n               {  \n            uv__make_close_pending((uv_handle_t*) handle);  \n          }  \n        }  \n        bytes -= end; \n        if (bytes) {  \n          memmove(buf, buf + end, bytes);  \n          continue;  \n        }  \n      } while (end == sizeof buf);  \n    }  \n</code></pre> <p>uv__signal_event\u51fd\u6570\u7684\u903b\u8f91\u5982\u4e0b 1 \u8bfb\u51fa\u7ba1\u9053\u91cc\u7684\u6570\u636e\uff0c\u8ba1\u7b97\u51famsg\u7684\u4e2a\u6570\u3002 2 \u904d\u5386\u6536\u5230\u7684\u6570\u636e\uff0c\u89e3\u6790\u51fa\u4e00\u4e2a\u4e2amsg\u3002 3 \u4ecemsg\u4e2d\u53d6\u51fa\u4e0a\u4e0b\u6587\uff08handle\u548c\u4fe1\u53f7\uff09\uff0c\u6267\u884c\u4e0a\u5c42\u56de\u8c03\u3002 4 \u5982\u679chandle\u8bbe\u7f6e\u4e86one shot\u5219\u9700\u8981\u6267\u884cuv__signal_stop\uff08\u6211\u4eec\u63a5\u4e0b\u6765\u5206\u6790\uff09\u3002 5 \u5982\u679chandle\u8bbe\u7f6e\u4e86closing\u6807\u8bb0\uff0c\u5219\u5224\u65ad\u6240\u6709\u6536\u5230\u7684\u4fe1\u53f7\u662f\u5426\u5df2\u7ecf\u5904\u7406\u5b8c\u3002\u5373\u6536\u5230\u7684\u4e2a\u6570\u548c\u5904\u7406\u7684\u4e2a\u6570\u662f\u5426\u4e00\u81f4\u3002\u9700\u8981\u5904\u7406\u5b8c\u6240\u6709\u6536\u5230\u7684\u4fe1\u53f7\u624d\u80fd\u5173\u95eduv_signal_t\u3002</p>"},{"location":"chapter07-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/#77","title":"7.7 \u53d6\u6d88/\u5173\u95ed\u4fe1\u53f7\u5904\u7406","text":"<p>\u5f53\u4e00\u4e2a\u4fe1\u53f7\u5bf9\u5e94\u7684handle\u8bbe\u7f6e\u4e86one shot\u6807\u8bb0\uff0c\u5728\u6536\u5230\u4fe1\u53f7\u5e76\u4e14\u6267\u884c\u5b8c\u56de\u8c03\u540e\uff0cLibuv\u4f1a\u8c03\u7528uv__signal_stop\u5173\u95ed\u8be5handle\u5e76\u4e14\u4ece\u7ea2\u9ed1\u6811\u4e2d\u79fb\u9664\u8be5handle\u3002\u53e6\u5916\u6211\u4eec\u4e5f\u53ef\u4ee5\u663e\u5f0f\u5730\u8c03\u7528uv_close\uff08\u4f1a\u8c03\u7528uv__signal_stop\uff09\u5173\u95ed\u6216\u53d6\u6d88\u4fe1\u53f7\u7684\u5904\u7406\u3002\u4e0b\u9762\u6211\u4eec\u770b\u770buv__signal_stop\u7684\u5b9e\u73b0\u3002</p> <pre><code>    static void uv__signal_stop(uv_signal_t* handle) {  \n      uv_signal_t* removed_handle;  \n      sigset_t saved_sigmask;  \n      uv_signal_t* first_handle;  \n      int rem_oneshot;  \n      int first_oneshot;  \n      int ret;  \n\n      /* If the watcher wasn't started, this is a no-op. */  \n      // \u6ca1\u6709\u6ce8\u518c\u8fc7\u4fe1\u53f7\uff0c\u5219\u4e0d\u9700\u8981\u5904\u7406  \n      if (handle-&gt;signum == 0)  \n        return;  \n      // \u5c4f\u853d\u6240\u6709\u4fe1\u53f7  \n      uv__signal_block_and_lock(&amp;saved_sigmask);  \n      // \u79fb\u51fa\u7ea2\u9ed1\u6811  \n      removed_handle = RB_REMOVE(uv__signal_tree_s, &amp;uv__signal_tree, handle);  \n      // \u5224\u65ad\u8be5\u4fe1\u53f7\u662f\u5426\u8fd8\u6709\u5bf9\u5e94\u7684handle  \n      first_handle = uv__signal_first_handle(handle-&gt;signum);  \n      // \u4e3a\u7a7a\u8bf4\u660e\u6ca1\u6709handle\u4f1a\u5904\u7406\u8be5\u4fe1\u53f7\u4e86\uff0c\u89e3\u9664\u8be5\u4fe1\u53f7\u7684\u8bbe\u7f6e  \n      if (first_handle == NULL) {  \n        uv__signal_unregister_handler(handle-&gt;signum);  \n      } else {  \n        // \u88ab\u5904\u7406\u7684handle\u662f\u5426\u8bbe\u7f6e\u4e86one shot  \n        rem_oneshot = handle-&gt;flags &amp; UV_SIGNAL_ONE_SHOT;  \n        /*\n          \u5269\u4e0b\u7684\u7b2c\u4e00\u4e2ahandle\u662f\u5426\u8bbe\u7f6e\u4e86one shot\uff0c\n          \u5982\u679c\u662f\u5219\u8bf4\u660e\u8be5\u4fe1\u53f7\u5bf9\u5e94\u7684\u6240\u6709\u5269\u4e0b\u7684handle\u90fd\u662fone shot  \n        */ \n        first_oneshot = first_handle-&gt;flags &amp; UV_SIGNAL_ONE_SHOT;  \n        /* \n          \u88ab\u79fb\u9664\u7684handle\u6ca1\u6709\u8bbe\u7f6eoneshot\u4f46\u662f\u5f53\u524d\u7684\u7b2c\u4e00\u4e2ahandle\u8bbe\u7f6e\u4e86\n           one shot\uff0c\u5219\u9700\u8981\u4fee\u6539\u8be5\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e3aone shot\uff0c\u9632\u6b62\u6536\u5230\u591a\u6b21\u4fe1\n           \u53f7\uff0c\u6267\u884c\u591a\u6b21\u56de\u8c03 \n        */  \n        if (first_oneshot &amp;&amp; !rem_oneshot) {  \n          ret = uv__signal_register_handler(handle-&gt;signum, 1);  \n          assert(ret == 0);  \n        }  \n      }  \n\n      uv__signal_unlock_and_unblock(&amp;saved_sigmask);  \n\n      handle-&gt;signum = 0;  \n      uv__handle_stop(handle);  \n    }  \n</code></pre>"},{"location":"chapter07-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/#78-nodejs","title":"7.8 \u4fe1\u53f7\u5728Node.js\u4e2d\u7684\u4f7f\u7528","text":"<p>\u5206\u6790\u5b8cLibuv\u7684\u5b9e\u73b0\u540e\uff0c\u6211\u4eec\u770b\u770bNode.js\u4e0a\u5c42\u662f\u5982\u4f55\u4f7f\u7528\u4fe1\u53f7\u7684\uff0c\u9996\u5148\u6211\u4eec\u770b\u4e00\u4e0bC++\u5c42\u5173\u4e8e\u4fe1\u53f7\u6a21\u5757\u7684\u5b9e\u73b0\u3002</p> <pre><code>    static void Initialize(Local&lt;Object&gt; target,  \n                             Local&lt;Value&gt; unused,  \n                             Local&lt;Context&gt; context,  \n                             void* priv) {  \n        Environment* env = Environment::GetCurrent(context);  \n        Local&lt;FunctionTemplate&gt; constructor = env-&gt;NewFunctionTemplate(New);  \n        constructor-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);  \n        // \u5bfc\u51fa\u7684\u7c7b\u540d  \n        Local&lt;String&gt; signalString =  \n            FIXED_ONE_BYTE_STRING(env-&gt;isolate(), \"Signal\");  \n        constructor-&gt;SetClassName(signalString);  \n        constructor-&gt;Inherit(HandleWrap::GetConstructorTemplate(env));  \n        // \u7ed9Signal\u521b\u5efa\u7684\u5bf9\u8c61\u6ce8\u5165\u4e24\u4e2a\u51fd\u6570  \n        env-&gt;SetProtoMethod(constructor, \"start\", Start);  \n        env-&gt;SetProtoMethod(constructor, \"stop\", Stop);  \n\n        target-&gt;Set(env-&gt;context(), signalString,  \n                    constructor-&gt;GetFunction(env-&gt;context()).ToLocalChecked()).Check();  \n      }  \n</code></pre> <p>\u5f53\u6211\u4eec\u5728JS\u4e2dnew Signal\u7684\u65f6\u5019\uff0c\u9996\u5148\u4f1a\u521b\u5efa\u4e00\u4e2aC++\u5bf9\u8c61\uff0c\u7136\u540e\u4f5c\u4e3a\u5165\u53c2\u6267\u884cNew\u51fd\u6570\u3002</p> <pre><code>    static void New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n        CHECK(args.IsConstructCall());  \n        Environment* env = Environment::GetCurrent(args);  \n        new SignalWrap(env, args.This());  \n    }  \n</code></pre> <p>\u5f53\u6211\u4eec\u5728JS\u5c42\u64cd\u4f5cSignal\u5b9e\u4f8b\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u6267\u884cC++\u5c42\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002\u4e3b\u8981\u7684\u65b9\u6cd5\u662f\u6ce8\u518c\u548c\u5220\u9664\u4fe1\u53f7\u3002</p> <pre><code>    static void Start(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n        SignalWrap* wrap;  \n        ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, args.Holder());  \n        Environment* env = wrap-&gt;env();  \n        int signum;  \n        if (!args[0]-&gt;Int32Value(env-&gt;context()).To(&amp;signum)) return;  \n        int err = uv_signal_start(  \n            &amp;wrap-&gt;handle_,  \n            // \u4fe1\u53f7\u4ea7\u751f\u65f6\u6267\u884c\u7684\u56de\u8c03  \n            [](uv_signal_t* handle, int signum) {  \n              SignalWrap* wrap = ContainerOf(&amp;SignalWrap::handle_, \n                                                 handle);  \n              Environment* env = wrap-&gt;env();  \n              HandleScope handle_scope(env-&gt;isolate());  \n              Context::Scope context_scope(env-&gt;context());  \n              Local&lt;Value&gt; arg = Integer::New(env-&gt;isolate(), \n                                                  signum);  \n              // \u89e6\u53d1JS\u5c42onsignal\u51fd\u6570  \n              wrap-&gt;MakeCallback(env-&gt;onsignal_string(), 1, &amp;arg);  \n            },  \n            signum);  \n\n        if (err == 0) {  \n          CHECK(!wrap-&gt;active_);  \n          wrap-&gt;active_ = true;  \n          Mutex::ScopedLock lock(handled_signals_mutex);  \n          handled_signals[signum]++;  \n        }  \n\n        args.GetReturnValue().Set(err);  \n      }  \n\n      static void Stop(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n        SignalWrap* wrap;\n        ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, args.Holder());\n\n        if (wrap-&gt;active_)  {\n          wrap-&gt;active_ = false;\n          DecreaseSignalHandlerCount(wrap-&gt;handle_.signum);\n        }\n\n        int err = uv_signal_stop(&amp;wrap-&gt;handle_);\n        args.GetReturnValue().Set(err);\n      }\n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u770b\u5728JS\u5c42\u5982\u4f55\u4f7f\u7528\u3002Node.js\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u5728is_main_thread.js\u4e2d\u6267\u884c\u4e86\u3002</p> <pre><code>    process.on('newListener', startListeningIfSignal);  \n    process.on('removeListener', stopListeningIfSignal)  \n</code></pre> <p>newListener\u548cremoveListener\u4e8b\u4ef6\u5728\u6ce8\u518c\u548c\u5220\u9664\u4e8b\u4ef6\u7684\u65f6\u5019\u90fd\u4f1a\u88ab\u89e6\u53d1\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0</p> <pre><code>    /* \n     { \n      SIGINT: 2, \n      ... \n     } \n    */  \n    const { signals } = internalBinding('constants').os;  \n\n    let Signal;  \n    const signalWraps = new Map();  \n\n    function isSignal(event) {  \n      return typeof event === 'string' &amp;&amp; signals[event] !== undefined;  \n    }  \n\n    function startListeningIfSignal(type) {  \n      if (isSignal(type) &amp;&amp; !signalWraps.has(type)) {  \n        if (Signal === undefined)  \n          Signal = internalBinding('signal_wrap').Signal;  \n        const wrap = new Signal();  \n        // \u4e0d\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa  \n        wrap.unref();  \n        // \u6302\u8f7d\u4fe1\u53f7\u5904\u7406\u51fd\u6570  \n        wrap.onsignal = process.emit.bind(process, type, type);  \n        // \u901a\u8fc7\u5b57\u7b26\u62ff\u5230\u6570\u5b57  \n        const signum = signals[type];  \n        // \u6ce8\u518c\u4fe1\u53f7  \n        const err = wrap.start(signum);  \n        if (err) {  \n          wrap.close();  \n          throw errnoException(err, 'uv_signal_start');  \n        }  \n        // \u8be5\u4fe1\u53f7\u5df2\u7ecf\u6ce8\u518c\uff0c\u4e0d\u9700\u8981\u5f80\u5e95\u5c42\u518d\u6ce8\u518c\u4e86  \n        signalWraps.set(type, wrap);  \n      }  \n    }  \n</code></pre> <p>startListeningIfSignal\u51fd\u6570\u7684\u903b\u8f91\u5206\u4e3a\u4e00\u4e0b\u51e0\u4e2a 1 \u5224\u65ad\u8be5\u4fe1\u53f7\u662f\u5426\u6ce8\u518c\u8fc7\u4e86\uff0c\u5982\u679c\u6ce8\u518c\u8fc7\u4e86\u5219\u4e0d\u9700\u8981\u518d\u6ce8\u518c\u3002Libuv\u672c\u8eab\u652f\u6301\u5728\u540c\u4e00\u4e2a\u4fe1\u53f7\u4e0a\u6ce8\u518c\u591a\u4e2a\u5904\u7406\u51fd\u6570\uff0cNode.js\u7684JS\u5c42\u4e5f\u505a\u4e86\u8fd9\u4e2a\u5904\u7406\u3002 2 \u8c03\u7528unref\uff0c\u4fe1\u53f7\u7684\u6ce8\u518c\u4e0d\u5e94\u8be5\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa 3 \u6302\u8f7d\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\uff0c\u5f53\u4fe1\u53f7\u89e6\u53d1\u7684\u65f6\u5019\uff0c\u6267\u884c\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff08\u4e00\u4e2a\u6216\u591a\u4e2a\uff09\u3002 4 \u5f80\u5e95\u5c42\u6ce8\u518c\u4fe1\u53f7\u5e76\u8bbe\u7f6e\u8be5\u4fe1\u53f7\u5df2\u7ecf\u6ce8\u518c\u7684\u6807\u8bb0 \u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0bstopListeningIfSignal\u3002</p> <pre><code>    function stopListeningIfSignal(type) {  \n      const wrap = signalWraps.get(type);  \n      if (wrap !== undefined &amp;&amp; process.listenerCount(type) === 0) { \n        wrap.close();  \n        signalWraps.delete(type);  \n      }  \n    }  \n</code></pre> <p>\u53ea\u6709\u5f53\u4fe1\u53f7\u88ab\u6ce8\u518c\u8fc7\u5e76\u4e14\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u4e2a\u6570\u4e3a0\uff0c\u624d\u505a\u771f\u6b63\u7684\u5220\u9664\u3002</p>"},{"location":"chapter08-DNS/","title":"08-DNS","text":"<p>Node.js\u7684DNS\u6a21\u5757\u4f7f\u7528\u4e86cares\u5e93\u548cLibuv\u7684\u7ebf\u7a0b\u6c60\u5b9e\u73b0\u3002cares\u662f\u4e00\u4e2a\u5f02\u6b65DNS\u89e3\u6790\u5e93\uff0c\u5b83\u81ea\u5df1\u5b9e\u73b0\u4e86DNS\u534f\u8bae\u7684\u5c01\u5305\u548c\u89e3\u6790\uff0c\u914d\u5408Libuv\u4e8b\u4ef6\u9a71\u52a8\u673a\u5236\uff0c\u5728Node.js\u4e2d\u5b9e\u73b0\u5f02\u6b65\u7684DNS\u89e3\u6790\u3002\u53e6\u5916\u901a\u8fc7IP\u67e5\u8be2\u57df\u540d\u6216\u8005\u57df\u540d\u67e5\u8be2IP\u662f\u76f4\u63a5\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u63a5\u53e3\u5b9e\u73b0\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u51fd\u6570\u662f\u963b\u585e\u5f0f\u7684API\uff0c\u6240\u4ee5Node.js\u662f\u901a\u8fc7Libuv\u7684\u7ebf\u7a0b\u6c60\u5b9e\u73b0\u5f02\u6b65\u67e5\u8be2\u3002\u9664\u4e86\u63d0\u4f9b\u76f4\u63a5\u7684DNS\u67e5\u8be2\u5916\uff0cNode.js\u8fd8\u63d0\u4f9b\u4e86\u8bbe\u7f6eDNS\u670d\u52a1\u5668\u3001\u65b0\u5efa\u4e00\u4e2aDNS\u89e3\u6790\u5b9e\u4f8b\uff08Resolver\uff09\u7b49\u529f\u80fd\u3002\u8fd9\u4e9b\u529f\u80fd\u662f\u4f7f\u7528cares\u5b9e\u73b0\u7684\u3002\u4e0b\u9762\u6211\u4eec\u5f00\u59cb\u5206\u6790DNS\u6a21\u5757\u7684\u539f\u7406\u548c\u5b9e\u73b0\u3002  </p>"},{"location":"chapter08-DNS/#81-ip","title":"8.1 \u901a\u8fc7\u57df\u540d\u627eIP","text":"<p>\u6211\u4eec\u770b\u4e00\u4e0b\u5728Node.js\u4e2d\u5982\u4f55\u67e5\u8be2\u4e00\u4e2a\u57df\u540d\u5bf9\u4e8e\u7684IP\u7684\u4fe1\u606f</p> <pre><code>    dns.lookup('www.a.com', function(err, address, family) {  \n        console.log(address);  \n    });  \n</code></pre> <p>DNS\u529f\u80fd\u7684JS\u5c42\u5b9e\u73b0\u5728dns.js\u4e2d</p> <pre><code>    const req = new GetAddrInfoReqWrap();  \n    req.callback = callback;  \n    req.family = family;  \n    req.hostname = hostname;  \n    req.oncomplete = all ? onlookupall : onlookup;  \n\n    const err = cares.getaddrinfo(  \n      req, toASCII(hostname), family, hints, verbatim  \n    );  \n</code></pre> <p>Node.js\u8bbe\u7f6e\u4e86\u4e00\u4e9b\u53c2\u6570\u540e\uff0c\u8c03\u7528cares_wrap.cc\u7684getaddrinfo\u65b9\u6cd5\uff0c\u5728care_wrap.cc\u7684\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u6211\u4eec\u770b\u5230\uff0c getaddrinfo\u51fd\u6570\u5bf9\u5e94\u7684\u51fd\u6570\u662fGetAddrInfo\u3002</p> <pre><code>    void Initialize(Local&lt;Object&gt; target,  \n                    Local&lt;Value&gt; unused,  \n                    Local&lt;Context&gt; context) {  \n      Environment* env = Environment::GetCurrent(context); \n      env-&gt;SetMethod(target, \"getaddrinfo\", GetAddrInfo);  \n      ...  \n    }  \n</code></pre> <p>GetAddrInfo\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b</p> <pre><code>    auto req_wrap = new GetAddrInfoReqWrap(env, req_wrap_obj, args[4]-&gt;IsTrue());  \n\n    struct addrinfo hints;  \n    memset(&amp;hints, 0, sizeof(struct addrinfo));  \n    hints.ai_family = family;  \n    hints.ai_socktype = SOCK_STREAM;  \n    hints.ai_flags = flags;  \n\n    int err = uv_getaddrinfo(env-&gt;event_loop(),\n                                req_wrap-&gt;req(), \n                                AfterGetAddrInfo,\n                                *hostname,\n                                nullptr,\n                                &amp;hints);  \n</code></pre> <p>GetAddrInfo\u662f\u5bf9uv_getaddrinfo\u7684\u5c01\u88c5\uff0c\u56de\u8c03\u51fd\u6570\u662fAfterGetAddrInfo</p> <pre><code>    int uv_getaddrinfo(uv_loop_t* loop,  \n                        // \u4e0a\u5c42\u4f20\u8fdb\u6765\u7684req  \n                       uv_getaddrinfo_t* req,  \n                       // \u89e3\u6790\u5b8c\u540e\u7684\u4e0a\u5c42\u56de\u8c03  \n                       uv_getaddrinfo_cb cb,  \n                       // \u9700\u8981\u89e3\u6790\u7684\u540d\u5b57  \n                       const char* hostname,  \n                       /* \n                               \u67e5\u8be2\u7684\u8fc7\u6ee4\u6761\u4ef6\uff1a\u670d\u52a1\u540d\u3002\u6bd4\u5982\n                                            http smtp\u3002\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u7aef\u53e3\u3002\n                                            \u89c1\u4e0b\u9762\u6ce8\u91ca \n                                  */  \n                       const char* service,  \n                       // \u5176\u5b83\u67e5\u8be2\u8fc7\u6ee4\u6761\u4ef6  \n                       const struct addrinfo* hints) {  \n\n      size_t hostname_len;  \n      size_t service_len;  \n      size_t hints_len;  \n      size_t len;  \n      char* buf;  \n\n      hostname_len = hostname ? strlen(hostname) + 1 : 0;  \n      service_len = service ? strlen(service) + 1 : 0;  \n      hints_len = hints ? sizeof(*hints) : 0;  \n      buf = uv__malloc(hostname_len + service_len + hints_len);  \n      uv__req_init(loop, req, UV_GETADDRINFO);  \n      req-&gt;loop = loop;  \n      // \u8bbe\u7f6e\u8bf7\u6c42\u7684\u56de\u8c03  \n      req-&gt;cb = cb;  \n      req-&gt;addrinfo = NULL;  \n      req-&gt;hints = NULL;  \n      req-&gt;service = NULL;  \n      req-&gt;hostname = NULL;  \n      req-&gt;retcode = 0;  \n      len = 0;  \n\n      if (hints) {  \n        req-&gt;hints = memcpy(buf + len, hints, sizeof(*hints));  \n        len += sizeof(*hints);  \n      }  \n\n      if (service) {  \n        req-&gt;service = memcpy(buf + len, service, service_len); \n        len += service_len;  \n      }  \n\n      if (hostname)  \n        req-&gt;hostname = memcpy(buf + len, hostname, hostname_len);\n      // \u4f20\u4e86cb\u5219\u662f\u5f02\u6b65  \n      if (cb) {  \n        uv__work_submit(loop,  \n                &amp;req-&gt;work_req,  \n                UV__WORK_SLOW_IO,  \n                uv__getaddrinfo_work,  \n                uv__getaddrinfo_done);  \n        return 0;  \n      } else {  \n        // \u963b\u585e\u5f0f\u67e5\u8be2\uff0c\u7136\u540e\u6267\u884c\u56de\u8c03  \n        uv__getaddrinfo_work(&amp;req-&gt;work_req);  \n        uv__getaddrinfo_done(&amp;req-&gt;work_req, 0);  \n        return req-&gt;retcode;  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u8fd9\u4e2a\u51fd\u6570\u9996\u5148\u662f\u5bf9\u4e00\u4e2arequest\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u7136\u540e\u6839\u636e\u662f\u5426\u4f20\u4e86\u56de\u8c03\uff0c\u51b3\u5b9a\u8d70\u5f02\u6b65\u8fd8\u662f\u540c\u6b65\u7684\u6a21\u5f0f\u3002\u540c\u6b65\u7684\u65b9\u5f0f\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u662f\u76f4\u63a5\u963b\u585eLibuv\u4e8b\u4ef6\u5faa\u73af\uff0c\u76f4\u5230\u89e3\u6790\u5b8c\u6210\u3002\u5982\u679c\u662f\u5f02\u6b65\uff0c\u5219\u7ed9\u7ebf\u7a0b\u6c60\u63d0\u4ea4\u4e00\u4e2a\u6162IO\u7684\u4efb\u52a1\u3002\u5176\u4e2d\u5de5\u4f5c\u51fd\u6570\u662fuv__getaddrinfo_work\u3002\u56de\u8c03\u662fuv__getaddrinfo_done\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u51fd\u6570\u3002</p> <pre><code>    // \u89e3\u6790\u7684\u5de5\u4f5c\u51fd\u6570  \n    static void uv__getaddrinfo_work(struct uv__work* w) {  \n      uv_getaddrinfo_t* req;  \n      int err;  \n      // \u6839\u636e\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u83b7\u53d6\u7ed3\u6784\u4f53\u9996\u5730\u5740  \n      req = container_of(w, uv_getaddrinfo_t, work_req);  \n      // \u963b\u585e\u5728\u8fd9  \n      err = getaddrinfo(req-&gt;hostname, \n                            req-&gt;service, \n                            req-&gt;hints, \n                            &amp;req-&gt;addrinfo);  \n      req-&gt;retcode = uv__getaddrinfo_translate_error(err);  \n    }  \n</code></pre> <p>uv__getaddrinfo_work\u51fd\u6570\u4e3b\u8981\u662f\u8c03\u7528\u4e86\u7cfb\u7edf\u63d0\u4f9b\u7684getaddrinfo\u53bb\u505a\u89e3\u6790\u3002\u8be5\u51fd\u6570\u4f1a\u5bfc\u81f4\u8fdb\u7a0b\u963b\u585e\u3002\u7ed3\u679c\u8fd4\u56de\u540e\uff0c\u6267\u884cuv__getaddrinfo_done\u3002</p> <pre><code>    static void uv__getaddrinfo_done(struct uv__work* w, int status) {  \n      uv_getaddrinfo_t* req;  \n\n      req = container_of(w, uv_getaddrinfo_t, work_req);  \n      uv__req_unregister(req-&gt;loop, req);  \n      // \u91ca\u653e\u521d\u59cb\u5316\u65f6\u7533\u8bf7\u7684\u5185\u5b58  \n      if (req-&gt;hints)  \n        uv__free(req-&gt;hints);  \n      else if (req-&gt;service)  \n        uv__free(req-&gt;service);  \n      else if (req-&gt;hostname)  \n        uv__free(req-&gt;hostname);  \n      else  \n        assert(0);  \n\n      req-&gt;hints = NULL;  \n      req-&gt;service = NULL;  \n      req-&gt;hostname = NULL;  \n      // \u89e3\u6790\u8bf7\u6c42\u88ab\u7528\u6237\u53d6\u6d88\u4e86  \n      if (status == UV_ECANCELED) {  \n        assert(req-&gt;retcode == 0);  \n        req-&gt;retcode = UV_EAI_CANCELED;  \n      }  \n      // \u6267\u884c\u4e0a\u5c42\u56de\u8c03  \n      if (req-&gt;cb)  \n        req-&gt;cb(req, req-&gt;retcode, req-&gt;addrinfo);  \n\n    }  \n</code></pre> <p>uv__getaddrinfo_done\u4f1a\u6267\u884cC++\u5c42\u7684\u56de\u8c03\uff0c\u4ece\u800c\u6267\u884cJS\u5c42\u7684\u56de\u8c03\u3002</p>"},{"location":"chapter08-DNS/#82-cares","title":"8.2 cares","text":"<p>\u9664\u4e86\u901a\u8fc7IP\u67e5\u8be2\u57df\u540d\u548c\u57df\u540d\u67e5\u8be2IP\u5916\uff0c\u5176\u4f59\u7684DNS\u529f\u80fd\u90fd\u7531cares\u5b9e\u73b0\uff0c\u6211\u4eec\u770b\u4e00\u4e0bcares\u7684\u57fa\u672c\u7528\u6cd5\u3002</p>"},{"location":"chapter08-DNS/#821-cares","title":"8.2.1 cares\u4f7f\u7528\u548c\u539f\u7406","text":"<pre><code>    // channel\u662fcares\u7684\u6838\u5fc3\u7ed3\u6784\u4f53\n    ares_channel channel;  \n    struct ares_options options;  \n    // \u521d\u59cb\u5316channel\n    status = ares_init_options(&amp;channel, &amp;options, optmask);  \n    // \u628a argv\u7684\u6570\u636e\u5b58\u5230addr\n    ares_inet_pton(AF_INET, *argv, &amp;addr4);\n    // \u628aaddr\u6570\u636e\u5b58\u5230channel\u5e76\u53d1\u8d77DNS\u67e5\u8be2\n    ares_gethostbyaddr(channel, \n                       &amp;addr4, \n                       sizeof(addr4), \n                       AF_INET, \n                       callback,*argv);  \n    for (;;)  \n        {  \n          int res;  \n          FD_ZERO(&amp;read_fds);  \n          FD_ZERO(&amp;write_fds);  \n          // \u628achannel\u5bf9\u5e94\u7684fd\u5b58\u5230read_fd\u548cwrite_fds  \n          nfds = ares_fds(channel, &amp;read_fds, &amp;write_fds);  \n          if (nfds == 0)  \n            break;  \n          // \u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4  \n          tvp = ares_timeout(channel, NULL, &amp;tv);  \n          // \u963b\u585e\u5728select\uff0c\u7b49\u5f85DNS\u56de\u5305  \n          res = select(nfds, &amp;read_fds, &amp;write_fds, NULL, tvp);\n          if (-1 == res)  \n            break;  \n          // \u5904\u7406DNS\u76f8\u5e94  \n          ares_process(channel, &amp;read_fds, &amp;write_fds);  \n        }  \n</code></pre> <p>\u4e0a\u9762\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4e8b\u4ef6\u9a71\u52a8\u6a21\u578b\uff0c\u9996\u5148\u521d\u59cb\u5316\u4e00\u4e9b\u4fe1\u606f\uff0c\u7136\u540e\u53d1\u8d77\u4e00\u4e2a\u975e\u963b\u585e\u7684\u8bf7\u6c42\uff0c\u63a5\u7740\u963b\u585e\u5728\u591a\u8def\u590d\u7528API\uff0c\u8be5API\u8fd4\u56de\u540e\uff0c\u6267\u884c\u89e6\u53d1\u4e86\u4e8b\u4ef6\u7684\u56de\u8c03\u3002</p>"},{"location":"chapter08-DNS/#822-cares_wrapcc","title":"8.2.2 cares_wrap.cc\u7684\u901a\u7528\u903b\u8f91","text":"<p>\u5728Node.js\u4e2d\uff0cNode.js\u548ccares\u7684\u6574\u4f53\u4ea4\u4e92\u5982\u56fe8-1\u6240\u793a\u3002    \u56fe8-1. </p> <p>\u6211\u4eec\u901a\u8fc7cares_wrap.cc\u5206\u6790\u5176\u4e2d\u7684\u539f\u7406\u3002\u6211\u4eec\u4eceDNS\u6a21\u5757\u63d0\u4f9b\u7684resolveCname\u51fd\u6570\u5f00\u59cb\u3002resolveCname\u51fd\u6570\u7531\u4ee5\u4e0b\u4ee3\u7801\u5bfc\u51fa\uff08dns.js\uff09\u3002 <pre><code>bindDefaultResolver(module.exports, getDefaultResolver())  \n</code></pre> \u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u51fd\u6570\uff08dns/utils.js\uff09\u3002</p> <pre><code>    class Resolver {  \n      constructor() {  \n        this._handle = new ChannelWrap();  \n      }  \n      // ...  \n    }  \n\n    let defaultResolver = new Resolver();  \n\n    function getDefaultResolver() {  \n      return defaultResolver;  \n    }  \n\n    function resolver(bindingName) {  \n      function query(name, /* options, */ callback) {  \n        let options;  \n        const req = new QueryReqWrap();  \n        req.bindingName = bindingName;  \n        req.callback = callback;  \n        req.hostname = name;  \n        req.oncomplete = onresolve;  \n        req.ttl = !!(options &amp;&amp; options.ttl);  \n        const err = this._handle[bindingName](req, toASCII(name));  \n        if (err) throw dnsException(err, bindingName, name);  \n        return req;  \n      }  \n      ObjectDefineProperty(query, 'name', { value: bindingName });  \n      return query;  \n    }  \n    // \u7ed9\u539f\u578b\u94fe\u6ce8\u5165\u4e00\u4e2a\u65b0\u7684\u5c5e\u6027\uff0cdefaultResolver\u4e2d\u4e5f\u751f\u6548  \n    Resolver.prototype.resolveCname = resolveMap.CNAME = resolver('queryCname');  \n</code></pre> <p>getDefaultResolver\u5bfc\u51fa\u7684\u662f\u4e00\u4e2aResolve\u5bf9\u8c61\uff0c\u91cc\u9762\u6709resolveCname\u7b49\u4e00\u7cfb\u5217\u65b9\u6cd5\u3002\u63a5\u7740\u770b\u4e00\u4e0bbindDefaultResolver\uff0c\u6211\u4eec\u4e00\u4f1a\u518d\u770bChannelWrap\u3002</p> <pre><code>    const resolverKeys = [ \n      'resolveCname ',  \n      // \u2026\n    ]  \n    function bindDefaultResolver(target, source) {  \n      resolverKeys.forEach((key) =&gt; {  \n        target[key] = source[key].bind(defaultResolver);  \n      });  \n    }  \n</code></pre> <p>\u770b\u8d77\u6765\u5f88\u7ed5\uff0c\u5176\u5b9e\u5c31\u662f\u628aResolve\u5bf9\u8c61\u7684\u65b9\u6cd5\u5bfc\u51fa\u5230DNS\u6a21\u5757\u3002\u8fd9\u6837\u7528\u6237\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\u3002\u6211\u4eec\u770b\u5230resolveCname\u662f\u7531resolver\u51fd\u6570\u751f\u6210\u7684\uff0cresolver\u51fd\u6570\u5bf9cares\u7cfb\u5217\u51fd\u6570\u8fdb\u884c\u4e86\u5c01\u88c5\uff0c\u6700\u7ec8\u8c03\u7528\u7684\u662fthis._handle.queryCname\u51fd\u6570\u3002\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2ahandle\uff08ChannelWrap\u7c7b\u5bf9\u8c61\uff09\u7684\u5b9e\u73b0\uff08cares_wrap.cc\uff09\u3002\u6211\u4eec\u5148\u770b\u4e00\u4e0bcares_wrap.cc\u6a21\u5757\u5bfc\u51fa\u7684API\u3002</p> <pre><code>    Local&lt;FunctionTemplate&gt; channel_wrap = env-&gt;NewFunctionTemplate(ChannelWrap::New);  \n    channel_wrap-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);  \n    channel_wrap-&gt;Inherit(AsyncWrap::GetConstructorTemplate(env));  \n    // Query\u662fC++\u51fd\u6570\u6a21\u677f\n    env-&gt;SetProtoMethod(channel_wrap, \n                          \"queryCname\", \n                          Query&lt;QueryCnameWrap&gt;);  \n    // ...  \n    Local&lt;String&gt; channelWrapString = FIXED_ONE_BYTE_STRING(env-&gt;isolate(), \"ChannelWrap\");  \n    channel_wrap-&gt;SetClassName(channelWrapString);  \n    target-&gt;Set(env-&gt;context(), \n    channelWrapString,channel_wrap-&gt;GetFunction(context).ToLocalChecked()).Check();  \n</code></pre> <p>handle\u5bf9\u5e94\u7684\u5c31\u662f\u4ee5\u4e0a\u4ee3\u7801\u5bfc\u51fa\u7684\u5bf9\u8c61\u3002\u5f53\u6211\u4eec\u5728JS\u5c42\u6267\u884cnew ChannelWrap\u7684\u65f6\u5019\u3002 \u6700\u7ec8\u4f1a\u8c03\u7528C++\u5c42\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u4e14\u6267\u884cChannelWrap::New\u3002</p> <pre><code>    void ChannelWrap::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n      new ChannelWrap(env, args.This());  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u7c7bChannelWrap\u7684\u5b9a\u4e49\u3002</p> <pre><code>    class ChannelWrap : public AsyncWrap {  \n     public:  \n      // ...  \n\n     private:  \n      // \u8d85\u65f6\u7ba1\u7406  \n      uv_timer_t* timer_handle_;  \n      // cares\u6570\u636e\u7c7b\u578b  \n      ares_channel channel_;  \n      // \u6807\u8bb0\u67e5\u8be2\u7ed3\u679c  \n      bool query_last_ok_;  \n      // \u4f7f\u7528\u7684DNS\u670d\u52a1\u5668  \n      bool is_servers_default_;  \n      // \u662f\u5426\u5df2\u7ecf\u521d\u59cb\u5316cares\u5e93  \n      bool library_inited_;  \n      // \u6b63\u5728\u53d1\u8d77\u7684\u67e5\u8be2\u4e2a\u6570  \n      int active_query_count_;  \n      // \u53d1\u8d77\u67e5\u8be2\u7684\u4efb\u52a1\u961f\u5217  \n      node_ares_task_list task_list_;  \n    };  \n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u770b\u770bChannelWrap\u6784\u9020\u51fd\u6570\u7684\u4ee3\u7801\u3002</p> <pre><code>    ChannelWrap::ChannelWrap(...) {  \n      Setup();  \n    }  \n</code></pre> <p>ChannelWrap\u91cc\u76f4\u63a5\u8c03\u7528\u4e86Setup</p> <pre><code>    void ChannelWrap::Setup() {  \n      struct ares_options options;  \n      memset(&amp;options, 0, sizeof(options));  \n      options.flags = ARES_FLAG_NOCHECKRESP;   \n      /*\n        caresd socket\u72b6\u6001\uff08\u8bfb\u5199\uff09\u53d1\u751f\u53d8\u66f4\u65f6\uff0c\u6267\u884c\u7684\u51fd\u6570\uff0c\n        \u7b2c\u4e00\u4e2a\u5165\u53c2\u662fsock_state_cb_data\n      */\n      options.sock_state_cb = ares_sockstate_cb;  \n     options.sock_state_cb_data = this;  \n\n     // \u8fd8\u6ca1\u521d\u59cb\u5316\u5219\u521d\u59cb\u5316 \n     if (!library_inited_) {  \n       Mutex::ScopedLock lock(ares_library_mutex);  \n       // \u521d\u59cb\u5316cares\u5e93  \n       ares_library_init(ARES_LIB_INIT_ALL);  \n     }  \n     // \u8bbe\u7f6e\u4f7f\u7528cares\u7684\u914d\u7f6e  \n     ares_init_options(&amp;channel_,  \n                           &amp;options,  \n                           ARES_OPT_FLAGS | ARES_OPT_SOCK_STATE_CB);\n     library_inited_ = true;  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\uff0cNode.js\u5728\u8fd9\u91cc\u521d\u59cb\u5316cares\u76f8\u5173\u7684\u903b\u8f91\u3002\u5176\u4e2d\u6700\u91cd\u8981\u7684\u5c31\u662f\u8bbe\u7f6e\u4e86cares socket\u72b6\u6001\u53d8\u66f4\u65f6\u6267\u884c\u7684\u56de\u8c03ares_sockstate_cb\uff08\u6bd4\u5982socket\u9700\u8981\u8bfb\u53d6\u6570\u636e\u6216\u8005\u5199\u5165\u6570\u636e\uff09\u3002\u524d\u9762\u7684cares\u4f7f\u7528\u4f8b\u5b50\u4e2d\u8bb2\u5230\u4e86cares\u548c\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u7684\u914d\u5408\u4f7f\u7528\uff0c\u90a3\u4e48cares\u548cLibuv\u662f\u5982\u4f55\u914d\u5408\u7684\u5462\uff1fcares\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\uff0c\u5c31\u662fsocket\u72b6\u6001\u53d8\u66f4\u65f6\u901a\u77e5\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u3002DNS\u89e3\u6790\u672c\u8d28\u4e0a\u4e5f\u662f\u7f51\u7edcIO\uff0c\u6240\u4ee5\u53d1\u8d77\u4e00\u4e2aDNS\u67e5\u8be2\u4e5f\u5c31\u662f\u5bf9\u5e94\u4e00\u4e2asocket\u3002DNS\u67e5\u8be2\u662f\u7531cares\u53d1\u8d77\u7684\uff0c\u8fd9\u5c31\u610f\u5473\u7740socket\u662f\u5728cares\u4e2d\u7ef4\u62a4\u7684\uff0c\u90a3Libuv\u600e\u4e48\u77e5\u9053\u5462\uff1f\u6b63\u662fcares\u63d0\u4f9b\u7684\u901a\u77e5\u673a\u5236\uff0c\u4f7f\u5f97Libuv\u77e5\u9053\u53d1\u8d77DNS\u67e5\u8be2\u5bf9\u5e94\u7684socket\uff0c\u4ece\u800c\u6ce8\u518c\u5230Libuv\u4e2d\uff0c\u7b49\u5230\u4e8b\u4ef6\u89e6\u53d1\u540e\uff0c\u518d\u901a\u77e5cares\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002\u6211\u4eec\u4ece\u53d1\u8d77\u4e00\u4e2acname\u67e5\u8be2\u5f00\u59cb\u5206\u6790\u3002\u9996\u5148\u56de\u987e\u4e00\u4e0bcares_wrap\u6a21\u5757\u5bfc\u51fa\u7684cname\u67e5\u8be2\u51fd\u6570\uff0c env-&gt;SetProtoMethod(channel_wrap, \"queryCname\", Query);Query\u662fC++\u6a21\u677f\u51fd\u6570\uff0cQueryCnameWrap\u662fC++\u7c7b <pre><code>    template &lt;class Wrap&gt;  \n    static void Query(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n      ChannelWrap* channel;  \n        // Holder\u4e2d\u4fdd\u5b58\u4e86ChannelWrap\u5bf9\u8c61\uff0c\u89e3\u5305\u51fa\u6765\n      ASSIGN_OR_RETURN_UNWRAP(&amp;channel, args.Holder());  \n      Local&lt;Object&gt; req_wrap_obj = args[0].As&lt;Object&gt;();  \n      Local&lt;String&gt; string = args[1].As&lt;String&gt;();  \n        /*\n          \u6839\u636e\u53c2\u6570\u65b0\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u91cc\u662fQueryCnameWrap\uff0c\n          \u5e76\u4e14\u4fdd\u5b58\u5bf9\u5e94\u7684ChannelWrap\u5bf9\u8c61\u548c\u64cd\u4f5c\u76f8\u5173\u7684\u5bf9\u8c61\n        */\n      Wrap* wrap = new Wrap(channel, req_wrap_obj);  \n\n      node::Utf8Value name(env-&gt;isolate(), string);\n        // \u53d1\u8d77\u8bf7\u6c42\u6570\u52a0\u4e00  \n      channel-&gt;ModifyActivityQueryCount(1);  \n        // \u8c03\u7528Send\u51fd\u6570\u53d1\u8d77\u67e5\u8be2\n      int err = wrap-&gt;Send(*name);  \n      if (err) {  \n        channel-&gt;ModifyActivityQueryCount(-1);  \n        delete wrap;  \n      }  \n\n      args.GetReturnValue().Set(err);  \n    }  \n</code></pre> <p>Query\u53ea\u5b9e\u73b0\u4e86\u4e00\u4e9b\u901a\u7528\u7684\u903b\u8f91\uff0c\u7136\u540e\u8c03\u7528Send\u51fd\u6570\uff0c\u5177\u4f53\u7684Send\u51fd\u6570\u903b\u8f91\u7531\u5404\u4e2a\u5177\u4f53\u7684\u7c7b\u5b9e\u73b0\u3002</p>"},{"location":"chapter08-DNS/#823","title":"8.2.3 \u5177\u4f53\u5b9e\u73b0","text":"<p>\u6211\u4eec\u770b\u4e00\u4e0bQueryCnameWrap\u7c7b\u3002</p> <pre><code>    class QueryCnameWrap: public QueryWrap {  \n     public:  \n      QueryCnameWrap(ChannelWrap* channel, \n                       Local&lt;Object&gt; req_wrap_obj)  \n          : QueryWrap(channel, req_wrap_obj, \"resolveCname\") {  \n      }  \n\n      int Send(const char* name) override {  \n         AresQuery(name, ns_c_in, ns_t_cname);  \n        return 0;  \n      }  \n\n     protected:  \n      void Parse(unsigned char* buf, int len) override {  \n        HandleScope handle_scope(env()-&gt;isolate());  \n        Context::Scope context_scope(env()-&gt;context());  \n\n        Local&lt;Array&gt; ret = Array::New(env()-&gt;isolate());  \n        int type = ns_t_cname;  \n        int status = ParseGeneralReply(env(), buf, len, &amp;type, ret);  \n        if (status != ARES_SUCCESS) {  \n          ParseError(status);  \n          return;  \n        }  \n\n        this-&gt;CallOnComplete(ret);  \n      }  \n    };  \n</code></pre> <p>\u6211\u4eec\u770b\u5230QueryCnameWrap\u7c7b\u7684\u5b9e\u73b0\u975e\u5e38\u7b80\u5355\uff0c\u4e3b\u8981\u5b9a\u4e49Send\u548cParse\u7684\u5b9e\u73b0\uff0c\u6700\u7ec8\u8fd8\u662f\u4f1a\u8c03\u7528\u57fa\u7c7b\u5bf9\u5e94\u7684\u51fd\u6570\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u57fa\u7c7bQueryWrap\u4e2dAresQuery\u7684\u5b9e\u73b0\u3002</p> <pre><code>    void AresQuery(const char* name,  \n            int dnsclass,  \n            int type) {  \n        ares_query(channel_-&gt;cares_channel(), \n                       name, \n                       dnsclass, \n                       type, \n                       Callback,  \n              static_cast&lt;void*&gt;(this));  \n      }  \n</code></pre> <p>AresQuery\u51fd\u6570\u63d0\u4f9b\u7edf\u4e00\u53d1\u9001\u67e5\u8be2\u64cd\u4f5c\u3002\u67e5\u8be2\u5b8c\u6210\u540e\u6267\u884cCallback\u56de\u8c03\u3002\u63a5\u4e0b\u6765\u5c31\u6d89\u53ca\u5230cares\u548cNode.js\u7684\u5177\u4f53\u4ea4\u4e92\u4e86\u3002Node.js\u628a\u4e00\u4e2a\u4efb\u52a1\u4ea4\u7ed9cares\u540e\uff0ccares\u4f1a\u65b0\u5efa\u4e00\u4e2asocket\uff0c\u63a5\u7740cares\u4f1a\u901a\u8fc7Node.js\u8bbe\u7f6e\u7684\u56de\u8c03ares_sockstate_cb\u901a\u77e5Node.js\u3002\u6211\u4eec\u770b\u4e00\u4e0bares_query\u7684\u5173\u952e\u903b\u8f91\u3002</p> <pre><code>    void ares_query(ares_channel channel, const char *name, int dnsclass,  \n                    int type, ares_callback callback, void *arg)  \n    {  \n      struct qquery *qquery;  \n      unsigned char *qbuf;  \n      int qlen, rd, status;  \n\n      qquery = ares_malloc(sizeof(struct qquery));  \n      // \u4fdd\u5b58Node.js\u7684\u56de\u8c03\uff0c\u67e5\u8be2\u5b8c\u6210\u65f6\u56de\u8c03  \n      qquery-&gt;callback = callback;  \n      qquery-&gt;arg = arg;  \n      ares_send(channel, qbuf, qlen, qcallback, qquery);  \n    }  \n\n    static void qcallback(void *arg, int status, int timeouts, unsigned char *abuf, int alen)  \n    {  \n      struct qquery *qquery = (struct qquery *) arg;  \n      unsigned int ancount;  \n      int rcode;  \n\n      if (status != ARES_SUCCESS)  \n        qquery-&gt;callback(qquery-&gt;arg, status, timeouts, abuf, alen);\n      else  \n        {  \n          // ...  \n          // \u6267\u884cNode.js\u56de\u8c03  \n          qquery-&gt;callback(qquery-&gt;arg, \n                              status,\n                              timeouts, \n                              abuf, \n                              alen);  \n        }  \n      ares_free(qquery);  \n    }  \n</code></pre> <p>ares_query\u4fdd\u5b58\u4e86Node.js\u7684\u56de\u8c03\uff0c\u5e76\u4e14\u8bbe\u7f6e\u56de\u8c03qcallback\uff0c\u67e5\u8be2\u6210\u529f\u540e\u4f1a\u56de\u8c03qcallback\uff0cqcallback\u518d\u56de\u8c03Node.js\u3002\u63a5\u7740\u6267\u884cares_send\uff0cares_send\u4f1a\u8c03\u7528ares__send_query\u3002</p> <pre><code>    void ares__send_query(ares_channel channel, \n                            struct query *query,  \n                          struct timeval *now)  \n    {  \n        struct server_state *server = &amp;channel-&gt;servers[query-&gt;server];  \n        if (server-&gt;udp_socket == ARES_SOCKET_BAD)  \n            {  \n              // \u7533\u8bf7\u4e00\u4e2asocket  \n              if (open_udp_socket(channel, server) == -1)  \n                {  \n                  skip_server(channel, query, query-&gt;server);  \n                  next_server(channel, query, now);  \n                  return;  \n                }  \n            }  \n          // \u53d1\u9001DNS\u67e5\u8be2  \n          if (socket_write(channel, server-&gt;udp_socket, query-&gt;qbuf, query-&gt;qlen) == -1)  \n            {  \n              skip_server(channel, query, query-&gt;server);  \n              next_server(channel, query, now);  \n              return;  \n            }  \n    }  \n</code></pre> <p>ares__send_query\u9996\u5148\u7533\u8bf7\u4e00\u4e2asocket\uff0c\u7136\u540e\u53d1\u9001\u6570\u636e\u3002\u56e0\u4e3aUDP\u4e0d\u662f\u9762\u5411\u8fde\u63a5\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u53d1\u9001\u3002\u6211\u4eec\u770b\u4e00\u4e0bopen_udp_socket\u3002</p> <pre><code>    static int open_udp_socket(ares_channel channel, struct server_state *server)  \n    {  \n      ares_socket_t s;  \n      ares_socklen_t salen;  \n      union {  \n        struct sockaddr_in  sa4;  \n        struct sockaddr_in6 sa6;  \n      } saddr;  \n      struct sockaddr *sa;  \n\n      // \u7533\u8bf7\u4e00\u4e2asocket  \n      s = open_socket(channel, server-&gt;addr.family, SOCK_DGRAM, 0); \n      // \u7ed1\u5b9a\u670d\u52a1\u5668\u5730\u5740  \n      connect_socket(channel, s, sa, salen)  \n\n      // \u901a\u77e5Node.js\uff0c1,0\u8868\u793a\u5bf9socket\u7684\u8bfb\u4e8b\u4ef6\u611f\u5174\u8da3\uff0c\u56e0\u4e3a\u53d1\u9001\u4e86\u8bf7\u6c42\uff0c\u7b49\u5f85\u54cd\u5e94  \n      SOCK_STATE_CALLBACK(channel, s, 1, 0);  \n      // \u4fdd\u5b58socket\n      server-&gt;udp_socket = s;  \n      return 0;  \n    }  \n\n    #define SOCK_STATE_CALLBACK(c, s, r, w)                                 \\  \n      do {                                                                  \\  \n        if ((c)-&gt;sock_state_cb)                                             \\  \n          (c)-&gt;sock_state_cb((c)-&gt;sock_state_cb_data, (s), (r), (w));       \\  \n      } WHILE_FALSE  \n</code></pre> <p>ares__send_query\u51fd\u6570\u505a\u4e86\u4e09\u4ef6\u4e8b 1 \u7533\u8bf7\u4e86socket\uff0c 2 \u901a\u77e5Node.js 3 \u53d1\u9001\u4e86DNS\u67e5\u8be2\u8bf7\u6c42 \u8fd9\u65f6\u5019\u6d41\u7a0b\u8d70\u5230\u4e86Node.js\uff0c\u6211\u4eec\u770b\u4e00\u4e0bcares\u56de\u8c03Node.js\u7684\u65f6\u5019\uff0cNode.js\u600e\u4e48\u5904\u7406\u7684</p> <pre><code>    struct node_ares_task : public MemoryRetainer {  \n      ChannelWrap* channel;  \n      // \u5173\u8054\u7684socket  \n      ares_socket_t sock;  \n      // IO\u89c2\u5bdf\u8005\u548c\u56de\u8c03  \n      uv_poll_t poll_watcher;  \n    };  \n\n    void ares_sockstate_cb(void* data,  \n                           ares_socket_t sock,  \n                           int read,  \n                           int write) {  \n      ChannelWrap* channel = static_cast&lt;ChannelWrap*&gt;(data);  \n      node_ares_task* task;  \n      // \u4efb\u52a1  \n      node_ares_task lookup_task;  \n      lookup_task.sock = sock;  \n      // \u8be5\u4efb\u52a1\u662f\u5426\u5df2\u7ecf\u5b58\u5728  \n      auto it = channel-&gt;task_list()-&gt;find(&amp;lookup_task);  \n\n      task = (it == channel-&gt;task_list()-&gt;end()) ? nullptr : *it;  \n\n      if (read || write) {  \n        if (!task) {  \n          // \u5f00\u542f\u5b9a\u65f6\u5668\uff0c\u8d85\u65f6\u540e\u901a\u77e5cares  \n          channel-&gt;StartTimer();  \n          // \u521b\u5efa\u4e00\u4e2a\u4efb\u52a1  \n          task = ares_task_create(channel, sock);  \n          // \u4fdd\u5b58\u5230\u4efb\u52a1\u5217\u8868  \n          channel-&gt;task_list()-&gt;insert(task);  \n        }  \n        // \u6ce8\u518cIO\u89c2\u5bdf\u8005\u5230epoll\uff0c\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u6839\u636ecares\u4f20\u7684\u8fdb\u884c\u8bbe\u7f6e\uff0c\u6709\u4e8b\u4ef6\u89e6\u53d1\u540e\u6267\u884c\u56de\u8c03ares_poll_cb  \n        uv_poll_start(&amp;task-&gt;poll_watcher,  \n                      (read ? UV_READABLE : 0) | (write ? UV_WRITABLE : 0),  \n                      ares_poll_cb);  \n\n      } else {  \n        // socket\u5173\u95ed\u4e86\uff0c\u5220\u9664\u4efb\u52a1  \n        channel-&gt;task_list()-&gt;erase(it);  \n        // \u5173\u95ed\u8be5\u4efb\u52a1\u5bf9\u5e94\u89c2\u5bdf\u8005io\uff0c\u7136\u540e\u5220\u9664\u5220\u9664\u8be5\u4efb\u52a1  \n        channel-&gt;env()-&gt;CloseHandle(&amp;task-&gt;poll_watcher, ares_poll_close_cb);  \n        // \u6ca1\u6709\u4efb\u52a1\u4e86\uff0c\u5173\u95ed\u5b9a\u65f6\u5668  \n        if (channel-&gt;task_list()-&gt;empty()) {  \n          channel-&gt;CloseTimer();  \n        }  \n      }  \n    }  \n</code></pre> <p>\u6bcf\u4e00\u4e2aDNS\u67e5\u8be2\u7684\u4efb\u52a1\uff0c\u5728Node.js\u4e2d\u7528node_ares_task \u7ba1\u7406\u3002\u5b83\u5c01\u88c5\u4e86\u8bf7\u6c42\u5bf9\u5e94\u7684channel\u3001\u67e5\u8be2\u8bf7\u6c42\u5bf9\u5e94\u7684socket\u548cuv_poll_t\u3002\u6211\u4eec\u770b\u4e00\u4e0bares_task_create</p> <pre><code>    node_ares_task* ares_task_create(ChannelWrap* channel, ares_socket_t sock) {  \n      auto task = new node_ares_task();  \n\n      task-&gt;channel = channel;  \n      task-&gt;sock = sock;  \n      // \u521d\u59cb\u5316uv_poll_t\uff0c\u4fdd\u5b58\u6587\u4ef6\u63cf\u8ff0\u7b26sock\u5230uv_poll_t  \n      if (uv_poll_init_socket(channel-&gt;env()-&gt;event_loop(),&amp;task-&gt;poll_watcher, sock) &lt; 0) {  \n        delete task;  \n        return nullptr;  \n      }  \n\n      return task;  \n    }  \n</code></pre> <p>\u9996\u5148\u521b\u5efa\u4e00\u4e2anode_ares_task\u5bf9\u8c61\u3002\u7136\u540e\u521d\u59cb\u5316uv_poll_t\u5e76\u4e14\u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fdd\u5b58\u5230uv_poll_t\u3002uv_poll_t\u662f\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u56de\u8c03\u3001IO\u89c2\u5bdf\u8005\u7684\u5c01\u88c5\u3002\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u4f1a\u6267\u884cIO\u89c2\u5bdf\u8005\u7684\u56de\u8c03\uff0c\u4ece\u800c\u6267\u884cuv_poll_t\u4fdd\u5b58\u7684\u56de\u8c03\u3002\u6211\u4eec\u7ee7\u7eed\u56de\u5230ares_sockstate_cb\uff0c\u5f53cares\u901a\u77e5Node.js socket\u72b6\u6001\u53d8\u66f4\u7684\u65f6\u5019\uff0cNode.js\u5c31\u4f1a\u4fee\u6539epoll\u8282\u70b9\u7684\u914d\u7f6e\uff08\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\uff09\u3002\u5f53\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0c\u4f1a\u6267\u884cares_poll_cb\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u8be5\u51fd\u6570\u3002</p> <pre><code>    void ares_poll_cb(uv_poll_t* watcher, int status, int events) {  \n      node_ares_task* task = ContainerOf(&amp;node_ares_task::poll_watcher, watcher);  \n      ChannelWrap* channel = task-&gt;channel;  \n\n      // \u6709\u4e8b\u4ef6\u89e6\u53d1\uff0c\u91cd\u7f6e\u8d85\u65f6\u65f6\u95f4  \n      uv_timer_again(channel-&gt;timer_handle());  \n\n      // \u901a\u77e5cares\u5904\u7406\u54cd\u5e94  \n      ares_process_fd(channel-&gt;cares_channel(),  \n                      events &amp; UV_READABLE ? task-&gt;sock : ARES_SOCKET_BAD,  \n                      events &amp; UV_WRITABLE ? task-&gt;sock : ARES_SOCKET_BAD);  \n    }  \n</code></pre> <p>\u5f53socket\u4e0a\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0cNode.js\u8c03ares_process_fd\u5904\u7406\u3002\u771f\u6b63\u7684\u5904\u7406\u51fd\u6570\u662fprocessfds\u3002</p> <pre><code>    static void processfds(ares_channel channel,  \n                           fd_set *read_fds, ares_socket_t read_fd,  \n                           fd_set *write_fds, ares_socket_t write_fd)  \n    {  \n      struct timeval now = ares__tvnow();  \n\n      write_tcp_data(channel, write_fds, write_fd, &amp;now);  \n      read_tcp_data(channel, read_fds, read_fd, &amp;now);  \n      read_udp_packets(channel, read_fds, read_fd, &amp;now);  \n     process_timeouts(channel, &amp;now);  \n     process_broken_connections(channel, &amp;now);  \n    }  \n</code></pre> <p>processfds\u662f\u7edf\u4e00\u7684\u5904\u7406\u51fd\u6570\uff0c\u5728\u5404\u81ea\u51fd\u6570\u5185\u4f1a\u505a\u76f8\u5e94\u7684\u5224\u65ad\u548c\u5904\u7406\u3002\u6211\u4eec\u8fd9\u91cc\u662f\u6536\u5230\u4e86UDP\u54cd\u5e94\u3002\u5219\u4f1a\u6267\u884cread_udp_packets</p> <pre><code>    static void read_udp_packets(ares_channel channel, fd_set *read_fds,  \n                                 ares_socket_t read_fd, struct timeval *now){  \n    // \u8bfb\u53d6\u54cd\u5e94  \n    count = socket_recvfrom(channel, server-&gt;udp_socket, (void *)buf, sizeof(buf), 0, &amp;from.sa, &amp;fromlen);  \n    // \u5904\u7406\u54cd\u5e94\uff0c\u6700\u7ec8\u8c03\u7528query-&gt;callback\u56de\u8c03Node.js  \n    process_answer(channel, buf, (int)count, i, 0, now);  \n    }  \n</code></pre> <p>Cares\u8bfb\u53d6\u54cd\u5e94\u7136\u540e\u89e3\u6790\u54cd\u5e94\uff0c\u6700\u540e\u56de\u8c03Node.js\u3002Node.js\u8bbe\u7f6e\u7684\u56de\u8c03\u51fd\u6570\u662fCallback</p> <pre><code>    static void Callback(void* arg, int status, int timeouts,  \n                           unsigned char* answer_buf, int answer_len) {  \n        QueryWrap* wrap = FromCallbackPointer(arg);  \n        unsigned char* buf_copy = nullptr;  \n        if (status == ARES_SUCCESS) {  \n          buf_copy = node::Malloc&lt;unsigned char&gt;(answer_len);  \n          memcpy(buf_copy, answer_buf, answer_len);  \n        }  \n\n        wrap-&gt;response_data_ = std::make_unique&lt;ResponseData&gt;();  \n        ResponseData* data = wrap-&gt;response_data_.get();  \n        data-&gt;status = status;  \n        data-&gt;is_host = false;  \n        data-&gt;buf = MallocedBuffer&lt;unsigned char&gt;(buf_copy, answer_len);  \n        // \u6267\u884cQueueResponseCallback\n        wrap-&gt;QueueResponseCallback(status);  \n    }  \n\n    void QueueResponseCallback(int status) {  \n        BaseObjectPtr&lt;QueryWrap&gt; strong_ref{this};  \n        // \u4ea7\u751f\u4e00\u4e2anative immediate\u4efb\u52a1\uff0c\u5728check\u9636\u6bb5\u6267\u884c  \n        env()-&gt;SetImmediate([this, strong_ref](Environment*) {  \n           // check\u9636\u6bb5\u6267\u884c\n          AfterResponse(); \n          // Delete once strong_ref goes out of scope.  \n          Detach();  \n        });  \n\n        channel_-&gt;set_query_last_ok(status != ARES_ECONNREFUSED);  \n        channel_-&gt;ModifyActivityQueryCount(-1);  \n    }  \n\n      void AfterResponse() {  \n        const int status = response_data_-&gt;status;  \n        // \u8c03\u7528\u5bf9\u5e94\u7684\u5b50\u7c7b\u7684Parse  \n        if (status != ARES_SUCCESS) {  \n          ParseError(status);  \n        } else if (!response_data_-&gt;is_host) {  \n          Parse(response_data_-&gt;buf.data, response_data_-&gt;buf.size);\n        } else {  \n          Parse(response_data_-&gt;host.get());  \n        }  \n      }  \n</code></pre> <p>\u4efb\u52a1\u5b8c\u6210\u540e\uff0cNode.js\u4f1a\u5728check\u9636\u6bb5\uff08Node.js v10\u662f\u4f7f\u7528async handle\u901a\u77e5Libuv\uff09\u52a0\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540echeck\u9636\u6bb5\u7684\u65f6\u5019\u6267\u884c\u5bf9\u5e94\u5b50\u7c7b\u7684Parse\u51fd\u6570\uff0c\u8fd9\u91cc\u4ee5QueryCnameWrap\u7684Parse\u4e3a\u4f8b\u3002</p> <pre><code>    void Parse(unsigned char* buf, int len) override {  \n        HandleScope handle_scope(env()-&gt;isolate());  \n        Context::Scope context_scope(env()-&gt;context());  \n\n        Local&lt;Array&gt; ret = Array::New(env()-&gt;isolate());  \n        int type = ns_t_cname;  \n        int status = ParseGeneralReply(env(), buf, len, &amp;type, ret);  \n        if (status != ARES_SUCCESS) {  \n          ParseError(status);  \n          return;  \n        }  \n\n        this-&gt;CallOnComplete(ret);  \n      }  \n</code></pre> <p>\u6536\u5230DNS\u56de\u590d\u540e\uff0c\u8c03\u7528ParseGeneralReply\u89e3\u6790\u56de\u5305\uff0c\u7136\u540e\u6267\u884cJS\u5c42DNS\u6a21\u5757\u7684\u56de\u8c03\u3002\u4ece\u800c\u6267\u884c\u7528\u6237\u7684\u56de\u8c03\u3002</p> <pre><code>    void CallOnComplete(Local&lt;Value&gt; answer,  \n                        Local&lt;Value&gt; extra = Local&lt;Value&gt;()) {  \n      HandleScope handle_scope(env()-&gt;isolate());  \n      Context::Scope context_scope(env()-&gt;context());  \n      Local&lt;Value&gt; argv[] = {  \n        Integer::New(env()-&gt;isolate(), 0),  \n        answer,  \n        extra  \n      };  \n      const int argc = arraysize(argv) - extra.IsEmpty();  \n      MakeCallback(env()-&gt;oncomplete_string(), argc, argv);  \n    }  \n</code></pre>"},{"location":"chapter09-Unix%E5%9F%9F/","title":"09-Unix\u57df","text":"<p>Unix\u57df\u4e00\u79cd\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u65b9\u5f0f\uff0cUnix\u57df\u4e0d\u4ec5\u652f\u6301\u6ca1\u6709\u7ee7\u627f\u5173\u7cfb\u7684\u8fdb\u7a0b\u95f4\u8fdb\u884c\u901a\u4fe1\uff0c\u800c\u4e14\u652f\u6301\u8fdb\u7a0b\u95f4\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002Unix\u57df\u662fNode.js\u4e2d\u6838\u5fc3\u7684\u529f\u80fd\uff0c\u5b83\u662f\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u5e95\u5c42\u57fa\u7840\uff0cchild_process\u548ccluster\u6a21\u5757\u90fd\u4f9d\u8d56Unix\u57df\u7684\u80fd\u529b\u3002\u4ece\u5b9e\u73b0\u548c\u4f7f\u7528\u4e0a\u6765\u770b\uff0cUnix\u57df\u7c7b\u4f3cTCP\uff0c\u4f46\u662f\u56e0\u4e3a\u5b83\u662f\u57fa\u4e8e\u540c\u4e3b\u673a\u8fdb\u7a0b\u7684\uff0c\u4e0d\u50cfTCP\u9700\u8981\u9762\u4e34\u590d\u6742\u7684\u7f51\u7edc\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u5b9e\u73b0\u4e5f\u6ca1\u6709TCP\u90a3\u4e48\u590d\u6742\u3002Unix\u57df\u548c\u4f20\u7edf\u7684socket\u901a\u4fe1\u4e00\u6837\uff0c\u9075\u5faa\u7f51\u7edc\u7f16\u7a0b\u7684\u90a3\u4e00\u5957\u6d41\u7a0b\uff0c\u7531\u4e8e\u5728\u540c\u4e3b\u673a\u5185\uff0c\u5c31\u4e0d\u5fc5\u8981\u4f7f\u7528IP\u548c\u7aef\u53e3\u7684\u65b9\u5f0f\u3002Node.js\u4e2d\uff0cUnix\u57df\u91c7\u7528\u7684\u662f\u4e00\u4e2a\u6587\u4ef6\u4f5c\u4e3a\u6807\u8bb0\u3002\u5927\u81f4\u539f\u7406\u5982\u4e0b\u3002 1 \u670d\u52a1\u5668\u9996\u5148\u62ff\u5230\u4e00\u4e2asocket\u3002 2 \u670d\u52a1\u5668bind\u4e00\u4e2a\u6587\u4ef6\uff0c\u7c7b\u4f3cbind\u4e00\u4e2aIP\u548c\u7aef\u53e3\u4e00\u6837\uff0c\u5bf9\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u6765\u8bf4\uff0c\u5c31\u662f\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\uff08\u4e0d\u4e00\u5b9a\u662f\u5728\u786c\u76d8\u4e2d\u521b\u5efa\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u62bd\u8c61\u8def\u5f84\u540d\uff09\uff0c\u7136\u540e\u628a\u6587\u4ef6\u8def\u5f84\u4fe1\u606f\u5b58\u5728socket\u4e2d\u3002 3 \u8c03\u7528listen\u4fee\u6539socket\u72b6\u6001\u4e3a\u76d1\u542c\u72b6\u6001\u3002 4 \u5ba2\u6237\u7aef\u901a\u8fc7\u540c\u6837\u7684\u6587\u4ef6\u8def\u5f84\u8c03\u7528connect\u53bb\u8fde\u63a5\u670d\u52a1\u5668\u3002\u8fd9\u65f6\u5019\u7528\u4e8e\u8868\u793a\u5ba2\u6237\u7aef\u7684\u7ed3\u6784\u4f53\u63d2\u5165\u670d\u52a1\u5668\u7684\u8fde\u63a5\u961f\u5217\uff0c\u7b49\u5f85\u5904\u7406\u3002 5 \u670d\u52a1\u5668\u8c03\u7528accept\u6458\u53d6\u961f\u5217\u7684\u8282\u70b9\uff0c\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u901a\u4fe1socket\u548c\u5ba2\u6237\u7aef\u8fdb\u884c\u901a\u4fe1\u3002 Unix\u57df\u901a\u4fe1\u672c\u8d28\u8fd8\u662f\u57fa\u4e8e\u5185\u5b58\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u90fd\u7ef4\u62a4\u4e00\u5757\u5185\u5b58\uff0c\u8fd9\u5757\u5185\u5b58\u5206\u4e3a\u8bfb\u7f13\u51b2\u533a\u548c\u5199\u7f13\u51b2\u533a\u3002\u4ece\u800c\u5b9e\u73b0\u5168\u53cc\u5de5\u901a\u4fe1\uff0c\u800cUnix\u57df\u7684\u6587\u4ef6\u8def\u5f84\uff0c\u53ea\u4e0d\u8fc7\u662f\u4e3a\u4e86\u8ba9\u5ba2\u6237\u7aef\u8fdb\u7a0b\u53ef\u4ee5\u627e\u5230\u670d\u52a1\u7aef\u8fdb\u7a0b\uff0c\u540e\u7eed\u5c31\u53ef\u4ee5\u4e92\u76f8\u5f80\u5bf9\u65b9\u7ef4\u62a4\u7684\u5185\u5b58\u91cc\u5199\u6570\u636e\uff0c\u4ece\u800c\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002</p>"},{"location":"chapter09-Unix%E5%9F%9F/#91-unixlibuv","title":"9.1 Unix\u57df\u5728Libuv\u4e2d\u7684\u4f7f\u7528","text":"<p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0b\u5728Libuv\u4e2d\u5173\u4e8eUnix\u57df\u7684\u5b9e\u73b0\u548c\u4f7f\u7528\u3002</p>"},{"location":"chapter09-Unix%E5%9F%9F/#911","title":"9.1.1 \u521d\u59cb\u5316","text":"<p>Unix\u57df\u4f7f\u7528uv_pipe_t\u7ed3\u6784\u4f53\u8868\u793a\uff0c\u4f7f\u7528\u4e4b\u524d\u9996\u5148\u9700\u8981\u521d\u59cb\u5316uv_pipe_t\u3002\u4e0b\u9762\u770b\u4e00\u4e0b\u5b83\u7684\u5b9e\u73b0\u903b\u8f91\u3002</p> <pre><code>    int uv_pipe_init(uv_loop_t* loop, uv_pipe_t* handle, int ipc) { \n      uv__stream_init(loop, (uv_stream_t*)handle, UV_NAMED_PIPE);  \n      handle-&gt;shutdown_req = NULL;  \n      handle-&gt;connect_req = NULL;  \n      handle-&gt;pipe_fname = NULL;  \n      handle-&gt;ipc = ipc;  \n      return 0;  \n    }  \n</code></pre> <p>uv_pipe_init\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u521d\u59cb\u5316uv_pipe_t\u7ed3\u6784\u4f53\u7684\u4e00\u4e9b\u5b57\u6bb5\u3002uv_pipe_t\u7ee7\u627f\u4e8estream\uff0cuv__stream_init\u5c31\u662f\u521d\u59cb\u5316stream\uff08\u7236\u7c7b\uff09\u7684\u5b57\u6bb5\u3002uv_pipe_t\u4e2d\u6709\u4e00\u4e2a\u5b57\u6bb5ipc\uff0c\u8be5\u5b57\u6bb5\u6807\u8bb0\u4e86\u662f\u5426\u5141\u8bb8\u5728\u8be5Unix\u57df\u901a\u4fe1\u4e2d\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002</p>"},{"location":"chapter09-Unix%E5%9F%9F/#912-unix","title":"9.1.2 \u7ed1\u5b9aUnix\u57df\u8def\u5f84","text":"<p>\u5f00\u5934\u8bf4\u8fc7\uff0cUnix\u57df\u7684\u5b9e\u73b0\u7c7b\u4f3cTCP\u7684\u5b9e\u73b0\u3002\u9075\u5faa\u7f51\u7edcsocket\u7f16\u7a0b\u90a3\u4e00\u5957\u6d41\u7a0b\u3002\u670d\u52a1\u7aef\u4f7f\u7528bind\uff0clisten\u7b49\u51fd\u6570\u542f\u52a8\u670d\u52a1\u3002</p> <pre><code>    // name\u662funix\u8def\u5f84\u540d\u79f0  \n    int uv_pipe_bind(uv_pipe_t* handle, const char* name) {  \n      struct sockaddr_un saddr;  \n      const char* pipe_fname;  \n      int sockfd;  \n      int err;  \n      pipe_fname = NULL; \n      pipe_fname = uv__strdup(name);  \n      name = NULL;  \n      // \u6d41\u5f0fUnix\u57df\u5957\u63a5\u5b57  \n      sockfd = uv__socket(AF_UNIX, SOCK_STREAM, 0);  \n      memset(&amp;saddr, 0, sizeof saddr);  \n      strncpy(saddr.sun_path, pipe_fname, sizeof(saddr.sun_path) - 1);\n      saddr.sun_path[sizeof(saddr.sun_path) - 1] = '\\0';  \n      saddr.sun_family = AF_UNIX;  \n      // \u7ed1\u5b9a\u5230\u8def\u5f84\uff0cTCP\u662f\u7ed1\u5b9a\u5230IP\u548c\u7aef\u53e3  \n      if (bind(sockfd, (struct sockaddr*)&amp;saddr, sizeof saddr)) { \n       // ...  \n      }  \n\n      // \u8bbe\u7f6e\u7ed1\u5b9a\u6210\u529f\u6807\u8bb0  \n      handle-&gt;flags |= UV_HANDLE_BOUND;\n        // Unix\u57df\u7684\u8def\u5f84  \n      handle-&gt;pipe_fname = pipe_fname;   \n      // \u4fdd\u5b58socket\u5bf9\u5e94\u7684fd  \n      handle-&gt;io_watcher.fd = sockfd;  \n      return 0;  \n    }  \n</code></pre> <p>uv_pipe_bind\u51fd\u6570\u9996\u5148\u7533\u8bf7\u4e00\u4e2asocket\uff0c\u7136\u540e\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684bind\u51fd\u6570\u628aUnix\u57df\u8def\u5f84\u4fdd\u5b58\u5230socket\u4e2d\u3002\u6700\u540e\u6807\u8bb0\u5df2\u7ecf\u7ed1\u5b9a\u6807\u8bb0\uff0c\u5e76\u4e14\u4fdd\u5b58Unix\u57df\u7684\u8def\u5f84\u548csocket\u5bf9\u5e94\u7684fd\u5230handle\u4e2d\uff0c\u540e\u7eed\u9700\u8981\u4f7f\u7528\u3002\u6211\u4eec\u770b\u5230Node.js\u4e2dUnix\u57df\u7684\u7c7b\u578b\u662fSOCK_STREAM\u3002Unix\u57df\u652f\u6301\u4e24\u79cd\u6570\u636e\u6a21\u5f0f\u3002 1   \u6d41\u5f0f\uff08 SOCK_STREAM\uff09\uff0c\u7c7b\u4f3cTCP\uff0c\u6570\u636e\u4e3a\u5b57\u8282\u6d41\uff0c\u9700\u8981\u5e94\u7528\u5c42\u5904\u7406\u7c98\u5305\u95ee\u9898\u3002 2   \u6570\u636e\u62a5\u6a21\u5f0f\uff08 SOCK_DGRAM \uff09\uff0c\u7c7b\u4f3cUDP\uff0c\u4e0d\u9700\u8981\u5904\u7406\u7c98\u5305\u95ee\u9898\u3002 \u901a\u8fc7Unix\u57df\u867d\u7136\u53ef\u4ee5\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1\uff0c\u4f46\u662f\u6211\u4eec\u62ff\u5230\u7684\u6570\u636e\u53ef\u80fd\u662f\"\u4e71\u7684\"\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5ba2\u6237\u7aef\u7ed9\u670d\u52a1\u5668\u53d1\u90011\u4e2a\u5b57\u8282\uff0c\u7136\u540e\u670d\u52a1\u5668\u5904\u7406\uff0c\u5982\u679c\u662f\u57fa\u4e8e\u8fd9\u79cd\u573a\u666f\uff0c\u90a3\u4e48\u6570\u636e\u5c31\u4e0d\u4f1a\u662f\u4e71\u7684\u3002\u56e0\u4e3a\u6bcf\u6b21\u5c31\u662f\u4e00\u4e2a\u9700\u8981\u5904\u7406\u7684\u6570\u636e\u5355\u4f4d\u3002\u4f46\u662f\u5982\u679c\u5ba2\u6237\u7aef\u7ed9\u670d\u52a1\u5668\u53d1\u90011\u4e2a\u5b57\u8282\uff0c\u670d\u52a1\u5668\u8fd8\u6ca1\u6765\u5f97\u53ca\u5904\u7406\uff0c\u5ba2\u6237\u7aef\u53c8\u53d1\u9001\u4e86\u4e00\u4e2a\u5b57\u8282\uff0c\u90a3\u4e48\u8fd9\u65f6\u5019\u670d\u52a1\u5668\u518d\u5904\u7406\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u6709\u95ee\u9898\u3002\u56e0\u4e3a\u4e24\u4e2a\u5b57\u8282\u6df7\u4e00\u8d77\u4e86\u3002\u5c31\u597d\u6bd4\u5728\u4e00\u4e2aTCP\u8fde\u63a5\u4e0a\u5148\u540e\u53d1\u9001\u4e24\u4e2aHTTP\u8bf7\u6c42\u4e00\u6837\uff0c\u5982\u679c\u670d\u52a1\u5668\u6ca1\u6709\u529e\u6cd5\u5224\u65ad\u4e24\u4e2a\u8bf7\u6c42\u7684\u6570\u636e\u8fb9\u754c\uff0c\u90a3\u4e48\u5904\u7406\u5c31\u4f1a\u6709\u95ee\u9898\u3002\u6240\u4ee5\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u5e94\u7528\u5c42\u534f\u8bae\uff0c\u5e76\u4e14\u5b9e\u73b0\u5c01\u5305\u89e3\u5305\u7684\u903b\u8f91\uff0c\u624d\u80fd\u771f\u6b63\u5b8c\u6210\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002</p>"},{"location":"chapter09-Unix%E5%9F%9F/#913","title":"9.1.3 \u542f\u52a8\u670d\u52a1","text":"<p>\u7ed1\u5b9a\u4e86\u8def\u5f84\u540e\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528listen\u51fd\u6570\u4f7f\u5f97socket\u5904\u4e8e\u76d1\u542c\u72b6\u6001\u3002</p> <pre><code>    int uv_pipe_listen(uv_pipe_t* handle, int backlog, uv_connection_cb cb) {  \n      // uv__stream_fd(handle)\u5f97\u5230bind\u51fd\u6570\u4e2d\u83b7\u53d6\u7684socket  \n      if (listen(uv__stream_fd(handle), backlog))  \n        return UV__ERR(errno);  \n      // \u4fdd\u5b58\u56de\u8c03\uff0c\u6709\u8fdb\u7a0b\u8c03\u7528connect\u7684\u65f6\u5019\u65f6\u89e6\u53d1\uff0c\u7531uv__server_io\u51fd\u6570\u89e6\u53d1  \n      handle-&gt;connection_cb = cb;  \n      // IO\u89c2\u5bdf\u8005\u7684\u56de\u8c03  \n      handle-&gt;io_watcher.cb = uv__server_io;  \n      // \u6ce8\u518cIO\u89c2\u5bdf\u8005\u5230Libuv\uff0c\u7b49\u5f85\u8fde\u63a5\uff0c\u5373\u8bfb\u4e8b\u4ef6\u5230\u6765  \n      uv__io_start(handle-&gt;loop, &amp;handle-&gt;io_watcher, POLLIN);  \n      return 0;  \n    }  \n</code></pre> <p>uv_pipe_listen\u6267\u884c\u64cd\u4f5c\u7cfb\u7edf\u7684listen\u51fd\u6570\u4f7f\u5f97socket\u6210\u4e3a\u76d1\u542c\u578b\u7684\u5957\u63a5\u5b57\u3002\u7136\u540e\u628asocket\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u548c\u56de\u8c03\u5c01\u88c5\u6210IO\u89c2\u5bdf\u8005\u3002\u6ce8\u518c\u5230Libuv\u4e2d\u3002\u7b49\u5230\u6709\u8bfb\u4e8b\u4ef6\u5230\u6765\uff08\u6709\u8fde\u63a5\u5230\u6765\uff09\u3002\u5c31\u4f1a\u6267\u884cuv__server_io\u51fd\u6570\uff0c\u6458\u4e0b\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef\u8282\u70b9\u3002\u6700\u540e\u6267\u884cconnection_cb\u56de\u8c03\u3002</p>"},{"location":"chapter09-Unix%E5%9F%9F/#914","title":"9.1.4 \u53d1\u8d77\u8fde\u63a5","text":"<p>\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5df2\u7ecf\u6210\u529f\u542f\u52a8\u4e86\u4e00\u4e2aUnix\u57df\u670d\u52a1\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u770b\u5ba2\u6237\u7aef\u7684\u903b\u8f91\u3002</p> <pre><code>    void uv_pipe_connect(uv_connect_t* req, \n                          uv_pipe_t* handle, \n                          const char* name, \n                          uv_connect_cb cb) {  \n      struct sockaddr_un saddr;  \n      int new_sock;  \n      int err;  \n      int r;  \n      // \u5224\u65ad\u662f\u5426\u5df2\u7ecf\u6709socket\u4e86\uff0c\u6ca1\u6709\u7684\u8bdd\u9700\u8981\u7533\u8bf7\u4e00\u4e2a\uff0c\u89c1\u4e0b\u9762  \n      new_sock = (uv__stream_fd(handle) == -1);  \n      // \u5ba2\u6237\u7aef\u8fd8\u6ca1\u6709\u5bf9\u5e94\u7684socket fd  \n      if (new_sock) {  \n        handle-&gt;io_watcher.fd= uv__socket(AF_UNIX, \n                                               SOCK_STREAM, \n                                               0);  \n      }  \n      // \u9700\u8981\u8fde\u63a5\u7684\u670d\u52a1\u5668\u4fe1\u606f\u3002\u4e3b\u8981\u662fUnix\u57df\u8def\u5f84\u4fe1\u606f  \n      memset(&amp;saddr, 0, sizeof saddr);  \n      strncpy(saddr.sun_path, name, sizeof(saddr.sun_path) - 1);  \n      saddr.sun_path[sizeof(saddr.sun_path) - 1] = '\\0';  \n      saddr.sun_family = AF_UNIX;  \n      // \u975e\u963b\u585e\u5f0f\u8fde\u63a5\u670d\u52a1\u5668\uff0cUnix\u57df\u8def\u5f84\u662fname  \n      do {  \n        r = connect(uv__stream_fd(handle),\n                          (struct sockaddr*)&amp;saddr, sizeof saddr);  \n      }  \n      while (r == -1 &amp;&amp; errno == EINTR);  \n      // \u5ffd\u7565\u9519\u8bef\u5904\u7406\u903b\u8f91  \n      err = 0;  \n      // \u8bbe\u7f6esocket\u7684\u53ef\u8bfb\u5199\u5c5e\u6027  \n      if (new_sock) {  \n        err = uv__stream_open((uv_stream_t*)handle,  \n                      uv__stream_fd(handle),  \n                     UV_HANDLE_READABLE | UV_HANDLE_WRITABLE);  \n      }  \n      // \u628aIO\u89c2\u5bdf\u8005\u6ce8\u518c\u5230Libuv\uff0c\u7b49\u5230\u8fde\u63a5\u6210\u529f\u6216\u8005\u53ef\u4ee5\u53d1\u9001\u8bf7\u6c42  \n      if (err == 0)  \n        uv__io_start(handle-&gt;loop, \n                         &amp;handle-&gt;io_watcher, \n                         POLLIN | POLLOUT);  \n\n    out:  \n      // \u8bb0\u5f55\u9519\u8bef\u7801\uff0c\u5982\u679c\u6709\u7684\u8bdd  \n      handle-&gt;delayed_error = err;  \n      // \u4fdd\u5b58\u8c03\u7528\u8005\u4fe1\u606f  \n      handle-&gt;connect_req = req; \n      uv__req_init(handle-&gt;loop, req, UV_CONNECT);  \n      req-&gt;handle = (uv_stream_t*)handle;  \n      req-&gt;cb = cb;  \n      QUEUE_INIT(&amp;req-&gt;queue);  \n      /*\n         \u5982\u679c\u8fde\u63a5\u51fa\u9519\uff0c\u5728pending\u9636\u6bb5\u4f1a\u6267\u884cuv__stream_io\uff0c\n          \u4ece\u800c\u6267\u884creq\u5bf9\u5e94\u7684\u56de\u8c03\u3002\u9519\u8bef\u7801\u662fdelayed_error \n        */ \n      if (err)  \n        uv__io_feed(handle-&gt;loop, &amp;handle-&gt;io_watcher);  \n    }  \n</code></pre> <p>uv_pipe_connect\u51fd\u6570\u9996\u5148\u4ee5\u975e\u963b\u585e\u7684\u65b9\u5f0f\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684connect\u51fd\u6570\uff0c\u8c03\u7528connect\u540e\u64cd\u4f5c\u7cfb\u7edf\u628a\u5ba2\u6237\u7aef\u5bf9\u5e94\u7684socket\u76f4\u63a5\u63d2\u5165\u670d\u52a1\u5668socket\u7684\u5f85\u5904\u7406socket\u961f\u5217\u4e2d\uff0c\u7b49\u5f85\u670d\u52a1\u5668\u5904\u7406\u3002\u8fd9\u65f6\u5019socket\u662f\u5904\u4e8e\u8fde\u63a5\u4e2d\u7684\u72b6\u6001\uff0c\u5f53\u670d\u52a1\u5668\u8c03\u7528accept\u51fd\u6570\u5904\u7406\u8fde\u63a5\u65f6\uff0c\u4f1a\u4fee\u6539\u8fde\u63a5\u72b6\u6001\u4e3a\u5df2\u8fde\u63a5\uff08\u8fd9\u548cTCP\u4e0d\u4e00\u6837\uff0cTCP\u662f\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u540e\u5c31\u4f1a\u4fee\u6539\u4e3a\u8fde\u63a5\u72b6\u6001\uff0c\u800c\u4e0d\u662faccept\u7684\u65f6\u5019\uff09\uff0c\u5e76\u4e14\u4f1a\u89e6\u53d1\u5ba2\u6237\u7aefsocket\u7684\u53ef\u5199\u4e8b\u4ef6\u3002\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u5c31\u4f1a\u6267\u884c\u76f8\u5e94\u7684\u56de\u8c03\uff08uv__stream_io\uff09\uff0c\u4ece\u800c\u6267\u884cC++\u548cJS\u7684\u56de\u8c03\u3002</p>"},{"location":"chapter09-Unix%E5%9F%9F/#915-unix","title":"9.1.5 \u5173\u95edUnix\u57df","text":"<p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7uv_close\u5173\u95ed\u4e00\u4e2aUnix\u57dfhandle\u3002uv_close\u4e2d\u4f1a\u8c03\u7528uv__pipe_close\u3002</p> <pre><code>    void uv__pipe_close(uv_pipe_t* handle) {  \n      // \u5982\u679c\u662fUnix\u57df\u670d\u52a1\u5668\u5219\u9700\u8981\u5220\u9664Unix\u57df\u8def\u5f84\u5e76\u5220\u9664\u6307\u5411\u7684\u5806\u5185\u5b58  \n      if (handle-&gt;pipe_fname) {  \n        unlink(handle-&gt;pipe_fname);  \n        uv__free((void*)handle-&gt;pipe_fname);  \n        handle-&gt;pipe_fname = NULL;  \n      }  \n      // \u5173\u95ed\u6d41\u76f8\u5173\u7684\u5185\u5bb9  \n      uv__stream_close((uv_stream_t*)handle);  \n    }  \n</code></pre> <p>\u5173\u95edUnix\u57dfhandle\u65f6\uff0cLibuv\u4f1a\u81ea\u52a8\u5220\u9664Unix\u57df\u8def\u5f84\u5bf9\u5e94\u7684\u6587\u4ef6\u3002\u4f46\u662f\u5982\u679c\u8fdb\u7a0b\u5f02\u5e38\u9000\u51fa\u65f6\uff0c\u8be5\u6587\u4ef6\u53ef\u80fd\u4e0d\u4f1a\u88ab\u5220\u9664\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u4e0b\u6b21\u76d1\u542c\u7684\u65f6\u5019\u62a5\u9519listen EADDRINUSE\uff0c\u6240\u4ee5\u5b89\u5168\u8d77\u89c1\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fdb\u7a0b\u9000\u51fa\u6216\u8005\u76d1\u542c\u4e4b\u524d\u5224\u65ad\u8be5\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u5b58\u5728\u7684\u8bdd\u5219\u5220\u9664\u3002\u53e6\u5916\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5982\u679c\u4e24\u4e2a\u4e0d\u76f8\u5173\u7684\u8fdb\u7a0b\u4f7f\u7528\u4e86\u540c\u4e00\u4e2a\u6587\u4ef6\u5219\u4f1a\u5bfc\u81f4\u8bef\u5220\uff0c\u6240\u4ee5Unix\u57df\u5bf9\u5e94\u7684\u6587\u4ef6\uff0c\u6211\u4eec\u9700\u8981\u5c0f\u5fc3\u5904\u7406\uff0c\u6700\u597d\u80fd\u4fdd\u8bc1\u552f\u4e00\u6027\u3002</p> <p>Unix\u57df\u5927\u81f4\u7684\u6d41\u7a0b\u548c\u7f51\u7edc\u7f16\u7a0b\u4e00\u6837\u3002\u5206\u4e3a\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u4e24\u9762\u3002Libuv\u5728\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684API\u7684\u57fa\u7840\u4e0a\u3002\u548cLibuv\u7684\u5f02\u6b65\u975e\u963b\u585e\u7ed3\u5408\u3002\u5728Libuv\u4e2d\u4e3a\u8fdb\u7a0b\u95f4\u63d0\u4f9b\u4e86\u4e00\u79cd\u901a\u4fe1\u65b9\u5f0f\u3002\u4e0b\u9762\u770b\u4e00\u4e0b\u5728Node.js\u4e2d\u662f\u5982\u4f55\u4f7f\u7528Libuv\u63d0\u4f9b\u7684\u529f\u80fd\u7684\u3002</p>"},{"location":"chapter09-Unix%E5%9F%9F/#92-unixnodejs","title":"9.2 Unix\u57df\u5728Node.js\u4e2d\u7684\u4f7f\u7528","text":""},{"location":"chapter09-Unix%E5%9F%9F/#921-unix","title":"9.2.1 Unix\u57df\u670d\u52a1\u5668","text":"<p>\u5728Node.js\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u4e00\u4e2aUnix\u57df\u670d\u52a1\u5668</p> <pre><code>    const server = net.createServer((client) =&gt; {  \n      // \u5904\u7406client  \n    });  \n    server.listen('/tmp/test.sock', () =&gt; {  \n      console.log(`bind uinx domain success`);  \n    });  \n</code></pre> <p>\u6211\u4eec\u4ecelisten\u51fd\u6570\u5f00\u59cb\u5206\u6790\u8fd9\u4e2a\u8fc7\u7a0b\u3002</p> <pre><code>    Server.prototype.listen = function(...args) {  \n      const normalized = normalizeArgs(args);  \n      let options = normalized[0];  \n      const cb = normalized[1];  \n      // \u8c03\u7528\u5e95\u5c42\u7684listen\u51fd\u6570\u6210\u529f\u540e\u6267\u884c\u7684\u56de\u8c03  \n      if (cb !== null) {  \n        this.once('listening', cb);  \n      }  \n      if (options.path &amp;&amp; isPipeName(options.path)) {  \n        const pipeName = this._pipeName = options.path;  \n        backlog = options.backlog || backlogFromArgs;  \n        listenIncluster(this, pipeName, -1, -1, backlog, undefined, \n                          options.exclusive);  \n        /*\n          Unix\u57df\u4f7f\u7528\u6587\u4ef6\u5b9e\u73b0\u7684\uff0c\u5ba2\u6237\u7aef\u9700\u8981\u8bbf\u95ee\u8be5\u6587\u4ef6\u7684\u6743\u9650\u624d\u80fd\u901a\u4fe1\uff0c\n          \u8fd9\u91cc\u505a\u6743\u9650\u63a7\u5236 \n         */ \n        let mode = 0;  \n        if (options.readableAll === true)  \n          mode |= PipeConstants.UV_READABLE;  \n        if (options.writableAll === true)  \n          mode |= PipeConstants.UV_WRITABLE;  \n        if (mode !== 0) {  \n          // \u4fee\u6539\u6587\u4ef6\u7684\u8bbf\u95ee\u5c5e\u6027  \n          const err = this._handle.fchmod(mode);  \n          if (err) {  \n            this._handle.close();  \n            this._handle = null;  \n            throw errnoException(err, 'uv_pipe_chmod');  \n          }  \n        }  \n        return this;  \n      }  \n    }  \n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u6700\u4e3b\u8981\u7684\u662flistenIncluster\u51fd\u6570\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u8be5\u51fd\u6570\u7684\u903b\u8f91\u3002</p> <pre><code>    function listenIncluster(server, address, port, addressType,  \n                             backlog, fd, exclusive, flags) {  \n      exclusive = !!exclusive; \n      if (cluster === undefined) cluster = require('cluster');  \n      if (cluster.isMaster || exclusive) {  \n        server._listen2(address, port, addressType, backlog, fd, flags);  \n        return;  \n      }  \n    }  \n</code></pre> <p>\u76f4\u63a5\u8c03\u7528_listen2\uff08isMaster\u53ea\u6709\u5728cluster.fork\u521b\u5efa\u7684\u8fdb\u7a0b\u4e2d\u624d\u662ffalse\uff0c\u5176\u4f59\u60c5\u51b5\u90fd\u662ftrue\uff0c\u5305\u62ecchild_process\u6a21\u5757\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\uff09\u3002\u6211\u4eec\u7ee7\u7eed\u770blisten\u51fd\u6570\u3002</p> <p><pre><code>    Server.prototype._listen2 = setupListenHandle;\n\n    function setupListenHandle(address, \n                                  port, \n                                  addressType, \n                                  backlog, \n                                  fd, \n                                  flags) {  \n      this._handle = createServerHandle(address, \n                                           port, \n                                           addressType, \n                                           fd, \n                                           flags);  \n      // \u6709\u5b8c\u6210\u8fde\u63a5\u5b8c\u6210\u65f6\u89e6\u53d1  \n      this._handle.onconnection = onconnection;  \n      const err = this._handle.listen(backlog || 511);  \n      if (err) {  \n        // \u89e6\u53d1error\u4e8b\u4ef6\n      }  \n      // \u4e0b\u4e00\u4e2atick\u89e6\u53d1listen\u56de\u8c03  \n      defaultTriggerAsyncIdScope(this[async_id_symbol],  \n                                 process.nextTick,  \n                                 emitListeningNT,  \n                                 this);  \n    }\n</code></pre> \u9996\u5148\u8c03\u7528createServerHandle\u521b\u5efa\u4e00\u4e2ahandle\uff0c\u7136\u540e\u6267\u884clisten\u51fd\u6570\u3002\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0bcreateServerHandle\u3002 <pre><code>    function createServerHandle(address, \n                                   port, \n                                   addressType, \n                                   fd, \n                                   flags) {  \n      let handle = new Pipe(PipeConstants.SERVER);  \n      handle.bind(address, port);  \n      return handle;  \n    }  \n</code></pre></p> <p>\u521b\u5efa\u4e86\u4e00\u4e2aPipe\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u5b83\u7684bind\u548clisten\u51fd\u6570\uff0c\u6211\u4eec\u770bnew Pipe\u7684\u903b\u8f91\uff0c\u4ecepipe_wrap.cc\u7684\u5bfc\u51fa\u903b\u8f91\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u8fd9\u65f6\u5019\u4f1a\u65b0\u5efa\u4e00\u4e2aC++\u5bf9\u8c61\uff0c\u7136\u540e\u6267\u884cNew\u51fd\u6570\uff0c\u5e76\u4e14\u628a\u65b0\u5efa\u7684C++\u5bf9\u8c61\u7b49\u4fe1\u606f\u4f5c\u4e3a\u5165\u53c2\u3002</p> <pre><code>    void PipeWrap::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n      // \u7c7b\u578b  \n      int type_value = args[0].As&lt;Int32&gt;()-&gt;Value();  \n      PipeWrap::SocketType type = static_cast&lt;PipeWrap::SocketType&gt;(type_value);  \n      // \u662f\u5426\u662f\u7528\u4e8eIPC\n      bool ipc;  \n      ProviderType provider;  \n      switch (type) {  \n        case SOCKET:  \n          provider = PROVIDER_PIPEWRAP;  \n          ipc = false;  \n          break;  \n        case SERVER:  \n          provider = PROVIDER_PIPESERVERWRAP;  \n          ipc = false;  \n          break;  \n        case IPC:  \n          provider = PROVIDER_PIPEWRAP;  \n          ipc = true;  \n          break;  \n        default:  \n          UNREACHABLE();  \n      }  \n\n      new PipeWrap(env, args.This(), provider, ipc);  \n    }  \n</code></pre> <p>New\u51fd\u6570\u5904\u7406\u4e86\u53c2\u6570\uff0c\u7136\u540e\u6267\u884c\u4e86new PipeWrap\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u3002 <pre><code>    PipeWrap::PipeWrap(Environment* env,  \n                       Local&lt;Object&gt; object,  \n                       ProviderType provider,  \n                       bool ipc)  \n        : ConnectionWrap(env, object, provider) {  \n      int r = uv_pipe_init(env-&gt;event_loop(), &amp;handle_, ipc);  \n    }\n</code></pre> new Pipe\u6267\u884c\u5b8c\u540e\uff0c\u5c31\u4f1a\u901a\u8fc7\u8be5C++\u5bf9\u8c61\u8c03\u7528Libuv\u7684bind\u548clisten\u5b8c\u6210\u670d\u52a1\u5668\u7684\u542f\u52a8\uff0c\u5c31\u4e0d\u518d\u5c55\u5f00\u5206\u6790\u3002</p>"},{"location":"chapter09-Unix%E5%9F%9F/#922-unix","title":"9.2.2 Unix\u57df\u5ba2\u6237\u7aef","text":"<p>\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0bUnix\u57df\u4f5c\u4e3a\u5ba2\u6237\u7aef\u4f7f\u7528\u65f6\u7684\u8fc7\u7a0b\u3002</p> <pre><code>    Socket.prototype.connect = function(...args) {  \n      const path = options.path;  \n      // Unix\u57df\u8def\u5f84  \n      var pipe = !!path;  \n      if (!this._handle) {  \n        // \u521b\u5efa\u4e00\u4e2aC++\u5c42handle\uff0c\u5373pipe_wrap.cc\u5bfc\u51fa\u7684Pipe\u7c7b  \n        this._handle = pipe ?  \n          new Pipe(PipeConstants.SOCKET) :  \n          new TCP(TCPConstants.SOCKET);  \n        // \u6302\u8f7donread\u65b9\u6cd5\u5230this\u4e2d  \n        initSocketHandle(this);  \n      }  \n\n      if (cb !== null) {  \n        this.once('connect', cb);  \n      }  \n      // \u6267\u884cinternalConnect  \n      defaultTriggerAsyncIdScope(  \n          this[async_id_symbol], internalConnect, this, path  \n      );  \n      return this;  \n    };  \n</code></pre> <p>\u9996\u5148\u65b0\u5efa\u4e00\u4e2ahandle\uff0c\u503c\u662fnew Pipe\u3002\u63a5\u7740\u6267\u884c\u4e86internalConnect\uff0cinternalConnect\u51fd\u6570\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b</p> <p><pre><code>    const req = new PipeConnectWrap();  \n    // address\u4e3aUnix\u57df\u8def\u5f84\n    req.address = address;  \n    req.oncomplete = afterConnect;  \n    // \u8c03\u7528C++\u5c42connect\n    err = self._handle.connect(req, address, afterConnect);  \n</code></pre> \u6211\u4eec\u770bC++\u5c42\u7684connect\u51fd\u6570\uff0c <pre><code>    void PipeWrap::Connect(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n\n      PipeWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, args.Holder());  \n      // PipeConnectWrap\u5bf9\u8c61  \n      Local&lt;Object&gt; req_wrap_obj = args[0].As&lt;Object&gt;();  \n      // Unix\u57df\u8def\u5f84  \n      node::Utf8Value name(env-&gt;isolate(), args[1]);  \n      /*\n          \u65b0\u5efa\u4e00\u4e2aConnectWrap\u5bf9\u8c61\uff0cConnectWrap\u662f\u5bf9handle\u8fdb\u884c\u4e00\u6b21\u8fde\u63a5\u8bf7\u6c42\n           \u7684\u5c01\u88c5\uff0c\u5185\u90e8\u7ef4\u62a4\u4e00\u4e2auv_connect_t\u7ed3\u6784\u4f53\uff0c req_wrap_obj\u7684\u4e00\u4e2a\u5b57\u6bb5\n           \u6307\u5411ConnectWrap\u5bf9\u8c61\uff0c\u7528\u4e8e\u4fdd\u5b58\u5bf9\u5e94\u7684\u8bf7\u6c42\u4e0a\u4e0b\u6587  \n        */\n      ConnectWrap* req_wrap =  \n          new ConnectWrap(env, \n                                 req_wrap_obj, \n                                 AsyncWrap::PROVIDER_PIPECONNECTWRAP);  \n      // \u8c03\u7528Libuv\u7684connect\u51fd\u6570  \n      uv_pipe_connect(req_wrap-&gt;req(),  \n                      &amp;wrap-&gt;handle_,  \n                      *name,  \n                      AfterConnect);  \n        // req_wrap-&gt;req_.data = req_wrap;\u5173\u8054\u8d77\u6765\n      req_wrap-&gt;Dispatched();  \n      // uv_pipe_connect() doesn't return errors.  \n      args.GetReturnValue().Set(0);  \n    }  \n</code></pre></p> <p>uv_pipe_connect\u51fd\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fuv_connect_t\u7ed3\u6784\u4f53\uff08request\uff09\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4e00\u4e2auv_pipe_t\u7ed3\u6784\u4f53\uff08handle\uff09\uff0chandle\u662f\u5bf9Unix\u57df\u5ba2\u6237\u7aef\u7684\u5c01\u88c5\uff0crequest\u662f\u8bf7\u6c42\u7684\u5c01\u88c5\uff0c\u5b83\u8868\u793a\u57fa\u4e8ehandle\u53d1\u8d77\u4e00\u6b21\u8fde\u63a5\u8bf7\u6c42\u3002\u8fde\u63a5\u6210\u529f\u540e\u4f1a\u6267\u884cAfterConnect\u3002\u7531\u524d\u9762\u5206\u6790\u6211\u4eec\u77e5\u9053\uff0c\u5f53\u8fde\u63a5\u6210\u529f\u65f6\uff0c\u9996\u5148\u4f1a\u6267\u884c\u56de\u8c03Libuv\u7684uv__stream_io\uff0c\u7136\u540e\u6267\u884cC++\u5c42\u7684AfterConnect\u3002</p> <pre><code>    // \u4e3b\u52a8\u53d1\u8d77\u8fde\u63a5\uff0c\u6210\u529f/\u5931\u8d25\u540e\u7684\u56de\u8c03  \n    template &lt;typename WrapType,typename UVType&gt; = PipeWrap, uv_pipe_t\n    void ConnectionWrap&lt;WrapType, UVType&gt;::AfterConnect(uv_connect_t* req        \n                                                          ,int status) { \n      // \u5728Connect\u51fd\u6570\u91cc\u5173\u8054\u8d77\u6765\u7684  \n      ConnectWrap* req_wrap = static_cast&lt;ConnectWrap*&gt;(req-&gt;data);  \n      // \u5728uv_pipe_connect\u4e2d\u5b8c\u6210\u5173\u8054\u7684  \n      WrapType* wrap = static_cast&lt;WrapType*&gt;(req-&gt;handle-&gt;data);  \n      Environment* env = wrap-&gt;env();  \n\n      HandleScope handle_scope(env-&gt;isolate());  \n      Context::Scope context_scope(env-&gt;context());  \n\n      bool readable, writable;  \n      // \u662f\u5426\u8fde\u63a5\u6210\u529f  \n      if (status) {  \n        readable = writable = 0;  \n      } else {  \n        readable = uv_is_readable(req-&gt;handle) != 0;  \n        writable = uv_is_writable(req-&gt;handle) != 0;  \n      }  \n\n      Local&lt;Value&gt; argv[5] = {  \n        Integer::New(env-&gt;isolate(), status),  \n        wrap-&gt;object(),  \n        req_wrap-&gt;object(),  \n        Boolean::New(env-&gt;isolate(), readable),  \n        Boolean::New(env-&gt;isolate(), writable)  \n      };  \n      // \u6267\u884cJS\u5c42\u7684oncomplete\u56de\u8c03  \n      req_wrap-&gt;MakeCallback(env-&gt;oncomplete_string(), \n                               arraysize(argv), \n                               argv);  \n\n      delete req_wrap;  \n    }  \n</code></pre> <p>\u6211\u4eec\u518d\u56de\u5230JS\u5c42\u7684afterConnect</p> <pre><code>    function afterConnect(status, handle, req, readable, writable) { \n      var self = handle.owner;  \n      handle = self._handle;  \n      if (status === 0) {  \n        self.readable = readable;  \n        self.writable = writable;  \n        self._unrefTimer();  \n        // \u89e6\u53d1connect\u4e8b\u4ef6  \n        self.emit('connect');  \n        // \u53ef\u8bfb\u5e76\u4e14\u6ca1\u6709\u5904\u4e8e\u6682\u505c\u6a21\u5f0f\uff0c\u5219\u6ce8\u518c\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6  \n        if (readable &amp;&amp; !self.isPaused())  \n          self.read(0);  \n      }  \n    }  \n</code></pre> <p>\u81f3\u6b64\uff0c\u4f5c\u4e3a\u5ba2\u6237\u7aef\u5bf9\u670d\u52a1\u5668\u7684\u8fde\u63a5\u5c31\u5b8c\u6210\u4e86\u3002\u540e\u7eed\u5c31\u53ef\u4ee5\u8fdb\u884c\u901a\u4fe1\u3002</p>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/","title":"10-\u5b9a\u65f6\u5668","text":"<p>Node.js V14\u5bf9\u5b9a\u65f6\u5668\u6a21\u5757\u8fdb\u884c\u4e86\u91cd\u6784\uff0c\u4e4b\u524d\u7248\u672c\u7684\u5b9e\u73b0\u662f\u7528\u4e00\u4e2amap\uff0c\u4ee5\u8d85\u65f6\u65f6\u95f4\u4e3a\u952e\uff0c\u6bcf\u4e2a\u952e\u5bf9\u5e94\u4e00\u4e2a\u961f\u5217\u3002\u5373\u6709\u540c\u6837\u8d85\u65f6\u65f6\u95f4\u7684\u8282\u70b9\u5728\u540c\u4e00\u4e2a\u961f\u5217\u3002\u6bcf\u4e2a\u961f\u5217\u5bf9\u5e94\u4e00\u4e2a\u5e95\u5c42\u7684\u4e00\u4e2a\u8282\u70b9\uff08\u4e8c\u53c9\u5806\u91cc\u7684\u8282\u70b9\uff09\uff0cNode.js\u5728\u4e8b\u4ef6\u5faa\u73af\u7684timer\u9636\u6bb5\u4f1a\u4ece\u4e8c\u53c9\u5806\u91cc\u627e\u51fa\u8d85\u65f6\u7684\u8282\u70b9\uff0c\u7136\u540e\u6267\u884c\u56de\u8c03\uff0c\u56de\u8c03\u91cc\u4f1a\u904d\u5386\u961f\u5217\uff0c\u5224\u65ad\u54ea\u4e2a\u8282\u70b9\u8d85\u65f6\u4e86\u300214\u91cd\u6784\u540e\uff0c\u53ea\u4f7f\u7528\u4e86\u4e00\u4e2a\u4e8c\u53c9\u5806\u7684\u8282\u70b9\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5b83\u7684\u5b9e\u73b0\uff0c\u9996\u5148\u770b\u4e0b\u5b9a\u65f6\u5668\u6a21\u5757\u7684\u6574\u4f53\u5173\u7cfb\u56fe\uff0c\u5982\u56fe10-1\u6240\u793a\u3002  \u56fe10-1</p> <p>\u4e0b\u9762\u6211\u4eec\u5148\u770b\u4e00\u4e0b\u5b9a\u65f6\u5668\u6a21\u5757\u7684\u51e0\u4e2a\u91cd\u8981\u7684\u6570\u636e\u7ed3\u6784\u3002</p>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#101-libuv","title":"10.1 Libuv\u7684\u5b9e\u73b0","text":"<p>Libuv\u4e2d\u4f7f\u7528\u4e8c\u53c9\u5806\u5b9e\u73b0\u4e86\u5b9a\u65f6\u5668\u3002\u6700\u5feb\u5230\u671f\u7684\u8282\u70b9\u662f\u6839\u8282\u70b9\u3002</p>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#1011-libuv","title":"10.1.1 Libuv\u4e2d\u7ef4\u62a4\u5b9a\u65f6\u5668\u7684\u6570\u636e\u7ed3\u6784","text":"<pre><code>    // \u53d6\u51faloop\u4e2d\u7684\u8ba1\u65f6\u5668\u5806\u6307\u9488  \n    static struct heap *timer_heap(const uv_loop_t* loop) {  \n      return (struct heap*) &amp;loop-&gt;timer_heap;   \n    }  \n</code></pre>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#1012","title":"10.1.2 \u6bd4\u8f83\u51fd\u6570","text":"<p>\u56e0\u4e3aLibuv\u4f7f\u7528\u4e8c\u53c9\u5806\u5b9e\u73b0\u5b9a\u65f6\u5668\uff0c\u8fd9\u5c31\u6d89\u53ca\u5230\u8282\u70b9\u63d2\u5165\u5806\u7684\u65f6\u5019\u7684\u89c4\u5219\u3002</p> <pre><code>    static int timer_less_than(const struct heap_node* ha,  \n                   const struct heap_node* hb) {  \n      const uv_timer_t* a;  \n      const uv_timer_t* b;  \n      // \u901a\u8fc7\u7ed3\u6784\u4f53\u6210\u5458\u627e\u5230\u7ed3\u6784\u4f53\u9996\u5730\u5740  \n      a = container_of(ha, uv_timer_t, heap_node);  \n      b = container_of(hb, uv_timer_t, heap_node);  \n      // \u6bd4\u8f83\u4e24\u4e2a\u7ed3\u6784\u4f53\u4e2d\u7684\u8d85\u65f6\u65f6\u95f4  \n      if (a-&gt;timeout &lt; b-&gt;timeout)  \n        return 1;  \n      if (b-&gt;timeout &lt; a-&gt;timeout)  \n        return 0;  \n      // \u8d85\u65f6\u65f6\u95f4\u4e00\u6837\u7684\u8bdd\uff0c\u770b\u8c01\u5148\u521b\u5efa  \n      if (a-&gt;start_id &lt; b-&gt;start_id)  \n        return 1;  \n      if (b-&gt;start_id &lt; a-&gt;start_id)  \n        return 0;  \n\n      return 0; \n    } \n</code></pre>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#1013","title":"10.1.3 \u521d\u59cb\u5316\u5b9a\u65f6\u5668\u7ed3\u6784\u4f53","text":"<p>\u5982\u679c\u9700\u8981\u4f7f\u7528\u5b9a\u65f6\u5668\uff0c\u9996\u5148\u8981\u5bf9\u5b9a\u65f6\u5668\u7684\u7ed3\u6784\u4f53\u8fdb\u884c\u521d\u59cb\u5316\u3002</p> <pre><code>    // \u521d\u59cb\u5316uv_timer_t\u7ed3\u6784\u4f53  \n    int uv_timer_init(uv_loop_t* loop, uv_timer_t* handle) {  \n      uv__handle_init(loop, (uv_handle_t*)handle, UV_TIMER);  \n      handle-&gt;timer_cb = NULL;  \n      handle-&gt;repeat = 0;  \n      return 0;  \n    }\n</code></pre>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#1014","title":"10.1.4 \u63d2\u5165\u4e00\u4e2a\u5b9a\u65f6\u5668","text":"<pre><code>    // \u542f\u52a8\u4e00\u4e2a\u8ba1\u65f6\u5668  \n    int uv_timer_start(uv_timer_t* handle,  \n                       uv_timer_cb cb,  \n                       uint64_t timeout,  \n                       uint64_t repeat) {  \n      uint64_t clamped_timeout;  \n\n      if (cb == NULL)  \n        return UV_EINVAL;  \n      // \u91cd\u65b0\u6267\u884cstart\u7684\u65f6\u5019\u5148\u628a\u4e4b\u524d\u7684\u505c\u6389  \n      if (uv__is_active(handle))  \n        uv_timer_stop(handle);  \n      // \u8d85\u65f6\u65f6\u95f4\uff0c\u4e3a\u7edd\u5bf9\u503c  \n      clamped_timeout = handle-&gt;loop-&gt;time + timeout;  \n      if (clamped_timeout &lt; timeout)  \n        clamped_timeout = (uint64_t) -1;  \n      // \u521d\u59cb\u5316\u56de\u8c03\uff0c\u8d85\u65f6\u65f6\u95f4\uff0c\u662f\u5426\u91cd\u590d\u8ba1\u65f6\uff0c\u8d4b\u4e88\u4e00\u4e2a\u72ec\u7acb\u65e0\u4e8c\u7684id  \n      handle-&gt;timer_cb = cb;  \n      handle-&gt;timeout = clamped_timeout;  \n      handle-&gt;repeat = repeat;  \n      // \u7528\u4e8e\u8d85\u65f6\u65f6\u95f4\u4e00\u6837\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u5b9a\u65f6\u5668\u5728\u4e8c\u53c9\u5806\u7684\u4f4d\u7f6e\uff0c\u89c1cmp\u51fd\u6570  \n      handle-&gt;start_id = handle-&gt;loop-&gt;timer_counter++;  \n      // \u63d2\u5165\u6700\u5c0f\u5806  \n      heap_insert(timer_heap(handle-&gt;loop),  \n                  (struct heap_node*) &amp;handle-&gt;heap_node, \n                  timer_less_than);  \n      // \u6fc0\u6d3b\u8be5handle  \n      uv__handle_start(handle);  \n\n      return 0;  \n    }\n</code></pre>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#1015","title":"10.1.5 \u505c\u6b62\u4e00\u4e2a\u5b9a\u65f6\u5668","text":"<pre><code>    // \u505c\u6b62\u4e00\u4e2a\u8ba1\u65f6\u5668  \n    int uv_timer_stop(uv_timer_t* handle) {  \n      if (!uv__is_active(handle))  \n        return 0;  \n      // \u4ece\u6700\u5c0f\u5806\u4e2d\u79fb\u9664\u8be5\u8ba1\u65f6\u5668\u8282\u70b9  \n      heap_remove(timer_heap(handle-&gt;loop),  \n                  (struct heap_node*) &amp;handle-&gt;heap_node, \n                  timer_less_than);  \n      // \u6e05\u9664\u6fc0\u6d3b\u72b6\u6001\u548chandle\u7684active\u6570\u51cf\u4e00  \n      uv__handle_stop(handle);  \n\n      return 0;  \n    }\n</code></pre>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#1016","title":"10.1.6 \u91cd\u65b0\u8bbe\u7f6e\u5b9a\u65f6\u5668","text":"<p>\u91cd\u65b0\u8bbe\u7f6e\u5b9a\u65f6\u5668\u7c7b\u4f3c\u63d2\u5165\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u5b83\u9996\u5148\u9700\u8981\u628a\u4e4b\u524d\u7684\u5b9a\u65f6\u5668\u4ece\u4e8c\u53c9\u5806\u4e2d\u79fb\u9664\uff0c\u7136\u540e\u91cd\u65b0\u63d2\u5165\u4e8c\u53c9\u5806\u3002</p> <pre><code>    // \u91cd\u65b0\u542f\u52a8\u4e00\u4e2a\u8ba1\u65f6\u5668\uff0c\u9700\u8981\u8bbe\u7f6erepeat\u6807\u8bb0   \n    int uv_timer_again(uv_timer_t* handle) {  \n      if (handle-&gt;timer_cb == NULL)  \n        return UV_EINVAL;  \n      // \u5982\u679c\u8bbe\u7f6e\u4e86repeat\u6807\u8bb0\u8bf4\u660e\u8ba1\u65f6\u5668\u662f\u9700\u8981\u91cd\u590d\u89e6\u53d1\u7684  \n      if (handle-&gt;repeat) {  \n        // \u5148\u628a\u65e7\u7684\u8282\u70b9\u4ece\u6700\u5c0f\u5806\u4e2d\u79fb\u9664\uff0c\u7136\u540e\u518d\u91cd\u65b0\u5f00\u542f\u4e00\u4e2a\u8ba1\u65f6\u5668  \n        uv_timer_stop(handle);  \n        uv_timer_start(handle, \n                           handle-&gt;timer_cb, \n                           handle-&gt;repeat, \n                           handle-&gt;repeat);  \n      }  \n\n      return 0; \n    }\n</code></pre>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#1017","title":"10.1.7 \u8ba1\u7b97\u4e8c\u53c9\u5806\u4e2d\u8d85\u65f6\u65f6\u95f4\u6700\u5c0f\u503c","text":"<p>\u8d85\u65f6\u65f6\u95f4\u6700\u5c0f\u503c\uff0c\u4e3b\u8981\u7528\u4e8e\u5224\u65adPoll IO\u8282\u70b9\u662f\u963b\u585e\u7684\u6700\u957f\u65f6\u95f4\u3002</p> <pre><code>    // \u8ba1\u7b97\u6700\u5c0f\u5806\u4e2d\u6700\u5c0f\u8282\u70b9\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u5373\u6700\u5c0f\u7684\u8d85\u65f6\u65f6\u95f4  \n    int uv__next_timeout(const uv_loop_t* loop) {  \n      const struct heap_node* heap_node;  \n      const uv_timer_t* handle;  \n      uint64_t diff;  \n      // \u53d6\u51fa\u5806\u7684\u6839\u8282\u70b9\uff0c\u5373\u8d85\u65f6\u65f6\u95f4\u6700\u5c0f\u7684  \n      heap_node = heap_min(timer_heap(loop));  \n      if (heap_node == NULL)  \n        return -1; /* block indefinitely */  \n\n      handle = container_of(heap_node, uv_timer_t, heap_node);  \n      // \u5982\u679c\u6700\u5c0f\u7684\u8d85\u65f6\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u8fd4\u56de0\uff0c\u8bf4\u660e\u5df2\u7ecf\u8d85\u65f6  \n      if (handle-&gt;timeout &lt;= loop-&gt;time)  \n        return 0;  \n      // \u5426\u5219\u8ba1\u7b97\u8fd8\u6709\u591a\u4e45\u8d85\u65f6\uff0c\u8fd4\u56de\u7ed9epoll\uff0cepoll\u7684timeout\u4e0d\u80fd\u5927\u4e8ediff  \n      diff = handle-&gt;timeout - loop-&gt;time;  \n      if (diff &gt; INT_MAX)  \n        diff = INT_MAX;  \n\n      return diff;  \n    }  \n</code></pre>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#1018","title":"10.1.8 \u5904\u7406\u5b9a\u65f6\u5668","text":"<p>\u5904\u7406\u8d85\u65f6\u5b9a\u65f6\u5668\u5c31\u662f\u904d\u5386\u4e8c\u53c9\u5806\uff0c\u5224\u65ad\u54ea\u4e2a\u8282\u70b9\u8d85\u65f6\u4e86\u3002</p> <pre><code>    // \u627e\u51fa\u5df2\u7ecf\u8d85\u65f6\u7684\u8282\u70b9\uff0c\u5e76\u4e14\u6267\u884c\u91cc\u9762\u7684\u56de\u8c03  \n    void uv__run_timers(uv_loop_t* loop) {  \n      struct heap_node* heap_node;  \n      uv_timer_t* handle;  \n\n      for (;;) {  \n        heap_node = heap_min(timer_heap(loop));  \n        if (heap_node == NULL)  \n          break;  \n\n        handle = container_of(heap_node, uv_timer_t, heap_node);  \n        // \u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u65f6\u95f4\u5927\u4e8e\u5f53\u524d\u65f6\u95f4\u5219\u8fd4\u56de\uff0c\u8bf4\u660e\u540e\u9762\u7684\u8282\u70b9\u4e5f\u6ca1\u6709\u8d85\u65f6  \n        if (handle-&gt;timeout &gt; loop-&gt;time)  \n          break;  \n        // \u79fb\u9664\u8be5\u8ba1\u65f6\u5668\u8282\u70b9\uff0c\u91cd\u65b0\u63d2\u5165\u6700\u5c0f\u5806\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86repeat\u7684\u8bdd  \n        uv_timer_stop(handle);  \n        uv_timer_again(handle);  \n        // \u6267\u884c\u8d85\u65f6\u56de\u8c03  \n        handle-&gt;timer_cb(handle);  \n      }  \n    }  \n</code></pre>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#102","title":"10.2 \u6838\u5fc3\u6570\u636e\u7ed3\u6784","text":""},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#1021-timerslist","title":"10.2.1 TimersList","text":"<p>\u76f8\u5bf9\u8d85\u65f6\u65f6\u95f4\u4e00\u6837\u7684\u5b9a\u65f6\u5668\u4f1a\u88ab\u653e\u5230\u540c\u4e00\u4e2a\u961f\u5217\uff0c\u6bd4\u5982\u5f53\u524d\u6267\u884csetTimeout(()=&gt;{}, 10000})\u548c5\u79d2\u540e\u6267\u884csetTimeout(()=&gt;{}, 10000})\uff0c\u8fd9\u4e24\u4e2a\u4efb\u52a1\u5c31\u4f1a\u5728\u540c\u4e00\u4e2aList\u4e2d\uff0c\u8fd9\u4e2a\u961f\u5217\u7531TimersList\u6765\u7ba1\u7406\u3002\u5bf9\u5e94\u56fe1\u4e2d\u7684List\u90a3\u4e2a\u961f\u5217\u3002</p> <pre><code>    function TimersList(expiry, msecs) {  \n      // \u7528\u4e8e\u94fe\u8868  \n      this._idleNext = this;   \n      this._idlePrev = this;   \n      this.expiry = expiry;  \n      this.id = timerListId++;  \n      this.msecs = msecs;  \n      // \u5728\u4f18\u5148\u961f\u5217\u91cc\u7684\u4f4d\u7f6e  \n      this.priorityQueuePosition = null;  \n    }  \n</code></pre> <p>expiry\u8bb0\u5f55\u7684\u662f\u94fe\u8868\u4e2d\u6700\u5feb\u8d85\u65f6\u7684\u8282\u70b9\u7684\u7edd\u5bf9\u65f6\u95f4\u3002\u6bcf\u6b21\u6267\u884c\u5b9a\u65f6\u5668\u9636\u6bb5\u65f6\u4f1a\u52a8\u6001\u66f4\u65b0\uff0cmsecs\u662f\u8d85\u65f6\u65f6\u95f4\u7684\u76f8\u5bf9\u503c\uff08\u76f8\u5bf9\u63d2\u5165\u65f6\u7684\u5f53\u524d\u65f6\u95f4\uff09\u3002\u7528\u4e8e\u8ba1\u7b97\u8be5\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u662f\u5426\u8d85\u65f6\u3002\u540e\u7eed\u6211\u4eec\u4f1a\u770b\u5230\u5177\u4f53\u7684\u7528\u5904\u3002</p>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#1022","title":"10.2.2 \u4f18\u5148\u961f\u5217","text":"<pre><code>    const timerListQueue = new PriorityQueue(compareTimersLists, setPosition)  \n</code></pre> <p>Node.js\u7528\u4f18\u5148\u961f\u5217\u5bf9\u6240\u6709TimersList\u94fe\u8868\u8fdb\u884c\u7ba1\u7406\uff0c\u4f18\u5148\u961f\u5217\u672c\u8d28\u662f\u4e00\u4e2a\u4e8c\u53c9\u5806\uff08\u5c0f\u6839\u5806\uff09\uff0c\u6bcf\u4e2aTimersList\u94fe\u8868\u5728\u4e8c\u53c9\u5806\u91cc\u5bf9\u5e94\u4e00\u4e2a\u8282\u70b9\u3002\u6839\u636eTimersList\u7684\u7ed3\u6784\uff0c\u6211\u4eec\u77e5\u9053\u6bcf\u4e2a\u94fe\u8868\u90fd\u4fdd\u5b58\u94fe\u8868\u4e2d\u6700\u5feb\u5230\u671f\u7684\u8282\u70b9\u7684\u8fc7\u671f\u65f6\u95f4\u3002\u4e8c\u53c9\u5806\u4ee5\u8be5\u65f6\u95f4\u4e3a\u4f9d\u636e\uff0c\u5373\u6700\u5feb\u5230\u671f\u7684list\u5bf9\u5e94\u4e8c\u53c9\u5806\u4e2d\u7684\u6839\u8282\u70b9\u3002\u6839\u8282\u70b9\u7684\u5230\u671f\u65f6\u95f4\u5c31\u662f\u6574\u4e2aNode.js\u5b9a\u65f6\u5668\u6700\u5feb\u5230\u671f\u7684\u65f6\u95f4\uff0cNode.js\u628aLibuv\u4e2d\u5b9a\u65f6\u5668\u8282\u70b9\u7684\u8d85\u65f6\u65f6\u95f4\u8bbe\u7f6e\u4e3a\u8be5\u503c\uff0c\u5728\u4e8b\u4ef6\u5faa\u73af\u7684\u5b9a\u65f6\u5668\u9636\u6bb5\u5c31\u4f1a\u5904\u7406\u5b9a\u65f6\u7684\u8282\u70b9\uff0c\u5e76\u4e14\u4e0d\u65ad\u904d\u5386\u4f18\u5148\u961f\u5217\uff0c\u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u8d85\u65f6\uff0c\u5982\u679c\u8d85\u65f6\u4e86\uff0c\u5c31\u9700\u8981\u5904\u7406\uff0c\u5982\u679c\u6ca1\u6709\u8d85\u65f6\uff0c\u8bf4\u660e\u6574\u4e2a\u4e8c\u53c9\u5806\u7684\u8282\u70b9\u90fd\u6ca1\u6709\u8d85\u65f6\u3002\u7136\u540e\u91cd\u65b0\u8bbe\u7f6eLibuv\u5b9a\u65f6\u5668\u8282\u70b9\u65b0\u7684\u5230\u671f\u65f6\u95f4\u3002  </p> <p>\u53e6\u5916\uff0cNode.js\u4e2d\u7528\u4e00\u4e2amap\u4fdd\u5b58\u4e86\u8d85\u65f6\u65f6\u95f4\u5230TimersList\u94fe\u8868\u7684\u6620\u5c04\u5173\u7cfb\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u6839\u636e\u76f8\u5bf9\u8d85\u65f6\u65f6\u95f4\u5feb\u901f\u627e\u5230\u5bf9\u5e94\u7684\u5217\u8868\uff0c\u5229\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u3002\u4e86\u89e3\u5b8c\u5b9a\u65f6\u5668\u6574\u4f53\u7684\u7ec4\u7ec7\u548c\u6838\u5fc3\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u8fdb\u5165\u771f\u6b63\u7684\u6e90\u7801\u5206\u6790\u4e86\u3002 </p>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#103","title":"10.3 \u8bbe\u7f6e\u5b9a\u65f6\u5668\u5904\u7406\u51fd\u6570","text":"<p>Node.js\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u8bbe\u7f6e\u4e86\u5904\u7406\u5b9a\u65f6\u5668\u7684\u51fd\u6570\u3002 setupTimers(processImmediate, processTimers); setupTimers\u5bf9\u5e94\u7684C++\u51fd\u6570\u662f  </p> <pre><code>    void SetupTimers(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      auto env = Environment::GetCurrent(args);  \n      env-&gt;set_immediate_callback_function(args[0].As&lt;Function&gt;());  \n      env-&gt;set_timers_callback_function(args[1].As&lt;Function&gt;());  \n    } \n</code></pre> <p>SetupTimers\u5728env\u4e2d\u4fdd\u5b58\u4e86\u4e24\u4e2a\u51fd\u6570\uff0cprocessImmediate\u662f\u5904\u7406setImmediate\u7684\uff0cprocessTimers\u662f\u5904\u7406\u5b9a\u65f6\u5668\u7684\u3002\u5f53\u6709\u8282\u70b9\u8d85\u65f6\u65f6\uff0cNode.js\u4f1a\u6267\u884c\u8be5\u51fd\u6570\u5904\u7406\u8d85\u65f6\u7684\u8282\u70b9\uff0c\u540e\u7eed\u4f1a\u770b\u5230\u8be5\u51fd\u6570\u7684\u5177\u4f53\u5904\u7406\u903b\u8f91\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u4f55\u8bbe\u7f6e\u4e00\u4e2a\u5b9a\u65f6\u5668\u3002</p>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#104","title":"10.4 \u8bbe\u7f6e\u5b9a\u65f6\u5668","text":"<pre><code>    function setTimeout(callback, after, arg1, arg2, arg3) {  \n      // \u5ffd\u7565\u5904\u7406\u53c2\u6570args\u903b\u8f91\n        // \u65b0\u5efa\u4e00\u4e2aTimeout\u5bf9\u8c61\n      const timeout = new Timeout(callback, \n                                        after, \n                                        args, \n                                        false, \n                                        true);  \n      insert(timeout, timeout._idleTimeout);  \n      return timeout;  \n    }  \n</code></pre> <p>setTimeout\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u64cd\u4f5c\uff0cnew Timeout\u548cinsert\u3002\u6211\u4eec\u9010\u4e2a\u5206\u6790\u4e00\u4e0b\u3002 1 setTimeout</p> <pre><code>    function Timeout(callback, after, args, isRepeat, isRefed) {  \n      after *= 1; // Coalesce to number or NaN  \n        // \u5173\u4e8esetTimeout\u7684\u8d85\u65f6\u65f6\u95f4\u4e3a0\u7684\u95ee\u9898\u5728\u8fd9\u91cc\u53ef\u4ee5\u63ed\u5f00\u8ff7\u96fe\n      if (!(after &gt;= 1 &amp;&amp; after &lt;= TIMEOUT_MAX)) { \n        after = 1; \n      }  \n      // \u8d85\u65f6\u65f6\u95f4\u76f8\u5bf9\u503c  \n      this._idleTimeout = after;  \n      // \u524d\u540e\u6307\u9488\uff0c\u7528\u4e8e\u94fe\u8868  \n      this._idlePrev = this;  \n      this._idleNext = this;  \n      // \u5b9a\u65f6\u5668\u7684\u5f00\u59cb\u65f6\u95f4  \n      this._idleStart = null; \n      // \u8d85\u65f6\u56de\u8c03    \n      this._onTimeout = callback;  \n      // \u6267\u884c\u56de\u8c03\u65f6\u4f20\u5165\u7684\u53c2\u6570  \n      this._timerArgs = args;  \n      // \u662f\u5426\u5b9a\u671f\u89e6\u53d1\u8d85\u65f6\uff0c\u7528\u4e8esetInterval  \n      this._repeat = isRepeat ? after : null;  \n      this._destroyed = false;  \n        // this._idleStart = now();\n      // \u6fc0\u6d3b\u5e95\u5c42\u7684\u5b9a\u65f6\u5668\u8282\u70b9\uff08\u4e8c\u53c9\u5806\u7684\u8282\u70b9\uff09\uff0c\u8bf4\u660e\u6709\u5b9a\u65f6\u8282\u70b9\u9700\u8981\u5904\u7406  \n      if (isRefed)  \n        incRefCount(); \n        // \u8bb0\u5f55\u72b6\u6001 \n      this[kRefed] = isRefed;  \n     }  \n</code></pre> <p>Timeout\u4e3b\u8981\u662f\u65b0\u5efa\u4e00\u4e2a\u5bf9\u8c61\u8bb0\u5f55\u4e00\u4e9b\u5b9a\u65f6\u5668\u7684\u76f8\u5bf9\u8d85\u65f6\u65f6\u95f4\uff08\u7528\u4e8e\u652f\u6301setInterval\uff0c\u91cd\u65b0\u63d2\u5165\u961f\u5217\u65f6\u627e\u5230\u6240\u5c5e\u961f\u5217\uff09\u3001\u5f00\u59cb\u65f6\u95f4\uff08\u7528\u4e8e\u8ba1\u7b97\u5b9a\u65f6\u5668\u662f\u5426\u8d85\u65f6\uff09\u7b49\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5173\u952e\u7684\u903b\u8f91\u662fisRefed\u7684\u503c\u3002Node.js\u652f\u6301ref\u548cunref\u72b6\u6001\u7684\u5b9a\u65f6\u5668\uff08setTimeout \u548csetUnrefTimeout\uff09\uff0cunref\u72b6\u6001\u7684\u5b9a\u65f6\u5668\uff0c\u4e0d\u4f1a\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa\u3002\u5373\u5f53\u53ea\u6709unref\u72b6\u6001\u7684\u5b9a\u65f6\u5668\u65f6\uff0c\u4e8b\u4ef6\u5faa\u73af\u4f1a\u7ed3\u675f\u3002\u5f53isRefed\u4e3atrue\u65f6\u4f1a\u6267\u884cincRefCount();</p> <pre><code>    function incRefCount() {  \n      if (refCount++ === 0)  \n        toggleTimerRef(true);  \n    }  \n\n    void ToggleTimerRef(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment::GetCurrent(args)-&gt;ToggleTimerRef(args[0]-&gt;IsTrue());  \n    }  \n\n    void Environment::ToggleTimerRef(bool ref) {  \n      if (started_cleanup_) return;  \n      // \u6253\u4e0aref\u6807\u8bb0\uff0c  \n      if (ref) {  \n        uv_ref(reinterpret_cast&lt;uv_handle_t*&gt;(timer_handle()));  \n      } else {  \n        uv_unref(reinterpret_cast&lt;uv_handle_t*&gt;(timer_handle()));  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u6700\u7ec8\u4f1a\u8c03\u7528Libuv\u7684uv_ref\u6216uv_unref\u4fee\u6539\u5b9a\u65f6\u5668\u76f8\u5173handle\u7684\u72b6\u6001\uff0c\u56e0\u4e3aNode.js\u53ea\u4f1a\u5728Libuv\u4e2d\u6ce8\u518c\u4e00\u4e2a\u5b9a\u65f6\u5668handle\u5e76\u4e14\u662f\u5e38\u9a7b\u7684\uff0c\u5982\u679cJS\u5c42\u5f53\u524d\u6ca1\u6709\u8bbe\u7f6e\u5b9a\u65f6\u5668\uff0c\u5219\u9700\u8981\u4fee\u6539\u5b9a\u65f6\u5668handle\u7684\u72b6\u6001\u4e3aunref\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa\u3002refCount\u503c\u4fbf\u662f\u8bb0\u5f55JS\u5c42ref\u72b6\u6001\u7684\u5b9a\u65f6\u5668\u4e2a\u6570\u7684\u3002\u6240\u4ee5\u5f53\u6211\u4eec\u7b2c\u4e00\u6b21\u6267\u884csetTimeout\u7684\u65f6\u5019\uff0cNode.js\u4f1a\u6fc0\u6d3bLibuv\u7684\u5b9a\u65f6\u5668\u8282\u70b9\u3002\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0binsert\u3002</p> <pre><code>    let nextExpiry = Infinity;\n    function insert(item, msecs, start = getLibuvNow()) {  \n      msecs = MathTrunc(msecs);  \n      // \u8bb0\u5f55\u5b9a\u65f6\u5668\u7684\u5f00\u59cb\u65f6\u95f4\uff0c\u89c1Timeout\u51fd\u6570\u7684\u5b9a\u4e49  \n      item._idleStart = start;  \n      // \u8be5\u76f8\u5bf9\u8d85\u65f6\u65f6\u95f4\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u5bf9\u5e94\u7684\u94fe\u8868  \n      let list = timerListMap[msecs];  \n      // \u8fd8\u6ca1\u6709  \n      if (list === undefined) {  \n        // \u7b97\u51fa\u7edd\u5bf9\u8d85\u65f6\u65f6\u95f4\uff0c\u7b2c\u4e00\u4e2a\u8282\u70b9\u662f\u8be5\u94fe\u8868\u4e2d\u6700\u65e9\u5230\u671f\u7684\u8282\u70b9  \n        const expiry = start + msecs;  \n        // \u65b0\u5efa\u4e00\u4e2a\u94fe\u8868  \n        timerListMap[msecs] = list = new TimersList(expiry, msecs);  \n        // \u63d2\u5165\u4f18\u5148\u961f\u5217  \n        timerListQueue.insert(list);  \n        /*\n              nextExpiry\u8bb0\u5f55\u6240\u6709\u8d85\u65f6\u8282\u70b9\u4e2d\u6700\u5feb\u5230\u671f\u7684\u8282\u70b9\uff0c\n              \u5982\u679c\u6709\u66f4\u5feb\u5230\u671f\u7684\uff0c\u5219\u4fee\u6539\u5e95\u5c42\u5b9a\u65f6\u5668\u8282\u70b9\u7684\u8fc7\u671f\u65f6\u95f4  \n            */\n        if (nextExpiry &gt; expiry) {  \n          // \u4fee\u6539\u5e95\u5c42\u8d85\u65f6\u8282\u70b9\u7684\u8d85\u65f6\u65f6\u95f4  \n          scheduleTimer(msecs);  \n          nextExpiry = expiry;  \n        }  \n      }  \n      // \u628a\u5f53\u524d\u8282\u70b9\u52a0\u5230\u94fe\u8868\u91cc  \n      L.append(list, item);  \n    }  \n</code></pre> <p>Insert\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b 1 \u5982\u679c\u8be5\u8d85\u65f6\u65f6\u95f4\u8fd8\u6ca1\u6709\u5bf9\u5e94\u7684\u94fe\u8868\uff0c\u5219\u65b0\u5efa\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u90fd\u4f1a\u8bb0\u5f55\u8be5\u94fe\u8868\u4e2d\u6700\u5feb\u5230\u671f\u7684\u8282\u70b9\u7684\u503c\uff0c\u5373\u7b2c\u4e00\u4e2a\u63d2\u5165\u7684\u503c\u3002\u7136\u540e\u628a\u94fe\u8868\u63d2\u5165\u4f18\u5148\u961f\u5217\uff0c\u4f18\u5148\u961f\u5217\u4f1a\u6839\u636e\u8be5\u94fe\u8868\u7684\u6700\u5feb\u8fc7\u671f\u65f6\u95f4\u7684\u503c\uff0c\u628a\u94fe\u8868\u5bf9\u5e94\u7684\u8282\u70b9\u8c03\u6574\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u3002 2 \u5982\u679c\u5f53\u524d\u8bbe\u7f6e\u7684\u5b9a\u65f6\u5668\uff0c\u6bd4\u4e4b\u524d\u6240\u6709\u7684\u5b9a\u65f6\u5668\u90fd\u5feb\u5230\u671f\uff0c\u5219\u9700\u8981\u4fee\u6539\u5e95\u5c42\u7684\u5b9a\u65f6\u5668\u8282\u70b9\uff0c\u4f7f\u5f97\u66f4\u5feb\u89e6\u53d1\u8d85\u65f6\u3002 3 \u628a\u5f53\u524d\u7684\u5b9a\u65f6\u5668\u8282\u70b9\u63d2\u5165\u5bf9\u5e94\u7684\u94fe\u8868\u5c3e\u90e8\u3002\u5373\u8be5\u94fe\u8868\u4e2d\u6700\u4e45\u8d85\u65f6\u7684\u8282\u70b9\u3002 \u5047\u8bbe\u6211\u4eec\u57280s\u7684\u65f6\u5019\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u4e0b\u9762\u662f\u63d2\u5165\u7b2c\u4e00\u4e2a\u8282\u70b9\u65f6\u7684\u7ed3\u6784\u56fe\u5982\u56fe10-2\u6240\u793a\u3002  </p> <p>\u56fe10-2</p> <p>\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u591a\u4e2a\u8282\u70b9\u7684\u60c5\u51b5\u3002\u5047\u8bbe0s\u7684\u65f6\u5019\u63d2\u5165\u4e24\u4e2a\u8282\u70b910s\u8fc7\u671f\u548c11s\u8fc7\u671f\u3002\u5982\u56fe10-3\u6240\u793a\u3002  </p> <p>\u56fe10-3</p> <p>\u7136\u540e\u57281s\u7684\u65f6\u5019\uff0c\u63d2\u5165\u4e00\u4e2a\u65b0\u768411s\u8fc7\u671f\u7684\u8282\u70b9\uff0c9s\u7684\u65f6\u5019\u63d2\u5165\u4e00\u4e2a\u65b0\u768410s\u8fc7\u671f\u8282\u70b9\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u65f6\u5019\u7684\u5173\u7cfb\u56fe\u5982\u56fe10-4\u6240\u793a\u3002 </p> <p>\u56fe10-4</p> <p>\u6211\u4eec\u770b\u5230\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u7236\u8282\u70b9\u5bf9\u5e94\u7684\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u6bd4\u5b50\u8282\u70b9\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5148\u8d85\u65f6\u7684\uff0c\u4f46\u662f\u94fe\u8868\u4e2d\u540e\u7eed\u8282\u70b9\u7684\u8d85\u65f6\u5c31\u4e0d\u4e00\u5b9a\u3002\u6bd4\u5982\u5b50\u8282\u70b91s\u5f00\u59cb\u7684\u8282\u70b9\u5c31\u6bd4\u7236\u8282\u70b99s\u5f00\u59cb\u7684\u8282\u70b9\u5148\u8d85\u65f6\u3002\u56e0\u4e3a\u540c\u4e00\u961f\u5217\uff0c\u53ea\u662f\u76f8\u5bf9\u8d85\u65f6\u65f6\u95f4\u4e00\u6837\uff0c\u800c\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u56e0\u7d20\u662f\u5f00\u59cb\u7684\u65f6\u95f4\u3002\u867d\u7136\u67d0\u8282\u70b9\u7684\u76f8\u5bf9\u8d85\u65f6\u65f6\u95f4\u957f\uff0c\u4f46\u662f\u5982\u679c\u5b83\u6bd4\u53e6\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u7684\u65e9\uff0c\u90a3\u4e48\u5c31\u6709\u53ef\u80fd\u6bd4\u5b83\u5148\u8d85\u65f6\u3002\u540e\u7eed\u6211\u4eec\u4f1a\u770b\u5230\u5177\u4f53\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u3002</p>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#105","title":"10.5 \u5904\u7406\u5b9a\u65f6\u5668","text":"<p>\u524d\u9762\u6211\u4eec\u8bb2\u5230\u4e86\u8bbe\u7f6e\u5b9a\u65f6\u5668\u5904\u7406\u51fd\u6570\u548c\u8bbe\u7f6e\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u4f46\u662f\u5728\u54ea\u91cc\u89e6\u53d1\u8fd9\u4e2a\u5904\u7406\u5b9a\u65f6\u5668\u7684\u51fd\u6570\u5462\uff1f\u7b54\u6848\u5728scheduleTimer\u51fd\u6570\u3002Node.js\u7684\u5b9e\u73b0\u4e2d\uff0c\u6240\u6709JS\u5c42\u8bbe\u7f6e\u7684\u5b9a\u65f6\u5668\u5bf9\u5e94Libuv\u7684\u4e00\u4e2a\u5b9a\u65f6\u5668\u8282\u70b9\uff0cNode.js\u7ef4\u62a4\u4e86JS\u5c42\u6240\u6709\u5b9a\u65f6\u5668\u7684\u8d85\u65f6\u6700\u5c0f\u503c\u3002\u5728\u7b2c\u4e00\u4e2a\u8bbe\u7f6e\u5b9a\u65f6\u5668\u6216\u8005\u8bbe\u7f6e\u4e00\u4e2a\u65b0\u7684\u5b9a\u65f6\u5668\u65f6\uff0c\u5982\u679c\u65b0\u8bbe\u7f6e\u7684\u5b9a\u65f6\u5668\u6bd4\u5f53\u524d\u7684\u6700\u5c0f\u503c\u5c0f\uff0c\u5219\u4f1a\u901a\u8fc7scheduleTimer\u4fee\u6539\u8d85\u65f6\u65f6\u95f4\u3002\u8d85\u65f6\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u6267\u884c\u56de\u8c03\u3002scheduleTimer\u51fd\u6570\u662f\u5bf9C++\u51fd\u6570\u7684\u5c01\u88c5\u3002  </p> <pre><code>    void ScheduleTimer(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      auto env = Environment::GetCurrent(args);  \n      env-&gt;ScheduleTimer(args[0]-&gt;IntegerValue(env-&gt;context()).FromJust());  \n    }  \n\n    void Environment::ScheduleTimer(int64_t duration_ms) {  \n      if (started_cleanup_) return;  \n      uv_timer_start(timer_handle(), RunTimers, duration_ms, 0);  \n    }  \n</code></pre> <p>uv_timer_start\u5c31\u662f\u5f00\u542f\u5e95\u5c42\u8ba1\u65f6\uff0c\u5373\u5f80Libuv\u7684\u4e8c\u53c9\u5806\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff08\u5982\u679c\u8be5handle\u5df2\u7ecf\u5b58\u5728\u4e8c\u53c9\u5806\uff0c\u5219\u5148\u5220\u9664\uff09\u3002\u8d85\u65f6\u65f6\u95f4\u662fduration_ms\uff0c\u5c31\u662f\u6700\u5feb\u5230\u671f\u7684\u65f6\u95f4\uff0c\u8d85\u65f6\u56de\u8c03\u662fRunTimers\uff0c\u5728timer\u9636\u6bb5\u4f1a\u5224\u65ad\u662f\u5426\u8fc7\u671f\u3002\u662f\u7684\u8bdd\u6267\u884cRunTimers\u51fd\u6570\u3002\u6211\u4eec\u5148\u770b\u4e00\u4e0bRunTimers\u51fd\u6570\u7684\u4e3b\u8981\u4ee3\u7801\u3002</p> <pre><code>    Local&lt;Function&gt; cb = env-&gt;timers_callback_function();  \n    ret = cb-&gt;Call(env-&gt;context(), process, 1, &amp;arg);  \n</code></pre> <p>RunTimers\u4f1a\u6267\u884ctimers_callback_function\u3002timers_callback_function\u662f\u5728Node.js\u521d\u59cb\u5316\u7684\u65f6\u5019\u8bbe\u7f6e\u7684processTimers\u51fd\u6570\u3002\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86Node.js\u662f\u5982\u4f55\u8bbe\u7f6e\u8d85\u65f6\u7684\u5904\u7406\u51fd\u6570\uff0c\u4e5f\u77e5\u9053\u4e86\u4ec0\u4e48\u65f6\u5019\u4f1a\u6267\u884c\u8be5\u56de\u8c03\u3002\u90a3\u6211\u4eec\u5c31\u6765\u770b\u4e00\u4e0b\u56de\u8c03\u65f6\u5177\u4f53\u5904\u7406\u903b\u8f91\u3002 </p> <pre><code>    void Environment::RunTimers(uv_timer_t* handle) {  \n      Local&lt;Function&gt; cb = env-&gt;timers_callback_function();  \n      MaybeLocal&lt;Value&gt; ret;  \n      Local&lt;Value&gt; arg = env-&gt;GetNow();  \n\n      do {  \n        // \u6267\u884cjs\u56de\u8c03processTimers\u51fd\u6570  \n        ret = cb-&gt;Call(env-&gt;context(), process, 1, &amp;arg);  \n      } while (ret.IsEmpty() &amp;&amp; env-&gt;can_call_into_js());  \n\n      // \u5982\u679c\u8fd8\u6709\u672a\u8d85\u65f6\u7684\u8282\u70b9\uff0c\u5219ret\u4e3a\u7b2c\u4e00\u4e2a\u672a\u8d85\u65f6\u7684\u8282\u70b9\u7684\u8d85\u65f6\u65f6\u95f4\n      int64_t expiry_ms = ret.ToLocalChecked()-&gt;IntegerValue(env-&gt;context()).FromJust();  \n      uv_handle_t* h = reinterpret_cast&lt;uv_handle_t*&gt;(handle);  \n\n        /*  \n          1 \u7b49\u4e8e0\u8bf4\u660e\u6240\u6709\u8282\u70b9\u90fd\u6267\u884c\u5b8c\u4e86\uff0c\u4f46\u662f\u5b9a\u65f6\u5668\u8282\u70b9\u8fd8\u662f\u5728Libuv\u4e2d\uff0c \n              \u4e0d\u8fc7\u6539\u6210\u975e\u6fc0\u6d3b\u72b6\u6001\uff0c\u5373\u4e0d\u4f1a\u5f71\u54cdLibuv\u9000\u51fa\uff0c\u56e0\u4e3a\u5f53\u524d\u6ca1\u6709\u9700\u8981\u5904\u7406\u7684\u8282\u70b9\u4e86\uff08handle\uff09\uff0c \n          2 \u4e0d\u7b49\u4e8e0\u8bf4\u660e\u6ca1\u6709\u8fd8\u8981\u8282\u70b9\u9700\u8981\u5904\u7406\uff0c\u8fd9\u79cd\u60c5\u51b5\u53c8\u5206\u4e3a\u4e24\u79cd \n            1 \u8fd8\u6709\u6fc0\u6d3b\u72b6\u6001\u7684\u5b9a\u65f6\u5668\uff0c\u5373\u4e0d\u5141\u8bb8\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa \n            2 \u5b9a\u65f6\u5668\u90fd\u662f\u975e\u6fc0\u6d3b\u72b6\u6001\u7684\uff0c\u5141\u8bb8\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa \n          \u5177\u4f53\u89c1Timeout\u7684unref\u548cref\u65b9\u6cd5 \n        */  \n        if (expiry_ms != 0) {  \n            // \u7b97\u51fa\u4e0b\u6b21\u8d85\u65f6\u7684\u76f8\u5bf9\u503c  \n            int64_t duration_ms =  \n                llabs(expiry_ms) - (uv_now(env-&gt;event_loop()) - env-&gt;timer_base());  \n            // \u91cd\u65b0\u628ahandle\u63d2\u5165Libuv\u7684\u4e8c\u53c9\u5806  \n            env-&gt;ScheduleTimer(duration_ms &gt; 0 ? duration_ms : 1);  \n            /* \n              \u89c1internal/timer.js\u7684processTimers \n              1 \u5927\u4e8e0\u8bf4\u660e\u8fd8\u6709\u8282\u70b9\u6ca1\u8d85\u65f6\uff0c\u5e76\u4e14\u4e0d\u5141\u8bb8\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa\uff0c \n                \u9700\u8981\u4fdd\u6301\u5b9a\u65f6\u5668\u7684\u6fc0\u6d3b\u72b6\u6001\uff08\u5982\u679c\u4e4b\u524d\u662f\u6fc0\u6d3b\u72b6\u6001\u5219\u4e0d\u5f71\u54cd\uff09\uff0c \n              2 \u5c0f\u4e8e0\u8bf4\u660e\u5b9a\u65f6\u5668\u4e0d\u5f71\u54cdLibuv\u7684\u4e8b\u4ef6\u5faa\u73af\u7684\u7ed3\u675f\uff0c\u6539\u6210\u975e\u6fc0\u6d3b\u72b6\u6001 \n            */  \n            if (expiry_ms &gt; 0)  \n              uv_ref(h);  \n            else  \n              uv_unref(h);  \n          } else {  \n            uv_unref(h);  \n          }  \n    }\n</code></pre> <p>\u8be5\u51fd\u6570\u4e3b\u8981\u662f\u6267\u884c\u56de\u8c03\uff0c\u7136\u540e\u5982\u679c\u8fd8\u6709\u6ca1\u8d85\u65f6\u7684\u8282\u70b9\uff0c\u91cd\u65b0\u8bbe\u7f6eLibuv\u5b9a\u65f6\u5668\u7684\u65f6\u95f4\u3002\u770b\u770bJS\u5c42\u9762\u3002  </p> <pre><code>     function processTimers(now) {  \n        nextExpiry = Infinity;  \n        let list;  \n        let ranAtLeastOneList = false;  \n        // \u53d6\u51fa\u4f18\u5148\u961f\u5217\u7684\u6839\u8282\u70b9\uff0c\u5373\u6700\u5feb\u5230\u671f\u7684\u8282\u70b9  \n        while (list = timerListQueue.peek()) {  \n          // \u8fd8\u6ca1\u8fc7\u671f\uff0c\u5219\u53d6\u5f97\u4e0b\u6b21\u5230\u671f\u7684\u65f6\u95f4\uff0c\u91cd\u65b0\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4  \n          if (list.expiry &gt; now) {  \n            nextExpiry = list.expiry;  \n            // \u8fd4\u56de\u4e0b\u4e00\u6b21\u8fc7\u671f\u7684\u65f6\u95f4\uff0c\u8d1f\u7684\u8bf4\u660e\u5141\u8bb8\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa  \n            return refCount &gt; 0 ? nextExpiry : -nextExpiry;  \n          }  \n\n             // \u5904\u7406\u8d85\u65f6\u8282\u70b9\n                   listOnTimeout(list, now);  \n        }  \n            // \u6240\u6709\u8282\u70b9\u90fd\u5904\u7406\u5b8c\u4e86\n        return 0;  \n      }  \n\n      function listOnTimeout(list, now) {  \n        const msecs = list.msecs;  \n        let ranAtLeastOneTimer = false;  \n        let timer;  \n        // \u904d\u5386\u5177\u6709\u7edf\u4e00\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\u7684\u961f\u5217  \n        while (timer = L.peek(list)) {  \n          // \u7b97\u51fa\u5df2\u7ecf\u8fc7\u53bb\u7684\u65f6\u95f4  \n          const diff = now - timer._idleStart;  \n          // \u8fc7\u671f\u7684\u65f6\u95f4\u6bd4\u8d85\u65f6\u65f6\u95f4\u5c0f\uff0c\u8fd8\u6ca1\u8fc7\u671f  \n          if (diff &lt; msecs) {  \n            /* \n                        \u6574\u4e2a\u94fe\u8868\u8282\u70b9\u7684\u6700\u5feb\u8fc7\u671f\u65f6\u95f4\u7b49\u4e8e\u5f53\u524d\n                        \u8fd8\u6ca1\u8fc7\u671f\u8282\u70b9\u7684\u503c\uff0c\u94fe\u8868\u662f\u6709\u5e8f\u7684  \n                    */\n            list.expiry = MathMax(timer._idleStart + msecs, \n                                            now + 1);  \n            // \u66f4\u65b0id\uff0c\u7528\u4e8e\u51b3\u5b9a\u5728\u4f18\u5148\u961f\u5217\u91cc\u7684\u4f4d\u7f6e  \n            list.id = timerListId++;  \n            /*\n                     \u8c03\u6574\u8fc7\u671f\u65f6\u95f4\u540e\uff0c\u5f53\u524d\u94fe\u8868\u5bf9\u5e94\u7684\u8282\u70b9\u4e0d\u4e00\u5b9a\u662f\u4f18\u5148\u961f\u5217\n                      \u91cc\u7684\u6839\u8282\u70b9\u4e86\uff0c\u53ef\u80fd\u6709\u5b83\u66f4\u5feb\u5230\u671f\uff0c\u5373\u5f53\u524d\u94fe\u8868\u5bf9\u5e94\u7684\u8282\n                      \u70b9\u53ef\u80fd\u9700\u8981\u5f80\u4e0b\u6c89\n                    */  \n            timerListQueue.percolateDown(1);  \n            return;  \n          }  \n\n          // \u51c6\u5907\u6267\u884c\u7528\u6237\u8bbe\u7f6e\u7684\u56de\u8c03\uff0c\u5220\u9664\u8fd9\u4e2a\u8282\u70b9  \n          L.remove(timer);  \n\n          let start;  \n          if (timer._repeat)  \n            start = getLibuvNow(); \n          try {  \n            const args = timer._timerArgs;  \n            // \u6267\u884c\u7528\u6237\u8bbe\u7f6e\u7684\u56de\u8c03  \n            if (args === undefined)  \n              timer._onTimeout();  \n            else  \n              timer._onTimeout(...args);  \n          } finally {  \n            /* \n                        \u8bbe\u7f6e\u4e86\u91cd\u590d\u6267\u884c\u56de\u8c03\uff0c\u5373\u6765\u81easetInterval\u3002\n                        \u5219\u9700\u8981\u91cd\u65b0\u52a0\u5165\u94fe\u8868\u3002  \n                    */\n            if (timer._repeat &amp;&amp; \n                         timer._idleTimeout !== -1) {  \n              // \u66f4\u65b0\u8d85\u65f6\u65f6\u95f4\uff0c\u4e00\u6837\u7684\u65f6\u95f4\u95f4\u9694  \n              timer._idleTimeout = timer._repeat;  \n              // \u91cd\u65b0\u63d2\u5165\u94fe\u8868  \n              insert(timer, timer._idleTimeout, start);  \n            } else if (!timer._idleNext &amp;&amp; \n                                  !timer._idlePrev &amp;&amp; \n                                  !timer._destroyed) {          \n                        timer._destroyed = true;\n                        // \u662fref\u7c7b\u578b\uff0c\u5219\u51cf\u53bb\u4e00\u4e2a\uff0c\u9632\u6b62\u963b\u6b62\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa  \n              if (timer[kRefed])  \n                refCount--;  \n        }  \n        // \u4e3a\u7a7a\u5219\u5220\u9664  \n        if (list === timerListMap[msecs]) {  \n          delete timerListMap[msecs];  \n                // \u4ece\u4f18\u5148\u961f\u5217\u4e2d\u5220\u9664\u8be5\u8282\u70b9\uff0c\u5e76\u8c03\u6574\u961f\u5217\u7ed3\u6784\n          timerListQueue.shift();  \n        }  \n      }  \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u4e3b\u8981\u662f\u904d\u5386\u4f18\u5148\u961f\u5217 1 \u5982\u679c\u5f53\u524d\u8282\u70b9\u8d85\u65f6\uff0c\u5219\u904d\u5386\u5b83\u5bf9\u5e94\u7684\u94fe\u8868\u3002\u904d\u5386\u94fe\u8868\u7684\u65f6\u5019\u5982\u679c\u9047\u5230\u8d85\u65f6\u7684\u8282\u70b9\u5219\u6267\u884c\u3002\u5982\u679c\u9047\u5230\u6ca1\u6709\u8d85\u65f6\u7684\u8282\u70b9\uff0c\u5219\u8bf4\u660e\u540e\u9762\u7684\u8282\u70b9\u4e5f\u4e0d\u4f1a\u8d85\u65f6\u4e86\uff0c\u56e0\u4e3a\u94fe\u8868\u662f\u6709\u5e8f\u7684\uff0c\u63a5\u7740\u91cd\u65b0\u8ba1\u7b97\u51fa\u6700\u5feb\u8d85\u65f6\u65f6\u95f4\uff0c\u4fee\u6539\u94fe\u8868\u7684expiry\u5b57\u6bb5\u3002\u8c03\u6574\u5728\u4f18\u5148\u961f\u5217\u7684\u4f4d\u7f6e\u3002\u56e0\u4e3a\u4fee\u6539\u540e\u7684expiry\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4f4d\u7f6e\u53d1\u751f\u53d8\u5316\u3002\u5982\u679c\u94fe\u8868\u7684\u8282\u70b9\u5168\u90e8\u90fd\u8d85\u65f6\u4e86\uff0c\u5219\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u5220\u9664\u94fe\u8868\u5bf9\u5e94\u7684\u8282\u70b9\u3002\u91cd\u65b0\u8c03\u6574\u4f18\u5148\u961f\u5217\u7684\u8282\u70b9\u3002 2 \u5982\u679c\u5f53\u524d\u8282\u70b9\u6ca1\u6709\u8d85\u65f6\u5219\u8bf4\u660e\u540e\u9762\u7684\u8282\u70b9\u4e5f\u4e0d\u4f1a\u8d85\u65f6\u4e86\u3002\u56e0\u4e3a\u5f53\u524d\u8282\u70b9\u662f\u4f18\u5148\u961f\u5217\u4e2d\u6700\u5feb\u5230\u671f\uff08\u6700\u5c0f\u7684\uff09\u7684\u8282\u70b9\u3002\u63a5\u7740\u8bbe\u7f6eLibuv\u7684\u5b9a\u65f6\u5668\u65f6\u95f4\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u65f6\u95f4\u3002\u7b49\u5f85\u4e0b\u4e00\u6b21\u8d85\u65f6\u5904\u7406\u3002</p>"},{"location":"chapter10-%E5%AE%9A%E6%97%B6%E5%99%A8/#106-refunref","title":"10.6 ref\u548cunref","text":"<p>setTimeout\u8fd4\u56de\u7684\u662f\u4e00\u4e2aTimeout\u5bf9\u8c61\uff0c\u8be5\u63d0\u4f9b\u4e86ref\u548cunref\u63a5\u53e3\uff0c\u521a\u624d\u63d0\u5230\u4e86\u5173\u4e8e\u5b9a\u65f6\u5668\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e2a\u539f\u7406\u3002\u521a\u624d\u8bf4\u5230Node.js\u5b9a\u65f6\u5668\u6a21\u5757\u5728Libuv\u4e2d\u53ea\u5bf9\u5e94\u4e00\u4e2a\u5b9a\u65f6\u5668\u8282\u70b9\u3002\u5728Node.js\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u521d\u59cb\u5316\u4e86\u8be5\u8282\u70b9\u3002</p> <pre><code>    void Environment::InitializeLibuv(bool start_profiler_idle_notifier) {  \n      // \u521d\u59cb\u5316\u5b9a\u65f6\u5668  \n      CHECK_EQ(0, uv_timer_init(event_loop(), timer_handle()));  \n      // \u7f6eunref\u72b6\u6001\n      uv_unref(reinterpret_cast&lt;uv_handle_t*&gt;(timer_handle()));  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u5e95\u5c42\u5b9a\u65f6\u5668\u8282\u70b9\u9ed8\u8ba4\u662funref\u72b6\u6001\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa\u3002\u56e0\u4e3a\u521d\u59cb\u5316\u65f6JS\u5c42\u6ca1\u6709\u5b9a\u65f6\u8282\u70b9\u3002\u53ef\u4ee5\u901a\u8fc7Node.js\u63d0\u4f9b\u7684\u63a5\u53e3\u4fee\u6539\u8be5\u72b6\u6001\u3002Node.js\u652f\u6301ref\u72b6\u6001\u7684Timeout\uff08setTimeout\uff09\u548cunref\u72b6\u6001\u7684Timeout\uff08setUnrefTimeout\uff09\u3002</p> <pre><code>    function Timeout(callback, after, args, isRepeat, isRefed) {  \n      if (isRefed)  \n        incRefCount();  \n      this[kRefed] = isRefed;  \n    }  \n</code></pre> <p>\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5c31\u662f\u63a7\u5236ref\u8fd8\u662funref\u7684\u3002\u6211\u4eec\u7ee7\u7eed\u770b\u4e00\u4e0b\u5982\u679cisRefed\u4e3atrue\u7684\u65f6\u5019\u7684\u903b\u8f91</p> <pre><code>    function incRefCount() {  \n      if (refCount++ === 0)  \n        toggleTimerRef(true);  \n    }  \n</code></pre> <p>refCount\u521d\u59cb\u5316\u7684\u65f6\u5019\u662f1\uff0c\u6240\u4ee5\u5728\u65b0\u52a0\u7b2c\u4e00\u4e2aTimeout\u7684\u65f6\u5019\uff0cif\u6210\u7acb\u3002\u6211\u4eec\u63a5\u7740\u770btoggleTimerRef\uff0c\u8be5\u51fd\u6570\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b</p> <pre><code>    void Environment::ToggleTimerRef(bool ref) {  \n      // \u6253\u4e0aref\u6807\u8bb0\uff0c  \n      if (ref) {  \n        uv_ref(reinterpret_cast&lt;uv_handle_t*&gt;(timer_handle()));  \n      } else {  \n        uv_unref(reinterpret_cast&lt;uv_handle_t*&gt;(timer_handle()));  \n      }  \n    }  \n</code></pre> <p>\u8be5\u51fd\u6570\u6b63\u662f\u7ed9\u5b9a\u65f6\u5668\u5bf9\u5e94\u7684handle\u8bbe\u7f6e\u72b6\u6001\u7684\u3002setTimeout\u7684\u65f6\u5019\uff0cisRefed\u7684\u503c\u662ftrue\u7684\uff0cNode.js\u8fd8\u63d0\u4f9b\u4e86\u53e6\u5916\u4e00\u4e2a\u51fd\u6570setUnrefTimeout\u3002</p> <pre><code>    function setUnrefTimeout(callback, after) {  \n      const timer = new Timeout(callback, after, undefined, false, false);  \n      insert(timer, timer._idleTimeout);  \n      return timer;  \n    }  \n</code></pre> <p>\u8be5\u51fd\u6570\u548csetTimeout\u6700\u4e3b\u8981\u7684\u533a\u522b\u662fnew Timeout\u7684\u65f6\u5019\uff0c\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662ffalse\uff08isRefed\u53d8\u91cf\u7684\u503c\uff09\uff0c\u6240\u4ee5setUnrefTimeout\u8bbe\u7f6e\u7684\u5b9a\u65f6\u5668\u662f\u4e0d\u4f1a\u5f71\u54cdLibuv\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa\u7684\u3002\u53e6\u5916\u9664\u4e86Node.js\u76f4\u63a5\u63d0\u4f9b\u7684api\u540e\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7Timeout\u5bf9\u8c61\u63d0\u4f9b\u7684ref\u548cunref\u624b\u52a8\u63a7\u5236\u8fd9\u4e2a\u72b6\u6001\u3002 \u73b0\u5728\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u5177\u4f53\u6765\u770b\u4e00\u4e0b\u3002</p> <pre><code>    const timeout = setTimeout(() =&gt; {  \n        console.log(1)  \n    }, 10000);  \n    timeout.unref();  \n    // timeout.ref(); \u52a0\u8fd9\u4e00\u53e5\u4f1a\u8f93\u51fa1  \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c1\u662f\u4e0d\u4f1a\u8f93\u51fa\uff0c\u9664\u975e\u628a\u6ce8\u91ca\u53bb\u6389\u3002Unref\u548cref\u662f\u76f8\u53cd\u7684\u53c2\u6570\uff0c\u5373\u628a\u5b9a\u65f6\u5668\u6a21\u5757\u5bf9\u5e94\u7684Libuv handle\u6539\u6210unref\u72b6\u6001\u3002</p>"},{"location":"chapter11-setImmediate%E5%92%8CnextTick/","title":"11-setImmediate\u548cnextTick","text":"<p>setImmediate\u5bf9\u5e94Libuv\u7684check\u9636\u6bb5\u3002\u6240\u63d0\u4ea4\u7684\u4efb\u52a1\u4f1a\u5728Libuv\u4e8b\u4ef6\u5faa\u73af\u7684check\u9636\u6bb5\u88ab\u6267\u884c\uff0ccheck\u9636\u6bb5\u7684\u4efb\u52a1\u4f1a\u5728\u6bcf\u4e00\u8f6e\u4e8b\u4ef6\u5faa\u73af\u4e2d\u88ab\u6267\u884c\uff0c\u4f46\u662fsetImmediate\u63d0\u4ea4\u7684\u4efb\u52a1\u53ea\u4f1a\u6267\u884c\u4e00\u6b21\uff0c\u4e0b\u9762\u6211\u4eec\u4f1a\u770b\u5230Node.js\u662f\u600e\u4e48\u5904\u7406\u7684\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002</p>"},{"location":"chapter11-setImmediate%E5%92%8CnextTick/#111-setimmediate","title":"11.1 setImmediate","text":""},{"location":"chapter11-setImmediate%E5%92%8CnextTick/#1111immediate","title":"11.1.1\u8bbe\u7f6e\u5904\u7406immediate\u4efb\u52a1\u7684\u51fd\u6570","text":"<p>\u5728Node.js\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u8bbe\u7f6e\u4e86\u5904\u7406immediate\u4efb\u52a1\u7684\u51fd\u6570</p> <pre><code>    // runNextTicks\u7528\u4e8e\u5904\u7406nextTick\u4ea7\u751f\u7684\u4efb\u52a1\uff0c\u8fd9\u91cc\u4e0d\u5173\u6ce8  \n    const { processImmediate, processTimers } = getTimerCallbacks(runNextTicks);  \n    setupTimers(processImmediate, processTimers); \n</code></pre> <p>\u6211\u4eec\u5148\u770b\u770b\u4e00\u4e0bsetupTimers\uff08timer.cc\uff09\u7684\u903b\u8f91\u3002</p> <pre><code>    void SetupTimers(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      auto env = Environment::GetCurrent(args);  \n      env-&gt;set_immediate_callback_function(args[0].As&lt;Function&gt;());  \n      env-&gt;set_timers_callback_function(args[1].As&lt;Function&gt;());  \n    }  \n</code></pre> <p>SetupTimers\u5728env\u4e2d\u4fdd\u5b58\u4e86\u4e24\u4e2a\u51fd\u6570processImmediate, processTimers\uff0cprocessImmediate\u662f\u5904\u7406immediate\u4efb\u52a1\u7684\uff0cprocessTimers\u662f\u5904\u7406\u5b9a\u65f6\u5668\u4efb\u52a1\u7684\uff0c\u5728\u5b9a\u65f6\u5668\u7ae0\u8282\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u8fc7\u3002</p>"},{"location":"chapter11-setImmediate%E5%92%8CnextTick/#1112-check","title":"11.1.2 \u6ce8\u518ccheck\u9636\u6bb5\u7684\u56de\u8c03","text":"<p>\u5728Node.js\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u540c\u65f6\u521d\u59cb\u5316\u4e86immediate\u4efb\u52a1\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\u548c\u903b\u8f91\u3002</p> <pre><code>    void Environment::InitializeLibuv(bool start_profiler_idle_notifier) { \n      // \u521d\u59cb\u5316immediate\u76f8\u5173\u7684handle \n      uv_check_init(event_loop(), immediate_check_handle());  \n      // \u4fee\u6539\u72b6\u6001\u4e3aunref\uff0c\u907f\u514d\u6ca1\u6709\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa  \n      uv_unref(reinterpret_cast&lt;uv_handle_t*&gt;(immediate_check_handle()));  \n      // \u6fc0\u6d3bhandle\uff0c\u8bbe\u7f6e\u56de\u8c03\n      uv_check_start(immediate_check_handle(), CheckImmediate);  \n      // \u5728idle\u9636\u6bb5\u4e5f\u63d2\u5165\u4e00\u4e2a\u76f8\u5173\u7684\u8282\u70b9  \n      uv_idle_init(event_loop(), immediate_idle_handle());  \n    }  \n</code></pre> <p>Node.js\u9ed8\u8ba4\u4f1a\u5f80check\u9636\u6bb5\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u8bbe\u7f6e\u56de\u8c03\u4e3aCheckImmediate\uff0c\u4f46\u662f\u521d\u59cb\u5316\u72b6\u6001\u662funref\u7684\uff0c\u6240\u4ee5\u5982\u679c\u6ca1\u6709immediate\u4efb\u52a1\u7684\u8bdd\uff0c\u4e0d\u4f1a\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa\u3002\u6211\u4eec\u770b\u4e00\u4e0bCheckImmediate\u51fd\u6570</p> <pre><code>    void Environment::CheckImmediate(uv_check_t* handle) {  \n      // \u7701\u7565\u90e8\u5206\u4ee3\u7801  \n      // \u6ca1\u6709Immediate\u8282\u70b9\u9700\u8981\u5904\u7406  \n      if (env-&gt;immediate_info()-&gt;count() == 0 || \n             !env-&gt;can_call_into_js())  \n        return;  \n      do {  \n        // \u6267\u884cJS\u5c42\u56de\u8c03immediate_callback_function  \n        MakeCallback(env-&gt;isolate(),  \n                     env-&gt;process_object(),  \n                     env-&gt;immediate_callback_function(), \n                     0,  \n                     nullptr,  \n                     {0, 0}).ToLocalChecked();  \n      } while (env-&gt;immediate_info()-&gt;has_outstanding() &amp;&amp; \n                   env-&gt;can_call_into_js());  \n      /* \n            \u6240\u6709immediate\u8282\u70b9\u90fd\u5904\u7406\u5b8c\u4e86\uff0c\u7f6eidle\u9636\u6bb5\u5bf9\u5e94\u8282\u70b9\u4e3a\u975e\u6fc0\u6d3b\u72b6\u6001\uff0c\n            \u5141\u8bb8Poll IO\u9636\u6bb5\u963b\u585e\u548c\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa  \n        */\n      if (env-&gt;immediate_info()-&gt;ref_count() == 0)  \n        env-&gt;ToggleImmediateRef(false);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u6bcf\u4e00\u8f6e\u4e8b\u4ef6\u5faa\u73af\u65f6\uff0cCheckImmediate\u90fd\u4f1a\u88ab\u6267\u884c\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\u5219\u76f4\u63a5\u8fd4\u56de\u3002\u5982\u679c\u6709\u4efb\u52a1\uff0cCheckImmediate\u51fd\u6570\u6267\u884cimmediate_callback_function\u51fd\u6570\uff0c\u8fd9\u6b63\u662fNode.js\u521d\u59cb\u5316\u7684\u65f6\u5019\u8bbe\u7f6e\u7684\u51fd\u6570processImmediate\u3002\u770b\u5b8c\u521d\u59cb\u5316\u548c\u5904\u7406immediate\u4efb\u52a1\u7684\u903b\u8f91\u540e\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u4f55\u4ea7\u751f\u4e00\u4e2aimmediate\u4efb\u52a1\u3002</p>"},{"location":"chapter11-setImmediate%E5%92%8CnextTick/#1113-setimmediate","title":"11.1.3 setImmediate\u751f\u6210\u4efb\u52a1","text":"<p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7setImmediate\u751f\u6210\u4e00\u4e2a\u4efb\u52a1\u3002</p> <pre><code>    function setImmediate(callback, arg1, arg2, arg3) {  \n      let i, args;  \n      switch (arguments.length) {  \n        case 1:  \n          break;  \n        case 2:  \n          args = [arg1];  \n          break;  \n        case 3:  \n          args = [arg1, arg2];  \n          break;  \n        default:  \n          args = [arg1, arg2, arg3];  \n          for (i = 4; i &lt; arguments.length; i++) {  \n            args[i - 1] = arguments[i];  \n          }  \n          break;  \n      }  \n\n      return new Immediate(callback, args);  \n    }   \n</code></pre> <p>setImmediate\u7684\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u65b0\u5efa\u4e00\u4e2aImmediate\u3002\u6211\u4eec\u770b\u4e00\u4e0bImmediate\u7684\u7c7b\u3002 </p> <pre><code>    const Immediate = class Immediate {  \n      constructor(callback, args) {  \n        this._idleNext = null;  \n        this._idlePrev = null;  \n        this._onImmediate = callback;  \n        this._argv = args;  \n        this._destroyed = false;  \n        this[kRefed] = false;    \n        this.ref();  \n        // Immediate\u94fe\u8868\u7684\u8282\u70b9\u4e2a\u6570\uff0c\u5305\u62ecref\u548cunref\u72b6\u6001  \n        immediateInfo[kCount]++;  \n        // \u52a0\u5165\u94fe\u8868\u4e2d  \n        immediateQueue.append(this);  \n      }  \n      // \u6253\u4e0aref\u6807\u8bb0\uff0c\u5f80Libuv\u7684idle\u94fe\u8868\u63d2\u5165\u4e00\u4e2a\u6fc0\u6d3b\u72b6\u6001\u7684\u8282\u70b9\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u7684\u8bdd  \n      ref() {    \n        if (this[kRefed] === false) {  \n          this[kRefed] = true;  \n          if (immediateInfo[kRefCount]++ === 0)  \n            toggleImmediateRef(true);  \n        }  \n        return this;  \n      }  \n      // \u548c\u4e0a\u9762\u76f8\u53cd  \n      unref() {  \n        if (this[kRefed] === true) {  \n          this[kRefed] = false;  \n          if (--immediateInfo[kRefCount] === 0)  \n            toggleImmediateRef(false);  \n        }  \n        return this;  \n      }  \n\n      hasRef() {  \n        return !!this[kRefed];  \n      }  \n    };  \n</code></pre> <p>Immediate\u7c7b\u4e3b\u8981\u505a\u4e86\u4e24\u4e2a\u4e8b\u60c5\u3002 </p> <p>1 \u751f\u6210\u4e00\u4e2a\u8282\u70b9\u63d2\u5165\u5230\u94fe\u8868\u3002</p> <pre><code>    const immediateQueue = new ImmediateList();  \n\n    // \u53cc\u5411\u975e\u5faa\u73af\u7684\u94fe\u8868  \n    function ImmediateList() {  \n      this.head = null;  \n      this.tail = null;  \n    }  \n    ImmediateList.prototype.append = function(item) {  \n      // \u5c3e\u6307\u9488\u975e\u7a7a\uff0c\u8bf4\u660e\u94fe\u8868\u975e\u7a7a\uff0c\u76f4\u63a5\u8ffd\u52a0\u5728\u5c3e\u8282\u70b9\u540e\u9762  \n      if (this.tail !== null) {  \n        this.tail._idleNext = item;  \n        item._idlePrev = this.tail;  \n      } else {  \n        // \u5c3e\u6307\u9488\u662f\u7a7a\u8bf4\u660e\u94fe\u8868\u662f\u7a7a\u7684\uff0c\u5934\u5c3e\u6307\u9488\u90fd\u6307\u5411item  \n        this.head = item;  \n      }  \n      this.tail = item;  \n    };  \n\n    ImmediateList.prototype.remove = function(item) {  \n      // \u5982\u679citem\u5728\u4e2d\u95f4\u5219\u81ea\u5df1\u5168\u8eab\u800c\u9000\uff0c\u524d\u540e\u4e24\u4e2a\u8282\u70b9\u8fde\u4e0a  \n      if (item._idleNext !== null) {  \n        item._idleNext._idlePrev = item._idlePrev;  \n      }  \n\n      if (item._idlePrev !== null) {  \n        item._idlePrev._idleNext = item._idleNext;  \n      }  \n      // \u662f\u5934\u6307\u9488\uff0c\u5219\u9700\u8981\u66f4\u65b0\u5934\u6307\u9488\u6307\u5411item\u7684\u4e0b\u4e00\u4e2a\uff0c\u56e0\u4e3aitem\u88ab\u5220\u9664\u4e86\uff0c\u5c3e\u6307\u9488\u540c\u7406  \n      if (item === this.head)  \n        this.head = item._idleNext;  \n      if (item === this.tail)  \n        this.tail = item._idlePrev;  \n      // \u91cd\u7f6e\u524d\u540e\u6307\u9488  \n      item._idleNext = null;  \n      item._idlePrev = null;  \n    };  \n</code></pre> <p>2 \u5982\u679c\u8fd8\u6ca1\u6709\u5f80Libuv\u7684idle\u94fe\u8868\u91cc\u63d2\u5165\u4e00\u4e2a\u6fc0\u6d3b\u8282\u70b9\u7684\u8bdd\uff0c\u5219\u63d2\u5165\u4e00\u4e2a\u3002\u4ece\u4e4b\u524d\u7684\u5206\u6790\uff0c\u6211\u4eec\u77e5\u9053\uff0cNode.js\u5728check\u9636\u6bb5\u63d2\u5165\u4e86\u4e00\u4e2aunref\u8282\u70b9\uff0c\u5728\u6bcf\u6b21check\u9636\u6bb5\u90fd\u4f1a\u6267\u884c\u8be5\u8282\u70b9\u7684\u56de\u8c03\uff0c\u90a3\u4e48\u8fd9\u4e2aidle\u8282\u70b9\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u7b54\u6848\u5728uv_backend_timeout\u51fd\u6570\u4e2d\uff0cuv_backend_timeout\u5b9a\u4e49\u4e86Poll IO\u963b\u585e\u7684\u65f6\u957f\uff0c\u5982\u679c\u6709ref\u72b6\u6001\u7684idle\u8282\u70b9\u5219Poll IO\u9636\u6bb5\u4e0d\u4f1a\u963b\u585e\uff08\u4f46\u662f\u4e0d\u4f1a\u5224\u65ad\u662f\u5426\u6709check\u8282\u70b9\uff09\u3002\u6240\u4ee5\u5f53\u6709immediate\u4efb\u52a1\u65f6\uff0cNode.js\u4f1a\u628a\u8fd9\u4e2aidle\u63d2\u5165idle\u9636\u6bb5\u4e2d\uff0c\u8868\u793a\u6709\u4efb\u52a1\u5904\u7406\uff0c\u4e0d\u80fd\u963b\u585ePoll IO\u9636\u6bb5\u3002\u6ca1\u6709immediate\u4efb\u52a1\u65f6\uff0c\u5219\u79fb\u9664idle\u8282\u70b9\u3002\u603b\u7684\u6765\u8bf4\uff0cidle\u8282\u70b9\u7684\u610f\u4e49\u662f\u6807\u8bb0\u662f\u5426\u6709immediate\u4efb\u52a1\u9700\u8981\u5904\u7406\uff0c\u6709\u7684\u8bdd\u5c31\u4e0d\u80fd\u963b\u585ePoll IO\u9636\u6bb5\uff0c\u5e76\u4e14\u4e0d\u80fd\u9000\u51fa\u4e8b\u4ef6\u5faa\u73af\u3002</p> <pre><code>    void ToggleImmediateRef(const FunctionCallbackInfo&lt;Value&gt;&amp; args) { \n      Environment::GetCurrent(args)-&gt;ToggleImmediateRef(args[0]-&gt;IsTrue())\n    }  \n\n    void Environment::ToggleImmediateRef(bool ref) {  \n      if (started_cleanup_) return;  \n      // \u6539\u53d8handle\u7684\u72b6\u6001\uff08\u6fc0\u6d3b\u6216\u4e0d\u6fc0\u6d3b\uff09\uff0c\u9632\u6b62\u5728Poll IO\u9636\u6bb5\u963b\u585e  \n      if (ref) { \n        uv_idle_start(immediate_idle_handle(), [](uv_idle_t*){ });  \n      } else {  \n            // \u4e0d\u963b\u585ePoll IO\uff0c\u5141\u8bb8\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa\n        uv_idle_stop(immediate_idle_handle());  \n      }  \n    }  \n</code></pre> <p>\u8fd9\u662fsetImmediate\u51fd\u6570\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002\u548c\u5b9a\u65f6\u5668\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528immediate\u4efb\u52a1\u7684ref\u548cunref\u51fd\u6570\uff0c\u63a7\u5236\u5b83\u5bf9\u4e8b\u4ef6\u5faa\u73af\u7684\u5f71\u54cd\u3002 </p>"},{"location":"chapter11-setImmediate%E5%92%8CnextTick/#1114-setimmediate","title":"11.1.4 \u5904\u7406setImmediate\u4ea7\u751f\u7684\u4efb\u52a1","text":"<p>\u6700\u540e\u6211\u4eec\u770b\u4e00\u4e0b\u5728check\u9636\u6bb5\u65f6\uff0c\u662f\u5982\u4f55\u5904\u7406immediate\u4efb\u52a1\u7684\u3002\u7531\u524d\u9762\u5206\u6790\u6211\u4eec\u77e5\u9053processImmediate\u51fd\u6570\u662f\u5904\u7406immediate\u4efb\u52a1\u7684\u51fd\u6570\uff0c\u6765\u81eagetTimerCallbacks\uff08internal/timer.js\uff09\u3002</p> <pre><code>    function processImmediate() {  \n       /*\n           \u4e0a\u6b21\u6267\u884cprocessImmediate\u7684\u65f6\u5019\u5982\u679c\u7531\u672a\u6355\u83b7\u7684\u5f02\u5e38\uff0c\n           \u5219outstandingQueue\u4fdd\u5b58\u4e86\u672a\u6267\u884c\u7684\u8282\u70b9\uff0c\u4e0b\u6b21\u6267\u884cprocessImmediate\u7684\u65f6\u5019\uff0c\n           \u4f18\u5148\u6267\u884coutstandingQueue\u961f\u5217\u7684\u8282\u70b9  \n       */\n       const queue = outstandingQueue.head !== null ?  \n         outstandingQueue : immediateQueue;  \n       let immediate = queue.head;  \n       /* \n         \u5728\u6267\u884cimmediateQueue\u961f\u5217\u7684\u8bdd\uff0c\u5148\u7f6e\u7a7a\u961f\u5217\uff0c\u907f\u514d\u6267\u884c\u56de\u8c03\n             \u7684\u65f6\u5019\u4e00\u76f4\u5f80\u961f\u5217\u52a0\u8282\u70b9\uff0c\u6b7b\u5faa\u73af\u3002 \u6240\u4ee5\u65b0\u52a0\u7684\u63a5\u53e3\u4f1a\u63d2\u5165\u65b0\u7684\u961f\u5217\uff0c\n             \u4e0d\u4f1a\u5728\u672c\u6b21\u88ab\u6267\u884c\u3002\u5e76\u6253\u4e00\u4e2a\u6807\u8bb0,\u5168\u90e8immediateQueue\u8282\u70b9\u90fd\u88ab\u6267\n             \u884c\u5219\u6e05\u7a7a\uff0c\u5426\u5219\u4f1a\u518d\u6267\u884cprocessImmediate\u4e00\u6b21\uff0c\u89c1Environment::CheckImmediate \n       */  \n       if (queue !== outstandingQueue) {  \n         queue.head = queue.tail = null;  \n         immediateInfo[kHasOutstanding] = 1;  \n       }  \n\n       let prevImmediate;  \n       let ranAtLeastOneImmediate = false;  \n       while (immediate !== null) {  \n         // \u6267\u884c\u5fae\u4efb\u52a1  \n         if (ranAtLeastOneImmediate)  \n           runNextTicks();  \n         else  \n           ranAtLeastOneImmediate = true;  \n\n         // \u5fae\u4efb\u52a1\u628a\u8be5\u8282\u70b9\u5220\u9664\u4e86\uff0c\u5219\u4e0d\u9700\u8981\u6307\u5411\u5b83\u7684\u56de\u8c03\u4e86\uff0c\u7ee7\u7eed\u4e0b\u4e00\u4e2a  \n         if (immediate._destroyed) {  \n           outstandingQueue.head = immediate = prevImmediate._idleNext;  \n           continue;  \n         }  \n\n         immediate._destroyed = true;  \n         // \u6267\u884c\u5b8c\u8981\u4fee\u6539\u4e2a\u6570  \n         immediateInfo[kCount]--;  \n         if (immediate[kRefed])  \n           immediateInfo[kRefCount]--;  \n         immediate[kRefed] = null;  \n         // \u89c1\u4e0a\u9762if (immediate._destroyed)\u7684\u6ce8\u91ca  \n         prevImmediate = immediate;  \n         // \u6267\u884c\u56de\u8c03\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9  \n         try {  \n           const argv = immediate._argv;  \n           if (!argv)  \n             immediate._onImmediate();  \n           else  \n             immediate._onImmediate(...argv);  \n         } finally {  \n           immediate._onImmediate = null;  \n           outstandingQueue.head = immediate = immediate._idleNext;  \n         }  \n       }  \n       // \u5f53\u524d\u6267\u884c\u7684\u662foutstandingQueue\u7684\u8bdd\u5219\u628a\u5b83\u6e05\u7a7a  \n       if (queue === outstandingQueue)  \n         outstandingQueue.head = null;  \n       // \u5168\u90e8\u8282\u70b9\u6267\u884c\u5b8c  \n       immediateInfo[kHasOutstanding] = 0;  \n     }  \n</code></pre> <p>processImmediate\u7684\u903b\u8f91\u5c31\u662f\u9010\u4e2a\u6267\u884cimmediate\u4efb\u52a1\u961f\u5217\u7684\u8282\u70b9\u3002Immediate\u5206\u4e24\u4e2a\u961f\u5217\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u63d2\u5165\u7684immediate\u8282\u70b9\u63d2\u5165\u5230immediateQueue\u961f\u5217\u3002\u5982\u679c\u6267\u884c\u7684\u65f6\u5019\u6709\u5f02\u5e38\uff0c\u5219\u672a\u5904\u7406\u5b8c\u7684\u8282\u70b9\u5c31\u4f1a\u88ab\u63d2\u5165\u5230outstandingQueue\u961f\u5217\uff0c\u7b49\u4e0b\u4e00\u6b21\u6267\u884c\u3002\u53e6\u5916\u6211\u4eec\u770b\u5230runNextTicks\u3002runNextTicks\u5728\u6bcf\u6267\u884c\u5b8cimmediate\u8282\u70b9\u540e\uff0c\u90fd\u5148\u5904\u7406tick\u4efb\u52a1\u7136\u540e\u518d\u5904\u7406\u4e0b\u4e00\u4e2aimmediate\u8282\u70b9\u3002</p>"},{"location":"chapter11-setImmediate%E5%92%8CnextTick/#1115-nodejssettimeoutfn0setimmediate","title":"11.1.5 Node.js\u7684setTimeout(fn,0)\u548csetImmediate\u8c01\u5148\u6267\u884c\u7684\u95ee\u9898","text":"<p>\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801</p> <pre><code>    setTimeout(()=&gt;{ console.log('setTimeout'); },0)  \n    setImmediate(()=&gt;{ console.log('setImmedate');})  \n</code></pre> <p>\u6211\u4eec\u6267\u884c\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f1a\u53d1\u73b0\u8f93\u51fa\u662f\u4e0d\u786e\u5b9a\u7684\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u3002Node.js\u7684\u4e8b\u4ef6\u5faa\u73af\u5206\u4e3a\u51e0\u4e2a\u9636\u6bb5(phase)\u3002setTimeout\u662f\u5c5e\u4e8e\u5b9a\u65f6\u5668\u9636\u6bb5\uff0csetImmediate\u662f\u5c5e\u4e8echeck\u9636\u6bb5\u3002\u987a\u5e8f\u4e0a\u5b9a\u65f6\u5668\u9636\u6bb5\u662f\u6bd4check\u66f4\u65e9\u88ab\u6267\u884c\u7684\u3002\u5176\u4e2dsetTimeout\u7684\u5b9e\u73b0\u4ee3\u7801\u91cc\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7ec6\u8282\u3002</p> <pre><code>    after *= 1; // coalesce to number or NaN  \n      if (!(after &gt;= 1 &amp;&amp; after &lt;= TIMEOUT_MAX)) {  \n        if (after &gt; TIMEOUT_MAX) {  \n          process.emitWarning(`\u9519\u8bef\u63d0\u793a`);  \n        }  \n        after = 1; // schedule on next tick, follows browser behavior  \n      }  \n</code></pre> <p>\u6211\u4eec\u53d1\u73b0\u867d\u7136\u6211\u4eec\u4f20\u7684\u8d85\u65f6\u65f6\u95f4\u662f0\uff0c\u4f46\u662f0\u4e0d\u662f\u5408\u6cd5\u503c\uff0cNode.js\u4f1a\u628a\u8d85\u65f6\u65f6\u95f4\u53d8\u62101\u3002\u8fd9\u5c31\u662f\u5bfc\u81f4\u4e0a\u9762\u7684\u4ee3\u7801\u8f93\u51fa\u4e0d\u786e\u5b9a\u7684\u539f\u56e0\u3002\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b\u3002Node.js\u542f\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u7f16\u8bd1\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u5f00\u59cb\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u6302\u8f7d\u4e00\u4e2asetImmediate\u8282\u70b9\u5728\u961f\u5217\u3002\u7136\u540e\u8fdb\u5165Libuv\u7684\u4e8b\u4ef6\u5faa\u73af\uff0c\u7136\u540e\u6267\u884c\u5b9a\u65f6\u5668\u9636\u6bb5\uff0cLibuv\u5224\u65ad\u4ece\u5f00\u542f\u5b9a\u65f6\u5668\u5230\u73b0\u5728\u662f\u5426\u5df2\u7ecf\u8fc7\u53bb\u4e861\u6beb\u79d2\uff0c\u662f\u7684\u8bdd\uff0c\u6267\u884c\u5b9a\u65f6\u5668\u56de\u8c03\uff0c\u5426\u5219\u6267\u884c\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u6267\u884c\u5b8c\u5176\u5b83\u9636\u6bb5\u540e\uff0c\u4f1a\u6267\u884ccheck\u9636\u6bb5\u3002\u8fd9\u65f6\u5019\u5c31\u4f1a\u6267\u884csetImmediate\u7684\u56de\u8c03\u3002\u6240\u4ee5\uff0c\u4e00\u5f00\u59cb\u7684\u90a3\u6bb5\u4ee3\u7801\u7684\u8f93\u51fa\u7ed3\u679c\u662f\u53d6\u51b3\u4e8e\u542f\u52a8\u5b9a\u65f6\u5668\u7684\u65f6\u95f4\u5230Libuv\u6267\u884c\u5b9a\u65f6\u5668\u9636\u6bb5\u662f\u5426\u8fc7\u53bb\u4e861\u6beb\u79d2\u3002</p>"},{"location":"chapter11-setImmediate%E5%92%8CnextTick/#112-nexttick","title":"11.2 nextTick","text":"<p>nextTick\u7528\u4e8e\u5f02\u6b65\u6267\u884c\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u548csetTimeout\u3001setImmediate\u7c7b\u4f3c\uff0c\u4e0d\u540c\u7684\u5730\u65b9\u5728\u4e8e\u4ed6\u4eec\u7684\u6267\u884c\u65f6\u673a\uff0csetTimeout\u548csetImmediate\u7684\u4efb\u52a1\u5c5e\u4e8e\u4e8b\u4ef6\u5faa\u73af\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u662fnextTick\u7684\u4efb\u52a1\u4e0d\u5c5e\u4e8e\u4e8b\u4ef6\u5faa\u73af\u7684\u4e00\u90e8\u5206\uff0c\u5177\u4f53\u7684\u6267\u884c\u65f6\u673a\u6211\u4eec\u4f1a\u5728\u672c\u8282\u5206\u6790\u3002</p>"},{"location":"chapter11-setImmediate%E5%92%8CnextTick/#1121-nexttick","title":"11.2.1 \u521d\u59cb\u5316nextTick","text":"<p>nextTick\u51fd\u6570\u662f\u5728Node.js\u542f\u52a8\u8fc7\u7a0b\u4e2d\uff0c\u5728\u6267\u884cbootstrap/node.js\u65f6\u6302\u8f7d\u5230process\u5bf9\u8c61\u4e2d\u3002</p> <pre><code>    const { nextTick, runNextTicks } = setupTaskQueue();  \n    process.nextTick = nextTick;  \n    // \u771f\u6b63\u7684\u5b9a\u4e49\u5728task_queues.js\u3002\n    setupTaskQueue() {   \n      setTickCallback(processTicksAndRejections);  \n      return {  \n        nextTick,  \n      };  \n    },  \n</code></pre> <p>nextTick\u63a5\u4e0b\u6765\u4f1a\u8bb2\uff0csetTickCallback\u662f\u6ce8\u518c\u5904\u7406tick\u4efb\u52a1\u7684\u51fd\u6570\uff0c</p> <pre><code>    static void SetTickCallback(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n      CHECK(args[0]-&gt;IsFunction());  \n      env-&gt;set_tick_callback_function(args[0].As&lt;Function&gt;());  \n    }  \n</code></pre> <p>\u53ea\u662f\u7b80\u5355\u5730\u4fdd\u5b58\u5904\u7406tick\u4efb\u52a1\u7684\u51fd\u6570\u3002\u540e\u7eed\u4f1a\u7528\u5230</p>"},{"location":"chapter11-setImmediate%E5%92%8CnextTick/#1122-nexttick","title":"11.2.2 nextTick\u751f\u4ea7\u4efb\u52a1","text":"<pre><code>    function nextTick(callback) {  \n      let args;  \n      switch (arguments.length) {  \n        case 1: break;  \n        case 2: args = [arguments[1]]; break;  \n        case 3: args = [arguments[1], arguments[2]]; break;  \n        case 4: args = [arguments[1], arguments[2], arguments[3]]; break;  \n        default:  \n          args = new Array(arguments.length - 1);  \n          for (let i = 1; i &lt; arguments.length; i++)  \n            args[i - 1] = arguments[i];  \n      }  \n      // \u7b2c\u4e00\u4e2a\u4efb\u52a1\uff0c\u5f00\u542ftick\u5904\u7406\u903b\u8f91  \n      if (queue.isEmpty())  \n        setHasTickScheduled(true);  \n      const asyncId = newAsyncId();  \n      const triggerAsyncId = getDefaultTriggerAsyncId();  \n      const tickObject = {  \n        [async_id_symbol]: asyncId,  \n        [trigger_async_id_symbol]: triggerAsyncId,  \n        callback,  \n        args  \n      };  \n      // \u63d2\u5165\u961f\u5217  \n      queue.push(tickObject);  \n    }  \n</code></pre> <p>\u8fd9\u5c31\u662f\u6211\u4eec\u6267\u884cnextTick\u65f6\u7684\u903b\u8f91\u3002\u6bcf\u6b21\u8c03\u7528nextTick\u90fd\u4f1a\u5f80\u961f\u5217\u4e2d\u8ffd\u52a0\u4e00\u4e2a\u8282\u70b9\u3002</p>"},{"location":"chapter11-setImmediate%E5%92%8CnextTick/#1123-tick","title":"11.2.3 \u5904\u7406tick\u4efb\u52a1","text":"<p>\u6211\u4eec\u518d\u770b\u4e00\u4e0b\u5904\u7406\u7684tick\u4efb\u52a1\u7684\u903b\u8f91\u3002Nodejs\u5728\u521d\u59cb\u5316\u65f6\uff0c\u901a\u8fc7\u6267\u884csetTickCallback(processTicksAndRejections)\u6ce8\u518c\u4e86\u5904\u7406tick\u4efb\u52a1\u7684\u51fd\u6570\u3002Node.js\u5728\u521d\u59cb\u5316\u65f6\u628a\u5904\u7406tick\u4efb\u52a1\u7684\u51fd\u6570\u4fdd\u5b58\u5230env\u4e2d\u3002\u53e6\u5916\uff0cNodejs\u4f7f\u7528TickInfo\u7c7b\u7ba1\u7406tick\u7684\u903b\u8f91\u3002</p> <pre><code>    class TickInfo : public MemoryRetainer {  \n     public:  \n      inline AliasedUint8Array&amp; fields();  \n      inline bool has_tick_scheduled() const;  \n      inline bool has_rejection_to_warn() const;  \n     private:  \n      inline explicit TickInfo(v8::Isolate* isolate);  \n      enum Fields { kHasTickScheduled = 0, kHasRejectionToWarn, kFieldsCount };  \n\n      AliasedUint8Array fields_;  \n    };  \n</code></pre> <p>TickInfo\u4e3b\u8981\u662f\u6709\u4e24\u4e2a\u6807\u8bb0\u4f4d\uff0ckHasTickScheduled\u6807\u8bb0\u662f\u5426\u6709tick\u4efb\u52a1\u9700\u8981\u5904\u7406\u3002\u7136\u540e\u901a\u8fc7InternalCallbackScope\u7c7b\u7684\u5bf9\u8c61\u65b9\u6cd5Close\u51fd\u6570\u6267\u884ctick_callback_function\u3002\u5f53Nodejs\u5e95\u5c42\u9700\u8981\u6267\u884c\u4e00\u4e2ajs\u56de\u8c03\u65f6\uff0c\u4f1a\u8c03\u7528AsyncWrap\u7684MakeCallback\u3002MakeCallback\u91cc\u9762\u8c03\u7528\u4e86InternalMakeCallback\u3002</p> <pre><code>    MaybeLocal&lt;Value&gt; InternalMakeCallback(Environment* env, Local&lt;Object&gt; recv, \n    const Local&lt;Function&gt; callback, int argc, Local&lt;Value&gt; argv[],\n    async_context asyncContext) {  \n      InternalCallbackScope scope(env, recv, asyncContext);  \n      // \u6267\u884c\u7528\u6237\u5c42js\u56de\u8c03  \n      scope.Close();  \n\n      return ret;  \n    }  \n</code></pre> <p>\u6211\u4eec\u770bInternalCallbackScope \u7684Close</p> <pre><code>    void InternalCallbackScope::Close() {  \n      // \u7701\u7565\u90e8\u5206\u4ee3\u7801  \n      TickInfo* tick_info = env_-&gt;tick_info();  \n      // \u6ca1\u6709tick\u4efb\u52a1\u5219\u4e0d\u9700\u8981\u5f80\u4e0b\u8d70\uff0c\u5728\u63d2\u5165tick\u4efb\u52a1\u7684\u65f6\u5019\u4f1a\u8bbe\u7f6e\u8fd9\u4e2a\u4e3atrue\uff0c\u6ca1\u6709\u4efb\u52a1\u65f6\u53d8\u6210false  \n      if (!tick_info-&gt;has_tick_scheduled() &amp;&amp; !tick_info-&gt;has_rejection_to_warn()) {  \n        return;  \n      }  \n\n      HandleScope handle_scope(env_-&gt;isolate());  \n      Local&lt;Object&gt; process = env_-&gt;process_object();  \n\n      if (!env_-&gt;can_call_into_js()) return;  \n      // \u5904\u7406tick\u7684\u51fd\u6570  \n      Local&lt;Function&gt; tick_callback = env_-&gt;tick_callback_function();  \n      // \u5904\u7406tick\u4efb\u52a1  \n      if (tick_callback-&gt;Call(env_-&gt;context(), process, 0, nullptr).IsEmpty()) {  \n        failed_ = true;  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u6bcf\u6b21\u6267\u884cjs\u5c42\u7684\u56de\u8c03\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u5904\u7406tick\u4efb\u52a1\u3002Close\u51fd\u6570\u53ef\u4ee5\u4e3b\u52a8\u8c03\u7528\uff0c\u6216\u8005\u5728InternalCallbackScope\u5bf9\u8c61\u6790\u6784\u7684\u65f6\u5019\u88ab\u8c03\u7528\u3002\u9664\u4e86\u6267\u884cjs\u56de\u8c03\u65f6\u662f\u4e3b\u52a8\u8c03\u7528Close\u5916\uff0c\u4e00\u822c\u5904\u7406tick\u4efb\u52a1\u7684\u65f6\u95f4\u70b9\u5c31\u662f\u5728InternalCallbackScope\u5bf9\u8c61\u88ab\u6790\u6784\u7684\u65f6\u5019\u3002\u6240\u4ee5\u5728\u5b9a\u4e49\u4e86InternalCallbackScope\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u4e00\u822c\u5c31\u4f1a\u5728\u5bf9\u8c61\u6790\u6784\u7684\u65f6\u5019\uff0c\u8fdb\u884ctick\u4efb\u52a1\u7684\u5904\u7406\u3002\u53e6\u5916\u4e00\u79cd\u5c31\u662f\u5728\u6267\u884c\u7684js\u56de\u8c03\u91cc\uff0c\u8c03\u7528runNextTicks\u5904\u7406tick\u4efb\u52a1\u3002\u6bd4\u5982\u6267\u884cimmediate\u4efb\u52a1\u7684\u8fc7\u7a0b\u4e2d\u3002</p> <pre><code>    function runNextTicks() {  \n      if (!hasTickScheduled() &amp;&amp; !hasRejectionToWarn())  \n        runMicrotasks();  \n      if (!hasTickScheduled() &amp;&amp; !hasRejectionToWarn())  \n        return;  \n      processTicksAndRejections();  \n    }  \n</code></pre> <p>\u6211\u4eec\u770bprocessTicksAndRejections\u662f\u5982\u4f55\u5904\u7406tick\u4efb\u52a1\u7684\u3002</p> <pre><code>    function processTicksAndRejections() {  \n      let tock;  \n      do {  \n        while (tock = queue.shift()) {  \n          const asyncId = tock[async_id_symbol];  \n          emitBefore(asyncId, tock[trigger_async_id_symbol]);  \n\n          try {  \n            const callback = tock.callback;  \n            if (tock.args === undefined) {  \n              callback();  \n            } else {  \n              const args = tock.args;  \n              switch (args.length) {  \n                case 1: callback(args[0]); break;  \n                case 2: callback(args[0], args[1]); break;  \n                case 3: callback(args[0], args[1], args[2]); break;  \n                case 4: callback(args[0], args[1], args[2], args[3]); break;  \n                default: callback(...args);  \n              }  \n            }  \n          } finally {  \n            if (destroyHooksExist())  \n              emitDestroy(asyncId);  \n          }  \n\n          emitAfter(asyncId);  \n        }  \n        runMicrotasks();  \n      } while (!queue.isEmpty() || processPromiseRejections());  \n      setHasTickScheduled(false);  \n      setHasRejectionToWarn(false);  \n    }  \n</code></pre> <p>\u4eceprocessTicksAndRejections\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cNode.js\u662f\u5b9e\u65f6\u4ece\u4efb\u52a1\u961f\u5217\u91cc\u53d6\u8282\u70b9\u6267\u884c\u7684\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u5728nextTick\u7684\u56de\u8c03\u91cc\u4e00\u76f4\u8c03\u7528nextTick\u7684\u8bdd\uff0c\u5c31\u4f1a\u5bfc\u81f4\u6b7b\u5faa\u73af\u3002</p> <pre><code>    function test() {  \n      process.nextTick(() =&gt; {  \n        console.log(1);  \n        test()  \n      });  \n    }  \n    test();  \n\n    setTimeout(() =&gt; {  \n     console.log(2)  \n    }, 10)  \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u4f1a\u4e00\u76f4\u8f93\u51fa1\uff0c\u4e0d\u4f1a\u8f93\u51fa2\u3002\u800c\u5728Nodejs\u6e90\u7801\u7684\u5f88\u591a\u5730\u65b9\u90fd\u5904\u7406\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u9996\u5148\u628a\u8981\u6267\u884c\u7684\u4efb\u52a1\u961f\u5217\u79fb\u5230\u4e00\u4e2a\u53d8\u91cfq2\u4e2d\uff0c\u6e05\u7a7a\u4e4b\u524d\u7684\u961f\u5217q1\u3002\u63a5\u7740\u904d\u5386q2\u6307\u5411\u7684\u961f\u5217\uff0c\u5982\u679c\u6267\u884c\u56de\u8c03\u7684\u65f6\u5019\u53c8\u65b0\u589e\u4e86\u8282\u70b9\uff0c\u53ea\u4f1a\u52a0\u5165\u5230q1\u4e2d\u3002q2\u4e0d\u4f1a\u5bfc\u81f4\u6b7b\u5faa\u73af\u3002</p>"},{"location":"chapter11-setImmediate%E5%92%8CnextTick/#1124-nexttick","title":"11.2.4 nextTick\u7684\u4f7f\u7528","text":"<p>\u6211\u4eec\u77e5\u9053nextTick\u53ef\u7528\u4e8e\u5ef6\u8fdf\u6267\u884c\u4e00\u4e9b\u903b\u8f91\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u54ea\u4e9b\u573a\u666f\u4e0b\u53ef\u4ee5\u4f7f\u7528nextTick\u3002</p> <pre><code>    const { EventEmitter } = require('events');  \n    class DemoEvents extends EventEmitter {  \n      constructor() {  \n        super();  \n        this.emit('start');  \n      }  \n    }  \n\n    const demoEvents = new DemoEvents();  \n    demoEvents.on('start', () =&gt; {  \n      console.log('start');  \n    });  \n</code></pre> <p>\u4ee5\u4e0a\u4ee3\u7801\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4f1a\u89e6\u53d1start\u4e8b\u4ef6\uff0c\u4f46\u662f\u4e8b\u4ef6\u7684\u6ce8\u518c\u5374\u5728\u6784\u9020\u51fd\u6570\u4e4b\u540e\u6267\u884c\uff0c\u800c\u5728\u6784\u9020\u51fd\u6570\u4e4b\u524d\u6211\u4eec\u8fd8\u6ca1\u6709\u62ff\u5230DemoEvents\u5bf9\u8c61\uff0c\u65e0\u6cd5\u5b8c\u6210\u4e8b\u4ef6\u7684\u6ce8\u518c\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528nextTick\u3002</p> <pre><code>    const { EventEmitter } = require('events');  \n    class DemoEvents extends EventEmitter {  \n      constructor() {  \n        super();  \n        process.nextTick(() =&gt; {  \n          this.emit('start');  \n        })  \n      }  \n    }  \n\n    const demoEvents = new DemoEvents();  \n    demoEvents.on('start', () =&gt; {  \n      console.log('start');  \n    });  \n</code></pre>"},{"location":"chapter12-%E6%96%87%E4%BB%B6/","title":"12-\u6587\u4ef6","text":"<p>\u6587\u4ef6\u64cd\u4f5c\u662f\u6211\u4eec\u4f7f\u7528Node.js\u65f6\u7ecf\u5e38\u4f1a\u7528\u5230\u7684\u529f\u80fd\u3002Node.js\u4e2d\uff0c\u6587\u4ef6\u6a21\u5757\u7684API\u51e0\u4e4e\u90fd\u63d0\u4f9b\u4e86\u540c\u6b65\u548c\u5f02\u6b65\u7684\u7248\u672c\u3002\u540c\u6b65\u7684API\u76f4\u63a5\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u63a5\u53e3\uff0c\u5b83\u4f1a\u5bfc\u81f4\u4e3b\u7ebf\u7a0b\u963b\u585e\u3002\u5f02\u6b65API\u5219\u662f\u5728Libuv\u63d0\u4f9b\u7684\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\u963b\u585e\u5f0fAPI\u5b9e\u73b0\u7684\u3002\u8fd9\u6837\u5c31\u4e0d\u4f1a\u5bfc\u81f4\u4e3b\u7ebf\u7a0b\u963b\u585e\u3002\u6587\u4ef6IO\u4e0d\u540c\u4e8e\u7f51\u7edcIO\uff0c\u6587\u4ef6IO\u7531\u4e8e\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u65e0\u6cd5\u50cf\u7f51\u7edcIO\u4e00\u6837\u5229\u7528\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u80fd\u529b\u76f4\u63a5\u5b9e\u73b0\u5f02\u6b65\u3002\u5728Libuv\u4e2d\uff0c\u6587\u4ef6\u64cd\u4f5c\u662f\u4ee5\u7ebf\u7a0b\u6c60\u5b9e\u73b0\u7684\uff0c\u64cd\u4f5c\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u4f1a\u963b\u585e\u5728\u67d0\u4e2a\u7ebf\u7a0b\u3002\u6240\u4ee5\u8fd9\u79cd\u5f02\u6b65\u53ea\u662f\u5bf9\u7528\u6237\u800c\u8a00\u3002\u6587\u4ef6\u6a21\u5757\u867d\u7136\u63d0\u4f9b\u7684\u63a5\u53e3\u975e\u5e38\u591a\uff0c\u6e90\u7801\u4e5f\u51e0\u5343\u884c\uff0c\u4f46\u662f\u5f88\u591a\u903b\u8f91\u90fd\u662f\u7c7b\u4f3c\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8bb2\u89e3\u4e0d\u540c\u7684\u5730\u65b9\u3002\u4ecb\u7ecd\u6587\u4ef6\u6a21\u5757\u4e4b\u524d\u5148\u4ecb\u7ecd\u4e00\u4e0bLinux\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u6587\u4ef6\u3002</p> <p>Linux\u7cfb\u7edf\u4e2d\u4e07\u7269\u7686\u6587\u4ef6\uff0c\u4ece\u5e94\u7528\u5c42\u6765\u770b\uff0c\u6211\u4eec\u62ff\u5230\u90fd\u662f\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u6211\u4eec\u64cd\u4f5c\u7684\u4e5f\u662f\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u4f7f\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\uff0c\u90a3\u662f\u56e0\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u5e2e\u6211\u4eec\u505a\u4e86\u5f88\u591a\u4e8b\u60c5\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ea\u662f\u4e00\u4e2a\u7d22\u5f15\u3002\u5b83\u7684\u5e95\u5c42\u53ef\u4ee5\u5bf9\u5e94\u5404\u79cd\u5404\u6837\u7684\u8d44\u6e90\uff0c\u5305\u62ec\u666e\u901a\u6587\u4ef6\uff0c\u7f51\u7edc\uff0c\u5185\u5b58\u7b49\u3002\u5f53\u6211\u4eec\u64cd\u4f5c\u4e00\u4e2a\u8d44\u6e90\u4e4b\u524d\uff0c\u6211\u4eec\u9996\u5148\u4f1a\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u63a5\u53e3\u62ff\u5230\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e5f\u8bb0\u5f55\u4e86\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u5e95\u5c42\u5bf9\u5e94\u7684\u8d44\u6e90\u3001\u5c5e\u6027\u3001\u64cd\u4f5c\u51fd\u6570\u7b49\u3002\u5f53\u6211\u4eec\u540e\u7eed\u64cd\u4f5c\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c\u5bf9\u5e94\u7684\u64cd\u4f5c\u3002\u6bd4\u5982\u6211\u4eec\u5728write\u7684\u65f6\u5019\uff0c\u4f20\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u666e\u901a\u6587\u4ef6\u548c\u7f51\u7edcsocket\uff0c\u5e95\u5c42\u6240\u505a\u7684\u64cd\u4f5c\u662f\u4e0d\u4e00\u6837\u7684\u3002\u4f46\u662f\u6211\u4eec\u4e00\u822c\u4e0d\u9700\u8981\u5173\u6ce8\u8fd9\u4e9b\u3002\u6211\u4eec\u53ea\u9700\u8981\u4ece\u62bd\u8c61\u7684\u89d2\u5ea6\u53bb\u4f7f\u7528\u5b83\u3002\u672c\u7ae0\u4ecb\u7ecdNode.js\u4e2d\u5173\u4e8e\u6587\u4ef6\u6a21\u5757\u7684\u539f\u7406\u548c\u5b9e\u73b0\u3002</p>"},{"location":"chapter12-%E6%96%87%E4%BB%B6/#121-api","title":"12.1 \u540c\u6b65API","text":"<p>\u5728Node.js\u4e2d\uff0c\u540c\u6b65API\u7684\u672c\u8d28\u662f\u76f4\u63a5\u5728\u4e3b\u7ebf\u7a0b\u91cc\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u7cfb\u7edf\u8c03\u7528\u3002\u4e0b\u9762\u4ee5readFileSync\u4e3a\u4f8b\uff0c\u770b\u4e00\u4e0b\u6574\u4f53\u7684\u6d41\u7a0b\uff0c\u5982\u56fe12-1\u6240\u793a\u3002  \u56fe12-1</p> <p>\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u4ee3\u7801</p> <pre><code>    function readFileSync(path, options) {  \n      options = getOptions(options, { flag: 'r' });  \n      // \u4f20\u7684\u662ffd\u8fd8\u662f\u6587\u4ef6\u8def\u5f84  \n      const isUserFd = isFd(path);   \n      // \u4f20\u7684\u662f\u8def\u5f84\uff0c\u5219\u5148\u540c\u6b65\u6253\u5f00\u6587\u4ef6  \n      const fd = isUserFd ? path : fs.openSync(path, options.flag, 0o666);  \n      // \u67e5\u770b\u6587\u4ef6\u7684stat\u4fe1\u606f\uff0c\u62ff\u5230\u6587\u4ef6\u7684\u5927\u5c0f  \n      const stats = tryStatSync(fd, isUserFd);  \n      // \u662f\u5426\u662f\u4e00\u822c\u6587\u4ef6  \n      const size = isFileType(stats, S_IFREG) ? stats[8] : 0;  \n      let pos = 0;  \n      let buffer; \n      let buffers;  \n      // \u6587\u4ef6\u5927\u5c0f\u662f0\u6216\u8005\u4e0d\u662f\u4e00\u822c\u6587\u4ef6\uff0csize\u5219\u4e3a0  \n      if (size === 0) {  \n        buffers = [];  \n      } else {  \n        // \u4e00\u822c\u6587\u4ef6\u4e14\u6709\u5927\u5c0f\uff0c\u5219\u5206\u914d\u4e00\u4e2a\u5927\u5c0f\u4e3asize\u7684buffer\uff0csize\u9700\u8981\u5c0f\u4e8e2G  \n        buffer = tryCreateBuffer(size, fd, isUserFd);  \n      }  \n\n      let bytesRead;  \n      // \u4e0d\u65ad\u5730\u540c\u6b65\u8bfb\u6587\u4ef6\u5185\u5bb9  \n      if (size !== 0) {  \n        do {  \n          bytesRead = tryReadSync(fd, isUserFd, buffer, pos, size - pos);  \n          pos += bytesRead;  \n        } while (bytesRead !== 0 &amp;&amp; pos &lt; size);  \n      } else {  \n        do {  \n          /* \n            \u6587\u4ef6\u5927\u5c0f\u4e3a0\uff0c\u6216\u8005\u4e0d\u662f\u4e00\u822c\u6587\u4ef6\uff0c\u4e5f\u5c1d\u8bd5\u53bb\u8bfb\uff0c \n            \u4f46\u662f\u56e0\u4e3a\u4e0d\u77e5\u9053\u5927\u5c0f\uff0c\u6240\u4ee5\u53ea\u80fd\u5206\u914d\u4e00\u4e2a\u4e00\u5b9a\u5927\u5c0f\u7684buffer, \n            \u6bcf\u6b21\u8bfb\u53d6\u4e00\u5b9a\u5927\u5c0f\u7684\u5185\u5bb9 \n          */  \n          buffer = Buffer.allocUnsafe(8192);  \n          bytesRead = tryReadSync(fd, isUserFd, buffer, 0, 8192);  \n          // \u628a\u8bfb\u53d6\u5230\u7684\u5185\u5bb9\u653e\u5230buffers\u91cc  \n          if (bytesRead !== 0) {  \n            buffers.push(buffer.slice(0, bytesRead));  \n          }  \n          // \u8bb0\u5f55\u8bfb\u53d6\u5230\u7684\u6570\u636e\u957f\u5ea6  \n          pos += bytesRead;  \n        } while (bytesRead !== 0);  \n      }  \n      // \u7528\u6237\u4f20\u7684\u662f\u6587\u4ef6\u8def\u5f84\uff0cNode.js\u81ea\u5df1\u6253\u5f00\u4e86\u6587\u4ef6\uff0c\u6240\u4ee5\u9700\u8981\u81ea\u5df1\u5173\u95ed  \n      if (!isUserFd)  \n        fs.closeSync(fd);  \n      // \u6587\u4ef6\u5927\u5c0f\u662f0\u6216\u8005\u975e\u4e00\u822c\u6587\u4ef6\u7684\u8bdd\uff0c\u5982\u679c\u8bfb\u5230\u4e86\u5185\u5bb9  \n      if (size === 0) {  \n        // \u628a\u8bfb\u53d6\u5230\u7684\u6240\u6709\u5185\u5bb9\u653e\u5230buffer\u4e2d  \n        buffer = Buffer.concat(buffers, pos);  \n      } else if (pos &lt; size) {  \n        buffer = buffer.slice(0, pos);  \n      }  \n      // \u7f16\u7801\n      if (options.encoding) buffer = buffer.toString(options.encoding);  \n      return buffer;  \n    }  \n</code></pre> <p>tryReadSync\u8c03\u7528\u7684\u662ffs.readSync\uff0c\u7136\u540e\u5230binding.read(node_file.cc\u4e2d\u5b9a\u4e49\u7684Read\u51fd\u6570)\u3002Read\u51fd\u6570\u4e3b\u8981\u903b\u8f91\u5982\u4e0b</p> <pre><code>    FSReqWrapSync req_wrap_sync;  \n    const int bytesRead = SyncCall(env, \n                                       args[6], \n                                       &amp;req_wrap_sync, \n                                       \"read\",\n                                       uv_fs_read, \n                                       fd, \n                                       &amp;uvbuf, \n                                       1, \n                                       pos);  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0bSyncCall\u7684\u5b9e\u73b0</p> <pre><code>    int SyncCall(Environment* env, \n                  v8::Local&lt;v8::Value&gt; ctx,  \n           FSReqWrapSync* req_wrap, \n                  const char* syscall,  \n           Func fn, \n                  Args... args) {  \n      /*\n         req_wrap-&gt;req\u662f\u4e00\u4e2auv_fs_t\u7ed3\u6784\u4f53\uff0c\u5c5e\u4e8erequest\u7c7b\uff0c\n          \u7ba1\u7406\u4e00\u6b21\u6587\u4ef6\u64cd\u4f5c\u7684\u8bf7\u6c42  \n        */\n      int err = fn(env-&gt;event_loop(), \n                        &amp;(req_wrap-&gt;req), \n                        args..., \n                        nullptr);  \n      // \u5ffd\u7565\u51fa\u9519\u5904\u7406\n      return err;  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u6700\u7ec8\u8c03\u7528\u7684\u662fLibuv\u7684uv_fs_read\uff0c\u5e76\u4f7f\u7528uv_fs_t\u7ba1\u7406\u672c\u6b21\u8bf7\u6c42\u3002\u56e0\u4e3a\u662f\u963b\u585e\u5f0f\u8c03\u7528\uff0c\u6240\u4ee5Libuv\u4f1a\u76f4\u63a5\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u7cfb\u7edf\u8c03\u7528read\u51fd\u6570\u3002\u8fd9\u662fNode.js\u4e2d\u540c\u6b65API\u7684\u8fc7\u7a0b\u3002 </p>"},{"location":"chapter12-%E6%96%87%E4%BB%B6/#122-api","title":"12.2 \u5f02\u6b65API","text":"<p>\u6587\u4ef6\u7cfb\u7edf\u7684API\u4e2d\uff0c\u5f02\u6b65\u7684\u5b9e\u73b0\u662f\u4f9d\u8d56\u4e8eLibuv\u7684\u7ebf\u7a0b\u6c60\u7684\u3002Node.js\u628a\u4efb\u52a1\u653e\u5230\u7ebf\u7a0b\u6c60\uff0c\u7136\u540e\u8fd4\u56de\u4e3b\u7ebf\u7a0b\u7ee7\u7eed\u5904\u7406\u5176\u5b83\u4e8b\u60c5\uff0c\u7b49\u5230\u6761\u4ef6\u6ee1\u8db3\u65f6\uff0c\u5c31\u4f1a\u6267\u884c\u56de\u8c03\u3002\u6211\u4eec\u4ee5readFile\u4e3a\u4f8b\u8bb2\u89e3\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u5f02\u6b65\u8bfb\u53d6\u6587\u4ef6\u7684\u6d41\u7a0b\u56fe\uff0c\u5982\u56fe12-2\u6240\u793a\u3002  \u56fe12-2</p> <p>\u4e0b\u9762\u6211\u4eec\u770b\u5177\u4f53\u7684\u5b9e\u73b0</p> <pre><code>    function readFile(path, options, callback) {  \n      callback = maybeCallback(callback || options);  \n      options = getOptions(options, { flag: 'r' });  \n      // \u7ba1\u7406\u6587\u4ef6\u8bfb\u7684\u5bf9\u8c61  \n      if (!ReadFileContext)  \n        ReadFileContext = require('internal/fs/read_file_context'); \n      const context = new ReadFileContext(callback, options.encoding)\n      // \u4f20\u7684\u662f\u6587\u4ef6\u8def\u5f84\u8fd8\u662ffd  \n      context.isUserFd = isFd(path); // File descriptor ownership  \n      // C++\u5c42\u7684\u5bf9\u8c61\uff0c\u5c01\u88c5\u4e86uv_fs_t\u7ed3\u6784\u4f53\uff0c\u7ba1\u7406\u4e00\u6b21\u6587\u4ef6\u8bfb\u8bf7\u6c42  \n      const req = new FSReqCallback();  \n      req.context = context;  \n      // \u8bbe\u7f6e\u56de\u8c03\uff0c\u6253\u5f00\u6587\u4ef6\u540e\uff0c\u6267\u884c  \n      req.oncomplete = readFileAfterOpen;  \n      // \u4f20\u7684\u662ffd\uff0c\u5219\u4e0d\u9700\u8981\u6253\u5f00\u6587\u4ef6\uff0c\u4e0b\u4e00\u4e2atick\u76f4\u63a5\u6267\u884c\u56de\u8c03\u8bfb\u53d6\u6587\u4ef6  \n      if (context.isUserFd) {  \n        process.nextTick(function tick() {  \n          req.oncomplete(null, path);  \n        });  \n        return;  \n      }  \n\n      path = getValidatedPath(path);  \n      const flagsNumber = stringToFlags(options.flags);  \n      // \u8c03\u7528C++\u5c42open\u6253\u5f00\u6587\u4ef6  \n      binding.open(pathModule.toNamespacedPath(path),  \n            flagsNumber,  \n            0o666,  \n            req);  \n    }  \n</code></pre> <p>ReadFileContext\u5bf9\u8c61\u7528\u4e8e\u7ba1\u7406\u6587\u4ef6\u8bfb\u64cd\u4f5c\u6574\u4e2a\u8fc7\u7a0b\uff0cFSReqCallback\u662f\u5bf9uv_fs_t\u7684\u5c01\u88c5\uff0c\u6bcf\u6b21\u8bfb\u64cd\u4f5c\u5bf9\u4e8eLibuv\u6765\u8bf4\u5c31\u662f\u4e00\u6b21\u8bf7\u6c42\uff0c\u8be5\u8bf7\u6c42\u7684\u4e0a\u4e0b\u6587\u5c31\u662f\u4f7f\u7528uv_fs_t\u8868\u793a\u3002\u8bf7\u6c42\u5b8c\u6210\u540e\uff0c\u4f1a\u6267\u884cFSReqCallback\u5bf9\u8c61\u7684oncomplete\u51fd\u6570\u3002\u6240\u4ee5\u6211\u4eec\u7ee7\u7eed\u770breadFileAfterOpen\u3002</p> <pre><code>    function readFileAfterOpen(err, fd) {  \n      const context = this.context;  \n      // \u6253\u5f00\u51fa\u9519\u5219\u76f4\u63a5\u6267\u884c\u7528\u6237\u56de\u8c03\uff0c\u4f20\u5165err  \n      if (err) {  \n        context.callback(err);  \n        return;  \n      }  \n      // \u4fdd\u5b58\u6253\u5f00\u6587\u4ef6\u7684fd  \n      context.fd = fd;  \n      // \u65b0\u5efa\u4e00\u4e2aFSReqCallback\u5bf9\u8c61\u7ba1\u7406\u4e0b\u4e00\u4e2a\u5f02\u6b65\u8bf7\u6c42\u548c\u56de\u8c03  \n      const req = new FSReqCallback();  \n      req.oncomplete = readFileAfterStat;  \n      req.context = context;  \n      // \u83b7\u53d6\u6587\u4ef6\u7684\u5143\u6570\u636e\uff0c\u62ff\u5230\u6587\u4ef6\u5927\u5c0f  \n      binding.fstat(fd, false, req);  \n    }  \n</code></pre> <p>\u62ff\u5230\u6587\u4ef6\u7684\u5143\u6570\u636e\u540e\uff0c\u6267\u884creadFileAfterStat\uff0c\u8fd9\u6bb5\u903b\u8f91\u548c\u540c\u6b65\u7684\u7c7b\u4f3c\uff0c\u6839\u636e\u5143\u6570\u636e\u4e2d\u8bb0\u5f55\u7684\u6587\u4ef6\u5927\u5c0f\uff0c\u5206\u914d\u4e00\u4e2abuffer\u7528\u4e8e\u540e\u7eed\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u3002\u7136\u540e\u6267\u884c\u8bfb\u64cd\u4f5c\u3002</p> <pre><code>    read() {  \n        let buffer;  \n        let offset;  \n        let length;  \n\n        // \u7701\u7565\u90e8\u5206buffer\u5904\u7406\u7684\u903b\u8f91  \n        const req = new FSReqCallback();  \n        req.oncomplete = readFileAfterRead;  \n        req.context = this;  \n\n        read(this.fd, buffer, offset, length, -1, req);  \n      }  \n</code></pre> <p>\u518d\u6b21\u65b0\u5efa\u4e00\u4e2aFSReqCallback\u5bf9\u8c61\u7ba1\u7406\u5f02\u6b65\u8bfb\u53d6\u64cd\u4f5c\u548c\u56de\u8c03\u3002\u6211\u4eec\u770b\u4e00\u4e0bC++\u5c42read\u51fd\u6570\u7684\u5b9e\u73b0\u3002</p> <pre><code>    // \u62ff\u5230C++\u5c42\u7684FSReqCallback\u5bf9\u8c61  \n    FSReqBase* req_wrap_async = GetReqWrap(env, args[5]);  \n    // \u5f02\u6b65\u8c03\u7528uv_fs_read  \n    AsyncCall(env, req_wrap_async, args, \"read\", UTF8, AfterInteger,uv_fs_read, fd, &amp;uvbuf, 1, pos);  \n</code></pre> <p>AsyncCall\u6700\u540e\u8c03\u7528Libuv\u7684uv_fs_read\u51fd\u6570\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\u7684\u5173\u952e\u903b\u8f91\u3002</p> <pre><code>    do {                        \\  \n        if (cb != NULL) {          \\  \n          uv__req_register(loop, req);  \\  \n          uv__work_submit(loop,    \\  \n                    &amp;req-&gt;work_req, \\  \n                    UV__WORK_FAST_IO, \\  \n                    uv__fs_work, \\  \n                    uv__fs_done); \\  \n          return 0;               \\  \n        }                          \\  \n        else {                    \\  \n          uv__fs_work(&amp;req-&gt;work_req); \\  \n          return req-&gt;result;     \\  \n        }                           \\  \n      }                            \\  \n      while (0)  \n</code></pre> <p>uv__work_submit\u662f\u7ed9\u7ebf\u7a0b\u6c60\u63d0\u4ea4\u4e00\u4e2a\u4efb\u52a1\uff0c\u5f53\u5b50\u7ebf\u7a0b\u6267\u884c\u8fd9\u4e2a\u4efb\u52a1\u65f6\uff0c\u5c31\u4f1a\u6267\u884cuv__fs_work\uff0cuv__fs_work\u4f1a\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u7cfb\u7edf\u8c03\u7528read\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u963b\u585e\u3002\u7b49\u5230\u8bfb\u53d6\u6210\u529f\u540e\u6267\u884cuv__fs_done\u3002uv__fs_done\u4f1a\u6267\u884cC++\u5c42\u7684\u56de\u8c03\uff0c\u4ece\u800c\u6267\u884cJS\u5c42\u7684\u56de\u8c03\u3002JS\u5c42\u7684\u56de\u8c03\u662freadFileAfterRead\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5177\u4f53\u5c55\u5f00\uff0creadFileAfterRead\u7684\u903b\u8f91\u662f\u5224\u65ad\u662f\u5426\u8bfb\u53d6\u5b8c\u6bd5\uff0c\u662f\u7684\u8bdd\u6267\u884c\u7528\u6237\u56de\u8c03\uff0c\u5426\u5219\u7ee7\u7eed\u53d1\u8d77\u8bfb\u53d6\u64cd\u4f5c\u3002</p>"},{"location":"chapter12-%E6%96%87%E4%BB%B6/#123","title":"12.3 \u6587\u4ef6\u76d1\u542c","text":"<p>\u6587\u4ef6\u76d1\u542c\u662f\u975e\u5e38\u5e38\u7528\u7684\u529f\u80fd\uff0c\u6bd4\u5982\u6211\u4eec\u4fee\u6539\u4e86\u6587\u4ef6\u540ewebpack\u91cd\u65b0\u6253\u5305\u4ee3\u7801\u6216\u8005Node.js\u670d\u52a1\u91cd\u542f\uff0c\u90fd\u7528\u5230\u4e86\u6587\u4ef6\u76d1\u542c\u7684\u529f\u80fd\uff0cNode.js\u63d0\u4f9b\u4e86\u4e24\u5957\u6587\u4ef6\u76d1\u542c\u7684\u673a\u5236\u3002</p>"},{"location":"chapter12-%E6%96%87%E4%BB%B6/#1231","title":"12.3.1 \u57fa\u4e8e\u8f6e\u8be2\u7684\u6587\u4ef6\u76d1\u542c\u673a\u5236","text":"<p>\u57fa\u4e8e\u8f6e\u8be2\u673a\u5236\u7684\u6587\u4ef6\u76d1\u542cAPI\u662fwatchFile\u3002\u6d41\u7a0b\u5982\u56fe12-3\u6240\u793a\u3002  \u56fe12-3</p> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u5b9e\u73b0\u3002</p> <pre><code>    function watchFile(filename, options, listener) {  \n      filename = getValidatedPath(filename);  \n      filename = pathModule.resolve(filename);  \n      let stat;  \n      // \u7701\u7565\u90e8\u5206\u53c2\u6570\u5904\u7406\u903b\u8f91  \n      options = {  \n        interval: 5007,  \n        // \u4e00\u76f4\u8f6e\u8be2  \n        persistent: true,  \n        ...options  \n      };  \n\n      // \u7f13\u5b58\u5904\u7406\uff0cfilename\u662f\u5426\u5df2\u7ecf\u5f00\u542f\u8fc7\u76d1\u542c  \n      stat = statWatchers.get(filename);  \n\n      if (stat === undefined) {  \n        if (!watchers)  \n          watchers = require('internal/fs/watchers');  \n        stat = new watchers.StatWatcher(options.bigint);  \n        // \u5f00\u542f\u76d1\u542c  \n        stat[watchers.kFSStatWatcherStart](filename,        \n                                               options.persistent, \n                                               options.interval);  \n        // \u66f4\u65b0\u7f13\u5b58            \n        statWatchers.set(filename, stat);  \n      }  \n\n      stat.addListener('change', listener);  \n      return stat;  \n    }  \n</code></pre> <p>StatWatcher\u662f\u7ba1\u7406\u6587\u4ef6\u76d1\u542c\u7684\u7c7b\uff0c\u6211\u4eec\u770b\u4e00\u4e0bwatchers.kFSStatWatcherStart\u65b9\u6cd5\u7684\u5b9e\u73b0\u3002</p> <pre><code>    StatWatcher.prototype[kFSStatWatcherStart] = function(filename,persistent, interval) {  \n      this._handle = new _StatWatcher(this[kUseBigint]);  \n      this._handle.onchange = onchange;  \n      filename = getValidatedPath(filename, 'filename'); \n      const err = this._handle.start(toNamespacedPath(filename), \n                                          interval);  \n    }  \n</code></pre> <p>\u65b0\u5efa\u4e00\u4e2a_StatWatcher\u5bf9\u8c61\uff0c_StatWatcher\u662fC++\u6a21\u5757\u63d0\u4f9b\u7684\u529f\u80fd\uff08node_stat_watcher.cc\uff09\uff0c\u7136\u540e\u6267\u884c\u5b83\u7684start\u65b9\u6cd5\u3002Start\u65b9\u6cd5\u6267\u884cLibuv\u7684uv_fs_poll_start\u5f00\u59cb\u76d1\u542c\u6587\u4ef6\u3002</p> <pre><code>    int uv_fs_poll_start(uv_fs_poll_t* handle,uv_fs_poll_cb cb,  \n    const char* path, unsigned int interval) {  \n      // \u7ba1\u7406\u6587\u4ef6\u76d1\u542c\u7684\u6570\u636e\u7ed3\u6784  \n      struct poll_ctx* ctx;  \n      uv_loop_t* loop;  \n      size_t len;  \n      int err;  \n\n      loop = handle-&gt;loop;  \n      len = strlen(path);  \n        // calloc\u4f1a\u628a\u5185\u5b58\u521d\u59cb\u5316\u4e3a0\n      ctx = uv__calloc(1, sizeof(*ctx) + len);  \n      ctx-&gt;loop = loop;  \n        // C++\u5c42\u56de\u8c03\n      ctx-&gt;poll_cb = cb;  \n      // \u591a\u4e45\u8f6e\u8be2\u4e00\u6b21  \n      ctx-&gt;interval = interval ? interval : 1;  \n      ctx-&gt;start_time = uv_now(loop);  \n      // \u5173\u8054\u7684handle  \n      ctx-&gt;parent_handle = handle;  \n      // \u76d1\u542c\u7684\u6587\u4ef6\u8def\u5f84  \n      memcpy(ctx-&gt;path, path, len + 1);  \n      // \u521d\u59cb\u5316\u5b9a\u65f6\u5668\u7ed3\u6784\u4f53  \n      err = uv_timer_init(loop, &amp;ctx-&gt;timer_handle);  \n      // \u5f02\u6b65\u67e5\u8be2\u6587\u4ef6\u5143\u6570\u636e  \n      err = uv_fs_stat(loop, &amp;ctx-&gt;fs_req, ctx-&gt;path, poll_cb);  \n\n      if (handle-&gt;poll_ctx != NULL)  \n        ctx-&gt;previous = handle-&gt;poll_ctx;  \n      // \u5173\u8054\u8d1f\u8d23\u7ba1\u7406\u8f6e\u8be2\u7684\u5bf9\u8c61  \n      handle-&gt;poll_ctx = ctx;  \n      uv__handle_start(handle);  \n      return 0;  \n    }  \n</code></pre> <p>Start\u51fd\u6570\u521d\u59cb\u5316\u4e00\u4e2apoll_ctx\u7ed3\u6784\u4f53\uff0c\u7528\u4e8e\u7ba1\u7406\u6587\u4ef6\u76d1\u542c\uff0c\u7136\u540e\u53d1\u8d77\u5f02\u6b65\u8bf7\u6c42\u6587\u4ef6\u5143\u6570\u636e\u7684\u8bf7\u6c42\uff0c\u83b7\u53d6\u5143\u6570\u636e\u540e\uff0c\u6267\u884cpoll_cb\u56de\u8c03\u3002</p> <pre><code>    static void poll_cb(uv_fs_t* req) {  \n      uv_stat_t* statbuf;  \n      struct poll_ctx* ctx;  \n      uint64_t interval;  \n      // \u901a\u8fc7\u7ed3\u6784\u4f53\u5b57\u6bb5\u83b7\u53d6\u7ed3\u6784\u4f53\u9996\u5730\u5740  \n      ctx = container_of(req, struct poll_ctx, fs_req);  \n      statbuf = &amp;req-&gt;statbuf;  \n      /* \n       \u7b2c\u4e00\u6b21\u4e0d\u6267\u884c\u56de\u8c03\uff0c\u56e0\u4e3a\u6ca1\u6709\u53ef\u5bf9\u6bd4\u7684\u5143\u6570\u636e\uff0c\u7b2c\u4e8c\u6b21\u53ca\u540e\u7eed\u7684\u64cd\u4f5c\u624d\u53ef\u80fd\n          \u6267\u884c\u56de\u8c03\uff0cbusy_polling\u521d\u59cb\u5316\u7684\u65f6\u5019\u4e3a0\uff0c\u7b2c\u4e00\u6b21\u6267\u884c\u7684\u65f6\u5019\u7f6e\n          busy_polling=1 \n      */  \n      if (ctx-&gt;busy_polling != 0)  \n        // \u51fa\u9519\u6216\u8005stat\u53d1\u751f\u4e86\u53d8\u5316\u5219\u6267\u884c\u56de\u8c03  \n        if (ctx-&gt;busy_polling &lt; 0 || \n                 !statbuf_eq(&amp;ctx-&gt;statbuf, statbuf))  \n          ctx-&gt;poll_cb(ctx-&gt;parent_handle, \n                             0,\n                            &amp;ctx-&gt;statbuf, \n                             statbuf);  \n      // \u4fdd\u5b58\u5f53\u524d\u83b7\u53d6\u5230\u7684stat\u4fe1\u606f\uff0c\u7f6e1  \n      ctx-&gt;statbuf = *statbuf;  \n      ctx-&gt;busy_polling = 1;  \n\n    out:  \n      uv_fs_req_cleanup(req);  \n\n      if (ctx-&gt;parent_handle == NULL) { \n        uv_close((uv_handle_t*)&amp;ctx-&gt;timer_handle, timer_close_cb);  \n        return;  \n      }  \n      /* \n        \u5047\u8bbe\u5728\u5f00\u59cb\u65f6\u95f4\u70b9\u4e3a1\uff0cinterval\u4e3a10\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u4e86stat\uff0cstat\n            \u5b8c\u6210\u6267\u884c\u5e76\u6267\u884cpoll_cb\u56de\u8c03\u7684\u65f6\u95f4\u70b9\u662f3\uff0c\u90a3\u4e48\u5b9a\u65f6\u5668\u7684\u8d85\u65f6\u65f6\u95f4\n            \u5219\u4e3a10-3=7\uff0c\u53737\u4e2a\u5355\u4f4d\u540e\u5c31\u8981\u89e6\u53d1\u8d85\u65f6\uff0c\u800c\u4e0d\u662f10\uff0c\u662f\u56e0\u4e3astat\n            \u963b\u585e\u6d88\u8017\u4e863\u4e2a\u5355\u4f4d\u7684\u65f6\u95f4\uff0c\u6240\u4ee5\u4e0b\u6b21\u6267\u884c\u8d85\u65f6\u56de\u8c03\u51fd\u6570\u65f6\u8bf4\u660e\u4ece\n            start\u65f6\u95f4\u70b9\u5f00\u59cb\u7b97\uff0c\u5df2\u7ecf\u7ecf\u5386\u4e86x\u5355\u4f4d\u5404interval\uff0c\u7136\u540e\u8d85\u65f6\u56de\u8c03\u91cc\n            \u53c8\u6267\u884c\u4e86stat\u51fd\u6570\uff0c\u518d\u5230\u6267\u884cstat\u56de\u8c03\uff0c\u8fd9\u4e2a\u65f6\u95f4\u70b9\u5373now=start+x\n            \u5355\u4f4d\u4e2ainterval+stat\u6d88\u8017\u7684\u65f6\u95f4\u3002\u5f97\u51fanow-start\u4e3ainterval\u7684\n            x\u500d+stat\u6d88\u8017\uff0c\u5373\u5bf9interval\u53d6\u4f59\u53ef\u5f97\u5230stat\u6d88\u8017\uff0c\u6240\u4ee5\u5f53\u524d\u8f6e\uff0c\n            \u5b9a\u65f6\u5668\u7684\u8d85\u65f6\u65f6\u95f4\u4e3ainterval - ((now-start) % interval) \n      */  \n      interval = ctx-&gt;interval;  \n      interval = (uv_now(ctx-&gt;loop) - ctx-&gt;start_time) % interval; \n\n      if (uv_timer_start(&amp;ctx-&gt;timer_handle, timer_cb, interval, 0)) \n        abort();  \n    }  \n</code></pre> <p>\u57fa\u4e8e\u8f6e\u8be2\u7684\u76d1\u542c\u6587\u4ef6\u673a\u5236\u672c\u8d28\u4e0a\u662f\u4e0d\u65ad\u8f6e\u8be2\u6587\u4ef6\u7684\u5143\u6570\u636e\uff0c\u7136\u540e\u548c\u4e0a\u4e00\u6b21\u7684\u5143\u6570\u636e\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5982\u679c\u6709\u4e0d\u4e00\u81f4\u7684\u5c31\u8ba4\u4e3a\u6587\u4ef6\u53d8\u5316\u4e86\uff0c\u56e0\u4e3a\u7b2c\u4e00\u6b21\u83b7\u53d6\u5143\u6570\u636e\u65f6\uff0c\u8fd8\u6ca1\u6709\u53ef\u4ee5\u5bf9\u6bd4\u7684\u6570\u636e\uff0c\u6240\u4ee5\u4e0d\u8ba4\u4e3a\u662f\u6587\u4ef6\u53d8\u5316\uff0c\u8fd9\u65f6\u5019\u5f00\u542f\u4e00\u4e2a\u5b9a\u65f6\u5668\u3002\u9694\u4e00\u6bb5\u65f6\u95f4\u518d\u53bb\u83b7\u53d6\u6587\u4ef6\u7684\u5143\u6570\u636e\uff0c\u5982\u6b64\u53cd\u590d\uff0c\u76f4\u5230\u7528\u6237\u8c03stop\u51fd\u6570\u505c\u6b62\u8fd9\u4e2a\u884c\u4e3a\u3002\u4e0b\u9762\u662fLibuv\u5173\u4e8e\u6587\u4ef6\u53d8\u5316\u7684\u5b9a\u4e49\u3002</p> <pre><code>    static int statbuf_eq(const uv_stat_t* a, const uv_stat_t* b) {\n      return a-&gt;st_ctim.tv_nsec == b-&gt;st_ctim.tv_nsec  \n          &amp;&amp; a-&gt;st_mtim.tv_nsec == b-&gt;st_mtim.tv_nsec  \n          &amp;&amp; a-&gt;st_birthtim.tv_nsec == b-&gt;st_birthtim.tv_nsec  \n          &amp;&amp; a-&gt;st_ctim.tv_sec == b-&gt;st_ctim.tv_sec  \n          &amp;&amp; a-&gt;st_mtim.tv_sec == b-&gt;st_mtim.tv_sec  \n          &amp;&amp; a-&gt;st_birthtim.tv_sec == b-&gt;st_birthtim.tv_sec  \n          &amp;&amp; a-&gt;st_size == b-&gt;st_size  \n          &amp;&amp; a-&gt;st_mode == b-&gt;st_mode  \n          &amp;&amp; a-&gt;st_uid == b-&gt;st_uid  \n          &amp;&amp; a-&gt;st_gid == b-&gt;st_gid  \n          &amp;&amp; a-&gt;st_ino == b-&gt;st_ino  \n          &amp;&amp; a-&gt;st_dev == b-&gt;st_dev  \n          &amp;&amp; a-&gt;st_flags == b-&gt;st_flags  \n          &amp;&amp; a-&gt;st_gen == b-&gt;st_gen;  \n    }  \n</code></pre>"},{"location":"chapter12-%E6%96%87%E4%BB%B6/#1232inotify","title":"12.3.2\u57fa\u4e8einotify\u7684\u6587\u4ef6\u76d1\u542c\u673a\u5236","text":"<p>\u6211\u4eec\u770b\u5230\u57fa\u4e8e\u8f6e\u8be2\u7684\u76d1\u542c\u5176\u5b9e\u6548\u7387\u662f\u5f88\u4f4e\u7684\uff0c\u56e0\u4e3a\u9700\u8981\u6211\u4eec\u4e0d\u65ad\u53bb\u8f6e\u8be2\u6587\u4ef6\u7684\u5143\u6570\u636e\uff0c\u5982\u679c\u6587\u4ef6\u5927\u90e8\u5206\u65f6\u95f4\u91cc\u90fd\u6ca1\u6709\u53d8\u5316\uff0c\u90a3\u5c31\u4f1a\u767d\u767d\u6d6a\u8d39CPU\u3002\u5982\u679c\u6587\u4ef6\u6539\u53d8\u4e86\u4f1a\u4e3b\u52a8\u901a\u77e5\u6211\u4eec\u90a3\u5c31\u597d\u4e86\uff0c\u8fd9\u5c31\u662f\u57fa\u4e8einotify\u673a\u5236\u7684\u6587\u4ef6\u76d1\u542c\u3002Node.js\u63d0\u4f9b\u7684\u63a5\u53e3\u662fwatch\u3002watch\u7684\u5b9e\u73b0\u548cwatchFile\u7684\u6bd4\u8f83\u7c7b\u4f3c\u3002</p> <pre><code>    function watch(filename, options, listener) {  \n      // Don't make changes directly on options object  \n      options = copyObject(options);  \n      // \u662f\u5426\u6301\u7eed\u76d1\u542c\n      if (options.persistent === undefined) \n          options.persistent = true;  \n        // \u5982\u679c\u662f\u76ee\u5f55\uff0c\u662f\u5426\u76d1\u542c\u6240\u6709\u5b50\u76ee\u5f55\u548c\u6587\u4ef6\u7684\u53d8\u5316\n      if (options.recursive === undefined) \n          options.recursive = false;  \n        // \u6709\u4e9b\u5e73\u53f0\u4e0d\u652f\u6301\n      if (options.recursive &amp;&amp; !(isOSX || isWindows))  \n        throw new ERR_FEATURE_UNAVAILABLE_ON_PLATFORM('watch recursively');  \n      if (!watchers)  \n        watchers = require('internal/fs/watchers');  \n        // \u65b0\u5efa\u4e00\u4e2aFSWatcher\u5bf9\u8c61\u7ba1\u7406\u6587\u4ef6\u76d1\u542c\uff0c\u7136\u540e\u5f00\u542f\u76d1\u542c\n      const watcher = new watchers.FSWatcher();  \n      watcher[watchers.kFSWatchStart](filename,  \n                      options.persistent,  \n                      options.recursive,  \n                      options.encoding);  \n\n      if (listener) {  \n        watcher.addListener('change', listener);  \n      }  \n\n      return watcher;  \n    }  \n</code></pre> <p>FSWatcher\u51fd\u6570\u662f\u5bf9C++\u5c42FSEvent\u6a21\u5757\u7684\u5c01\u88c5\u3002\u6211\u4eec\u6765\u770b\u4e00\u4e0bstart\u51fd\u6570\u7684\u903b\u8f91\uff0cstart\u51fd\u6570\u900f\u8fc7C++\u5c42\u8c03\u7528\u4e86Libuv\u7684uv_fs_event_start\u51fd\u6570\u3002\u5728\u8bb2\u89e3uv_fs_event_start\u51fd\u6570\u524d\uff0c\u6211\u4eec\u5148\u4e86\u89e3\u4e00\u4e0binotify\u7684\u539f\u7406\u548c\u5b83\u5728Libuv\u4e2d\u7684\u5b9e\u73b0\u3002inotify\u662fLinux\u7cfb\u7edf\u63d0\u4f9b\u7528\u4e8e\u76d1\u542c\u6587\u4ef6\u7cfb\u7edf\u7684\u673a\u5236\u3002inotify\u673a\u5236\u7684\u903b\u8f91\u5927\u81f4\u662f 1 init_inotify\u521b\u5efa\u4e00\u4e2ainotify\u7684\u5b9e\u4f8b\uff0c\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u7c7b\u4f3cepoll\u3002 2 inotify_add_watch\u5f80inotify\u5b9e\u4f8b\u6ce8\u518c\u4e00\u4e2a\u9700\u76d1\u542c\u7684\u6587\u4ef6\uff08inotify_rm_watch\u662f\u79fb\u9664\uff09\u3002 3 read(inotify\u5b9e\u4f8b\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26, &amp;buf, sizeof(buf))\uff0c\u5982\u679c\u6ca1\u6709\u4e8b\u4ef6\u89e6\u53d1\uff0c\u5219\u963b\u585e\uff08\u9664\u975e\u8bbe\u7f6e\u4e86\u975e\u963b\u585e\uff09\u3002\u5426\u5219\u8fd4\u56de\u5f85\u8bfb\u53d6\u7684\u6570\u636e\u957f\u5ea6\u3002buf\u5c31\u662f\u4fdd\u5b58\u4e86\u89e6\u53d1\u4e8b\u4ef6\u7684\u4fe1\u606f\u3002 Libuv\u5728inotify\u673a\u5236\u7684\u57fa\u7840\u4e0a\u505a\u4e86\u4e00\u5c42\u5c01\u88c5\u3002\u6211\u4eec\u770b\u4e00\u4e0binotify\u5728Libuv\u7684\u67b6\u6784\u56fe\u5982\u56fe12-4\u6240\u793a\u3002  \u56fe12-4</p> <p>\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0bLibuv\u4e2d\u7684\u5b9e\u73b0\u3002\u6211\u4eec\u4ece\u4e00\u4e2a\u4f7f\u7528\u4f8b\u5b50\u5f00\u59cb\u3002</p> <pre><code>    int main(int argc, char **argv) {  \n        // \u5b9e\u73b0\u5faa\u73af\u6838\u5fc3\u7ed3\u6784\u4f53loop  \n        loop = uv_default_loop();   \n        uv_fs_event_t *fs_event_req = malloc(sizeof(uv_fs_event_t));\n        // \u521d\u59cb\u5316fs_event_req\u7ed3\u6784\u4f53\u7684\u7c7b\u578b\u4e3aUV_FS_EVENT  \n        uv_fs_event_init(loop, fs_event_req);  \n            /* \n              argv[argc]\u662f\u6587\u4ef6\u8def\u5f84\uff0c\n              uv_fs_event_start \u5411\u5e95\u5c42\u6ce8\u518c\u76d1\u542c\u6587\u4ef6argv[argc],\n              cb\u662f\u4e8b\u4ef6\u89e6\u53d1\u65f6\u7684\u56de\u8c03 \n            */  \n        uv_fs_event_start(fs_event_req, \n                              cb, \n                              argv[argc], \n                              UV_FS_EVENT_RECURSIVE);  \n        // \u5f00\u542f\u4e8b\u4ef6\u5faa\u73af  \n        return uv_run(loop, UV_RUN_DEFAULT);  \n    }  \n</code></pre> <p>Libuv\u5728\u7b2c\u4e00\u6b21\u76d1\u542c\u6587\u4ef6\u7684\u65f6\u5019(\u8c03\u7528uv_fs_event_start\u7684\u65f6\u5019)\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2ainotify\u5b9e\u4f8b\u3002</p> <pre><code>    static int init_inotify(uv_loop_t* loop) {  \n      int err;  \n      // \u521d\u59cb\u5316\u8fc7\u4e86\u5219\u76f4\u63a5\u8fd4\u56de       \n      if (loop-&gt;inotify_fd != -1)  \n        return 0;  \n      /*\n          \u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684inotify_init\u51fd\u6570\u7533\u8bf7\u4e00\u4e2ainotify\u5b9e\u4f8b\uff0c\n          \u5e76\u8bbe\u7f6eUV__IN_NONBLOCK\uff0cUV__IN_CLOEXEC\u6807\u8bb0  \n        */\n      err = new_inotify_fd();  \n      if (err &lt; 0)  \n        return err;  \n      // \u8bb0\u5f55inotify\u5b9e\u4f8b\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26,\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\u4e00\u4e2ainotify\u5b9e\u4f8b  \n      loop-&gt;inotify_fd = err;  \n      /*\n          inotify_read_watcher\u662f\u4e00\u4e2aIO\u89c2\u5bdf\u8005\uff0c\n          uv__io_init\u8bbe\u7f6eIO\u89c2\u5bdf\u8005\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08\u5f85\u89c2\u5bdf\u7684\u6587\u4ef6\uff09\u548c\u56de\u8c03  \n        */\n      uv__io_init(&amp;loop-&gt;inotify_read_watcher, \n                    uv__inotify_read, \n                    loop-&gt;inotify_fd);  \n      // \u5f80Libuv\u4e2d\u6ce8\u518c\u8be5IO\u89c2\u5bdf\u8005\uff0c\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u4e3a\u53ef\u8bfb  \n      uv__io_start(loop, &amp;loop-&gt;inotify_read_watcher, POLLIN);  \n\n      return 0;  \n    }  \n</code></pre> <p>Libuv\u628ainotify\u5b9e\u4f8b\u5bf9\u5e94\u7684fd\u901a\u8fc7uv__io_start\u6ce8\u518c\u5230epoll\u4e2d\uff0c\u5f53\u6709\u6587\u4ef6\u53d8\u5316\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u6267\u884c\u56de\u8c03uv__inotify_read\u3002\u5206\u6790\u5b8cLibuv\u7533\u8bf7inotify\u5b9e\u4f8b\u7684\u903b\u8f91\uff0c\u6211\u4eec\u56de\u5230main\u51fd\u6570\u770b\u770buv_fs_event_start\u51fd\u6570\u3002\u7528\u6237\u4f7f\u7528uv_fs_event_start\u51fd\u6570\u6765\u5f80Libuv\u6ce8\u518c\u4e00\u4e2a\u5f85\u76d1\u542c\u7684\u6587\u4ef6\u3002\u6211\u4eec\u770b\u770b\u5b9e\u73b0\u3002</p> <pre><code>    int uv_fs_event_start(uv_fs_event_t* handle,  \n                          uv_fs_event_cb cb,  \n                          const char* path,  \n                          unsigned int flags) {  \n      struct watcher_list* w;  \n      int events;  \n      int err;  \n      int wd;  \n\n      if (uv__is_active(handle))  \n        return UV_EINVAL;  \n      // \u7533\u8bf7\u4e00\u4e2ainotify\u5b9e\u4f8b  \n      err = init_inotify(handle-&gt;loop);  \n      if (err)  \n        return err;  \n      // \u76d1\u542c\u7684\u4e8b\u4ef6  \n      events = UV__IN_ATTRIB  \n             | UV__IN_CREATE  \n             | UV__IN_MODIFY  \n             | UV__IN_DELETE  \n             | UV__IN_DELETE_SELF  \n             | UV__IN_MOVE_SELF  \n             | UV__IN_MOVED_FROM  \n             | UV__IN_MOVED_TO;  \n      // \u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u51fd\u6570\u6ce8\u518c\u4e00\u4e2a\u5f85\u76d1\u542c\u7684\u6587\u4ef6\uff0c\u8fd4\u56de\u4e00\u4e2a\u5bf9\u5e94\u4e8e\u8be5\u6587\u4ef6\u7684id  \n      wd = uv__inotify_add_watch(handle-&gt;loop-&gt;inotify_fd, path, events);  \n      if (wd == -1)  \n        return UV__ERR(errno);  \n      // \u5224\u65ad\u8be5\u6587\u4ef6\u662f\u4e0d\u662f\u5df2\u7ecf\u6ce8\u518c\u8fc7\u4e86  \n      w = find_watcher(handle-&gt;loop, wd);  \n      // \u5df2\u7ecf\u6ce8\u518c\u8fc7\u5219\u8df3\u8fc7\u63d2\u5165\u7684\u903b\u8f91  \n      if (w)  \n        goto no_insert;  \n      // \u8fd8\u6ca1\u6709\u6ce8\u518c\u8fc7\u5219\u63d2\u5165Libuv\u7ef4\u62a4\u7684\u7ea2\u9ed1\u6811  \n      w = uv__malloc(sizeof(*w) + strlen(path) + 1);  \n      if (w == NULL)  \n        return UV_ENOMEM;  \n\n      w-&gt;wd = wd;  \n      w-&gt;path = strcpy((char*)(w + 1), path);  \n      QUEUE_INIT(&amp;w-&gt;watchers);  \n      w-&gt;iterating = 0;  \n      // \u63d2\u5165Libuv\u7ef4\u62a4\u7684\u7ea2\u9ed1\u6811,inotify_watchers\u662f\u6839\u8282\u70b9  \n      RB_INSERT(watcher_root, CAST(&amp;handle-&gt;loop-&gt;inotify_watchers), w);  \n\n    no_insert:  \n      // \u6fc0\u6d3b\u8be5handle  \n      uv__handle_start(handle);  \n      // \u540c\u4e00\u4e2a\u6587\u4ef6\u53ef\u80fd\u6ce8\u518c\u4e86\u5f88\u591a\u4e2a\u56de\u8c03\uff0cw\u5bf9\u5e94\u4e00\u4e2a\u6587\u4ef6\uff0c\u6ce8\u518c\u5728\u7528\u4e00\u4e2a\u6587\u4ef6\u7684\u56de\u8c03\u6392\u6210\u961f  \n      QUEUE_INSERT_TAIL(&amp;w-&gt;watchers, &amp;handle-&gt;watchers);  \n      // \u4fdd\u5b58\u4fe1\u606f\u548c\u56de\u8c03  \n      handle-&gt;path = w-&gt;path;  \n      handle-&gt;cb = cb;  \n      handle-&gt;wd = wd;  \n\n      return 0;  \n    }  \n</code></pre> <p>\u4e0b\u9762\u6211\u4eec\u9010\u6b65\u5206\u6790\u4e0a\u9762\u7684\u51fd\u6570\u903b\u8f91\u3002 1 \u5982\u679c\u662f\u9996\u6b21\u8c03\u7528\u8be5\u51fd\u6570\u5219\u65b0\u5efa\u4e00\u4e2ainotify\u5b9e\u4f8b\u3002\u5e76\u4e14\u5f80Libuv\u63d2\u5165\u4e00\u4e2a\u89c2\u5bdf\u8005io\uff0cLibuv\u4f1a\u5728Poll IO\u9636\u6bb5\u6ce8\u518c\u5230epoll\u4e2d\u3002 2 \u5f80\u64cd\u4f5c\u7cfb\u7edf\u6ce8\u518c\u4e00\u4e2a\u5f85\u76d1\u542c\u7684\u6587\u4ef6\u3002\u8fd4\u56de\u4e00\u4e2aid\u3002 3 Libuv\u5224\u65ad\u8be5id\u662f\u4e0d\u662f\u5728\u81ea\u5df1\u7ef4\u62a4\u7684\u7ea2\u9ed1\u6811\u4e2d\u3002\u4e0d\u5728\u7ea2\u9ed1\u6811\u4e2d\uff0c\u5219\u63d2\u5165\u7ea2\u9ed1\u6811\u3002\u8fd4\u56de\u4e00\u4e2a\u7ea2\u9ed1\u6811\u4e2d\u5bf9\u5e94\u7684\u8282\u70b9\u3002\u628a\u672c\u6b21\u8bf7\u6c42\u7684\u4fe1\u606f\u5c01\u88c5\u5230handle\u4e2d\uff08\u56de\u8c03\u65f6\u9700\u8981\uff09\u3002\u7136\u540e\u628ahandle\u63d2\u5165\u521a\u624d\u8fd4\u56de\u7684\u8282\u70b9\u7684\u961f\u5217\u4e2d\u3002 \u8fd9\u65f6\u5019\u6ce8\u518c\u8fc7\u7a0b\u5c31\u5b8c\u6210\u4e86\u3002Libuv\u5728Poll IO\u9636\u6bb5\u5982\u679c\u68c0\u6d4b\u5230\u6709\u6587\u4ef6\u53d1\u751f\u53d8\u5316\uff0c\u5219\u4f1a\u6267\u884c\u56de\u8c03uv__inotify_read\u3002</p> <pre><code>    static void uv__inotify_read(uv_loop_t* loop,  \n                                 uv__io_t* dummy,  \n                                 unsigned int events) {  \n      const struct uv__inotify_event* e;  \n      struct watcher_list* w;  \n      uv_fs_event_t* h;  \n      QUEUE queue;  \n      QUEUE* q;  \n      const char* path;  \n      ssize_t size;  \n      const char *p;  \n      /* needs to be large enough for sizeof(inotify_event) + strlen(path) */  \n      char buf[4096];  \n      // \u4e00\u6b21\u53ef\u80fd\u6ca1\u6709\u8bfb\u5b8c  \n      while (1) {  \n        do  \n          // \u8bfb\u53d6\u89e6\u53d1\u7684\u4e8b\u4ef6\u4fe1\u606f\uff0csize\u662f\u6570\u636e\u5927\u5c0f\uff0cbuffer\u4fdd\u5b58\u6570\u636e  \n          size = read(loop-&gt;inotify_fd, buf, sizeof(buf));  \n        while (size == -1 &amp;&amp; errno == EINTR);  \n        // \u6ca1\u6709\u6570\u636e\u53ef\u53d6\u4e86  \n        if (size == -1) {  \n          assert(errno == EAGAIN || errno == EWOULDBLOCK);  \n          break;  \n        }  \n        // \u5904\u7406buffer\u7684\u4fe1\u606f  \n        for (p = buf; p &lt; buf + size; p += sizeof(*e) + e-&gt;len) {  \n          // buffer\u91cc\u662f\u591a\u4e2auv__inotify_event\u7ed3\u6784\u4f53\uff0c\u91cc\u9762\u4fdd\u5b58\u4e86\u4e8b\u4ef6\u4fe1\u606f\u548c\u6587\u4ef6\u5bf9\u5e94\u7684id\uff08wd\u5b57\u6bb5\uff09  \n          e = (const struct uv__inotify_event*)p;  \n\n          events = 0;  \n          if (e-&gt;mask &amp; (UV__IN_ATTRIB|UV__IN_MODIFY))  \n            events |= UV_CHANGE;  \n          if (e-&gt;mask &amp; ~(UV__IN_ATTRIB|UV__IN_MODIFY))  \n            events |= UV_RENAME;  \n          // \u901a\u8fc7\u6587\u4ef6\u5bf9\u5e94\u7684id\uff08wd\u5b57\u6bb5\uff09\u4ece\u7ea2\u9ed1\u6811\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u8282\u70b9  \n          w = find_watcher(loop, e-&gt;wd);  \n\n          path = e-&gt;len ? (const char*) (e + 1) : uv__basename_r(w-&gt;path);  \n          w-&gt;iterating = 1;  \n          // \u628a\u7ea2\u9ed1\u6811\u4e2d\uff0cwd\u5bf9\u5e94\u8282\u70b9\u7684handle\u961f\u5217\u79fb\u5230queue\u53d8\u91cf\uff0c\u51c6\u5907\u5904\u7406  \n          QUEUE_MOVE(&amp;w-&gt;watchers, &amp;queue);  \n          while (!QUEUE_EMPTY(&amp;queue)) {  \n              // \u5934\u7ed3\u70b9  \n            q = QUEUE_HEAD(&amp;queue);  \n            // \u901a\u8fc7\u7ed3\u6784\u4f53\u504f\u79fb\u62ff\u5230\u9996\u5730\u5740  \n            h = QUEUE_DATA(q, uv_fs_event_t, watchers);  \n            // \u4ece\u5904\u7406\u961f\u5217\u4e2d\u79fb\u9664  \n            QUEUE_REMOVE(q);  \n            // \u653e\u56de\u539f\u961f\u5217  \n            QUEUE_INSERT_TAIL(&amp;w-&gt;watchers, q);  \n            // \u6267\u884c\u56de\u8c03  \n            h-&gt;cb(h, path, events, 0);  \n          }  \n        }  \n      }  \n    }  \n</code></pre> <p>uv__inotify_read\u51fd\u6570\u7684\u903b\u8f91\u5c31\u662f\u4ece\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u628a\u6570\u636e\u8bfb\u53d6\u51fa\u6765\uff0c\u8fd9\u4e9b\u6570\u636e\u4e2d\u4fdd\u5b58\u4e86\u54ea\u4e9b\u6587\u4ef6\u89e6\u53d1\u4e86\u7528\u6237\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u3002\u7136\u540e\u904d\u5386\u6bcf\u4e2a\u89e6\u53d1\u4e86\u4e8b\u4ef6\u7684\u6587\u4ef6\u3002\u4ece\u7ea2\u9ed1\u6811\u4e2d\u627e\u5230\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684\u7ea2\u9ed1\u6811\u8282\u70b9\u3002\u518d\u53d6\u51fa\u7ea2\u9ed1\u6811\u8282\u70b9\u4e2d\u7ef4\u62a4\u7684\u4e00\u4e2ahandle\u961f\u5217\uff0c\u6700\u540e\u6267\u884chandle\u961f\u5217\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u56de\u8c03\u3002</p>"},{"location":"chapter12-%E6%96%87%E4%BB%B6/#124-promiseapi","title":"12.4 Promise\u5316API","text":"<p>Node.js\u7684API\u90fd\u662f\u9075\u5faacallback\u6a21\u5f0f\u7684\uff0c\u6bd4\u5982\u6211\u4eec\u8981\u8bfb\u53d6\u4e00\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u3002\u6211\u4eec\u901a\u5e38\u4f1a\u8fd9\u6837\u5199</p> <pre><code>    const fs = require('fs');  \n    fs.readFile('filename', 'utf-8' ,(err,data) =&gt; {  \n      console.log(data)  \n    })  \n    //\u4e3a\u4e86\u652f\u6301Promise\u6a21\u5f0f\uff0c\u6211\u4eec\u901a\u5e38\u8fd9\u6837\u5199\n    const fs = require('fs');  \n    function readFile(filename) {  \n        return new Promise((resolve, reject) =&gt; {  \n            fs.readFile(filename, 'utf-8' ,(err,data) =&gt; {  \n                err ?  reject(err) : resolve(data);  \n            });  \n        });  \n    }  \n</code></pre> <p>\u4f46\u662f\u5728Node.js V14\u4e2d\uff0c\u6587\u4ef6\u6a21\u5757\u652f\u6301\u4e86Promise\u5316\u7684api\u3002\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528await\u8fdb\u884c\u6587\u4ef6\u64cd\u4f5c\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u4f7f\u7528\u4f8b\u5b50\u3002</p> <pre><code>    const { open, readFile } = require('fs').promises;  \n    async function runDemo() {   \n      try {  \n        console.log(await readFile('11111.md', { encoding: 'utf-8' }));  \n      } catch (e){  \n\n      }  \n    }  \n    runDemo();  \n</code></pre> <p>\u4ece\u4f8b\u5b50\u4e2d\u6211\u4eec\u770b\u5230\uff0c\u548c\u4e4b\u524d\u7684API\u8c03\u7528\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u4e0d\u540c\u7684\u5730\u65b9\u5728\u4e8e\u6211\u4eec\u4e0d\u7528\u518d\u5199\u56de\u8c03\u4e86\uff0c\u800c\u662f\u901a\u8fc7await\u7684\u65b9\u5f0f\u63a5\u6536\u7ed3\u679c\u3002\u8fd9\u53ea\u662f\u65b0\u7248API\u7684\u7279\u6027\u4e4b\u4e00\u3002\u5728\u65b0\u7248API\u4e4b\u524d\uff0c\u6587\u4ef6\u6a21\u5757\u5927\u90e8\u5206API\u90fd\u662f\u7c7b\u4f3c\u5de5\u5177\u51fd\u6570\uff0c\u6bd4\u5982readFile\uff0cwriteFile\uff0c\u65b0\u7248API\u4e2d\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7684\u8c03\u7528\u65b9\u5f0f\u3002</p> <pre><code>    const { open, readFile } = require('fs').promises;  \n    async function runDemo() {  \n      let filehandle;  \n      try {  \n        filehandle = await open('filename', 'r');  \n        // console.log(await readFile(filehandle, { encoding: 'utf-8' }));  \n        console.log(await filehandle.readFile({ encoding: 'utf-8' }));  \n      } finally {  \n        if (filehandle) {  \n            await filehandle.close();     \n        }  \n      }  \n    }  \n    runDemo();  \n</code></pre> <p>\u9762\u5411\u5bf9\u8c61\u7684\u6a21\u5f0f\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u901a\u8fc7open\u51fd\u6570\u62ff\u5230\u4e00\u4e2aFileHandle\u5bf9\u8c61\uff08\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5c01\u88c5\uff09\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5728\u8be5\u5bf9\u8c61\u4e0a\u8c03\u5404\u79cd\u6587\u4ef6\u64cd\u4f5c\u7684\u51fd\u6570\u3002\u5728\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u6a21\u5f0f\u7684API\u65f6\u6709\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662fNode.js\u4e0d\u4f1a\u4e3a\u6211\u4eec\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5373\u4f7f\u6587\u4ef6\u64cd\u4f5c\u51fa\u9519\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u81ea\u5df1\u624b\u52a8\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5426\u5219\u4f1a\u9020\u6210\u6587\u4ef6\u63cf\u8ff0\u7b26\u6cc4\u6f0f\uff0c\u800c\u5728\u975e\u9762\u5411\u5bf9\u8c61\u6a21\u5f0f\u4e2d\uff0c\u5728\u6587\u4ef6\u64cd\u4f5c\u5b8c\u6bd5\u540e\uff0c\u4e0d\u7ba1\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0cNode.js\u90fd\u4f1a\u4e3a\u6211\u4eec\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002\u9996\u5148\u4ecb\u7ecd\u4e00\u4e2aFileHandle\u7c7b\u3002\u8be5\u7c7b\u662f\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5c01\u88c5\uff0c\u63d0\u4f9b\u4e86\u9762\u5411\u5bf9\u8c61\u7684API\u3002</p> <pre><code>    class FileHandle {  \n      constructor(filehandle) {  \n        // filehandle\u4e3aC++\u5bf9\u8c61  \n        this[kHandle] = filehandle;  \n        this[kFd] = filehandle.fd;  \n      }  \n\n      get fd() {  \n        return this[kFd];  \n      }  \n\n      readFile(options) {  \n        return readFile(this, options);  \n      }  \n\n      close = () =&gt; {  \n        this[kFd] = -1;  \n        return this[kHandle].close();  \n      }  \n      // \u7701\u7565\u90e8\u5206\u64cd\u4f5c\u6587\u4ef6\u7684api  \n    }  \n</code></pre> <p>FileHandle\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u9996\u5148\u5c01\u88c5\u4e86\u4e00\u7cfb\u5217\u6587\u4ef6\u64cd\u4f5c\u7684API\uff0c\u7136\u540e\u5b9e\u73b0\u4e86close\u51fd\u6570\u7528\u4e8e\u5173\u95ed\u5e95\u5c42\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 1 \u64cd\u4f5c\u6587\u4ef6\u7cfb\u7edfAPI \u8fd9\u91cc\u6211\u4eec\u4ee5readFile\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790</p> <pre><code>    async function readFile(path, options) {  \n      options = getOptions(options, { flag: 'r' });  \n      const flag = options.flag || 'r';  \n      // \u4ee5\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u4f7f\u7528\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u81ea\u5df1\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26  \n      if (path instanceof FileHandle)  \n        return readFileHandle(path, options);  \n      // \u76f4\u63a5\u8c03\u7528\uff0c\u9996\u5148\u9700\u8981\u5148\u6253\u5f00\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u8bfb\u53d6\u5b8c\u6bd5\u540eNode.js\u4f1a\u4e3b\u52a8\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26  \n      const fd = await open(path, flag, 0o666);  \n      return readFileHandle(fd, options).finally(fd.close);  \n    }  \n</code></pre> <p>\u4ecereadFile\u4ee3\u7801\u4e2d\u6211\u4eec\u770b\u5230\u4e0d\u540c\u8c03\u7528\u65b9\u5f0f\u4e0b\uff0cNode.js\u7684\u5904\u7406\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5f53FileHandle\u662f\u6211\u4eec\u7ef4\u62a4\u65f6\uff0c\u5173\u95ed\u64cd\u4f5c\u4e5f\u662f\u6211\u4eec\u8d1f\u8d23\u6267\u884c\uff0c\u5f53FileHandle\u662fNode.js\u7ef4\u62a4\u65f6\uff0cNode.js\u5728\u6587\u4ef6\u64cd\u4f5c\u5b8c\u6bd5\u540e\uff0c\u4e0d\u7ba1\u6210\u529f\u8fd8\u662f\u5931\u8d25\u90fd\u4f1a\u4e3b\u52a8\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u63a5\u7740\u6211\u4eec\u770b\u5230readFileHandle\u7684\u5b9e\u73b0\u3002</p> <pre><code>    async function readFileHandle(filehandle, options) {  \n      // \u83b7\u53d6\u6587\u4ef6\u5143\u4fe1\u606f  \n      const statFields = await binding.fstat(filehandle.fd, false, kUsePromises);  \n\n      let size;  \n      // \u662f\u4e0d\u662f\u666e\u901a\u6587\u4ef6\uff0c\u6839\u636e\u6587\u4ef6\u7c7b\u578b\u83b7\u53d6\u5bf9\u5e94\u5927\u5c0f  \n      if ((statFields[1/* mode */] &amp; S_IFMT) === S_IFREG) {  \n        size = statFields[8/* size */];  \n      } else {  \n        size = 0;  \n      }  \n      // \u592a\u5927\u4e86  \n      if (size &gt; kIoMaxLength)  \n        throw new ERR_FS_FILE_TOO_LARGE(size);  \n\n      const chunks = [];  \n      // \u8ba1\u7b97\u6bcf\u6b21\u8bfb\u53d6\u7684\u5927\u5c0f  \n      const chunkSize = size === 0 ?  \n        kReadFileMaxChunkSize :  \n        MathMin(size, kReadFileMaxChunkSize);  \n      let endOfFile = false;  \n      do {  \n        // \u5206\u914d\u5185\u5b58\u627f\u8f7d\u6570\u636e  \n        const buf = Buffer.alloc(chunkSize);  \n        // \u8bfb\u53d6\u7684\u6570\u636e\u548c\u5927\u5c0f  \n        const { bytesRead, buffer } =  \n          await read(filehandle, buf, 0, chunkSize, -1);  \n        // \u662f\u5426\u8bfb\u5b8c\u4e86  \n        endOfFile = bytesRead === 0;  \n        // \u8bfb\u53d6\u4e86\u6709\u6548\u6570\u636e\u5219\u628a\u6709\u6548\u6570\u636e\u90e8\u5206\u5b58\u8d77\u6765  \n        if (bytesRead &gt; 0)  \n          chunks.push(buffer.slice(0, bytesRead));  \n      } while (!endOfFile);  \n\n      const result = Buffer.concat(chunks);  \n      if (options.encoding) {  \n        return result.toString(options.encoding);  \n      } else {  \n        return result;  \n      }  \n    }  \n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u770bread\u51fd\u6570\u7684\u5b9e\u73b0</p> <pre><code>    async function read(handle, buffer, offset, length, position) {  \n      // ...  \n      const bytesRead = (await binding.read(handle.fd, buffer, offset, length, position, kUsePromises)) || 0;  \n      return { bytesRead, buffer };  \n    }  \n</code></pre> <p>Read\u6700\u7ec8\u6267\u884c\u4e86node_file.cc \u7684Read\u3002\u6211\u4eec\u770b\u4e00\u4e0bRead\u51fd\u6570\u7684\u5173\u952e\u4ee3\u7801\u3002</p> <pre><code>    static void Read(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n      // ...  \n      FSReqBase* req_wrap_async = GetReqWrap(env, args[5]);  \n      // \u5f02\u6b65\u6267\u884c\uff0c\u6709\u4e24\u79cd\u60c5\u51b5  \n      if (req_wrap_async != nullptr) {  \n        AsyncCall(env, req_wrap_async, args, \"read\", UTF8, AfterInteger,  \n                  uv_fs_read, fd, &amp;uvbuf, 1, pos);  \n      } else {  \n        // \u540c\u6b65\u6267\u884c\uff0c\u6bd4\u5982fs.readFileSync  \n        CHECK_EQ(argc, 7);  \n        FSReqWrapSync req_wrap_sync;  \n        FS_SYNC_TRACE_BEGIN(read);  \n        const int bytesRead = SyncCall(env, args[6], &amp;req_wrap_sync, \"read\",  \n                                       uv_fs_read, fd, &amp;uvbuf, 1, pos);  \n        FS_SYNC_TRACE_END(read, \"bytesRead\", bytesRead);  \n        args.GetReturnValue().Set(bytesRead);  \n      }  \n    }  \n</code></pre> <p>Read\u51fd\u6570\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff0c\u540c\u6b65\u548c\u5f02\u6b65\uff0c\u5176\u4e2d\u5f02\u6b65\u53c8\u5206\u4e3a\u4e24\u79cd\uff0ccallback\u6a21\u5f0f\u548cPromise\u6a21\u5f0f\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5f02\u6b65\u6a21\u5f0f\u7684\u5b9e\u73b0\u3002\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b\u8fd9\u53e5\u4ee3\u7801\u3002</p> <pre><code>    FSReqBase* req_wrap_async = GetReqWrap(env, args[5]);  \n</code></pre> <p>GetReqWrap\u6839\u636e\u7b2c\u516d\u4e2a\u53c2\u6570\u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u3002</p> <pre><code>    FSReqBase* GetReqWrap(Environment* env, v8::Local&lt;v8::Value&gt; value,  \n                          bool use_bigint) {  \n      // \u662f\u5bf9\u8c61\u8bf4\u660e\u662f\u7ee7\u627fFSReqBase\u7684\u5bf9\u8c61,\u6bd4\u5982FSReqCallback\uff08\u5f02\u6b65\u6a21\u5f0f\uff09                      \n      if (value-&gt;IsObject()) {  \n        return Unwrap&lt;FSReqBase&gt;(value.As&lt;v8::Object&gt;());  \n      } else if (value-&gt;StrictEquals(env-&gt;fs_use_promises_symbol())) {  \n        // Promise\u6a21\u5f0f\uff08\u5f02\u6b65\u6a21\u5f0f\uff09  \n        if (use_bigint) {  \n          return FSReqPromise&lt;AliasedBigUint64Array&gt;::New(env, use_bigint);  \n        } else {  \n          return FSReqPromise&lt;AliasedFloat64Array&gt;::New(env, use_bigint);  \n        }  \n      }  \n      // \u540c\u6b65\u6a21\u5f0f  \n      return nullptr;  \n    }  \n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u53ea\u5173\u6ce8Promise\u6a21\u5f0f\u3002\u6240\u4ee5GetReqWrap\u8fd4\u56de\u7684\u662f\u4e00\u4e2aFSReqPromise\u5bf9\u8c61\uff0c\u6211\u4eec\u56de\u5230Read\u51fd\u6570\u3002\u770b\u5230\u4ee5\u4e0b\u4ee3\u7801</p> <pre><code>    FSReqBase* req_wrap_async = GetReqWrap(env, args[5]);  \n    AsyncCall(env, req_wrap_async, args, \"read\", UTF8, AfterInteger,  \n                  uv_fs_read, fd, &amp;uvbuf, 1, pos);  \n\u7ee7\u7eed\u770bAsyncCall\u51fd\u6570\uff08node_file-inl.h\uff09\n    template &lt;typename Func, typename... Args&gt;  \n    FSReqBase* AsyncCall(Environment* env,  \n                         FSReqBase* req_wrap,  \n                         const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args,  \n                         const char* syscall, enum encoding enc,  \n                         uv_fs_cb after, Func fn, Args... fn_args) {  \n      return AsyncDestCall(env, req_wrap, args,  \n                           syscall, nullptr, 0, enc,  \n                           after, fn, fn_args...);  \n    }  \n</code></pre> <p>AsyncCall\u662f\u5bf9AsyncDestCall\u7684\u5c01\u88c5</p> <pre><code>    template &lt;typename Func, typename... Args&gt;  \n    FSReqBase* AsyncDestCall(Environment* env, FSReqBase* req_wrap,  \n                             const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args,  \n                             const char* syscall, const char* dest,  \n                             size_t len, enum encoding enc, uv_fs_cb after,  \n                             Func fn, Args... fn_args) {  \n      CHECK_NOT_NULL(req_wrap);  \n      req_wrap-&gt;Init(syscall, dest, len, enc);  \n      // \u8c03\u7528libuv\u51fd\u6570  \n      int err = req_wrap-&gt;Dispatch(fn, fn_args..., after);  \n      // \u5931\u8d25\u5219\u76f4\u63a5\u6267\u884c\u56de\u8c03\uff0c\u5426\u5219\u8fd4\u56de\u4e00\u4e2aPromise\uff0c\u89c1SetReturnValue\u51fd\u6570  \n      if (err &lt; 0) {  \n        uv_fs_t* uv_req = req_wrap-&gt;req();  \n        uv_req-&gt;result = err;  \n        uv_req-&gt;path = nullptr;  \n        after(uv_req);  // after may delete req_wrap if there is an error  \n        req_wrap = nullptr;  \n      } else {  \n        req_wrap-&gt;SetReturnValue(args);  \n      }  \n\n      return req_wrap;  \n    }  \n</code></pre> <p>AsyncDestCall\u51fd\u6570\u4e3b\u8981\u505a\u4e86\u4e24\u4e2a\u64cd\u4f5c\uff0c\u9996\u5148\u901a\u8fc7Dispatch\u8c03\u7528\u5e95\u5c42Libuv\u7684\u51fd\u6570\uff0c\u6bd4\u5982\u8fd9\u91cc\u662fuv_fs_read\u3002\u5982\u679c\u51fa\u9519\u6267\u884c\u56de\u8c03\u8fd4\u56de\u9519\u8bef\uff0c\u5426\u5219\u6267\u884creq_wrap-&gt;SetReturnValue(args)\u3002\u6211\u4eec\u77e5\u9053req_wrap\u662f\u5728GetReqWrap\u51fd\u6570\u4e2d\u7531FSReqPromise::New(env, use_bigint)\u521b\u5efa\u3002 <pre><code>    template &lt;typename AliasedBufferT&gt;  \n    FSReqPromise&lt;AliasedBufferT&gt;*  \n    FSReqPromise&lt;AliasedBufferT&gt;::New(Environment* env, bool use_bigint) {  \n      v8::Local&lt;v8::Object&gt; obj;  \n      // \u521b\u5efa\u4e00\u4e2aC++\u5bf9\u8c61\u5b58\u5230obj\u4e2d  \n      if (!env-&gt;fsreqpromise_constructor_template()  \n               -&gt;NewInstance(env-&gt;context())  \n               .ToLocal(&amp;obj)) {  \n        return nullptr;  \n      }  \n      // \u8bbe\u7f6e\u4e00\u4e2apromise\u5c5e\u6027\uff0c\u503c\u662f\u4e00\u4e2aPromise::Resolver  \n      v8::Local&lt;v8::Promise::Resolver&gt; resolver;  \n      if (!v8::Promise::Resolver::New(env-&gt;context()).ToLocal(&amp;resolver) ||  \n          obj-&gt;Set(env-&gt;context(), env-&gt;promise_string(), resolver).IsNothing()) {  \n        return nullptr;  \n      }  \n      // \u8fd4\u56de\u53e6\u4e00\u4e2aC++\u5bf9\u8c61\uff0c\u91cc\u9762\u4fdd\u5b58\u4e86obj\uff0cobj\u4e5f\u4fdd\u5b58\u4e86\u6307\u5411FSReqPromise\u5bf9\u8c61\u7684\u6307\u9488  \n      return new FSReqPromise(env, obj, use_bigint);  \n    }  \n</code></pre> <p>\u6240\u4ee5req_wrap\u662f\u4e00\u4e2aFSReqPromise\u5bf9\u8c61\u3002\u6211\u4eec\u770b\u4e00\u4e0bFSReqPromise\u5bf9\u8c61\u7684SetReturnValue\u65b9\u6cd5\u3002</p> <pre><code>    template &lt;typename AliasedBufferT&gt;  \n    void FSReqPromise&lt;AliasedBufferT&gt;::SetReturnValue(  \n        const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args) {  \n      // \u62ff\u5230Promise::Resolver\u5bf9\u8c61  \n      v8::Local&lt;v8::Value&gt; val =  \n          object()-&gt;Get(env()-&gt;context(),  \n                        env()-&gt;promise_string()).ToLocalChecked();  \n      v8::Local&lt;v8::Promise::Resolver&gt; resolver = val.As&lt;v8::Promise::Resolver&gt;();  \n      // \u62ff\u5230\u4e00\u4e2aPromise\u4f5c\u4e3a\u8fd4\u56de\u503c\uff0c\u5373JS\u5c42\u62ff\u5230\u7684\u503c  \n      args.GetReturnValue().Set(resolver-&gt;GetPromise());  \n    }  \n</code></pre> <p>\u81f3\u6b64\u6211\u4eec\u770b\u5230\u4e86\u65b0\u7248API\u5b9e\u73b0\u7684\u6838\u5fc3\u903b\u8f91\uff0c\u6b63\u662f\u8fd9\u4e2aPromise\u8fd4\u56de\u503c\u3002\u901a\u8fc7\u5c42\u5c42\u8fd4\u56de\u540e\uff0c\u5728JS\u5c42\u5c31\u62ff\u5230\u8fd9\u4e2aPromise\uff0c\u7136\u540e\u5904\u4e8epending\u72b6\u6001\u7b49\u5f85\u51b3\u8bae\u3002\u6211\u4eec\u7ee7\u7eed\u770b\u4e00\u4e0bPromise\u51b3\u8bae\u7684\u903b\u8f91\u3002\u5728\u5206\u6790Read\u51fd\u6570\u4e2d\u6211\u4eec\u770b\u5230\u6267\u884cLibuv\u7684uv_fs_read\u51fd\u6570\u65f6\uff0c\u8bbe\u7f6e\u7684\u56de\u8c03\u662fAfterInteger\u3002\u90a3\u4e48\u5f53\u8bfb\u53d6\u6587\u4ef6\u6210\u529f\u540e\u5c31\u4f1a\u6267\u884c\u8be5\u51fd\u6570\u3002\u6240\u4ee5\u6211\u4eec\u770b\u770b\u8be5\u51fd\u6570\u7684\u903b\u8f91\u3002</p> <pre><code>    void AfterInteger(uv_fs_t* req) {  \n      // \u901a\u8fc7\u5c5e\u6027\u62ff\u5230\u5bf9\u8c61\u7684\u5730\u5740  \n      FSReqBase* req_wrap = FSReqBase::from_req(req);  \n      FSReqAfterScope after(req_wrap, req);  \n\n      if (after.Proceed())  \n        req_wrap-&gt;Resolve(Integer::New(req_wrap-&gt;env()-&gt;isolate(), req-&gt;result));  \n    }   \n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0bResolve</p> <pre><code>    template &lt;typename AliasedBufferT&gt;  \n    void FSReqPromise&lt;AliasedBufferT&gt;::Resolve(v8::Local&lt;v8::Value&gt; value) {  \n      finished_ = true;  \n      v8::HandleScope scope(env()-&gt;isolate());  \n      InternalCallbackScope callback_scope(this);  \n      // \u62ff\u5230\u4fdd\u5b58\u7684Promise\u5bf9\u8c61\uff0c\u4fee\u6539\u72b6\u6001\u4e3aresolve\uff0c\u5e76\u8bbe\u7f6e\u7ed3\u679c  \n      v8::Local&lt;v8::Value&gt; val =  \n          object()-&gt;Get(env()-&gt;context(),  \n                        env()-&gt;promise_string()).ToLocalChecked();  \n      v8::Local&lt;v8::Promise::Resolver&gt; resolver = val.As&lt;v8::Promise::Resolver&gt;();  \n      USE(resolver-&gt;Resolve(env()-&gt;context(), value).FromJust());  \n    }\n</code></pre> <p>Resolve\u51fd\u6570\u4fee\u6539Promise\u7684\u72b6\u6001\u548c\u8bbe\u7f6e\u8fd4\u56de\u503c\uff0c\u4ece\u800cJS\u5c42\u62ff\u5230\u8fd9\u4e2a\u51b3\u8bae\u7684\u503c\u3002\u56de\u5230fs\u5c42</p> <pre><code>    const bytesRead = (await binding.read(handle.fd, \n                                             buffer, \n                                             offset, \n                                             length,  \n                                          position, kUsePromises))|0;  \n</code></pre> <p>\u6211\u4eec\u5c31\u62ff\u5230\u4e86\u8fd4\u56de\u503c\u3002</p>"},{"location":"chapter12-%E6%96%87%E4%BB%B6/#125-api","title":"12.5 \u6d41\u5f0fAPI","text":"<p>\u524d\u9762\u5206\u6790\u4e86Node.js\u4e2d\u6587\u4ef6\u6a21\u5757\u7684\u591a\u79cd\u6587\u4ef6\u64cd\u4f5c\u7684\u65b9\u5f0f\uff0c\u4e0d\u7ba1\u662f\u540c\u6b65\u3001\u5f02\u6b65\u8fd8\u662fPromise\u5316\u7684API\uff0c\u5b83\u4eec\u90fd\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\uff0c\u6587\u4ef6\u64cd\u4f5c\u90fd\u662f\u4e00\u6b21\u6027\u5b8c\u6210\u7684\uff0c\u6bd4\u5982\u6211\u4eec\u8c03\u7528readFile\u8bfb\u53d6\u4e00\u4e2a\u6587\u4ef6\u65f6\uff0cNode.js\u4f1a\u901a\u8fc7\u4e00\u6b21\u6216\u591a\u6b21\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u63a5\u53e3\u628a\u6240\u6709\u7684\u6587\u4ef6\u5185\u5bb9\u8bfb\u5230\u5185\u5b58\u4e2d\uff0c\u540c\u6837\u6211\u4eec\u8c03\u7528writeFile\u5199\u4e00\u4e2a\u6587\u4ef6\u65f6\uff0cNode.js\u4f1a\u901a\u8fc7\u4e00\u6b21\u6216\u591a\u6b21\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u63a5\u53e3\u628a\u7528\u6237\u7684\u6570\u636e\u5199\u5165\u786c\u76d8\uff0c\u8fd9\u5bf9\u5185\u5b58\u6765\u8bf4\u662f\u975e\u5e38\u6709\u538b\u529b\u7684\u3002\u5047\u8bbe\u6211\u4eec\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u573a\u666f\uff0c\u6211\u4eec\u9700\u8981\u8bfb\u53d6\u4e00\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u7136\u540e\u8fd4\u56de\u7ed9\u524d\u7aef\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u8bfb\u53d6\u6574\u4e2a\u6587\u4ef6\u5185\u5bb9\uff0c\u7136\u540e\u518d\u6267\u884c\u5199\u64cd\u4f5c\u8fd9\u65e0\u7591\u662f\u975e\u5e38\u6d88\u8017\u5185\u5b58\uff0c\u4e5f\u662f\u975e\u5e38\u4f4e\u6548\u7684\u3002</p> <pre><code>    const http = require('http');  \n    const fs = require('fs');  \n    const server = http.createServer((req, res) =&gt; {  \n      fs.readFile('11111.md', (err, data) =&gt; {  \n        res.end(data);  \n      })  \n    }).listen(11111);  \n</code></pre> <p>\u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u4f7f\u7528\u6d41\u5f0f\u7684API\u3002</p> <pre><code>    const http = require('http');  \n    const fs = require('fs');  \n    const server = http.createServer((req, res) =&gt; {  \n      fs.createReadStream('11111.md').pipe(res);  \n    }).listen(11111);  \n</code></pre> <p>\u6d41\u5f0fAPI\u7684\u597d\u5904\u5728\u4e8e\u6587\u4ef6\u7684\u5185\u5bb9\u5e76\u4e0d\u662f\u4e00\u6b21\u6027\u8bfb\u53d6\u5230\u5185\u5b58\u7684\uff0c\u800c\u662f\u90e8\u5206\u8bfb\u53d6\uff0c\u6d88\u8d39\u5b8c\u540e\u518d\u7ee7\u7eed\u8bfb\u53d6\u3002Node.js\u5185\u90e8\u5e2e\u6211\u4eec\u505a\u4e86\u6d41\u91cf\u7684\u63a7\u5236\uff0c\u5982\u56fe12-5\u6240\u793a\u3002  \u56fe12-5 \u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0bNode.js\u6d41\u5f0fAPI\u7684\u5177\u4f53\u5b9e\u73b0\u3002</p>"},{"location":"chapter12-%E6%96%87%E4%BB%B6/#1251","title":"12.5.1 \u53ef\u8bfb\u6587\u4ef6\u6d41","text":"<p>\u53ef\u8bfb\u6587\u4ef6\u6d41\u662f\u5bf9\u6587\u4ef6\u8fdb\u884c\u6d41\u5f0f\u8bfb\u53d6\u7684\u62bd\u8c61\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7fs.createReadStream\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u53ef\u8bfb\u6d41\u3002\u6587\u4ef6\u53ef\u8bfb\u6d41\u7ee7\u627f\u4e8e\u53ef\u8bfb\u6d41\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ee5\u53ef\u8bfb\u6d41\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\u3002</p> <pre><code>    const fs = require('fs');  \n    const { Writable } = require('stream');  \n    class DemoWritable extends Writable {  \n      _write(data, encoding, cb) {  \n        console.log(data);  \n        cb(null);  \n      }  \n    }  \n    fs.createReadStream('11111.md').pipe(new DemoWritable);  \n</code></pre> <p>\u6216\u8005</p> <pre><code>    const fs = require('fs');  \n    const readStream = fs.createReadStream('11111.md');  \n    readStream.on('data', (data) =&gt; {  \n        console.log(data)  \n    });  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0bcreateReadStream\u7684\u5b9e\u73b0\u3002</p> <pre><code>    fs.createReadStream = function(path, options) {  \n      return new ReadStream(path, options);  \n    };  \n</code></pre> <p>CreateReadStream\u662f\u5bf9ReadStream\u7684\u5c01\u88c5\u3002</p> <pre><code>    function ReadStream(path, options) {  \n      if (!(this instanceof ReadStream))  \n        return new ReadStream(path, options);  \n\n      options = copyObject(getOptions(options, {}));  \n      // \u53ef\u8bfb\u6d41\u7684\u9608\u503c  \n      if (options.highWaterMark === undefined)  \n        options.highWaterMark = 64 * 1024;  \n\n      Readable.call(this, options);  \n\n      handleError((this.path = getPathFromURL(path)));  \n      // \u652f\u6301\u4f20\u6587\u4ef6\u8def\u5f84\u6216\u6587\u4ef6\u63cf\u8ff0\u7b26  \n      this.fd = options.fd === undefined ? null : options.fd;  \n      this.flags = options.flags === undefined ? 'r' : options.flags;  \n      this.mode = options.mode === undefined ? 0o666 : options.mode;  \n      // \u8bfb\u53d6\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e  \n      this.start = typeof this.fd !== 'number' &amp;&amp; options.start === undefined ?  \n        0 : options.start;  \n      this.end = options.end;  \n      // \u6d41\u51fa\u9519\u6216\u7ed3\u675f\u65f6\u662f\u5426\u81ea\u52a8\u9500\u6bc1\u6d41  \n      this.autoClose = options.autoClose === undefined ? true : options.autoClose;  \n      this.pos = undefined;  \n      // \u5df2\u8bfb\u7684\u5b57\u8282\u6570  \n      this.bytesRead = 0;  \n      // \u6d41\u662f\u5426\u5df2\u7ecf\u5173\u95ed  \n      this.closed = false;  \n      // \u53c2\u6570\u6821\u9a8c  \n      if (this.start !== undefined) {  \n        if (typeof this.start !== 'number') {  \n          throw new errors.TypeError('ERR_INVALID_ARG_TYPE',  \n                                     'start',  \n                                     'number',  \n                                     this.start);  \n        }  \n        // \u9ed8\u8ba4\u8bfb\u53d6\u5168\u90e8\u5185\u5bb9  \n        if (this.end === undefined) {  \n          this.end = Infinity;  \n        } else if (typeof this.end !== 'number') {  \n          throw new errors.TypeError('ERR_INVALID_ARG_TYPE',  \n                                     'end',  \n                                     'number',  \n                                     this.end);  \n        }  \n\n        // \u4ece\u6587\u4ef6\u7684\u54ea\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u8bfb\uff0cstart\u662f\u5f00\u59cb\u4f4d\u7f6e\uff0cpos\u662f\u5f53\u524d\u4f4d\u7f6e\uff0c\u521d\u59cb\u5316\u7b49\u4e8e\u5f00\u59cb\u4f4d\u7f6e  \n        this.pos = this.start;  \n      }  \n      // \u5982\u679c\u662f\u6839\u636e\u4e00\u4e2a\u6587\u4ef6\u540d\u521b\u5efa\u4e00\u4e2a\u6d41\uff0c\u5219\u9996\u5148\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6  \n      if (typeof this.fd !== 'number')  \n        this.open();  \n\n      this.on('end', function() {  \n        // \u6d41\u7ed3\u675f\u65f6\u81ea\u52a8\u9500\u6bc1\u6d41  \n        if (this.autoClose) {  \n          this.destroy();  \n        }  \n      });  \n    }  \n</code></pre> <p>ReadStream\u521d\u59cb\u5316\u5b8c\u540e\u505a\u4e86\u4e24\u4e2a\u64cd\u4f5c\uff0c\u9996\u5148\u8c03\u7528open\u6253\u5f00\u6587\u4ef6\uff08\u5982\u679c\u9700\u8981\u7684\u8bdd\uff09\uff0c\u63a5\u7740\u76d1\u542c\u6d41\u7ed3\u675f\u4e8b\u4ef6\uff0c\u7528\u6237\u53ef\u4ee5\u8bbe\u7f6eautoClose\u9009\u9879\u63a7\u5236\u5f53\u6d41\u7ed3\u675f\u6216\u8005\u51fa\u9519\u65f6\u662f\u5426\u9500\u6bc1\u6d41\uff0c\u5bf9\u4e8e\u6587\u4ef6\u6d41\u6765\u8bf4\uff0c\u9500\u6bc1\u6d41\u610f\u5473\u7740\u5173\u95ed\u5730\u65b9\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u6211\u4eec\u63a5\u7740\u770b\u4e00\u4e0bopen\u7684\u5b9e\u73b0</p> <pre><code>    // \u6253\u5f00\u6587\u4ef6  \n    ReadStream.prototype.open = function() {  \n      var self = this;  \n      fs.open(this.path, this.flags, this.mode, function(er, fd) {  \n        if (er) {  \n          // \u53d1\u751f\u9519\u8bef\uff0c\u662f\u5426\u9700\u8981\u81ea\u52a8\u9500\u6bc1\u6d41  \n          if (self.autoClose) {  \n            self.destroy();  \n          }  \n          // \u901a\u77e5\u7528\u6237  \n          self.emit('error', er);  \n          return;  \n        }  \n\n        self.fd = fd;  \n        // \u89e6\u53d1open\uff0c\u4e00\u822c\u7528\u4e8eNode.js\u5185\u90e8\u903b\u8f91  \n        self.emit('open', fd);  \n        // start the flow of data.  \n        // \u6253\u5f00\u6210\u529f\u540e\u5f00\u59cb\u6d41\u5f0f\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9  \n        self.read();  \n      });  \n    };  \n</code></pre> <p>open\u51fd\u6570\u9996\u5148\u6253\u5f00\u6587\u4ef6\uff0c\u6253\u5f00\u6210\u529f\u540e\u5f00\u542f\u6d41\u5f0f\u8bfb\u53d6\u3002\u4ece\u800c\u6587\u4ef6\u5185\u5bb9\u5c31\u4f1a\u6e90\u6e90\u4e0d\u65ad\u5730\u6d41\u5411\u76ee\u7684\u6d41\u3002\u6211\u4eec\u7ee7\u7eed\u770b\u4e00\u4e0b\u8bfb\u53d6\u64cd\u4f5c\u7684\u5b9e\u73b0\u3002</p> <pre><code>    // \u5b9e\u73b0\u53ef\u8bfb\u6d41\u7684\u94a9\u5b50\u51fd\u6570  \n    ReadStream.prototype._read = function(n) {  \n      // \u5982\u679c\u6ca1\u6709\u8c03\u7528open\u800c\u662f\u76f4\u63a5\u8c03\u7528\u8be5\u65b9\u6cd5\u5219\u5148\u6267\u884copen  \n      if (typeof this.fd !== 'number') {  \n        return this.once('open', function() {  \n          this._read(n);  \n        });  \n      }  \n      // \u6d41\u5df2\u7ecf\u9500\u6bc1\u5219\u4e0d\u5904\u7406  \n      if (this.destroyed)  \n        return;  \n      // \u5224\u65ad\u6c60\u5b50\u7a7a\u95f4\u662f\u5426\u8db3\u591f\uff0c\u4e0d\u591f\u5219\u7533\u8bf7\u65b0\u7684  \n      if (!pool || pool.length - pool.used &lt; kMinPoolSpace) {  \n        // discard the old pool.  \n        allocNewPool(this.readableHighWaterMark);  \n      }  \n\n      // \u8ba1\u7b97\u53ef\u8bfb\u7684\u6700\u5927\u6570\u91cf  \n      var thisPool = pool;  \n      /* \n        \u53ef\u8bfb\u53d6\u7684\u6700\u5927\u503c,\u53d6\u53ef\u7528\u5185\u5b58\u5927\u5c0f\u548cNode.js\u6253\u7b97\u8bfb\u53d6\u7684\u5927\u5c0f \n        \u4e2d\u7684\u5c0f\u503c,n\u4e0d\u662f\u7528\u6237\u60f3\u8bfb\u53d6\u7684\u5927\u5c0f\uff0c\u800c\u662f\u53ef\u8bfb\u6d41\u5185\u90e8\u7684\u903b\u8f91 \n        \u89c1_stream_readable.js\u7684this._read(state.highWaterMark) \n      */  \n      var toRead = Math.min(pool.length - pool.used, n);  \n      var start = pool.used;  \n      // \u5df2\u7ecf\u8bfb\u53d6\u4e86\u90e8\u5206\u4e86\uff0c\u5219\u8ba1\u7b97\u5269\u4e0b\u8bfb\u53d6\u7684\u5927\u5c0f\uff0c\u548c\u8ba1\u7b97\u8bfb\u53d6\u7684toRead\u6bd4\u8f83\u53d6\u5c0f\u503c  \n      if (this.pos !== undefined)  \n        toRead = Math.min(this.end - this.pos + 1, toRead);  \n\n      // \u8bfb\u7ed3\u675f  \n      if (toRead &lt;= 0)  \n        return this.push(null);  \n\n      // pool.used\u662f\u5373\u5c06\u8bfb\u53d6\u7684\u6570\u636e\u5b58\u50a8\u5728pool\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\uff0cthis.pos\u662f\u4ece\u6587\u4ef6\u7684\u54ea\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6  \n      fs.read(this.fd, pool, pool.used, toRead, this.pos, (er, bytesRead) =&gt; {  \n        if (er) {  \n          if (this.autoClose) {  \n            this.destroy();  \n          }  \n          this.emit('error', er);  \n        } else {  \n          var b = null;  \n          if (bytesRead &gt; 0) {  \n            // \u5df2\u8bfb\u7684\u5b57\u8282\u6570\u7d2f\u52a0  \n            this.bytesRead += bytesRead;  \n            // \u83b7\u53d6\u6709\u6548\u6570\u636e  \n            b = thisPool.slice(start, start + bytesRead);  \n          }  \n          // push\u5230\u5e95\u5c42\u6d41\u7684bufferList\u4e2d\uff0c\u5e95\u5c42\u7684push\u4f1a\u89e6\u53d1data\u4e8b\u4ef6  \n          this.push(b);  \n        }  \n      });  \n\n      // \u91cd\u65b0\u8bbe\u7f6e\u5df2\u8bfb\u6307\u9488\u7684\u4f4d\u7f6e  \n      if (this.pos !== undefined)  \n        this.pos += toRead;  \n      pool.used += toRead;  \n    };  \n</code></pre> <p>\u4ee3\u7801\u770b\u8d77\u6765\u5f88\u591a\uff0c\u4e3b\u8981\u7684\u903b\u8f91\u662f\u8c03\u7528\u5f02\u6b65read\u51fd\u6570\u8bfb\u53d6\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u7136\u540e\u653e\u5230\u53ef\u8bfb\u6d41\u4e2d\uff0c\u53ef\u8bfb\u6d41\u4f1a\u89e6\u53d1data\u4e8b\u4ef6\u901a\u77e5\u7528\u6237\u6709\u6570\u636e\u5230\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884cread\u51fd\u6570\uff0c\u4ece\u800c\u4e0d\u65ad\u9a71\u52a8\u7740\u6570\u636e\u7684\u8bfb\u53d6\uff08\u53ef\u8bfb\u6d41\u4f1a\u6839\u636e\u5f53\u524d\u60c5\u51b5\u5224\u65ad\u662f\u5426\u7ee7\u7eed\u6267\u884cread\u51fd\u6570\uff0c\u4ee5\u8fbe\u5230\u6d41\u91cf\u63a7\u5236\u7684\u76ee\u7684\uff09\u3002\u6700\u540e\u6211\u4eec\u770b\u4e00\u4e0b\u5173\u95ed\u548c\u9500\u6bc1\u4e00\u4e2a\u6587\u4ef6\u6d41\u7684\u5b9e\u73b0\u3002</p> <pre><code>    ReadStream.prototype.close = function(cb) {  \n      this.destroy(null, cb);  \n    };  \n</code></pre> <p>\u5f53\u6211\u4eec\u8bbe\u7f6eautoClose\u4e3afalse\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u81ea\u5df1\u624b\u52a8\u8c03\u7528close\u51fd\u6570\u5173\u95ed\u53ef\u8bfb\u6587\u4ef6\u6d41\u3002\u5173\u95ed\u6587\u4ef6\u6d41\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u6b63\u5e38\u5730\u9500\u6bc1\u6d41\u3002\u6211\u4eec\u770b\u770b\u9500\u6bc1\u6d41\u7684\u65f6\u5019\uff0cNode.js\u505a\u4e86\u4ec0\u4e48\u3002</p> <pre><code>    // \u5173\u95ed\u5e95\u5c42\u6587\u4ef6  \n    ReadStream.prototype._destroy = function(err, cb) {  \n      const isOpen = typeof this.fd !== 'number';  \n      if (isOpen) {  \n        this.once('open', closeFsStream.bind(null, this, cb, err));  \n        return;  \n      }  \n\n      closeFsStream(this, cb);  \n      this.fd = null;  \n    };  \n\n    function closeFsStream(stream, cb, err) {  \n      fs.close(stream.fd, (er) =&gt; {  \n        er = er || err;  \n        cb(er);  \n        stream.closed = true;  \n        if (!er)  \n          stream.emit('close');  \n      });  \n    }  \n</code></pre> <p>\u9500\u6bc1\u6587\u4ef6\u6d41\u5c31\u662f\u5173\u95ed\u5e95\u5c42\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u53e6\u5916\u5982\u679c\u662f\u56e0\u4e3a\u53d1\u751f\u9519\u8bef\u5bfc\u81f4\u9500\u6bc1\u6216\u8005\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26\u9519\u8bef\u5219\u4e0d\u4f1a\u89e6\u53d1close\u4e8b\u4ef6\u3002</p>"},{"location":"chapter12-%E6%96%87%E4%BB%B6/#1252","title":"12.5.2 \u53ef\u5199\u6587\u4ef6\u6d41","text":"<p>\u53ef\u5199\u6587\u4ef6\u6d41\u662f\u5bf9\u6587\u4ef6\u8fdb\u884c\u6d41\u5f0f\u5199\u5165\u7684\u62bd\u8c61\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7fs.createWriteStream\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u53ef\u5199\u6d41\u3002\u6587\u4ef6\u53ef\u4e9b\u6d41\u7ee7\u627f\u4e8e\u53ef\u5199\u6d41\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ee5\u53ef\u5199\u6d41\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\u3002</p> <pre><code>    const fs = require('fs');  \n    const writeStream = fs.createWriteStream('123.md');\n    writeStream.end('world');  \n    // \u6216\u8005\n    const fs = require('fs');  \n    const { Readable } = require('stream');  \n\n    class DemoReadStream extends Readable {  \n        constructor() {  \n            super();  \n            this.i = 0;  \n        }  \n        _read(n) {  \n            this.i++;  \n            if (this.i &gt; 10) {  \n                this.push(null);  \n            } else {  \n                this.push('1'.repeat(n));  \n            }  \n\n        }  \n    }  \n    new DemoReadStream().pipe(fs.createWriteStream('123.md'));  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0bcreateWriteStream\u7684\u5b9e\u73b0\u3002</p> <pre><code>    fs.createWriteStream = function(path, options) {  \n      return new WriteStream(path, options);  \n    };  \n</code></pre> <p>createWriteStream\u662f\u5bf9WriteStream\u7684\u5c01\u88c5\uff0c\u6211\u4eec\u770b\u4e00\u4e0bWriteStream\u7684\u5b9e\u73b0</p> <pre><code>    function WriteStream(path, options) {  \n      if (!(this instanceof WriteStream))  \n        return new WriteStream(path, options);  \n      options = copyObject(getOptions(options, {}));  \n\n      Writable.call(this, options);  \n\n      handleError((this.path = getPathFromURL(path)));  \n      this.fd = options.fd === undefined ? null : options.fd;  \n      this.flags = options.flags === undefined ? 'w' : options.flags;  \n      this.mode = options.mode === undefined ? 0o666 : options.mode;  \n      // \u5199\u5165\u7684\u5f00\u59cb\u4f4d\u7f6e  \n      this.start = options.start;  \n      // \u6d41\u7ed3\u675f\u548c\u89e6\u53d1\u9519\u8bef\u7684\u65f6\u5019\u662f\u5426\u9500\u6bc1\u6d41  \n      this.autoClose = options.autoClose === undefined ? true : !!options.autoClose;  \n      // \u5f53\u524d\u5199\u5165\u4f4d\u7f6e  \n      this.pos = undefined;  \n      // \u5199\u6210\u529f\u7684\u5b57\u8282\u6570  \n      this.bytesWritten = 0;  \n      this.closed = false;  \n\n      if (this.start !== undefined) {  \n        if (typeof this.start !== 'number') {  \n          throw new errors.TypeError('ERR_INVALID_ARG_TYPE',  \n                                     'start',  \n                                     'number',  \n                                     this.start);  \n        }  \n        if (this.start &lt; 0) {  \n          const errVal = `{start: ${this.start}}`;  \n          throw new errors.RangeError('ERR_OUT_OF_RANGE',  \n                                      'start',  \n                                      '&gt;= 0',  \n                                      errVal);  \n        }  \n        // \u8bb0\u5f55\u5199\u5165\u7684\u5f00\u59cb\u4f4d\u7f6e  \n        this.pos = this.start;  \n      }  \n\n      if (options.encoding)  \n        this.setDefaultEncoding(options.encoding);  \n      // \u6ca1\u6709\u4f20\u6587\u4ef6\u63cf\u8ff0\u7b26\u5219\u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6  \n      if (typeof this.fd !== 'number')  \n        this.open();  \n\n      // \u76d1\u542c\u53ef\u5199\u6d41\u7684finish\u4e8b\u4ef6\uff0c\u5224\u65ad\u662f\u5426\u9700\u8981\u6267\u884c\u9500\u6bc1\u64cd\u4f5c  \n      this.once('finish', function() {  \n        if (this.autoClose) {  \n          this.destroy();  \n        }  \n      });  \n    }  \n</code></pre> <p>WriteStream\u521d\u59cb\u5316\u4e86\u4e00\u7cfb\u5217\u5b57\u6bb5\u540e\uff0c\u5982\u679c\u4f20\u7684\u662f\u6587\u4ef6\u8def\u5f84\u5219\u6253\u5f00\u6587\u4ef6\uff0c\u5982\u679c\u4f20\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5219\u4e0d\u9700\u8981\u518d\u6b21\u6253\u5f00\u6587\u4ef6\u3002\u540e\u7eed\u5bf9\u6587\u4ef6\u53ef\u5199\u6d41\u7684\u64cd\u4f5c\u5c31\u662f\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u64cd\u4f5c\u3002\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b\u5199\u5165\u6587\u4ef6\u7684\u903b\u8f91\u3002\u6211\u4eec\u77e5\u9053\u53ef\u5199\u6d41\u53ea\u662f\u5b9e\u73b0\u4e86\u4e00\u4e9b\u62bd\u8c61\u7684\u903b\u8f91\uff0c\u5177\u4f53\u7684\u5199\u903b\u8f91\u662f\u5177\u4f53\u7684\u6d41\u901a\u8fc7_write\u6216\u8005_writev\u5b9e\u73b0\u7684\uff0c\u6211\u4eec\u770b\u4e00\u4e0b_write\u7684\u5b9e\u73b0\u3002</p> <pre><code>    WriteStream.prototype._write = function(data, encoding, cb) {  \n      if (!(data instanceof Buffer)) {  \n        const err = new errors.TypeError('ERR_INVALID_ARG_TYPE',  \n                                         'data',  \n                                         'Buffer',  \n                                         data);  \n        return this.emit('error', err);  \n      }  \n      // \u8fd8\u6ca1\u6253\u5f00\u6587\u4ef6\uff0c\u5219\u7b49\u5f85\u6253\u5f00\u6210\u529f\u540e\u518d\u6267\u884c\u5199\u64cd\u4f5c  \n      if (typeof this.fd !== 'number') {  \n        return this.once('open', function() {  \n          this._write(data, encoding, cb);  \n        });  \n      }  \n      // \u6267\u884c\u5199\u64cd\u4f5c,0\u4ee3\u8868\u4ecedata\u7684\u54ea\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u5199\uff0c\u8fd9\u91cc\u662f\u5168\u90e8\u5199\u5165\uff0c\u6240\u4ee5\u662f0\uff0cpos\u4ee3\u8868\u6587\u4ef6\u7684\u4f4d\u7f6e  \n      fs.write(this.fd, data, 0, data.length, this.pos, (er, bytes) =&gt; {  \n        if (er) {  \n          if (this.autoClose) {  \n            this.destroy();  \n          }  \n          return cb(er);  \n        }  \n        // \u5199\u5165\u6210\u529f\u7684\u5b57\u8282\u957f\u5ea6  \n        this.bytesWritten += bytes;  \n        cb();  \n      });  \n      // \u4e0b\u4e00\u4e2a\u5199\u5165\u7684\u4f4d\u7f6e  \n      if (this.pos !== undefined)  \n        this.pos += data.length;  \n    };  \n</code></pre> <p>_write\u5c31\u662f\u6839\u636e\u7528\u6237\u4f20\u5165\u6570\u636e\u7684\u5927\u5c0f\uff0c\u4e0d\u65ad\u8c03\u7528fs.write\u5f80\u5e95\u5c42\u5199\u5165\u6570\u636e\uff0c\u76f4\u5230\u5199\u5b8c\u6210\u6216\u8005\u51fa\u9519\u3002\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0b\u6279\u91cf\u5199\u7684\u903b\u8f91\u3002</p> <pre><code>    // \u5b9e\u73b0\u53ef\u5199\u6d41\u6279\u91cf\u5199\u94a9\u5b50  \n    WriteStream.prototype._writev = function(data, cb) {  \n      if (typeof this.fd !== 'number') {  \n        return this.once('open', function() {  \n          this._writev(data, cb);  \n        });  \n      }  \n\n      const self = this;  \n      const len = data.length;  \n      const chunks = new Array(len);  \n      var size = 0;  \n      // \u8ba1\u7b97\u5f85\u5199\u5165\u7684\u51fa\u603b\u5927\u5c0f\uff0c\u5e76\u4e14\u628a\u6570\u636e\u4fdd\u5b58\u5230chunk\u6570\u7ec4\u4e2d\uff0c\u51c6\u5907\u5199\u5165  \n      for (var i = 0; i &lt; len; i++) {  \n        var chunk = data[i].chunk;  \n\n        chunks[i] = chunk;  \n        size += chunk.length;  \n      }  \n      // \u6267\u884c\u6279\u91cf\u5199  \n      writev(this.fd, chunks, this.pos, function(er, bytes) {  \n        if (er) {  \n          self.destroy();  \n          return cb(er);  \n        }  \n        // \u5199\u6210\u529f\u7684\u5b57\u8282\u6570\uff0c\u53ef\u80fd\u5c0f\u4e8e\u5e0c\u671b\u5199\u5165\u7684\u5b57\u8282\u6570  \n        self.bytesWritten += bytes;  \n        cb();  \n      });  \n      /* \n        \u66f4\u65b0\u4e0b\u4e00\u4e2a\u5199\u5165\u4f4d\u7f6e\uff0c\u5982\u679c\u5199\u90e8\u5206\u6210\u529f\uff0c\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u5199\u5165\u4f4d\u7f6e\u65f6 \n        \u4e5f\u4f1a\u5305\u62ec\u6ca1\u5199\u6210\u529f\u7684\u5b57\u8282\u6570\uff0c\u6240\u4ee5\u662f\u5047\u8bbesize\u800c\u4e0d\u662fbytes \n      */  \n      if (this.pos !== undefined)  \n        this.pos += size;  \n    };  \n</code></pre> <p>\u6279\u91cf\u5199\u5165\u7684\u903b\u8f91\u548c_write\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5b83\u8c03\u7528\u7684\u662f\u4e0d\u540c\u7684\u63a5\u53e3\u5f80\u5e95\u5c42\u5199\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u5173\u95ed\u6587\u4ef6\u53ef\u5199\u6d41\u7684\u5b9e\u73b0\u3002</p> <pre><code>    WriteStream.prototype.close = function(cb) {  \n      // \u5173\u95ed\u6587\u4ef6\u6210\u529f\u540e\u6267\u884c\u7684\u56de\u8c03  \n      if (cb) {  \n        if (this.closed) {  \n          process.nextTick(cb);  \n          return;  \n        } else {  \n          this.on('close', cb);  \n        }  \n      }  \n\n      /* \n        \u5982\u679cautoClose\u662ffalse\uff0c\u8bf4\u660e\u6d41\u7ed3\u675f\u89e6\u53d1finish\u4e8b\u4ef6\u65f6\uff0c\u4e0d\u4f1a\u9500\u6bc1\u6d41\uff0c\n        \u89c1WriteStream\u521d\u59cb\u5316\u4ee3\u7801 \u4ee5\u8fd9\u91cc\u9700\u8981\u76d1\u542cfinish\u4e8b\u4ef6\uff0c\u4fdd\u8bc1\u53ef\u5199\u6d41\u7ed3\u675f\u65f6\u53ef\u4ee5\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26 \n      */  \n      if (!this.autoClose) {  \n        this.on('finish', this.destroy.bind(this));  \n      }  \n\n      // \u7ed3\u675f\u6d41\uff0c\u4f1a\u89e6\u53d1finish\u4e8b\u4ef6  \n      this.end();  \n    };  \n</code></pre> <p>\u53ef\u5199\u6587\u4ef6\u6d41\u548c\u53ef\u8bfb\u6587\u4ef6\u6d41\u4e0d\u4e00\u6837\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ef\u8bfb\u6d41\u5728\u8bfb\u5b8c\u6587\u4ef6\u5185\u5bb9\u540eNode.js\u4f1a\u81ea\u52a8\u9500\u6bc1\u6d41\uff08\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26\uff09\uff0c\u800c\u5199\u5165\u6587\u4ef6\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0bNode.js\u662f\u65e0\u6cd5\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u6d41\u7ed3\u675f\u7684\uff0c\u8fd9\u9700\u8981\u6211\u4eec\u663e\u5f0f\u5730\u901a\u77e5Node.js\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u662f\u4e0d\u9700\u8981\u663e\u5f0f\u901a\u77e5Node.js\u7684     fs.createReadStream('11111.md').pipe(fs.createWriteStream('123.md')); \u56e0\u4e3a\u53ef\u8bfb\u6587\u4ef6\u6d41\u5728\u6587\u4ef6\u8bfb\u5b8c\u540e\u4f1a\u8c03\u7528\u53ef\u5199\u6587\u4ef6\u7684end\u65b9\u6cd5\uff0c\u4ece\u800c\u5173\u95ed\u53ef\u8bfb\u6d41\u548c\u53ef\u5199\u6d41\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u800c\u5728\u4ee5\u4e0b\u4ee3\u7801\u4e2d\u60c5\u51b5\u5c31\u53d8\u5f97\u590d\u6742\u3002</p> <pre><code>    const stream = fs.createWriteStream('123.md');  \n    stream.write('hello');  \n    // stream.close \u6216 stream.end();\n</code></pre> <p>\u5728\u9ed8\u8ba4\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528end\u6216\u8005close\u53bb\u901a\u77e5Node.js\u6d41\u7ed3\u675f\u3002\u4f46\u662f\u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u4e86autoClose\u4e3afalse\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u8c03\u7528close\u800c\u4e0d\u80fd\u8c03\u7528end\u3002\u5426\u5219\u4f1a\u9020\u6210\u6587\u4ef6\u63cf\u8ff0\u7b26\u6cc4\u6f0f\u3002\u56e0\u4e3aend\u53ea\u662f\u5173\u95ed\u4e86\u6d41\u3002\u4f46\u662f\u6ca1\u6709\u89e6\u53d1\u9500\u6bc1\u6d41\u7684\u903b\u8f91\u3002\u800cclose\u4f1a\u89e6\u53d1\u9500\u6bc1\u6d41\u7684\u903b\u8f91\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u4ee3\u7801\u3002</p> <pre><code>    const fs = require('fs');  \n    const stream = fs.createWriteStream('123.md');  \n    stream.write('hello');  \n    // \u9632\u6b62\u8fdb\u7a0b\u9000\u51fa  \n    setInterval(() =&gt; {});  \n</code></pre> <p>\u4ee5\u4e0a\u4ee3\u7801\u4f1a\u5bfc\u81f4\u6587\u4ef6\u63cf\u8ff0\u7b26\u6cc4\u6f0f\uff0c\u6211\u4eec\u5728Linux\u4e0b\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u901a\u8fc7ps aux\u627e\u5230\u8fdb\u7a0bid\uff0c\u7136\u540e\u6267\u884clsof -p pid\u5c31\u53ef\u4ee5\u770b\u5230\u8fdb\u7a0b\u6253\u5f00\u7684\u6240\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u8f93\u51fa\u598212-6\u6240\u793a\u3002  \u56fe12-6</p> <p>\u6587\u4ef6\u63cf\u8ff0\u7b2617\u6307\u5411\u4e86123.md\u6587\u4ef6\u3002\u6240\u4ee5\u6587\u4ef6\u63cf\u8ff0\u7b26\u6ca1\u6709\u88ab\u5173\u95ed\uff0c\u5f15\u8d77\u6587\u4ef6\u63cf\u8ff0\u7b26\u6cc4\u6f0f\u3002\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u4ee3\u7801\u3002 <pre><code>    const fs = require('fs');  \n    const stream = fs.createWriteStream('123.md');  \n    stream.end('hello');  \n    setInterval(() =&gt; {});  \n</code></pre> \u4e0b\u9762\u662f\u4ee5\u4e0a\u4ee3\u7801\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u770b\u5230\u6ca1\u6709123.md\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5982\u56fe12-7\u6240\u793a\u3002  \u56fe12-7 \u6211\u4eec\u7ee7\u7eed\u4fee\u6539\u4ee3\u7801 <pre><code>    const fs = require('fs');  \n    const stream = fs.createWriteStream('123.md', {autoClose: false});  \n    stream.end('hello');  \n    setInterval(() =&gt; {});  \n</code></pre> \u4ee5\u4e0a\u4ee3\u7801\u7684\u8f93\u51fa\u5982\u56fe12-8\u6240\u793a\u3002  \u56fe12-8 \u6211\u4eec\u770b\u5230\u4f7f\u7528end\u4e5f\u65e0\u6cd5\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u7ee7\u7eed\u4fee\u6539\u3002</p> <pre><code>    const fs = require('fs');  \n    const stream = fs.createWriteStream('123.md', {autoClose: false})\n    stream.close();  \n    setInterval(() =&gt; {});  \n</code></pre> <p>\u4ee5\u4e0a\u4ee3\u7801\u7684\u8f93\u51fa\u5982\u56fe12-9\u6240\u793a\u3002  \u56fe12-9 \u6211\u4eec\u770b\u5230\u6210\u529f\u5173\u95ed\u4e86\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/","title":"13-\u8fdb\u7a0b","text":"<p>\u8fdb\u7a0b\u662f\u64cd\u4f5c\u7cfb\u7edf\u91cc\u975e\u5e38\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u4e5f\u662f\u4e0d\u5bb9\u6613\u7406\u89e3\u7684\u6982\u5ff5\uff0c\u4f46\u662f\u770b\u8d77\u6765\u5f88\u590d\u6742\u7684\u8fdb\u7a0b\uff0c\u5176\u5b9e\u5728\u64cd\u4f5c\u7cfb\u7edf\u7684\u4ee3\u7801\u91cc\uff0c\u4e5f\u53ea\u662f\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u5b83\u6bd4\u4e00\u822c\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u66f4\u590d\u6742\u3002\u8fdb\u7a0b\u5728\u64cd\u4f5c\u7cfb\u7edf\u91cc\uff0c\u662f\u7528\u4e00\u4e2atask_struct\u7ed3\u6784\u4f53\u8868\u793a\u7684\u3002\u56e0\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u662f\u5927\u90e8\u5206\u662f\u7528C\u8bed\u8a00\u5b9e\u73b0\u7684\uff0c\u6ca1\u6709\u5bf9\u8c61\u8fd9\u4e2a\u6982\u5ff5\u3002\u5982\u679c\u6211\u4eec\u7528JS\u6765\u7406\u89e3\u7684\u8bdd\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u5c31\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6bcf\u6b21\u65b0\u5efa\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5c31\u662f\u65b0\u5efa\u4e00\u4e2a\u5bf9\u8c61\u3002task_struct\u7ed3\u6784\u4f53\u91cc\u4fdd\u5b58\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u6240\u9700\u8981\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u5305\u62ec\u6267\u884c\u72b6\u6001\u3001\u6267\u884c\u4e0a\u4e0b\u6587\u3001\u6253\u5f00\u7684\u6587\u4ef6\u3001\u6839\u76ee\u5f55\u3001\u5de5\u4f5c\u76ee\u5f55\u3001\u6536\u5230\u7684\u4fe1\u53f7\u3001\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3001\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u7684\u4fe1\u606f\u3001\u8fdb\u7a0bid\u3001\u6267\u884c\u65f6\u95f4\u3001\u9000\u51fa\u7801\u7b49\u7b49\u3002\u672c\u7ae0\u5c06\u4f1a\u4ecb\u7ecdNode.js\u8fdb\u7a0b\u6a21\u5757\u7684\u539f\u7406\u548c\u5b9e\u73b0\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#131-nodejs","title":"13.1 Node.js\u4e3b\u8fdb\u7a0b","text":"<p>\u5f53\u6211\u4eec\u6267\u884cnode index.js\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c31\u4f1a\u521b\u5efa\u4e00\u4e2aNode.js\u8fdb\u7a0b\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u5c31\u662f\u5728\u8fd9\u4e2aNode.js\u8fdb\u7a0b\u4e2d\u6267\u884c\u3002\u4ece\u4ee3\u7801\u89d2\u5ea6\u6765\u8bf4\uff0c\u6211\u4eec\u5728Node.js\u4e2d\u611f\u77e5\u8fdb\u7a0b\u7684\u65b9\u5f0f\u662f\u901a\u8fc7process\u5bf9\u8c61\u3002\u672c\u8282\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u5bf9\u8c61\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#1311-process","title":"13.1.1 \u521b\u5efaprocess\u5bf9\u8c61","text":"<p>Node.js\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efaprocess\u5bf9\u8c61\uff08env.cc\uff09\u3002</p> <pre><code>    Local&lt;Object&gt; process_object = node::CreateProcessObject(this).FromMaybe(Local&lt;Object&gt;());   \n    set_process_object(process_object);   \n    //  process\u5bf9\u8c61\u901a\u8fc7CreateProcessObject\u521b\u5efa\uff0c\u7136\u540e\u4fdd\u5b58\u5230env\u5bf9\u8c61\u4e2d\u3002\u6211\u4eec\u770b\u4e00\u4e0bCreateProcessObject\u3002\n    MaybeLocal&lt;Object&gt; CreateProcessObject(Environment* env) {  \n      Isolate* isolate = env-&gt;isolate();  \n      EscapableHandleScope scope(isolate);  \n      Local&lt;Context&gt; context = env-&gt;context();  \n\n      Local&lt;FunctionTemplate&gt; process_template = FunctionTemplate::New(isolate);  \n      process_template-&gt;SetClassName(env-&gt;process_string());  \n      Local&lt;Function&gt; process_ctor;  \n      Local&lt;Object&gt; process;  \n        // \u65b0\u5efaprocess\u5bf9\u8c61\n      if (!process_template-&gt;GetFunction(context).ToLocal(&amp;process_ctor)    || !process_ctor-&gt;NewInstance(context).ToLocal(&amp;process)) {  \n        return MaybeLocal&lt;Object&gt;();  \n      } \n        // \u8bbe\u7f6e\u4e00\u7cfb\u5217\u5c5e\u6027\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u5e73\u65f6\u901a\u8fc7process\u5bf9\u8c61\u8bbf\u95ee\u7684\u5c5e\u6027 \n      // Node.js\u7684\u7248\u672c  \n      READONLY_PROPERTY(process,\"version\",\n                          FIXED_ONE_BYTE_STRING(env-&gt;isolate(), \n                          NODE_VERSION)); \n       // \u5ffd\u7565\u5176\u4ed6\u5c5e\u6027\n\n      return scope.Escape(process);  \n    }  \n</code></pre> <p>\u8fd9\u662f\u4f7f\u7528V8\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u7684\u5178\u578b\u4f8b\u5b50\uff0c\u5e76\u4e14\u8bbe\u7f6e\u4e86\u4e00\u4e9b\u5c5e\u6027\u3002Node.js\u542f\u52a8\u8fc7\u7a0b\u4e2d\uff0c\u5f88\u591a\u5730\u65b9\u90fd\u4f1a\u7ed9process\u6302\u8f7d\u5c5e\u6027\u3002\u4e0b\u9762\u6211\u4eec\u770b\u6211\u4eec\u5e38\u7528\u7684process.env\u662f\u600e\u4e48\u6302\u8f7d\u7684\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#1312-env","title":"13.1.2 \u6302\u8f7denv\u5c5e\u6027","text":"<pre><code>    Local&lt;String&gt; env_string = FIXED_ONE_BYTE_STRING(isolate_, \"env\");\n    Local&lt;Object&gt; env_var_proxy;  \n    // \u8bbe\u7f6eprocess\u7684env\u5c5e\u6027\n    if (!CreateEnvVarProxy(context(), \n                            isolate_,\n                            as_callback_data())\n         .ToLocal(&amp;env_var_proxy) ||  \n      process_object()-&gt;Set(context(),\n                              env_string, \n                              env_var_proxy).IsNothing()) {  \n      return MaybeLocal&lt;Value&gt;();  \n    }  \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u901a\u8fc7CreateEnvVarProxy\u521b\u5efa\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u7136\u540e\u4fdd\u5b58\u5230env_var_proxy\u4e2d\uff0c\u6700\u540e\u7ed9process\u6302\u8f7d\u4e86env\u5c5e\u6027\u3002\u5b83\u7684\u503c\u662fCreateEnvVarProxy\u521b\u5efa\u7684\u5bf9\u8c61\u3002</p> <pre><code>    MaybeLocal&lt;Object&gt; CreateEnvVarProxy(Local&lt;Context&gt; context,  \n                        Isolate* isolate,  \n                       Local&lt;Object&gt; data) {  \n      EscapableHandleScope scope(isolate);  \n      Local&lt;ObjectTemplate&gt; env_proxy_template = ObjectTemplate::New(isolate);  \n      env_proxy_template-&gt;SetHandler(NamedPropertyHandlerConfiguration(\n          EnvGetter,\n                EnvSetter, \n                EnvQuery, \n                EnvDeleter, \n                EnvEnumerator, \n                data,  \n          PropertyHandlerFlags::kHasNoSideEffect));  \n      return scope.EscapeMaybe(env_proxy_template-&gt;NewInstance(context));\n    }  \n</code></pre> <p>CreateEnvVarProxy\u9996\u5148\u7533\u8bf7\u4e00\u4e2a\u5bf9\u8c61\u6a21\u677f\uff0c\u7136\u540e\u8bbe\u7f6e\u901a\u8fc7\u8be5\u5bf9\u8c61\u6a21\u677f\u521b\u5efa\u7684\u5bf9\u8c61\u7684\u8bbf\u95ee\u63cf\u8ff0\u7b26\u3002\u6211\u4eec\u770b\u4e00\u4e0bgetter\u63cf\u8ff0\u7b26\uff08EnvGetter\uff09\u7684\u5b9e\u73b0\uff0cgetter\u63cf\u8ff0\u7b26\u548c\u6211\u4eec\u5728JS\u91cc\u4f7f\u7528\u7684\u7c7b\u4f3c\u3002</p> <pre><code>    static void EnvGetter(Local&lt;Name&gt; property,  \n                const PropertyCallbackInfo&lt;Value&gt;&amp; info) { \n      Environment* env = Environment::GetCurrent(info);  \n      MaybeLocal&lt;String&gt; value_string = env-&gt;env_vars()-&gt;Get(env-&gt;isolate(), property.As&lt;String&gt;());  \n      if (!value_string.IsEmpty()) {  \n        info.GetReturnValue().Set(value_string.ToLocalChecked());  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230getter\u662f\u4eceenv-&gt;env_vars()\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u90a3\u4e48env-&gt;env_vars()\u53c8\u662f\u4ec0\u4e48\u5462\uff1fenv_vars\u662f\u4e00\u4e2akv\u5b58\u50a8\u7cfb\u7edf\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2amap\u3002\u5b83\u53ea\u5728Node.js\u521d\u59cb\u5316\u7684\u65f6\u5019\u8bbe\u7f6e\uff08\u521b\u5efaenv\u5bf9\u8c61\u65f6\uff09\u3002</p> <pre><code>set_env_vars(per_process::system_environment); \n</code></pre> <p>\u90a3\u4e48per_process::system_environment\u53c8\u662f\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u770b\uff0c</p> <pre><code>std::shared_ptr&lt;KVStore&gt; system_environment = std::make_shared&lt;RealEnvStore&gt;();  \n</code></pre> <p>\u6211\u4eec\u770b\u5230system_environment\u662f\u4e00\u4e2aRealEnvStore\u5bf9\u8c61\u3002\u6211\u4eec\u770b\u4e00\u4e0bRealEnvStore\u7c7b\u7684\u5b9e\u73b0\u3002</p> <pre><code>    class RealEnvStore final : public KVStore {  \n     public:  \n      MaybeLocal&lt;String&gt; Get(Isolate* isolate, Local&lt;String&gt; key) const override;  \n      void Set(Isolate* isolate, Local&lt;String&gt; key, Local&lt;String&gt; value) override;  \n      int32_t Query(Isolate* isolate, Local&lt;String&gt; key) const override;  \n      void Delete(Isolate* isolate, Local&lt;String&gt; key) override;  \n      Local&lt;Array&gt; Enumerate(Isolate* isolate) const override;  \n    };  \n</code></pre> <p>\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u662f\u589e\u5220\u6539\u67e5\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u67e5\u8be2Get\u7684\u5b9e\u73b0\u3002</p> <pre><code>    MaybeLocal&lt;String&gt; RealEnvStore::Get(Isolate* isolate,  \n                                         Local&lt;String&gt; property) const {  \n      Mutex::ScopedLock lock(per_process::env_var_mutex);  \n\n      node::Utf8Value key(isolate, property);  \n      size_t init_sz = 256;  \n      MaybeStackBuffer&lt;char, 256&gt; val;  \n      int ret = uv_os_getenv(*key, *val, &amp;init_sz);  \n      if (ret &gt;= 0) {  // Env key value fetch success.  \n        MaybeLocal&lt;String&gt; value_string =  \n            String::NewFromUtf8(isolate, \n                                        *val,\n                                        NewStringType::kNormal, \n                                        init_sz);  \n        return value_string;  \n      }  \n\n      return MaybeLocal&lt;String&gt;();  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u662f\u901a\u8fc7uv_os_getenv\u83b7\u53d6\u7684\u6570\u636e\u3002uv_os_getenv\u662f\u5bf9getenv\u51fd\u6570\u7684\u5c01\u88c5\uff0c\u8fdb\u7a0b\u7684\u5185\u5b58\u5e03\u5c40\u4e2d\uff0c\u6709\u4e00\u90e8\u5206\u662f\u7528\u4e8e\u5b58\u50a8\u73af\u5883\u53d8\u91cf\u7684\uff0cgetenv\u5c31\u662f\u4ece\u90a3\u4e00\u5757\u5185\u5b58\u4e2d\u628a\u6570\u636e\u8bfb\u53d6\u51fa\u6765\u3002\u6211\u4eec\u6267\u884cexecve\u7684\u65f6\u5019\u53ef\u4ee5\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u3002\u5177\u4f53\u7684\u6211\u4eec\u5728\u5b50\u8fdb\u7a0b\u7ae0\u8282\u4f1a\u770b\u5230\u3002\u81f3\u6b64\uff0c\u6211\u4eec\u77e5\u9053process\u7684env\u5c5e\u6027\u5bf9\u5e94\u7684\u503c\u5c31\u662f\u8fdb\u7a0b\u73af\u5883\u53d8\u91cf\u7684\u5185\u5bb9\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#1313","title":"13.1.3 \u6302\u8f7d\u5176\u5b83\u5c5e\u6027","text":"<p>\u5728Node.js\u7684\u542f\u52a8\u8fc7\u7a0b\u4e2d\u4f1a\u4e0d\u65ad\u5730\u6302\u8f7d\u5c5e\u6027\u5230process\u3002\u4e3b\u8981\u5728bootstrap/node.js\u4e2d\u3002\u4e0d\u4e00\u4e00\u5217\u4e3e\u3002</p> <pre><code>    const rawMethods = internalBinding('process_methods');\n    process.dlopen = rawMethods.dlopen;  \n    process.uptime = rawMethods.uptime; \n    process.nextTick = nextTick; \n</code></pre> <p>\u4e0b\u9762\u662fprocess_methods\u6a21\u5757\u5bfc\u51fa\u7684\u5c5e\u6027\uff0c\u4e3b\u5217\u51fa\u5e38\u7528\u7684\u3002</p> <pre><code>    env-&gt;SetMethod(target, \"memoryUsage\", MemoryUsage);  \n    env-&gt;SetMethod(target, \"cpuUsage\", CPUUsage);  \n    env-&gt;SetMethod(target, \"hrtime\", Hrtime);    \n    env-&gt;SetMethod(target, \"dlopen\", binding::DLOpen);  \n    env-&gt;SetMethodNoSideEffect(target, \"uptime\", Uptime);    \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u5728JS\u5c42\u8bbf\u95eeprocess\u5c5e\u6027\u7684\u65f6\u5019\uff0c\u8bbf\u95ee\u7684\u662f\u5bf9\u5e94\u7684C++\u5c42\u7684\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u5927\u90e8\u5206\u4e5f\u53ea\u662f\u5bf9Libuv\u7684\u5c01\u88c5\u3002\u53e6\u5916\u5728Node.js\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u6267\u884cPatchProcessObject\u3002PatchProcessObject\u51fd\u6570\u4f1a\u6302\u8f7d\u4e00\u4e9b\u989d\u5916\u7684\u5c5e\u6027\u7ed9process\u3002</p> <pre><code>    // process.argv  \n    process-&gt;Set(context,  \n           FIXED_ONE_BYTE_STRING(isolate, \"argv\"),  \n           ToV8Value(context, env-&gt;argv()).ToLocalChecked()).Check();\n\n    READONLY_PROPERTY(process, \n                      \"pid\",  \n             Integer::New(isolate, uv_os_getpid()));  \n\n    CHECK(process-&gt;SetAccessor(context,  \n                  FIXED_ONE_BYTE_STRING(isolate, \"ppid\"),  \n                  GetParentProcessId).FromJust())  \n</code></pre> <p>\u5728Node.js\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5728\u591a\u4e2a\u5730\u65b9\u90fd\u4f1a\u7ed9process\u5bf9\u8c61\u6302\u8f7d\u5c5e\u6027\uff0c\u8fd9\u91cc\u53ea\u5217\u51fa\u4e86\u4e00\u90e8\u5206\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u4ecebootstrap/node.js\u7684\u4ee3\u7801\u5f00\u59cb\u770b\u90fd\u6302\u8f7d\u4e86\u4ec0\u4e48\u5c5e\u6027\u3002\u56e0\u4e3aNode.js\u652f\u6301\u591a\u7ebf\u7a0b\uff0c\u6240\u4ee5\u9488\u5bf9\u7ebf\u7a0b\u7684\u60c5\u51b5\uff0c\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u5904\u7406\u3002</p> <pre><code>    const perThreadSetup = require('internal/process/per_thread');  \n    // rawMethods\u6765\u81eaprocess_methods\u6a21\u5757\u5bfc\u51fa\u7684\u5c5e\u6027\n    const wrapped = perThreadSetup.wrapProcessMethods(rawMethods);  \n    process.hrtime = wrapped.hrtime;   \n    process.cpuUsage = wrapped.cpuUsage;   \n    process.memoryUsage = wrapped.memoryUsage;  \n    process.kill = wrapped.kill;  \n    process.exit = wrapped.exit;  \n</code></pre> <p>\u5927\u90e8\u5206\u51fd\u6570\u90fd\u662f\u5bf9process_methods\u6a21\u5757\uff08node_process_methods.cc\uff09\u7684\u5c01\u88c5\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u5c5e\u6027\u6211\u4eec\u9700\u8981\u5173\u6ce8\u4e00\u4e0b\uff0c\u5c31\u662fexit\uff0c\u56e0\u4e3a\u5728\u7ebf\u7a0b\u4e2d\u8c03\u7528process.exit\u7684\u65f6\u5019\uff0c\u53ea\u4f1a\u9000\u51fa\u5355\u4e2a\u7ebf\u7a0b\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u8fdb\u7a0b\u3002</p> <pre><code>    function exit(code) {  \n       if (code || code === 0)  \n         process.exitCode = code;  \n\n       if (!process._exiting) {  \n         process._exiting = true;  \n         process.emit('exit', process.exitCode || 0);  \n       }  \n       process.reallyExit(process.exitCode || 0);  \n     }  \n</code></pre> <p>\u6211\u4eec\u7ee7\u7eed\u770breallyExit</p> <pre><code>    static void ReallyExit(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n      RunAtExit(env);  \n      int code = args[0]-&gt;Int32Value(env-&gt;context()).FromMaybe(0);  \n      env-&gt;Exit(code);  \n    }  \n</code></pre> <p>\u8c03\u7528\u4e86env\u7684Exit\u3002</p> <pre><code>    void Environment::Exit(int exit_code) {  \n      if (is_main_thread()) {  \n        stop_sub_worker_contexts();  \n        DisposePlatform();  \n        exit(exit_code);  \n      } else {  \n        worker_context_-&gt;Exit(exit_code);  \n      }  \n    }  \n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u770b\u5230\u4e86\u91cd\u70b9\uff0c\u6839\u636e\u5f53\u524d\u662f\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u5b50\u7ebf\u7a0b\u4f1a\u505a\u4e0d\u540c\u7684\u5904\u7406\u3002\u4e00\u4e2a\u7ebf\u7a0b\u4f1a\u5bf9\u5e94\u4e00\u4e2aenv\uff0cenv\u5bf9\u8c61\u4e2d\u7684worker_context_\u4fdd\u5b58\u5c31\u662f\u7ebf\u7a0b\u5bf9\u8c61\uff08Worker\uff09\u3002\u6211\u4eec\u5148\u770b\u5b50\u7ebf\u7a0b\u7684\u903b\u8f91\u3002</p> <pre><code>    void Worker::Exit(int code) {  \n      Mutex::ScopedLock lock(mutex_);  \n      if (env_ != nullptr) {  \n        exit_code_ = code;  \n        Stop(env_);  \n      } else {  \n        stopped_ = true;  \n      }  \n    }  \n\n    int Stop(Environment* env) {  \n      env-&gt;ExitEnv();  \n      return 0;  \n    }  \n\n    void Environment::ExitEnv() {  \n      set_can_call_into_js(false);  \n      set_stopping(true);  \n      isolate_-&gt;TerminateExecution();  \n      // \u9000\u51faLibuv\u4e8b\u4ef6\u5faa\u73af  \n      SetImmediateThreadsafe([](Environment* env) { uv_stop(env-&gt;event_loop()); });  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u5b50\u7ebf\u7a0b\u6700\u540e\u8c03\u7528uv_stop\u63d0\u51fa\u4e86Libuv\u4e8b\u4ef6\u5faa\u73af\uff0c\u7136\u540e\u9000\u51fa\u3002\u6211\u4eec\u518d\u6765\u770b\u4e3b\u7ebf\u7a0b\u7684\u9000\u51fa\u903b\u8f91\u3002</p> <pre><code>    if (is_main_thread()) {  \n      stop_sub_worker_contexts();  \n      DisposePlatform();  \n      exit(exit_code);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u6700\u540e\u4e3b\u8fdb\u7a0b\u4e2d\u8c03\u7528exit\u9000\u51fa\u8fdb\u7a0b\u3002\u4f46\u662f\u9000\u51fa\u524d\u8fd8\u6709\u4e00\u4e9b\u5904\u7406\u5de5\u4f5c\uff0c\u6211\u4eec\u770bstop_sub_worker_contexts</p> <pre><code>    void Environment::stop_sub_worker_contexts() {  \n      while (!sub_worker_contexts_.empty()) {  \n        Worker* w = *sub_worker_contexts_.begin();  \n        remove_sub_worker_context(w);  \n        w-&gt;Exit(1);  \n        w-&gt;JoinThread();  \n      }  \n    }  \n</code></pre> <p>sub_worker_contexts\u4fdd\u5b58\u7684\u662fWorker\u5bf9\u8c61\u5217\u8868\uff0c\u6bcf\u6b21\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u5f80\u91cc\u8ffd\u52a0\u4e00\u4e2a\u5143\u7d20\u3002\u8fd9\u91cc\u904d\u5386\u8fd9\u4e2a\u5217\u8868\uff0c\u7136\u540e\u8c03\u7528Exit\u51fd\u6570\uff0c\u8fd9\u4e2a\u521a\u624d\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u5c31\u662f\u9000\u51faLibuv\u4e8b\u4ef6\u5faa\u73af\u3002\u4e3b\u7ebf\u7a0b\u63a5\u7740\u8c03JoinThread\uff0cJoinThread\u4e3b\u8981\u662f\u4e3a\u4e86\u963b\u585e\u7b49\u5f85\u5b50\u7ebf\u7a0b\u9000\u51fa\uff0c\u56e0\u4e3a\u5b50\u7ebf\u7a0b\u5728\u9000\u51fa\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u88ab\u64cd\u4f5c\u7cfb\u7edf\u6302\u8d77\uff08\u6267\u884c\u65f6\u95f4\u7247\u5230\u4e86\uff09\uff0c\u8fd9\u65f6\u5019\u4e3b\u7ebf\u7a0b\u88ab\u8c03\u5ea6\u6267\u884c\uff0c\u4f46\u662f\u8fd9\u65f6\u5019\u4e3b\u7ebf\u7a0b\u8fd8\u4e0d\u80fd\u9000\u51fa\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528join\u963b\u585e\u7b49\u5f85\u5b50\u7ebf\u7a0b\u9000\u51fa\u3002Node.js\u7684JoinThread\u9664\u4e86\u5bf9\u7ebf\u7a0bjoin\u51fd\u6570\u7684\u5c01\u88c5\u3002\u8fd8\u505a\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u89e6\u53d1exit\u4e8b\u4ef6\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#132","title":"13.2 \u521b\u5efa\u5b50\u8fdb\u7a0b","text":"<p>\u56e0\u4e3aNode.js\u662f\u5355\u8fdb\u7a0b\u7684\uff0c\u4f46\u6709\u5f88\u591a\u4e8b\u60c5\u53ef\u80fd\u4e0d\u9002\u5408\u5728\u4e3b\u8fdb\u7a0b\u91cc\u5904\u7406\u7684\uff0c\u6240\u4ee5Node.js\u63d0\u4f9b\u4e86\u5b50\u8fdb\u7a0b\u6a21\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u5b50\u8fdb\u7a0b\u505a\u4e00\u4e9b\u989d\u5916\u4efb\u52a1\u7684\u5904\u7406\uff0c\u53e6\u5916\uff0c\u5b50\u8fdb\u7a0b\u7684\u597d\u5904\u662f\uff0c\u4e00\u65e6\u5b50\u8fdb\u7a0b\u51fa\u95ee\u9898\u6302\u6389\u4e0d\u4f1a\u5f71\u54cd\u4e3b\u8fdb\u7a0b\u3002\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b\u5728\u7528C\u8bed\u8a00\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\u3002</p> <pre><code>    #include&lt;unistd.h&gt;  \n    #include&lt;stdlib.h&gt;  \n\n    int main(int argc,char *argv[]){  \n        pid_t pid = fork();  \n        if (pid &lt; 0) {  \n          // \u9519\u8bef  \n        } else if(pid == 0) {  \n         // \u5b50\u8fdb\u7a0b\uff0c\u53ef\u4ee5\u4f7f\u7528exec*\u7cfb\u5217\u51fd\u6570\u6267\u884c\u65b0\u7684\u7a0b\u5e8f\n        } else {  \n          // \u7236\u8fdb\u7a0b  \n        }  \n    }  \n</code></pre> <p>fork\u51fd\u6570\u7684\u7279\u70b9\uff0c\u6211\u4eec\u542c\u5f97\u6700\u591a\u7684\u53ef\u80fd\u662f\u6267\u884c\u4e00\u6b21\u8fd4\u56de\u4e24\u6b21\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u7591\u60d1\uff0c\u6267\u884c\u4e00\u4e2a\u51fd\u6570\u600e\u4e48\u53ef\u80fd\u8fd4\u56de\u4e86\u4e24\u6b21\u5462\uff1f\u4e4b\u524d\u6211\u4eec\u8bb2\u8fc7\uff0c\u8fdb\u7a0b\u662ftask_struct\u8868\u793a\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u8c03\u7528 fork\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u65b0\u5efa\u4e00\u4e2a\u65b0\u7684task_struct\u5b9e\u4f8b\u51fa\u6765\uff08\u53d8\u6210\u4e24\u4e2a\u8fdb\u7a0b\uff09\uff0cfork\u8fd4\u56de\u4e24\u6b21\u7684\u610f\u601d\u5176\u5b9e\u662f\u5728\u5728\u4e24\u4e2a\u8fdb\u7a0b\u5206\u522b\u8fd4\u56de\u4e00\u6b21\uff0c\u6267\u884c\u7684\u90fd\u662ffork\u540e\u9762\u7684\u4e00\u884c\u4ee3\u7801\u3002\u800c\u64cd\u4f5c\u7cfb\u7edf\u6839\u636e\u5f53\u524d\u8fdb\u7a0b\u662f\u4e3b\u8fdb\u7a0b\u8fd8\u662f\u5b50\u8fdb\u7a0b\uff0c\u8bbe\u7f6e\u4e86fork\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002\u6240\u4ee5\u4e0d\u540c\u7684\u8fdb\u7a0b\uff0cfork\u8fd4\u56de\u503c\u4e0d\u4e00\u6837\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u4ee3\u7801\u4e2dif else\u6761\u4ef6\u3002\u4f46\u662ffork\u53ea\u662f\u590d\u5236\u4e3b\u8fdb\u7a0b\u7684\u5185\u5bb9\uff0c\u5982\u679c\u6211\u4eec\u60f3\u6267\u884c\u53e6\u5916\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u7528\u5230exec*\u7cfb\u5217\u51fd\u6570\uff0c\u8be5\u7cfb\u5217\u51fd\u6570\u4f1a\u8986\u76d6\u65e7\u8fdb\u7a0b\uff08task_struct\uff09\u7684\u90e8\u5206\u5185\u5bb9\uff0c\u91cd\u65b0\u52a0\u8f7d\u65b0\u7684\u7a0b\u5e8f\u5185\u5bb9\u3002\u8fd9\u4e5f\u662fNode.js\u4e2d\u521b\u5efa\u5b50\u8fdb\u7a0b\u7684\u5e95\u5c42\u539f\u7406\u3002Node.js\u867d\u7136\u63d0\u4f9b\u4e86\u5f88\u591a\u79cd\u521b\u5efa\u8fdb\u7a0b\u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u672c\u8d28\u4e0a\u662f\u540c\u6b65\u548c\u5f02\u6b65\u4e24\u79cd\u65b9\u5f0f\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#1321","title":"13.2.1 \u5f02\u6b65\u521b\u5efa\u8fdb\u7a0b","text":"<p>\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b\u5f02\u6b65\u65b9\u5f0f\u521b\u5efa\u8fdb\u7a0b\u65f6\u7684\u5173\u7cfb\u56fe\u5982\u56fe13-1\u6240\u793a\u3002  \u56fe13-1 \u6211\u4eec\u4ecefork\u8fd9\u4e2a\u51fd\u6570\u5f00\u59cb\uff0c\u770b\u4e00\u4e0b\u6574\u4e2a\u6d41\u7a0b\u3002</p> <pre><code>    function fork(modulePath /* , args, options */) {  \n      // \u4e00\u7cfb\u5217\u53c2\u6570\u5904\u7406  \n      return spawn(options.execPath, args, options);  \n    }  \n</code></pre> <p>\u6211\u4eec\u63a5\u7740\u770bspawn</p> <pre><code>    var spawn = exports.spawn = function(/*file, args, options*/) {  var opts = normalizeSpawnArguments.apply(null, arguments);  \n      var options = opts.options;  \n      var child = new ChildProcess();  \n\n      child.spawn({  \n        file: opts.file,  \n        args: opts.args,  \n        cwd: options.cwd,  \n        windowsHide: !!options.windowsHide,  \n        windowsVerbatimArguments: !!options.windowsVerbatimArguments, \n        detached: !!options.detached,  \n        envPairs: opts.envPairs,  \n        stdio: options.stdio,  \n        uid: options.uid,  \n        gid: options.gid  \n      });  \n\n      return child;  \n    };  \n</code></pre> <p>\u6211\u4eec\u770b\u5230spawn\u51fd\u6570\u53ea\u662f\u5bf9ChildProcess\u7684\u5c01\u88c5\u3002\u7136\u540e\u8c03\u7528\u5b83\u7684spawn\u51fd\u6570\u3002\u6211\u4eec\u770b\u770bChildProcess\u3002</p> <pre><code>    function ChildProcess() {  \n      // C++\u5c42\u5b9a\u4e49  \n      this._handle = new Process();  \n    }  \n\n    ChildProcess.prototype.spawn = function(options) {  \n      // \u521b\u5efa\u8fdb\u7a0b  \n      const err = this._handle.spawn(options);  \n    }  \n</code></pre> <p>ChildProcess\u662f\u5bf9C++\u5c42\u7684\u5c01\u88c5\uff0c\u4e0d\u8fc7Process\u5728C++\u5c42\u4e5f\u6ca1\u6709\u592a\u591a\u903b\u8f91\uff0c\u8fdb\u884c\u53c2\u6570\u7684\u5904\u7406\u7136\u540e\u8c03\u7528Libuv\u7684uv_spawn\u3002\u6211\u4eec\u901a\u8fc7uv_spawn\u6765\u5230\u4e86C\u8bed\u8a00\u5c42\u3002\u6211\u4eec\u770b\u770buv_spawn\u7684\u6574\u4f53\u6d41\u7a0b\u3002</p> <pre><code>    int uv_spawn(uv_loop_t* loop,  \n                 uv_process_t* process,  \n                 const uv_process_options_t* options) {  \n\n      uv__handle_init(loop, (uv_handle_t*)process, UV_PROCESS);  \n      QUEUE_INIT(&amp;process-&gt;queue);  \n      // \u5904\u7406\u8fdb\u7a0b\u95f4\u901a\u4fe1  \n      for (i = 0; i &lt; options-&gt;stdio_count; i++) {  \n        err = uv__process_init_stdio(options-&gt;stdio + i, pipes[i]);  \n        if (err)  \n          goto error;  \n      }  \n      /*\n       \u521b\u5efa\u4e00\u4e2a\u7ba1\u9053\u7528\u4e8e\u521b\u5efa\u8fdb\u7a0b\u671f\u95f4\u7684\u7236\u8fdb\u7a0b\u5b50\u901a\u4fe1\uff0c\n       \u8bbe\u7f6eUV__O_CLOEXEC\u6807\u8bb0\uff0c\u5b50\u8fdb\u7a0b\u6267\u884cexecvp\n       \u7684\u65f6\u5019\u7ba1\u9053\u7684\u4e00\u7aef\u4f1a\u88ab\u5173\u95ed  \n      */\n      err = uv__make_pipe(signal_pipe, 0);  \n      // \u6ce8\u518c\u5b50\u8fdb\u7a0b\u9000\u51fa\u4fe1\u53f7\u7684\u5904\u7406\u51fd\u6570  \n      uv_signal_start(&amp;loop-&gt;child_watcher, uv__chld, SIGCHLD);  \n\n      uv_rwlock_wrlock(&amp;loop-&gt;cloexec_lock);  \n      // \u521b\u5efa\u5b50\u8fdb\u7a0b  \n      pid = fork();  \n      // \u5b50\u8fdb\u7a0b  \n      if (pid == 0) {  \n        uv__process_child_init(options, \n                                  stdio_count, \n                                  pipes, \n                                  signal_pipe[1]);  \n        abort();  \n      }  \n      // \u7236\u8fdb\u7a0b  \n      uv_rwlock_wrunlock(&amp;loop-&gt;cloexec_lock);  \n      // \u5173\u95ed\u7ba1\u9053\u5199\u7aef\uff0c\u7b49\u5f85\u5b50\u8fdb\u7a0b\u5199  \n      uv__close(signal_pipe[1]);  \n\n      process-&gt;status = 0;  \n      exec_errorno = 0;  \n      // \u5224\u65ad\u5b50\u8fdb\u7a0b\u662f\u5426\u6267\u884c\u6210\u529f  \n      do  \n        r = read(signal_pipe[0],&amp;exec_errorno,sizeof(exec_errorno));\n      while (r == -1 &amp;&amp; errno == EINTR);  \n      // \u5ffd\u7565\u5904\u7406r\u7684\u903b\u8f91 \n      // \u4fdd\u5b58\u901a\u4fe1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5230\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784  \n      for (i = 0; i &lt; options-&gt;stdio_count; i++) {  \n        uv__process_open_stream(options-&gt;stdio + i, pipes[i]);\n      }  \n\n      // \u63d2\u5165Libuv\u4e8b\u4ef6\u5faa\u73af\u7684\u7ed3\u6784\u4f53  \n      if (exec_errorno == 0) {  \n        QUEUE_INSERT_TAIL(&amp;loop-&gt;process_handles, &amp;process-&gt;queue); \n        uv__handle_start(process);  \n      }  \n\n      process-&gt;pid = pid;  \n      process-&gt;exit_cb = options-&gt;exit_cb;  \n\n      return exec_errorno;  \n    }  \n</code></pre> <p>uv_spawn\u7684\u903b\u8f91\u5927\u81f4\u5206\u4e3a\u4e0b\u9762\u51e0\u4e2a 1 \u5904\u7406\u8fdb\u7a0b\u95f4\u901a\u4fe1 2 \u6ce8\u518c\u5b50\u8fdb\u7a0b\u9000\u51fa\u5904\u7406\u51fd\u6570 3 \u521b\u5efa\u5b50\u8fdb\u7a0b 4 \u63d2\u5165Libuv\u4e8b\u4ef6\u5faa\u73af\u7684process_handles\u5bf9\u8c61\uff0c\u4fdd\u5b58\u72b6\u6001\u7801\u548c\u56de\u8c03\u7b49\u3002 \u6211\u4eec\u5206\u67902,3\uff0c\u8fdb\u7a0b\u95f4\u901a\u4fe1\u6211\u4eec\u5355\u72ec\u5206\u6790\u3002 1 \u5904\u7406\u5b50\u8fdb\u7a0b\u9000\u51fa \u4e3b\u8fdb\u7a0b\u5728\u521b\u5efa\u5b50\u8fdb\u7a0b\u4e4b\u524d\uff0c\u4f1a\u6ce8\u518cSIGCHLD\u4fe1\u53f7\u3002\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\u662fuv__chld\u3002\u5f53\u8fdb\u7a0b\u9000\u51fa\u7684\u65f6\u5019\u3002Node.js\u4e3b\u8fdb\u7a0b\u4f1a\u6536\u5230SIGCHLD\u4fe1\u53f7\u3002\u7136\u540e\u6267\u884cuv__chld\u3002\u8be5\u51fd\u6570\u904d\u5386Libuv\u8fdb\u7a0b\u961f\u5217\u4e2d\u7684\u8282\u70b9\uff0c\u901a\u8fc7waitpid\u5224\u65ad\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u8fdb\u7a0b\u662f\u5426\u5df2\u7ecf\u9000\u51fa\u540e\uff0c\u4ece\u800c\u5904\u7406\u5df2\u9000\u51fa\u7684\u8282\u70b9\uff0c\u7136\u540e\u79fb\u51faLibuv\u961f\u5217\uff0c\u6700\u540e\u6267\u884c\u5df2\u9000\u51fa\u8fdb\u7a0b\u7684\u56de\u8c03\u3002</p> <pre><code>    static void uv__chld(uv_signal_t* handle, int signum) {  \n      uv_process_t* process;  \n      uv_loop_t* loop;  \n      int exit_status;  \n      int term_signal;  \n      int status;  \n      pid_t pid;  \n      QUEUE pending;  \n      QUEUE* q;  \n      QUEUE* h;  \n      // \u4fdd\u5b58\u8fdb\u7a0b\uff08\u5df2\u9000\u51fa\u7684\u72b6\u6001\uff09\u7684\u961f\u5217  \n      QUEUE_INIT(&amp;pending);  \n      loop = handle-&gt;loop;  \n\n      h = &amp;loop-&gt;process_handles;  \n      q = QUEUE_HEAD(h);  \n      //  \u6536\u96c6\u5df2\u9000\u51fa\u7684\u8fdb\u7a0b  \n      while (q != h) {  \n        process = QUEUE_DATA(q, uv_process_t, queue);  \n        q = QUEUE_NEXT(q);  \n\n        do  \n          /*\n                 WNOHANG\u975e\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u9000\u51fa\uff0c\u5176\u5b9e\u5c31\u662f\u770b\u5b50\u8fdb\u7a0b\u662f\u5426\u9000\u51fa\u4e86\uff0c\n                  \u6ca1\u6709\u7684\u8bdd\u5c31\u76f4\u63a5\u8fd4\u56de\uff0c\u800c\u4e0d\u662f\u963b\u585e\n                */   \n          pid = waitpid(process-&gt;pid, &amp;status, WNOHANG);  \n        while (pid == -1 &amp;&amp; errno == EINTR);  \n\n        if (pid == 0)  \n          continue;  \n        /*\n              \u8fdb\u7a0b\u9000\u51fa\u4e86\uff0c\u4fdd\u5b58\u9000\u51fa\u72b6\u6001\uff0c\u79fb\u51fa\u961f\u5217\uff0c\n              \u63d2\u5165peding\u961f\u5217\uff0c\u7b49\u5f85\u5904\u7406  \n            */\n        process-&gt;status = status;  \n        QUEUE_REMOVE(&amp;process-&gt;queue);  \n        QUEUE_INSERT_TAIL(&amp;pending, &amp;process-&gt;queue);  \n      }  \n\n      h = &amp;pending;  \n      q = QUEUE_HEAD(h);  \n      // \u662f\u5426\u6709\u9000\u51fa\u7684\u8fdb\u7a0b  \n      while (q != h) {  \n        process = QUEUE_DATA(q, uv_process_t, queue);  \n        q = QUEUE_NEXT(q);  \n        QUEUE_REMOVE(&amp;process-&gt;queue);  \n        QUEUE_INIT(&amp;process-&gt;queue);  \n        uv__handle_stop(process);  \n\n        if (process-&gt;exit_cb == NULL)  \n          continue;  \n\n        exit_status = 0;  \n        // \u83b7\u53d6\u9000\u51fa\u4fe1\u606f\uff0c\u6267\u884c\u4e0a\u4f20\u56de\u8c03  \n        if (WIFEXITED(process-&gt;status))  \n          exit_status = WEXITSTATUS(process-&gt;status);  \n          // \u662f\u5426\u56e0\u4e3a\u4fe1\u53f7\u800c\u9000\u51fa\n        term_signal = 0;  \n        if (WIFSIGNALED(process-&gt;status))  \n          term_signal = WTERMSIG(process-&gt;status);  \n\n        process-&gt;exit_cb(process, exit_status, term_signal);  \n      }  \n    }  \n</code></pre> <p>\u5f53\u4e3b\u8fdb\u7a0b\u4e0b\u7684\u5b50\u8fdb\u7a0b\u9000\u51fa\u65f6\uff0c\u7236\u8fdb\u7a0b\u4e3b\u8981\u8d1f\u8d23\u6536\u96c6\u5b50\u8fdb\u7a0b\u9000\u51fa\u72b6\u6001\u548c\u539f\u56e0\u7b49\u4fe1\u606f\uff0c\u7136\u540e\u6267\u884c\u4e0a\u5c42\u56de\u8c03\u3002</p> <p>2 \u521b\u5efa\u5b50\u8fdb\u7a0b\uff08uv__process_child_init\uff09 \u4e3b\u8fdb\u7a0b\u9996\u5148\u4f7f\u7528uv__make_pipe\u7533\u8bf7\u4e00\u4e2a\u533f\u540d\u7ba1\u9053\u7528\u4e8e\u4e3b\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u901a\u4fe1\uff0c\u533f\u540d\u7ba1\u9053\u662f\u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e2d\u6bd4\u8f83\u7b80\u5355\u7684\u4e00\u79cd\uff0c\u5b83\u53ea\u7528\u4e8e\u6709\u7ee7\u627f\u5173\u7cfb\u7684\u8fdb\u7a0b\uff0c\u56e0\u4e3a\u533f\u540d\uff0c\u975e\u7ee7\u627f\u5173\u7cfb\u7684\u8fdb\u7a0b\u65e0\u6cd5\u627e\u5230\u8fd9\u4e2a\u7ba1\u9053\uff0c\u4e5f\u5c31\u65e0\u6cd5\u5b8c\u6210\u901a\u4fe1\uff0c\u800c\u6709\u7ee7\u627f\u5173\u7cfb\u7684\u8fdb\u7a0b\uff0c\u662f\u901a\u8fc7fork\u51fa\u6765\u7684\uff0c\u7236\u5b50\u8fdb\u7a0b\u53ef\u4ee5\u83b7\u5f97\u5f97\u5230\u7ba1\u9053\u3002\u8fdb\u4e00\u6b65\u6765\u8bf4\uff0c\u5b50\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7ee7\u627f\u4e8e\u7236\u8fdb\u7a0b\u7684\u8d44\u6e90\uff0c\u7ba1\u9053\u901a\u4fe1\u7684\u539f\u7406\u5982\u56fe13-2\u6240\u793a\u3002  \u56fe13-2 \u4e3b\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u901a\u8fc7\u5171\u4eabfile\u548cinode\u7ed3\u6784\u4f53\uff0c\u5b9e\u73b0\u5bf9\u540c\u4e00\u5757\u5185\u5b58\u7684\u8bfb\u5199\u3002\u4e3b\u8fdb\u7a0bfork\u521b\u5efa\u5b50\u8fdb\u7a0b\u540e\uff0c\u4f1a\u901a\u8fc7read\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u6d88\u606f\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5b50\u8fdb\u7a0b\u7684\u903b\u8f91\u3002</p> <pre><code>    static void uv__process_child_init(const uv_process_options_t* options,\n                                         int stdio_count,  \n                       int (*pipes)[2],  \n                       int error_fd) {  \n      sigset_t set;  \n      int close_fd;  \n      int use_fd;  \n      int err;  \n      int fd;  \n      int n;  \n      // \u7701\u7565\u5904\u7406\u6587\u4ef6\u63cf\u8ff0\u7b26\u7b49\u53c2\u6570\u903b\u8f91  \n      // \u5904\u7406\u73af\u5883\u53d8\u91cf  \n      if (options-&gt;env != NULL) {  \n        environ = options-&gt;env;  \n      }  \n      // \u5904\u7406\u4fe1\u53f7  \n      for (n = 1; n &lt; 32; n += 1) {  \n        // \u8fd9\u4e24\u4e2a\u4fe1\u53f7\u89e6\u53d1\u65f6\uff0c\u9ed8\u8ba4\u884c\u4e3a\u662f\u8fdb\u7a0b\u9000\u51fa\u4e14\u4e0d\u80fd\u963b\u6b62\u7684  \n        if (n == SIGKILL || n == SIGSTOP)  \n          continue;  /* Can't be changed. */  \n        // \u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u5904\u7406\u65b9\u5f0f  \n        if (SIG_ERR != signal(n, SIG_DFL))  \n          continue;  \n        // \u51fa\u9519\u5219\u901a\u77e5\u4e3b\u8fdb\u7a0b  \n        uv__write_int(error_fd, UV__ERR(errno));  \n        _exit(127);  \n      }  \n      // \u52a0\u8f7d\u65b0\u7684\u6267\u884c\u6587\u4ef6  \n      execvp(options-&gt;file, options-&gt;args);  \n      // \u52a0\u8f7d\u6210\u529f\u5219\u4e0d\u4f1a\u8d70\u5230\u8fd9\uff0c\u8d70\u5230\u8fd9\u8bf4\u660e\u52a0\u8f7d\u6267\u884c\u6587\u4ef6\u5931\u8d25  \n      uv__write_int(error_fd, UV__ERR(errno));  \n      _exit(127);  \n    }  \n</code></pre> <p>\u5b50\u8fdb\u7a0b\u7684\u903b\u8f91\u4e3b\u8981\u662f\u5904\u7406\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u4fe1\u53f7\u3001\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u7b49\u3002\u7136\u540e\u52a0\u8f7d\u65b0\u7684\u6267\u884c\u6587\u4ef6\u3002\u56e0\u4e3a\u4e3b\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u901a\u4fe1\u7684\u7ba1\u9053\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8bbe\u7f6e\u4e86cloexec\u6807\u8bb0\u3002\u6240\u4ee5\u5f53\u5b50\u8fdb\u7a0b\u52a0\u8f7d\u65b0\u7684\u6267\u884c\u6587\u4ef6\u65f6\uff0c\u5c31\u4f1a\u5173\u95ed\u7528\u4e8e\u548c\u4e3b\u8fdb\u7a0b\u901a\u4fe1\u7684\u7ba1\u9053\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u4ece\u800c\u5bfc\u81f4\u4e3b\u8fdb\u7a0b\u8bfb\u53d6\u7ba1\u9053\u8bfb\u7aef\u7684\u65f6\u5019\u8fd4\u56de0\uff0c\u8fd9\u6837\u4e3b\u8fdb\u7a0b\u5c31\u77e5\u9053\u5b50\u8fdb\u7a0b\u6210\u529f\u6267\u884c\u4e86\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#1322","title":"13.2.2 \u540c\u6b65\u521b\u5efa\u8fdb\u7a0b","text":"<p>\u540c\u6b65\u65b9\u5f0f\u521b\u5efa\u7684\u8fdb\u7a0b\uff0c\u4e3b\u8fdb\u7a0b\u4f1a\u7b49\u5f85\u5b50\u8fdb\u7a0b\u9000\u51fa\u540e\u624d\u80fd\u7ee7\u7eed\u6267\u884c\u3002\u63a5\u4e0b\u6765\u770b\u770b\u5982\u4f55\u4ee5\u540c\u6b65\u7684\u65b9\u5f0f\u521b\u5efa\u8fdb\u7a0b\u3002JS\u5c42\u5165\u53e3\u51fd\u6570\u662fspawnSync\u3002spawnSync\u8c03\u7528C++\u6a21\u5757spawn_sync\u7684spawn\u51fd\u6570\u521b\u5efa\u8fdb\u7a0b\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u5bf9\u5e94\u7684C++\u6a21\u5757spawn_sync\u5bfc\u51fa\u7684\u5c5e\u6027\u3002</p> <pre><code>    void SyncProcessRunner::Initialize(Local&lt;Object&gt; target,  \n                                       Local&lt;Value&gt; unused,  \n                                       Local&lt;Context&gt; context,  \n                                       void* priv) {  \n      Environment* env = Environment::GetCurrent(context);  \n      env-&gt;SetMethod(target, \"spawn\", Spawn);  \n    }  \n</code></pre> <p>\u8be5\u6a21\u5757\u503c\u5bfc\u51fa\u4e86\u4e00\u4e2a\u5c5e\u6027spawn\uff0c\u5f53\u6211\u4eec\u8c03\u7528spawn\u7684\u65f6\u5019\uff0c\u6267\u884c\u7684\u662fC++\u7684Spawn\u3002</p> <pre><code>    void SyncProcessRunner::Spawn(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n      env-&gt;PrintSyncTrace();  \n      SyncProcessRunner p(env);  \n      Local&lt;Value&gt; result;  \n      if (!p.Run(args[0]).ToLocal(&amp;result)) return;  \n      args.GetReturnValue().Set(result);  \n    }  \n</code></pre> <p>Spawn\u4e2d\u4e3b\u8981\u662f\u65b0\u5efa\u4e86\u4e00\u4e2aSyncProcessRunner\u5bf9\u8c61\u5e76\u4e14\u6267\u884cRun\u65b9\u6cd5\u3002\u6211\u4eec\u770b\u4e00\u4e0bSyncProcessRunner\u7684Run\u505a\u4e86\u4ec0\u4e48\u3002</p> <pre><code>    MaybeLocal&lt;Object&gt; SyncProcessRunner::Run(Local&lt;Value&gt; options) {  \n      EscapableHandleScope scope(env()-&gt;isolate());  \n      Maybe&lt;bool&gt; r = TryInitializeAndRunLoop(options);   \n      Local&lt;Object&gt; result = BuildResultObject();  \n      return scope.Escape(result);  \n    }  \n</code></pre> <p>\u6267\u884c\u4e86TryInitializeAndRunLoop\u3002  </p> <pre><code>    Maybe&lt;bool&gt; SyncProcessRunner::TryInitializeAndRunLoop(Local&lt;Value&gt; options) {\n        int r;  \n\n      lifecycle_ = kInitialized;  \n      // \u65b0\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\n      uv_loop_ = new uv_loop_t;  \n      if (!ParseOptions(options).To(&amp;r)) return Nothing&lt;bool&gt;();  \n      if (r &lt; 0) {  \n        SetError(r);  \n        return Just(false);  \n      }  \n      // \u8bbe\u7f6e\u5b50\u8fdb\u7a0b\u6267\u884c\u7684\u65f6\u95f4  \n      if (timeout_ &gt; 0) {  \n        r = uv_timer_init(uv_loop_, &amp;uv_timer_);\n        uv_unref(reinterpret_cast&lt;uv_handle_t*&gt;(&amp;uv_timer_));\n        uv_timer_.data = this;  \n        kill_timer_initialized_ = true;  \n        // \u5f00\u542f\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u8d85\u65f6\u6267\u884cKillTimerCallback  \n        r = uv_timer_start(&amp;uv_timer_, \n                                 KillTimerCallback, \n                                 timeout_, \n                                 0);  \n      }  \n      // \u5b50\u8fdb\u7a0b\u9000\u51fa\u65f6\u5904\u7406\u51fd\u6570  \n      uv_process_options_.exit_cb = ExitCallback;\n        // \u4f20\u8fdb\u53bb\u65b0\u7684loop\u800c\u4e0d\u662f\u4e3b\u8fdb\u7a0b\u672c\u8eab\u7684loop  \n      r = uv_spawn(uv_loop_, &amp;uv_process_, &amp;uv_process_options_);  \n      uv_process_.data = this;  \n\n      for (const auto&amp; pipe : stdio_pipes_) {  \n        if (pipe != nullptr) {  \n          r = pipe-&gt;Start();  \n          if (r &lt; 0) {  \n            SetPipeError(r);  \n            return Just(false);  \n          }  \n        }  \n      }  \n      // \u5f00\u542f\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af  \n      r = uv_run(uv_loop_, UV_RUN_DEFAULT);  \n      return Just(true);  \n    }  \n</code></pre> <p>\u4ece\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4e86\u89e3\u5230Node.js\u662f\u5982\u4f55\u5b9e\u73b0\u540c\u6b65\u521b\u5efa\u8fdb\u7a0b\u7684\u3002\u540c\u6b65\u521b\u5efa\u8fdb\u7a0b\u65f6\uff0cNode.js\u91cd\u65b0\u5f00\u542f\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\uff0c\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5e76\u4e14\u628a\u8868\u793a\u5b50\u8fdb\u7a0b\u7ed3\u6784\u4f53\u7684handle\u63d2\u5165\u5230\u65b0\u521b\u5efa\u7684\u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0c\u63a5\u7740Libuv\u4e00\u76f4\u5904\u4e8e\u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0c\u56e0\u4e3a\u4e00\u76f4\u6709\u4e00\u4e2auv_process_t\uff08handle\uff09\uff0c\u6240\u4ee5\u65b0\u521b\u5efa\u7684uv_run\u4f1a\u4e00\u76f4\u5728\u6267\u884c\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019\uff0cNode.js\u4e3b\u8fdb\u7a0b\u4f1a\u201d\u963b\u585e\u201d\u5728\u8be5uv_run\u3002\u76f4\u5230\u5b50\u8fdb\u7a0b\u9000\u51fa\uff0c\u4e3b\u8fdb\u7a0b\u6536\u5230\u4fe1\u53f7\u540e\uff0c\u5220\u9664\u65b0\u521b\u5efa\u7684\u4e8b\u4ef6\u5faa\u73af\u4e2d\u7684uv_process_t\u3002\u7136\u540e\u6267\u884c\u56de\u8c03ExitCallback\u3002\u63a5\u7740\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa\uff0c\u518d\u6b21\u56de\u5230Node.js\u539f\u6765\u7684\u4e8b\u4ef6\u5faa\u73af\u3002\u5982\u56fe\u6240\u793a13-3\u3002  \u56fe13-3 \u8fd9\u5c31\u662f\u540c\u6b65\u7684\u672c\u8d28\u548c\u539f\u56e0\u3002\u6211\u4eec\u5206\u51e0\u6b65\u5206\u6790\u4e00\u4e0b\u4ee5\u4e0a\u4ee3\u7801</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#13221","title":"13.2.2.1 \u6267\u884c\u65f6\u95f4","text":"<p>\u56e0\u4e3a\u540c\u6b65\u65b9\u5f0f\u521b\u5efa\u5b50\u8fdb\u7a0b\u4f1a\u5bfc\u81f4Node.js\u4e3b\u8fdb\u7a0b\u963b\u585e\uff0c\u4e3a\u4e86\u907f\u514d\u5b50\u8fdb\u7a0b\u6709\u95ee\u9898\uff0c\u4ece\u800c\u5f71\u54cd\u4e3b\u8fdb\u7a0b\u7684\u6267\u884c\uff0cNode.js\u652f\u6301\u53ef\u914d\u7f6e\u5b50\u8fdb\u7a0b\u7684\u6700\u5927\u6267\u884c\u65f6\u95f4\u3002\u6211\u4eec\u770b\u5230\uff0cNode.js\u5f00\u542f\u4e86\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u5e76\u8bbe\u7f6e\u4e86\u56de\u8c03KillTimerCallback\u3002</p> <pre><code>    void SyncProcessRunner::KillTimerCallback(uv_timer_t* handle) {  \n      SyncProcessRunner* self = reinterpret_cast&lt;SyncProcessRunner*&gt;(handle-&gt;data);  \n      self-&gt;OnKillTimerTimeout();  \n    }  \n\n    void SyncProcessRunner::OnKillTimerTimeout() {  \n      SetError(UV_ETIMEDOUT);  \n      Kill();  \n    }  \n\n    void SyncProcessRunner::Kill() {  \n      if (killed_)  \n        return;  \n      killed_ = true;  \n      if (exit_status_ &lt; 0) {  \n        // kill_signal_\u4e3a\u7528\u6237\u81ea\u5b9a\u4e49\u53d1\u9001\u7684\u6740\u6b7b\u8fdb\u7a0b\u7684\u4fe1\u53f7  \n        int r = uv_process_kill(&amp;uv_process_, kill_signal_);   \n        // \u4e0d\u652f\u6301\u7528\u6237\u4f20\u7684\u4fe1\u53f7  \n        if (r &lt; 0 &amp;&amp; r != UV_ESRCH) {  \n          SetError(r);  \n          // \u56de\u9000\u4f7f\u7528SIGKILL\u4fe1\u53f7\u6740\u6b7b\u8fdb\u7a0b  \n          r = uv_process_kill(&amp;uv_process_, SIGKILL);  \n          CHECK(r &gt;= 0 || r == UV_ESRCH);  \n        }  \n      }  \n\n      // Close all stdio pipes.  \n      CloseStdioPipes();  \n\n      // \u6e05\u9664\u5b9a\u65f6\u5668  \n      CloseKillTimer();  \n    }  \n</code></pre> <p>\u5f53\u6267\u884c\u65f6\u95f4\u5230\u8fbe\u8bbe\u7f6e\u7684\u9608\u503c\uff0cNode.js\u4e3b\u8fdb\u7a0b\u4f1a\u7ed9\u5b50\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\uff0c\u9ed8\u8ba4\u662f\u6740\u6b7b\u5b50\u8fdb\u7a0b\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#13222","title":"13.2.2.2 \u5b50\u8fdb\u7a0b\u9000\u51fa\u5904\u7406","text":"<p>\u9000\u51fa\u5904\u7406\u4e3b\u8981\u662f\u8bb0\u5f55\u5b50\u8fdb\u7a0b\u9000\u51fa\u65f6\u7684\u9519\u8bef\u7801\u548c\u88ab\u54ea\u4e2a\u4fe1\u53f7\u6740\u6b7b\u7684\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002</p> <pre><code>    void SyncProcessRunner::ExitCallback(uv_process_t* handle,  \n                                         int64_t exit_status,  \n                                         int term_signal) {  \n      SyncProcessRunner* self = reinterpret_cast&lt;SyncProcessRunner*&gt;(handle-&gt;data);  \n      uv_close(reinterpret_cast&lt;uv_handle_t*&gt;(handle), nullptr);  \n      self-&gt;OnExit(exit_status, term_signal);  \n    }  \n\n    void SyncProcessRunner::OnExit(int64_t exit_status, int term_signal) {  \n      if (exit_status &lt; 0)  \n        return SetError(static_cast&lt;int&gt;(exit_status));  \n\n      exit_status_ = exit_status;  \n      term_signal_ = term_signal;  \n    }  \n</code></pre>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#133","title":"13.3 \u8fdb\u7a0b\u95f4\u901a\u4fe1","text":"<p>\u8fdb\u7a0b\u95f4\u901a\u4fe1\u662f\u591a\u8fdb\u7a0b\u7cfb\u7edf\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u529f\u80fd\uff0c\u5426\u5219\u8fdb\u7a0b\u5c31\u50cf\u5b64\u5c9b\u4e00\u6837\uff0c\u4e0d\u80fd\u4ea4\u6d41\u4fe1\u606f\u3002\u56e0\u4e3a\u8fdb\u7a0b\u95f4\u7684\u5185\u5b58\u662f\u9694\u79bb\u7684\uff0c\u5982\u679c\u8fdb\u7a0b\u95f4\u60f3\u901a\u4fe1\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u516c\u5171\u7684\u5730\u65b9\uff0c\u8ba9\u591a\u4e2a\u8fdb\u7a0b\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u5b8c\u6210\u4fe1\u606f\u7684\u4f20\u9012\u3002\u5728Linux\u4e2d\uff0c\u540c\u4e3b\u673a\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\u6709\u5f88\u591a\uff0c\u4f46\u662f\u57fa\u672c\u90fd\u662f\u4f7f\u7528\u72ec\u7acb\u4e8e\u8fdb\u7a0b\u7684\u989d\u5916\u5185\u5b58\u4f5c\u4e3a\u4fe1\u606f\u627f\u8f7d\u7684\u5730\u65b9\uff0c\u7136\u540e\u5728\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u8ba9\u591a\u4e2a\u8fdb\u7a0b\u90fd\u53ef\u4ee5\u8bbf\u95ee\u5230\u8fd9\u5757\u516c\u5171\u5185\u5b58\uff0c\u6bd4\u5982\u7ba1\u9053\u3001\u5171\u4eab\u5185\u5b58\u3001Unix\u57df\u3001\u6d88\u606f\u961f\u5217\u7b49\u7b49\u3002\u4e0d\u8fc7\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u65b9\u5f0f\uff0c\u662f\u4e0d\u5c5e\u4e8e\u4ee5\u4e0a\u60c5\u51b5\u7684\uff0c\u90a3\u5c31\u662f\u4fe1\u53f7\u3002\u4fe1\u53f7\u4f5c\u4e3a\u4e00\u79cd\u7b80\u5355\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86\u63a5\u53e3\u8ba9\u8fdb\u7a0b\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6570\u636e\uff08PCB\uff09\uff0c\u4ee5\u6b64\u8fbe\u5230\u901a\u4fe1\u76ee\u7684\u3002\u672c\u8282\u4ecb\u7ecdNode.js\u4e2d\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u539f\u7406\u548c\u5b9e\u73b0\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#1331","title":"13.3.1 \u521b\u5efa\u901a\u4fe1\u901a\u9053","text":"<p>\u6211\u4eec\u4ecefork\u51fd\u6570\u5f00\u59cb\u5206\u6790Node.js\u4e2d\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u903b\u8f91\u3002</p> <pre><code>    function fork(modulePath) {  \n     // \u5ffd\u7565options\u53c2\u6570\u5904\u7406  \n     if (typeof options.stdio === 'string') {  \n        options.stdio = stdioStringToArray(options.stdio, 'ipc');  \n      } else if (!ArrayIsArray(options.stdio)) {  \n        // silent\u4e3atrue\u5219\u662f\u7ba1\u9053\u5f62\u5f0f\u548c\u4e3b\u8fdb\u7a0b\u901a\u4fe1\uff0c\u5426\u5219\u662f\u7ee7\u627f  \n        options.stdio = stdioStringToArray(  \n          options.silent ? 'pipe' : 'inherit',  \n          'ipc');  \n      } else if (!options.stdio.includes('ipc')) {  \n        // \u5fc5\u987b\u8981IPC\uff0c\u652f\u6301\u8fdb\u7a0b\u95f4\u901a\u4fe1  \n        throw new ERR_CHILD_PROCESS_IPC_REQUIRED('options.stdio');  \n      }  \n\n      return spawn(options.execPath, args, options);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0bstdioStringToArray\u7684\u5904\u7406\u3002</p> <pre><code>    function stdioStringToArray(stdio, channel) {  \n      const options = [];  \n\n      switch (stdio) {  \n        case 'ignore':  \n        case 'pipe': options.push(stdio, stdio, stdio); break;  \n        case 'inherit': options.push(0, 1, 2); break;  \n        default:  \n          throw new ERR_INVALID_OPT_VALUE('stdio', stdio);  \n      }  \n\n      if (channel) options.push(channel);  \n\n      return options;  \n    }  \n</code></pre> <p>stdioStringToArray\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bd4\u5982['pipe', 'pipe', 'pipe', 'ipc']\u6216[0, 1, 2, 'ipc']\uff0cipc\u4ee3\u8868\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u901a\u9053\uff0c\u5e76\u4e14\u652f\u6301\u6587\u4ef6\u63cf\u8ff0\u4f20\u9012\u3002\u6211\u4eec\u63a5\u7740\u770bspawn\u3002</p> <pre><code>    ChildProcess.prototype.spawn = function(options) {  \n      let i = 0;  \n      // \u9884\u5904\u7406\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u6570\u636e\u7ed3\u6784  \n      stdio = getValidStdio(stdio, false);  \n      const ipc = stdio.ipc;  \n      // IPC\u6587\u4ef6\u63cf\u8ff0\u7b26  \n      const ipcFd = stdio.ipcFd;  \n      stdio = options.stdio = stdio.stdio;  \n      // \u901a\u8fc7\u73af\u5883\u53d8\u91cf\u544a\u8bc9\u5b50\u8fdb\u7a0bIPC\u6587\u4ef6\u63cf\u8ff0\u7b26\u548c\u6570\u636e\u5904\u7406\u6a21\u5f0f  \n      if (ipc !== undefined) {  \n        options.envPairs.push(`NODE_CHANNEL_FD=${ipcFd}`);  \n        options.envPairs.push(`NODE_CHANNEL_SERIALIZATION_MODE=${serialization}`);  \n      } \n      // \u521b\u5efa\u5b50\u8fdb\u7a0b\n      const err = this._handle.spawn(options);\n      this.pid = this._handle.pid;  \n      // \u5904\u7406IPC\u901a\u4fe1  \n      if (ipc !== undefined) setupChannel(this, ipc, serialization);  \n      return err;  \n    }  \n</code></pre> <p>Spawn\u4e2d\u4f1a\u6267\u884cgetValidStdio\u9884\u5904\u7406\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u6570\u636e\u7ed3\u6784\u3002\u6211\u4eec\u53ea\u5173\u6ce8ipc\u7684\u3002</p> <pre><code>    function getValidStdio(stdio, sync) {  \n      let ipc;  \n      let ipcFd;  \n\n      stdio = stdio.reduce((acc, stdio, i) =&gt; {  \n        if (stdio === 'ipc') {  \n          ipc = new Pipe(PipeConstants.IPC);  \n          ipcFd = i;  \n          acc.push({  \n            type: 'pipe',  \n            handle: ipc,  \n            ipc: true  \n          });  \n        } else {  \n          // \u5176\u5b83\u7c7b\u578b\u7684\u5904\u7406  \n        }  \n        return acc;  \n      }, []);  \n\n      return { stdio, ipc, ipcFd };  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u8fd9\u91cc\u4f1anew Pipe(PipeConstants.IPC);\u521b\u5efa\u4e00\u4e2aUnix\u57df\u7528\u4e8e\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u4f46\u662f\u8fd9\u91cc\u53ea\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2aC++\u5bf9\u8c61\uff0c\u8fd8\u6ca1\u6709\u53ef\u7528\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u6211\u4eec\u63a5\u7740\u5f80\u4e0b\u770bC++\u5c42\u7684spawn\u4e2d\u5173\u4e8e\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u5904\u7406\u3002C++\u5c42\u9996\u5148\u5904\u7406\u53c2\u6570\uff0c</p> <pre><code>    static void ParseStdioOptions(Environment* env,  \n                                    Local&lt;Object&gt; js_options,  \n                                    uv_process_options_t* options) {  \n        Local&lt;Context&gt; context = env-&gt;context();  \n        Local&lt;String&gt; stdio_key = env-&gt;stdio_string();  \n        // \u62ff\u5230JS\u5c42stdio\u7684\u503c  \n        Local&lt;Array&gt; stdios =  \n            js_options-&gt;Get(context, stdio_key).ToLocalChecked().As&lt;Array&gt;();  \n\n        uint32_t len = stdios-&gt;Length();  \n        options-&gt;stdio = new uv_stdio_container_t[len];  \n        options-&gt;stdio_count = len;  \n        // \u904d\u5386stdio\uff0cstdio\u662f\u4e00\u4e2a\u5bf9\u8c61\u6570\u7ec4  \n        for (uint32_t i = 0; i &lt; len; i++) {  \n          Local&lt;Object&gt; stdio =  \n              stdios-&gt;Get(context, i).ToLocalChecked().As&lt;Object&gt;();  \n          // \u62ff\u5230stdio\u7684\u7c7b\u578b  \n          Local&lt;Value&gt; type =  \n              stdio-&gt;Get(context, env-&gt;type_string()).ToLocalChecked();  \n          // \u521b\u5efaIPC\u901a\u9053  \n          if (type-&gt;StrictEquals(env-&gt;pipe_string())) {  \n            options-&gt;stdio[i].flags = static_cast&lt;uv_stdio_flags&gt;(  \n                UV_CREATE_PIPE | UV_READABLE_PIPE | UV_WRITABLE_PIPE);  \n            // \u62ff\u5230\u5bf9\u5e94\u7684stream      \n            options-&gt;stdio[i].data.stream = StreamForWrap(env, stdio);  \n          }  \n        }  \n      }  \n</code></pre> <p>\u8fd9\u91cc\u4f1a\u628aStreamForWrap\u7684\u7ed3\u679c\u4fdd\u5b58\u5230stream\u4e2d\uff0c\u6211\u4eec\u770b\u770bStreamForWrap\u7684\u903b\u8f91</p> <pre><code>     static uv_stream_t* StreamForWrap(Environment* env, Local&lt;Object&gt; stdio) {  \n       Local&lt;String&gt; handle_key = env-&gt;handle_string();  \n       /*\n         \u83b7\u53d6\u5bf9\u8c61\u4e2d\u7684key\u4e3ahandle\u7684\u503c\uff0c\u5373\u521a\u624dJS\u5c42\u7684\n         new Pipe(SOCKET.IPC);\n       */  \n       Local&lt;Object&gt; handle =  \n           stdio-&gt;Get(env-&gt;context(), handle_key).ToLocalChecked().As&lt;Object&gt;();  \n       // \u83b7\u53d6JS\u5c42\u4f7f\u7528\u5bf9\u8c61\u6240\u5bf9\u5e94\u7684C++\u5bf9\u8c61\u4e2d\u7684stream  \n       uv_stream_t* stream = LibuvStreamWrap::From(env, handle)-&gt;stream();  \n       CHECK_NOT_NULL(stream);  \n       return stream;  \n     }  \n\n    // \u4eceJS\u5c42\u4f7f\u7528\u7684object\u4e2d\u83b7\u53d6\u5173\u8054\u7684C++\u5bf9\u8c61  \n    ibuvStreamWrap* LibuvStreamWrap::From(Environment* env, Local&lt;Object&gt; object) {  \n     return Unwrap&lt;LibuvStreamWrap&gt;(object);  \n    }\n</code></pre> <p>\u4ee5\u4e0a\u4ee3\u7801\u83b7\u53d6\u4e86IPC\u5bf9\u5e94\u7684stream\u7ed3\u6784\u4f53\u3002\u5728Libuv\u4e2d\u4f1a\u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fdd\u5b58\u5230stream\u4e2d\u3002\u6211\u4eec\u63a5\u7740\u770bC++\u5c42\u8c03\u7528Libuv\u7684uv_spawn\u3002</p> <pre><code>    int uv_spawn(uv_loop_t* loop,  \n                 uv_process_t* process,  \n                 const uv_process_options_t* options) {  \n\n      int pipes_storage[8][2];  \n      int (*pipes)[2];  \n      int stdio_count;  \n      // \u521d\u59cb\u5316\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u6570\u636e\u7ed3\u6784  \n      stdio_count = options-&gt;stdio_count;  \n      if (stdio_count &lt; 3)  \n        stdio_count = 3;  \n\n      for (i = 0; i &lt; stdio_count; i++) {  \n        pipes[i][0] = -1;  \n        pipes[i][1] = -1;  \n      }  \n      // \u521b\u5efa\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26  \n      for (i = 0; i &lt; options-&gt;stdio_count; i++) {  \n        err = uv__process_init_stdio(options-&gt;stdio + i, pipes[i]); \n        if (err)  \n          goto error;  \n      }  \n\n      // \u8bbe\u7f6e\u8fdb\u7a0b\u95f4\u901a\u4fe1\u6587\u4ef6\u63cf\u8ff0\u7b26\u5230\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\n      for (i = 0; i &lt; options-&gt;stdio_count; i++) {  \n        uv__process_open_stream(options-&gt;stdio + i, pipes[i]);  \n\n      }  \n\n    }  \n</code></pre> <p>Libuv\u4e2d\u4f1a\u521b\u5efa\u7528\u4e8e\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u7136\u540e\u8bbe\u7f6e\u5230\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002</p> <pre><code>    static int uv__process_open_stream(uv_stdio_container_t* container,  \n                                       int pipefds[2]) {  \n      int flags;  \n      int err;  \n\n      if (!(container-&gt;flags &amp; UV_CREATE_PIPE) || pipefds[0] &lt; 0)  \n        return 0;  \n\n      err = uv__close(pipefds[1]);  \n      if (err != 0)  \n        abort();  \n\n      pipefds[1] = -1;  \n      uv__nonblock(pipefds[0], 1);  \n\n      flags = 0;  \n      if (container-&gt;flags &amp; UV_WRITABLE_PIPE)  \n        flags |= UV_HANDLE_READABLE;  \n      if (container-&gt;flags &amp; UV_READABLE_PIPE)  \n        flags |= UV_HANDLE_WRITABLE;  \n\n      return uv__stream_open(container-&gt;data.stream, pipefds[0], flags);  \n    }  \n</code></pre> <p>\u6267\u884c\u5b8cuv__process_open_stream\uff0c\u7528\u4e8eIPC\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5c31\u4fdd\u5b58\u5230new Pipe(SOCKET.IPC)\u4e2d\u4e86\u3002\u6709\u4e86IPC\u901a\u9053\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u8fdb\u7a0b\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u5904\u7406\u3002\u6211\u4eec\u770b\u5230JS\u5c42\u6267\u884c\u5b8cspawn\u540e\uff0c\u4e3b\u8fdb\u7a0b\u901a\u8fc7setupChannel\u5bf9\u8fdb\u7a0b\u95f4\u901a\u4fe1\u8fdb\u884c\u4e86\u8fdb\u4e00\u6b65\u5904\u7406\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u4e3b\u8fdb\u7a0bsetupChannel\u4e2d\u5173\u4e8e\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u5904\u7406\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#1332","title":"13.3.2 \u4e3b\u8fdb\u7a0b\u5904\u7406\u901a\u4fe1\u901a\u9053","text":"<p>1 \u8bfb\u7aef</p> <pre><code>    function setupChannel(target, channel, serializationMode) {    \n      // channel\u662fnew Pipe(PipeConstants.IPC);  \n      const control = new Control(channel);    \n      target.channel = control;    \n      // \u2026  \n      channel.pendingHandle = null;    \n      // \u6ce8\u518c\u5904\u7406\u6570\u636e\u7684\u51fd\u6570    \n      channel.onread = function(arrayBuffer) {    \n        // \u6536\u5230\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26    \n        const recvHandle = channel.pendingHandle;    \n        channel.pendingHandle = null;    \n        if (arrayBuffer) {    \n          const nread = streamBaseState[kReadBytesOrError];    \n          const offset = streamBaseState[kArrayBufferOffset];    \n          const pool = new Uint8Array(arrayBuffer, offset, nread);    \n          if (recvHandle)    \n            pendingHandle = recvHandle;    \n          // \u89e3\u6790\u6536\u5230\u7684\u6d88\u606f    \n          for (const message of parseChannelMessages(channel, pool))   {    \n            // \u662f\u5426\u662f\u5185\u90e8\u901a\u4fe1\u4e8b\u4ef6    \n            if (isInternal(message)) {   \n               // \u6536\u5230handle   \n              if (message.cmd === 'NODE_HANDLE') {    \n                handleMessage(message, pendingHandle, true);    \n                pendingHandle = null;    \n              } else {    \n                handleMessage(message, undefined, true);    \n              }    \n            } else {    \n              handleMessage(message, undefined, false);    \n            }    \n          }    \n        }  \n\n      };    \n\n      function handleMessage(message, handle, internal) {    \n        const eventName = (internal ? 'internalMessage' : 'message');    \n        process.nextTick(emit, eventName, message, handle);    \n      }    \n      // \u5f00\u542f\u8bfb    \n      channel.readStart();    \n      return control;    \n    }    \n</code></pre> <p>onread\u5904\u7406\u5b8c\u540e\u4f1a\u89e6\u53d1internalMessage\u6216message\u4e8b\u4ef6\uff0cmessage\u662f\u7528\u6237\u4f7f\u7528\u7684\u3002  2\u5199\u7aef</p> <pre><code>    target._send = function(message, handle, options, callback) {  \n       let obj;  \n       const req = new WriteWrap();  \n       // \u53d1\u9001\u7ed9\u5bf9\u7aef  \n       const err = writeChannelMessage(channel, req, message,handle);\n\n       return channel.writeQueueSize &lt; (65536 * 2);  \n     }  \n</code></pre> <p>\u6211\u4eec\u770b\u770bwriteChannelMessage</p> <pre><code>    writeChannelMessage(channel, req, message, handle) {  \n      const ser = new ChildProcessSerializer();  \n      ser.writeHeader();  \n      ser.writeValue(message);  \n      const serializedMessage = ser.releaseBuffer();  \n      const sizeBuffer = Buffer.allocUnsafe(4);  \n      sizeBuffer.writeUInt32BE(serializedMessage.length);  \n      // channel\u662f\u5c01\u88c5\u4e86Unix\u57df\u7684\u5bf9\u8c61\n      return channel.writeBuffer(req, Buffer.concat([  \n        sizeBuffer,  \n        serializedMessage  \n      ]), handle);  \n    },  \n</code></pre> <p>channel.writeBuffer\u901a\u8fc7\u521a\u624d\u521b\u5efa\u7684IPC\u901a\u9053\u5b8c\u6210\u6570\u636e\u7684\u53d1\u9001\uff0c\u5e76\u4e14\u652f\u6301\u53d1\u9001\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#1333","title":"13.3.3 \u5b50\u8fdb\u7a0b\u5904\u7406\u901a\u4fe1\u901a\u9053","text":"<p>\u63a5\u7740\u6211\u4eec\u770b\u770b\u5b50\u8fdb\u7a0b\u7684\u903b\u8f91\uff0cNode.js\u5728\u521b\u5efa\u5b50\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u4e3b\u8fdb\u7a0b\u4f1a\u901a\u8fc7\u73af\u5883\u53d8\u91cfNODE_CHANNEL_FD\u544a\u8bc9\u5b50\u8fdb\u7a0bUnix\u57df\u901a\u4fe1\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u5728\u6267\u884c\u5b50\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u4f1a\u5904\u7406\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u5177\u4f53\u5b9e\u73b0\u5728setupChildProcessIpcChannel\u51fd\u6570\u4e2d\u3002</p> <pre><code>    function setupChildProcessIpcChannel() {  \n      // \u4e3b\u8fdb\u7a0b\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u8be5\u503c\n      if (process.env.NODE_CHANNEL_FD) {  \n        const fd = parseInt(process.env.NODE_CHANNEL_FD, 10);  \n        delete process.env.NODE_CHANNEL_FD;   \n        require('child_process')._forkChild(fd, serializationMode);  \n      }  \n    }  \n</code></pre> <p>\u63a5\u7740\u6267\u884c_forkChild\u51fd\u6570\u3002</p> <pre><code>    function _forkChild(fd, serializationMode) {  \n      const p = new Pipe(PipeConstants.IPC);  \n      p.open(fd);  \n      const control = setupChannel(process, p, serializationMode);  \n    }  \n</code></pre> <p>\u8be5\u51fd\u6570\u521b\u5efa\u4e00\u4e2aPipe\u5bf9\u8c61\uff0c\u7136\u540e\u628a\u4e3b\u8fdb\u7a0b\u4f20\u8fc7\u6765\u7684fd\u4fdd\u5b58\u5230\u8be5Pipe\u5bf9\u8c61\u3002\u5bf9\u8be5Pipe\u5bf9\u8c61\u7684\u8bfb\u5199\uff0c\u5c31\u662f\u5730\u5bf9fd\u8fdb\u884c\u8bfb\u5199\u3002\u6700\u540e\u6267\u884csetupChannel\u3002setupChannel\u4e3b\u8981\u662f\u5b8c\u6210\u4e86Unix\u57df\u901a\u4fe1\u7684\u5c01\u88c5\uff0c\u5305\u62ec\u5904\u7406\u63a5\u6536\u7684\u6d88\u606f\u3001\u53d1\u9001\u6d88\u606f\u3001\u5904\u7406\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u9012\u7b49\uff0c\u521a\u624d\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u4e0d\u518d\u5177\u4f53\u5206\u6790\u3002\u6700\u540e\u901a\u8fc7\u5728process\u5bf9\u8c61\u4e2d\u6302\u8f7d\u51fd\u6570\u548c\u76d1\u542c\u4e8b\u4ef6\uff0c\u4f7f\u5f97\u5b50\u8fdb\u7a0b\u5177\u6709\u548c\u4e3b\u8fdb\u7a0b\u901a\u4fe1\u7684\u80fd\u529b\u3002\u6240\u6709\u7684\u901a\u4fe1\u90fd\u662f\u57fa\u4e8e\u4e3b\u8fdb\u7a0b\u901a\u8fc7\u73af\u5883\u53d8\u91cfNODE_CHANNEL_FD\u4f20\u9012\u8fc7\u6765\u7684fd\u8fdb\u884c\u7684\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#134","title":"13.4 \u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u9012","text":"<p>\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u539f\u7406\uff0c\u4e0b\u9762\u6211\u4eec\u770b\u770bNode.js\u662f\u5982\u4f55\u5904\u7406\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u9012\u7684\u3002</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#1341","title":"13.4.1 \u53d1\u9001\u6587\u4ef6\u63cf\u8ff0\u7b26","text":"<p>\u6211\u4eec\u770b\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u53d1\u9001\u51fd\u6570send\u7684\u5b9e\u73b0</p> <pre><code>    process.send = function(message, handle, options, callback) {  \n        return this._send(message, handle, options, callback);  \n    };  \n\n      target._send = function(message, handle, options, callback) {  \n        // Support legacy function signature  \n        if (typeof options === 'boolean') {  \n          options = { swallowErrors: options };  \n        }  \n\n        let obj;  \n\n        // \u53d1\u9001\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0chandle\u662f\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5c01\u88c5  \n        if (handle) {  \n          message = {  \n            cmd: 'NODE_HANDLE',  \n            type: null,  \n            msg: message  \n          };  \n          // handle\u7684\u7c7b\u578b  \n          if (handle instanceof net.Socket) {  \n            message.type = 'net.Socket';  \n          } else if (handle instanceof net.Server) {  \n            message.type = 'net.Server';  \n          } else if (handle instanceof TCP || handle instanceof Pipe) {  \n            message.type = 'net.Native';  \n          } else if (handle instanceof dgram.Socket) {  \n            message.type = 'dgram.Socket';  \n          } else if (handle instanceof UDP) {  \n            message.type = 'dgram.Native';  \n          } else {  \n            throw new ERR_INVALID_HANDLE_TYPE();  \n          }  \n          // \u6839\u636e\u7c7b\u578b\u8f6c\u6362\u5bf9\u8c61  \n          obj = handleConversion[message.type];  \n\n          // \u628aJS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61\u8f6c\u6210C++\u5c42\u5bf9\u8c61  \n          handle=handleConversion[message.type].send.call(target, \n                                                          message,\n                                                          handle, \n                                                          options);  \n        }  \n        // \u53d1\u9001  \n        const req = new WriteWrap();  \n        // \u53d1\u9001\u7ed9\u5bf9\u7aef  \n        const err = writeChannelMessage(channel, req, message, handle);  \n\n      }  \n</code></pre> <p>Node.js\u5728\u53d1\u9001\u4e00\u4e2a\u5c01\u88c5\u4e86\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5bf9\u8c61\u4e4b\u524d\uff0c\u9996\u5148\u4f1a\u628aJS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61\u8f6c\u6210C++\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61\u3002\u5982TCP</p> <pre><code>    send(message, server, options) {  \n          return server._handle;  \n    } \n</code></pre> <p>\u6211\u4eec\u63a5\u7740\u770bwriteChannelMessage\u3002</p> <pre><code>    // channel\u662fnew Pipe(PipeConstants.IPC);  \n    writeChannelMessage(channel, req, message, handle) {  \n        const string = JSONStringify(message) + '\\n';\n        return channel.writeUtf8String(req, string, handle); \n    }\n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0bwriteUtf8String</p> <pre><code>    template &lt;enum encoding enc&gt;  \n    int StreamBase::WriteString(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n      // new WriteWrap()  \n      Local&lt;Object&gt; req_wrap_obj = args[0].As&lt;Object&gt;();  \n      Local&lt;String&gt; string = args[1].As&lt;String&gt;();  \n      Local&lt;Object&gt; send_handle_obj;  \n      // \u9700\u8981\u53d1\u9001\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0cC++\u5c42\u5bf9\u8c61  \n      if (args[2]-&gt;IsObject())  \n        send_handle_obj = args[2].As&lt;Object&gt;();  \n\n      uv_stream_t* send_handle = nullptr;  \n      // \u662fUnix\u57df\u5e76\u4e14\u652f\u6301\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26  \n      if (IsIPCPipe() &amp;&amp; !send_handle_obj.IsEmpty()) {  \n        HandleWrap* wrap;  \n        /* \n          send_handle_obj\u662f\u7531C++\u5c42\u521b\u5efa\u5728JS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61\uff0c\n          \u89e3\u5305\u51fa\u771f\u6b63\u5728C++\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61  \n         */\n        ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, send_handle_obj, UV_EINVAL);  \n        // \u62ff\u5230Libuv\u5c42\u7684handle\u7ed3\u6784\u4f53\n        send_handle = reinterpret_cast&lt;uv_stream_t*&gt;(wrap-&gt;GetHandle());  \n        /*\n          Reference LibuvStreamWrap instance to prevent it \n          from being garbage\uff0ccollected before`AfterWrite` is\n          called.  \n        */\n        req_wrap_obj-&gt;Set(env-&gt;context(),  \n                          env-&gt;handle_string(),  \n                          send_handle_obj).Check();  \n      }  \n\n      Write(&amp;buf, 1, send_handle, req_wrap_obj);  \n    }  \n</code></pre> <p>Write\u4f1a\u8c03\u7528Libuv\u7684uv__write\uff0cuv__write\u4f1a\u628aLibuv\u5c42\u7684handle\u4e2d\u7684fd\u53d6\u51fa\u6765\uff0c\u4f7f\u7528sendmsg\u4f20\u9012\u5230\u5176\u5b83\u8fdb\u7a0b\u3002\u6574\u4e2a\u53d1\u9001\u7684\u8fc7\u7a0b\u672c\u8d28\u662f\u4eceJS\u5c42\u5230Libuv\u5c42\u5c42\u5c42\u63ed\u5f00\u8981\u53d1\u9001\u7684\u5bf9\u8c61\uff0c\u6700\u540e\u62ff\u5230\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u7136\u540e\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684API\u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5982\u56fe13-4\u6240\u793a\u3002  \u56fe13-4</p>"},{"location":"chapter13-%E8%BF%9B%E7%A8%8B/#1342","title":"13.4.2 \u63a5\u6536\u6587\u4ef6\u63cf\u8ff0\u7b26","text":"<p>\u5206\u6790\u5b8c\u53d1\u9001\uff0c\u6211\u4eec\u518d\u770b\u4e00\u4e0b\u63a5\u6536\u7684\u903b\u8f91\u3002\u524d\u9762\u6211\u4eec\u5206\u6790\u8fc7\uff0c\u5f53\u6587\u4ef6\u63cf\u8ff0\u7b26\u6536\u5230\u6570\u636e\u65f6\uff0c\u4f1a\u628a\u6587\u4ef6\u6587\u4ef6\u63cf\u8ff0\u7b26\u5c01\u88c5\u6210\u5bf9\u5e94\u7684\u5bf9\u8c61\u3002</p> <pre><code>    void LibuvStreamWrap::OnUvRead(ssize_t nread, const uv_buf_t* buf) {  \n      HandleScope scope(env()-&gt;isolate());  \n      Context::Scope context_scope(env()-&gt;context());  \n      uv_handle_type type = UV_UNKNOWN_HANDLE;  \n      // \u662f\u5426\u652f\u6301\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u5e76\u4e14\u6709\u5f85\u5904\u7406\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5219\u5224\u65ad\u6587\u4ef6\u63cf\u8ff0\u7b26\u7c7b\u578b  \n      if (is_named_pipe_ipc() &amp;&amp;  \n          uv_pipe_pending_count(reinterpret_cast&lt;uv_pipe_t*&gt;(stream())) &gt; 0) {  \n        type = uv_pipe_pending_type(reinterpret_cast&lt;uv_pipe_t*&gt;(stream()));  \n      }  \n\n      // \u8bfb\u53d6\u6210\u529f  \n      if (nread &gt; 0) {  \n        MaybeLocal&lt;Object&gt; pending_obj;  \n        // \u6839\u636e\u7c7b\u578b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684C++\u5bf9\u8c61\u8868\u793a\u5ba2\u6237\u7aef\uff0c\u5e76\u4e14\u4ece\u670d\u52a1\u5668\u4e2d\u6458\u4e0b\u4e00\u4e2afd\u4fdd\u5b58\u5230\u5ba2\u6237\u7aef  \n        if (type == UV_TCP) {  \n          pending_obj = AcceptHandle&lt;TCPWrap&gt;(env(), this);  \n        } else if (type == UV_NAMED_PIPE) {  \n          pending_obj = AcceptHandle&lt;PipeWrap&gt;(env(), this);  \n        } else if (type == UV_UDP) {  \n          pending_obj = AcceptHandle&lt;UDPWrap&gt;(env(), this);  \n        } else {  \n          CHECK_EQ(type, UV_UNKNOWN_HANDLE);  \n        }  \n        // \u4fdd\u5b58\u5230JS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61\u4e2d\uff0c\u952e\u662fpendingHandle  \n        if (!pending_obj.IsEmpty()) {  \n          object()  \n              -&gt;Set(env()-&gt;context(),  \n                    env()-&gt;pending_handle_string(),  \n                    pending_obj.ToLocalChecked())  \n              .Check();  \n        }  \n      }  \n\n      EmitRead(nread, *buf);  \n    }  \n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u770b\u770bJS\u5c42\u7684\u5904\u7406\u3002</p> <pre><code>    channel.onread = function(arrayBuffer) {  \n      // \u6536\u5230\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26  \n      const recvHandle = channel.pendingHandle;  \n      channel.pendingHandle = null;  \n      if (arrayBuffer) {  \n        const nread = streamBaseState[kReadBytesOrError];  \n        const offset = streamBaseState[kArrayBufferOffset];  \n        const pool = new Uint8Array(arrayBuffer, offset, nread);  \n        if (recvHandle)  \n          pendingHandle = recvHandle;  \n        // \u89e3\u6790\u6536\u5230\u7684\u6d88\u606f  \n        for (const message of parseChannelMessages(channel, pool)) {       // \u662f\u5426\u662f\u5185\u90e8\u901a\u4fe1\u4e8b\u4ef6  \n          if (isInternal(message)) {  \n            if (message.cmd === 'NODE_HANDLE') {  \n              handleMessage(message, pendingHandle, true);  \n              pendingHandle = null;  \n            } else {  \n              handleMessage(message, undefined, true);  \n            }  \n          } else {  \n            handleMessage(message, undefined, false);  \n          }  \n        }  \n      }  \n    };  \n</code></pre> <p>\u8fd9\u91cc\u4f1a\u89e6\u53d1\u5185\u90e8\u4e8b\u4ef6internalMessage</p> <pre><code>    target.on('internalMessage', function(message, handle) {  \n      // \u662f\u5426\u6536\u5230\u4e86handle  \n      if (message.cmd !== 'NODE_HANDLE') return;  \n\n      // \u6210\u529f\u6536\u5230\uff0c\u53d1\u9001ACK  \n      target._send({ cmd: 'NODE_HANDLE_ACK' }, null, true);  \n\n      const obj = handleConversion[message.type];  \n\n      /*\n        C++\u5bf9\u8c61\u8f6c\u6210JS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61\u3002\u8f6c\u5b8c\u4e4b\u540e\u518d\u6839\u636e\u91cc\u5c42\u7684\u5b57\u6bb5\n        message.msg\u8fdb\u4e00\u6b65\u5904\u7406\uff0c\u6216\u8005\u89e6\u53d1message\u4e8b\u4ef6\u4f20\u7ed9\u7528\u6237  \n      */\n      obj.got.call(this, message, handle, (handle) =&gt; {   \n        handleMessage(message.msg, handle, isInternal(message.msg));   });  \n    })  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u8fd9\u91cc\u4f1a\u628aC++\u5c42\u7684\u5bf9\u8c61\u8f6c\u6210JS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61\u3002\u5982TCP</p> <pre><code>    got(message, handle, emit) {  \n        const server = new net.Server();  \n        server.listen(handle, () =&gt; {  \n          emit(server);  \n        });  \n    }  \n</code></pre> <p>\u8fd9\u5c31\u662f\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u9012\u5728Node.js\u4e2d\u7684\u5904\u7406\u6d41\u7a0b\uff0c\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u80fd\u529b\uff0c\u6bd4\u5982\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u628a\u4e00\u4e2aTCP\u8fde\u63a5\u6240\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f4\u63a5\u53d1\u9001\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u5904\u7406\u3002\u8fd9\u4e5f\u662fcluser\u6a21\u5757\u7684\u539f\u7406\u3002\u540e\u7eed\u6211\u4eec\u4f1a\u770b\u5230\u3002\u5728Node.js\u4e2d\uff0c\u6574\u4f53\u7684\u5904\u7406\u6d41\u7a0b\u5c31\u662f\uff0c\u53d1\u9001\u7684\u65f6\u5019\u628a\u4e00\u4e2aJS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61\u4e00\u5c42\u5c42\u5730\u5265\u5f00\uff0c\u53d8\u6210C++\u5bf9\u8c61\uff0c\u7136\u540e\u518d\u53d8\u6210fd\uff0c\u6700\u540e\u901a\u8fc7\u5e95\u5c42API\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u3002\u63a5\u6536\u7684\u65f6\u5019\u5c31\u662f\u628a\u4e00\u4e2afd\u4e00\u5c42\u5c42\u5730\u5305\u88f9\uff0c\u53d8\u6210\u4e00\u4e2aJS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61\u3002</p>"},{"location":"chapter14-%E7%BA%BF%E7%A8%8B/","title":"14-\u7ebf\u7a0b","text":"<p>\u7ebf\u7a0b\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u6700\u5c0f\u8c03\u5ea6\u5355\u4f4d\uff0c\u5b83\u672c\u8d28\u4e0a\u662f\u8fdb\u7a0b\u4e2d\u7684\u4e00\u4e2a\u6267\u884c\u6d41\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u8fdb\u7a0b\u6709\u4ee3\u7801\u6bb5\uff0c\u7ebf\u7a0b\u5176\u5b9e\u5c31\u662f\u8fdb\u7a0b\u4ee3\u7801\u6bb5\u4e2d\u7684\u5176\u4e2d\u4e00\u6bb5\u4ee3\u7801\u3002\u7ebf\u7a0b\u7684\u4e00\u79cd\u5b9e\u73b0\u662f\u4f5c\u4e3a\u8fdb\u7a0b\u6765\u5b9e\u73b0\u7684\uff08pthread\u7ebf\u7a0b\u5e93\uff09\uff0c\u901a\u8fc7\u8c03\u7528clone\uff0c\u65b0\u5efa\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u7136\u540e\u6267\u884c\u7236\u8fdb\u7a0b\u4ee3\u7801\u6bb5\u91cc\u7684\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff0c\u5176\u4e2d\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u5185\u5b58\u7b49\u4fe1\u606f\u90fd\u662f\u5171\u4eab\u7684\u3002\u56e0\u4e3a\u5185\u5b58\u662f\u5171\u4eab\u7684\uff0c\u6240\u4ee5\u7ebf\u7a0b\u4e0d\u80fd\u5171\u4eab\u6808\uff0c\u5426\u5219\u8bbf\u95ee\u6808\u7684\u5730\u5740\u7684\u65f6\u5019\uff0c\u4f1a\u6620\u5c04\u5230\u76f8\u540c\u7684\u7269\u7406\u5730\u5740\uff0c\u90a3\u6837\u5c31\u4f1a\u4e92\u76f8\u5f71\u54cd\uff0c\u6240\u4ee5\u6bcf\u4e2a\u7ebf\u7a0b\u4f1a\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u6808\u3002\u5728\u8c03\u7528clone\u51fd\u6570\u7684\u65f6\u5019\u4f1a\u8bbe\u7f6e\u6808\u7684\u8303\u56f4\uff0c\u6bd4\u5982\u5728\u5806\u4e0a\u5206\u914d\u4e00\u5757\u5185\u5b58\u7528\u4e8e\u505a\u7ebf\u7a0b\u7684\u6808\uff0c\u5e76\u4e14\u652f\u6301\u8bbe\u7f6e\u5b50\u7ebf\u7a0b\u548c\u4e3b\u7ebf\u7a0b\u5171\u4eab\u54ea\u4e9b\u8d44\u6e90\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u8003clone\u7cfb\u7edf\u8c03\u7528\u3002</p> <p>\u7531\u4e8eNode.js\u662f\u5355\u7ebf\u7a0b\u7684\uff0c\u867d\u7136\u5e95\u5c42\u7684Libuv\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u6c60\uff0c\u4f46\u662f\u8fd9\u4e2a\u7ebf\u7a0b\u6c60\u53ea\u80fd\u6267\u884cC\u3001C++\u5c42\u5b9a\u4e49\u7684\u4efb\u52a1\u3002\u5982\u679c\u6211\u4eec\u60f3\u81ea\u5b9a\u4e49\u4e00\u4e9b\u8017\u65f6\u7684\u64cd\u4f5c\uff0c\u90a3\u5c31\u53ea\u80fd\u5728C++\u5c42\u5904\u7406\uff0c\u7136\u540e\u66b4\u9732\u63a5\u53e3\u7ed9JS\u5c42\u8c03\u7528\uff0c\u8fd9\u4e2a\u6210\u672c\u662f\u975e\u5e38\u9ad8\u7684\uff0c\u5728\u65e9\u671f\u7684Node.js\u7248\u672c\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8fdb\u7a0b\u53bb\u5b9e\u73b0\u8fd9\u6837\u7684\u9700\u6c42\u3002\u4f46\u662f\u8fdb\u7a0b\u592a\u91cd\u4e86\uff0c\u5728\u65b0\u7248\u7684Node.js\u4e2d\uff0cNode.js\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u591a\u7ebf\u7a0b\u7684\u529f\u80fd\u3002\u8fd9\u4e00\u7ae0\u4ee5Node.js\u591a\u7ebf\u7a0b\u6a21\u5757\u4e3a\u80cc\u666f\uff0c\u5206\u6790Node.js\u4e2d\u591a\u7ebf\u7a0b\u7684\u539f\u7406\uff0c\u4f46\u662f\u4e0d\u5206\u6790Libuv\u7684\u7ebf\u7a0b\u5b9e\u73b0\uff0c\u5b83\u672c\u8d28\u662f\u5bf9\u7ebf\u7a0b\u5e93\u7684\u7b80\u5355\u5c01\u88c5\u3002Node.js\u4e2d\uff0c\u7ebf\u7a0b\u7684\u5b9e\u73b0\u4e5f\u975e\u5e38\u590d\u6742\u3002\u867d\u7136\u5e95\u5c42\u53ea\u662f\u5bf9\u7ebf\u7a0b\u5e93\u7684\u5c01\u88c5\uff0c\u4f46\u662f\u628a\u5b83\u548cNode.js\u539f\u672c\u7684\u67b6\u6784\u7ed3\u5408\u8d77\u6765\u53d8\u5f97\u590d\u6742\u8d77\u6765\u3002</p>"},{"location":"chapter14-%E7%BA%BF%E7%A8%8B/#141","title":"14.1 \u4f7f\u7528\u591a\u7ebf\u7a0b","text":"<p>\u5bf9\u4e8e\u540c\u6b65\u6587\u4ef6\u64cd\u4f5c\u3001DNS\u89e3\u6790\u7b49\u64cd\u4f5c\uff0cNode.js\u4f7f\u7528\u4e86\u5185\u7f6e\u7684\u7ebf\u7a0b\u6c60\u652f\u6301\u4e86\u5f02\u6b65\u3002\u4f46\u662f\u4e00\u4e9b\u52a0\u89e3\u5bc6\u3001\u5b57\u7b26\u4e32\u8fd0\u7b97\u3001\u963b\u585e\u578bAPI\u7b49\u64cd\u4f5c\u3002\u6211\u4eec\u5c31\u4e0d\u80fd\u5728\u4e3b\u7ebf\u7a0b\u91cc\u5904\u7406\u4e86\uff0c\u8fd9\u65f6\u5019\u5c31\u4e0d\u5f97\u4e0d\u4f7f\u7528\u7ebf\u7a0b\uff0c\u800c\u4e14\u591a\u7ebf\u7a0b\u8fd8\u80fd\u5229\u7528\u591a\u6838\u7684\u80fd\u529b\u3002Node.js\u7684\u5b50\u7ebf\u7a0b\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\uff0c\u4f46\u662f\u5b50\u7ebf\u7a0b\u548cNode.js\u4e3b\u7ebf\u7a0b\u5171\u4eab\u4e00\u4e2aLibuv\u7ebf\u7a0b\u6c60\uff0c\u6240\u4ee5\u5982\u679c\u5728\u5b50\u7ebf\u7a0b\u91cc\u6709\u6587\u4ef6\u3001DNS\u7b49\u64cd\u4f5c\u5c31\u4f1a\u548c\u4e3b\u7ebf\u7a0b\u7ade\u4e89Libuv\u7ebf\u7a0b\u6c60\u3002\u5982\u56fe14-1\u6240\u793a\u3002  \u56fe14-1 \u6211\u4eec\u770b\u4e00\u4e0b\u5728Node.js\u4e2d\u5982\u4f55\u4f7f\u7528\u7ebf\u7a0b\u3002</p> <pre><code>    const { Worker, isMainThread, parentPort } = require('worker_threads');  \n    if (isMainThread) {  \n      const worker = new Worker(__filename);  \n      worker.once('message', (message) =&gt; {  \n        ...  \n      });  \n      worker.postMessage('Hello, world!');  \n    } else {  \n      // \u505a\u70b9\u8017\u65f6\u7684\u4e8b\u60c5  \n      parentPort.once('message', (message) =&gt; {  \n        parentPort.postMessage(message);  \n      });  \n    }  \n</code></pre> <p>\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u88ab\u6267\u884c\u4e24\u6b21\uff0c\u4e00\u6b21\u662f\u5728\u4e3b\u7ebf\u7a0b\uff0c\u4e00\u6b21\u5728\u5b50\u7ebf\u7a0b\u3002\u6240\u4ee5\u9996\u5148\u901a\u8fc7isMainThread\u5224\u65ad\u5f53\u524d\u662f\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u5b50\u7ebf\u7a0b\u3002\u4e3b\u7ebf\u7a0b\u7684\u8bdd\uff0c\u5c31\u521b\u5efa\u4e00\u4e2a\u5b50\u7ebf\u7a0b\uff0c\u7136\u540e\u76d1\u542c\u5b50\u7ebf\u7a0b\u53d1\u8fc7\u6765\u7684\u6d88\u606f\u3002\u5b50\u7ebf\u7a0b\u7684\u8bdd\uff0c\u9996\u5148\u6267\u884c\u4e1a\u52a1\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u8fd8\u53ef\u4ee5\u76d1\u542c\u4e3b\u7ebf\u7a0b\u4f20\u8fc7\u6765\u7684\u6d88\u606f\u3002\u6211\u4eec\u5728\u5b50\u7ebf\u7a0b\u4e2d\u53ef\u4ee5\u505a\u4e00\u4e9b\u8017\u65f6\u6216\u8005\u963b\u585e\u6027\u7684\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u5f71\u54cd\u4e3b\u7ebf\u7a0b\u7684\u6267\u884c\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u8fd9\u4e24\u4e2a\u903b\u8f91\u62c6\u5206\u5230\u4e24\u4e2a\u6587\u4ef6\u3002</p> <p>\u4e3b\u7ebf\u7a0b</p> <pre><code>    const { Worker, isMainThread, parentPort } = require('worker_threads');  \n    const worker = new Worker(\u2018\u5b50\u7ebf\u7a0b\u6587\u4ef6\u8def\u5f84\u2019);  \n    worker.once('message', (message) =&gt; {  \n      ...  \n    });  \n    worker.postMessage('Hello, world!');  \n</code></pre> <p>\u5b50\u7ebf\u7a0b</p> <pre><code>    const { Worker, isMainThread, parentPort } = require('worker_threads');  \n    parentPort.once('message', (message) =&gt; {  \n      parentPort.postMessage(message);  \n    });  \n</code></pre>"},{"location":"chapter14-%E7%BA%BF%E7%A8%8B/#142","title":"14.2 \u7ebf\u7a0b\u95f4\u901a\u4fe1\u6570\u636e\u7ed3\u6784","text":"<p>\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1\u4e00\u822c\u9700\u8981\u501f\u52a9\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u516c\u5171\u7684\u5185\u5b58\u6765\u5b8c\u6210\u3002\u56e0\u4e3a\u8fdb\u7a0b\u95f4\u7684\u5185\u5b58\u662f\u72ec\u7acb\u7684\uff0c\u548c\u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e0d\u4e00\u6837\u3002\u591a\u7ebf\u7a0b\u7684\u5185\u5b58\u662f\u5171\u4eab\u7684\uff0c\u540c\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\uff0c\u591a\u4e2a\u7ebf\u7a0b\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u6240\u4ee5\u7ebf\u7a0b\u95f4\u901a\u4fe1\u53ef\u4ee5\u57fa\u4e8e\u8fdb\u7a0b\u5185\u7684\u5185\u5b58\u6765\u5b8c\u6210\u3002\u5728Node.js\u4e2d\uff0c\u7ebf\u7a0b\u95f4\u901a\u4fe1\u4f7f\u7528\u7684\u662fMessageChannel\u5b9e\u73b0\u7684\uff0c\u5b83\u662f\u5168\u53cc\u5de5\u7684\uff0c\u4efb\u610f\u4e00\u7aef\u90fd\u53ef\u4ee5\u968f\u65f6\u53d1\u9001\u4fe1\u606f\u3002MessageChannel\u7c7b\u4f3csocket\u901a\u4fe1\uff0c\u5b83\u5305\u62ec\u4e24\u4e2a\u7aef\u70b9\u3002\u5b9a\u4e49\u4e00\u4e2aMessageChannel\u76f8\u5f53\u4e8e\u5efa\u7acb\u4e00\u4e2aTCP\u8fde\u63a5\uff0c\u5b83\u9996\u5148\u7533\u8bf7\u4e24\u4e2a\u7aef\u70b9\uff08MessagePort\uff09\uff0c\u7136\u540e\u628a\u5b83\u4eec\u5173\u8054\u8d77\u6765\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u7ebf\u7a0b\u95f4\u901a\u4fe1\u7684\u5b9e\u73b0\u4e2d\uff0c\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6570\u636e\u7ed3\u6784\u3002 1 Message\u4ee3\u8868\u4e00\u4e2a\u6d88\u606f\u3002 2 MessagePortData\u662f\u5bf9\u64cd\u4f5cMessage\u7684\u5c01\u88c5\u548c\u5bf9\u6d88\u606f\u7684\u627f\u8f7d\u3002 3 MessagePort\u662f\u4ee3\u8868\u901a\u4fe1\u7684\u7aef\u70b9\u3002 4 MessageChannel\u662f\u4ee3\u8868\u901a\u4fe1\u7684\u4e24\u7aef\uff0c\u5373\u4e24\u4e2aMessagePort\u3002 \u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002 14.2.1 Message Message\u7c7b\u4ee3\u8868\u7684\u662f\u5b50\u7ebf\u7a0b\u95f4\u901a\u4fe1\u7684\u4e00\u6761\u6d88\u606f\u3002</p> <pre><code>    class Message : public MemoryRetainer {  \n     public:  \n      explicit Message(MallocedBuffer&lt;char&gt;&amp;&amp; payload = MallocedBuffer&lt;char&gt;());  \n      // \u662f\u5426\u662f\u6700\u540e\u4e00\u6761\u6d88\u606f\uff0c\u7a7a\u6d88\u606f\u4ee3\u8868\u662f\u6700\u540e\u4e00\u6761\u6d88\u606f  \n      bool IsCloseMessage() const;  \n      // \u7ebf\u7a0b\u95f4\u901a\u4fe1\u7684\u6570\u636e\u9700\u8981\u901a\u8fc7\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u5904\u7406  \n      v8::MaybeLocal&lt;v8::Value&gt; Deserialize(Environment* env,  \n                                            v8::Local&lt;v8::Context&gt; context);  \n      v8::Maybe&lt;bool&gt; Serialize(Environment* env,  \n                                v8::Local&lt;v8::Context&gt; context,  \n                                v8::Local&lt;v8::Value&gt; input,  \n                                const TransferList&amp; transfer_list,  \n                                v8::Local&lt;v8::Object&gt; source_port =  \n                                    v8::Local&lt;v8::Object&gt;());  \n\n      // \u4f20\u9012SharedArrayBuffer\u578b\u53d8\u91cf  \n      void AddSharedArrayBuffer(std::shared_ptr&lt;v8::BackingStore&gt; backing_store);  \n      // \u4f20\u9012MessagePort\u578b\u53d8\u91cf  \n      void AddMessagePort(std::unique_ptr&lt;MessagePortData&gt;&amp;&amp; data);  \n      // \u6d88\u606f\u6240\u5c5e\u7aef\u53e3\uff0c\u7aef\u53e3\u662f\u6d88\u606f\u5230\u8fbe\u7684\u5730\u65b9  \n      const std::vector&lt;std::unique_ptr&lt;MessagePortData&gt;&gt;&amp; message_ports() const {  \n        return message_ports_;  \n      }  \n\n     private:  \n      // \u4fdd\u5b58\u6d88\u606f\u7684\u5185\u5bb9  \n      MallocedBuffer&lt;char&gt; main_message_buf_;  \n      std::vector&lt;std::shared_ptr&lt;v8::BackingStore&gt;&gt; array_buffers_;  \n      std::vector&lt;std::shared_ptr&lt;v8::BackingStore&gt;&gt; shared_array_buffers_;  \n      std::vector&lt;std::unique_ptr&lt;MessagePortData&gt;&gt; message_ports_;  \n      std::vector&lt;v8::CompiledWasmModule&gt; wasm_modules_;  \n    };  \n</code></pre>"},{"location":"chapter14-%E7%BA%BF%E7%A8%8B/#1422-messageportdata","title":"14.2.2 MessagePortData","text":"<p>MessagePortData\u662f\u7ba1\u7406\u6d88\u606f\u53d1\u9001\u548c\u63a5\u6536\u7684\u7c7b\u3002 </p> <pre><code>    class MessagePortData : public MemoryRetainer {  \n     public:  \n      explicit MessagePortData(MessagePort* owner);  \n      ~MessagePortData() override;  \n      // \u65b0\u589e\u4e00\u4e2a\u6d88\u606f  \n      void AddToIncomingQueue(Message&amp;&amp; message);  \n      // \u5173\u8054/\u89e3\u5173\u8054\u901a\u4fe1\u4e24\u7aef\u7684\u7aef\u53e3  \n      static void Entangle(MessagePortData* a, MessagePortData* b);  \n      void Disentangle();  \n\n     private:  \n      // \u7528\u4e8e\u591a\u7ebf\u7a0b\u5f80\u5bf9\u7aef\u6d88\u606f\u961f\u5217\u63d2\u5165\u6d88\u606f\u65f6\u7684\u4e92\u65a5\u53d8\u91cf  \n      mutable Mutex mutex_;  \n      std::list&lt;Message&gt; incoming_messages_;  \n      // \u6240\u5c5e\u7aef\u53e3  \n      MessagePort* owner_ = nullptr;  \n      // \u7528\u4e8e\u591a\u7ebf\u7a0b\u8bbf\u95ee\u5bf9\u7aefsibling_\u5c5e\u6027\u65f6\u7684\u4e92\u65a5\u53d8\u91cf  \n      std::shared_ptr&lt;Mutex&gt; sibling_mutex_ = std::make_shared&lt;Mutex&gt;();  \n      // \u6307\u5411\u901a\u4fe1\u5bf9\u7aef\u7684\u6307\u9488  \n      MessagePortData* sibling_ = nullptr;  \n    };  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u5b9e\u73b0\u3002</p> <pre><code>    MessagePortData::MessagePortData(MessagePort* owner) : owner_(owner) { }  \n\n    MessagePortData::~MessagePortData() {  \n      // \u6790\u6784\u65f6\u89e3\u9664\u548c\u5bf9\u7aef\u7684\u5173\u7cfb  \n      Disentangle();  \n    }  \n\n    // \u63d2\u5165\u4e00\u4e2amessage  \n    void MessagePortData::AddToIncomingQueue(Message&amp;&amp; message) {  \n      // \u5148\u52a0\u9501\uff0c\u4fdd\u8bc1\u591a\u7ebf\u7a0b\u5b89\u5168\uff0c\u4e92\u65a5\u8bbf\u95ee  \n      Mutex::ScopedLock lock(mutex_);  \n      // \u63d2\u5165\u6d88\u606f\u961f\u5217  \n      incoming_messages_.emplace_back(std::move(message));  \n      // \u901a\u77e5owner  \n      if (owner_ != nullptr) {  \n        owner_-&gt;TriggerAsync();  \n      }  \n    }  \n\n    // \u5173\u8054\u901a\u4fe1\u7684\u5bf9\u7aef\uff0c\u5e76\u4fdd\u6301\u5bf9\u7aef\u7684\u4e92\u65a5\u53d8\u91cf\uff0c\u8bbf\u95ee\u5bf9\u7aef\u65f6\u9700\u8981\u4f7f\u7528  \n    void MessagePortData::Entangle(MessagePortData* a, MessagePortData* b) {  \n      a-&gt;sibling_ = b;  \n      b-&gt;sibling_ = a;  \n      a-&gt;sibling_mutex_ = b-&gt;sibling_mutex_;  \n    }  \n\n    // \u89e3\u9664\u5173\u8054   \n    void MessagePortData::Disentangle() {  \n      // \u52a0\u9501\u64cd\u4f5c\u5bf9\u7aef\u7684sibling\u5b57\u6bb5  \n      std::shared_ptr&lt;Mutex&gt; sibling_mutex = sibling_mutex_;  \n      Mutex::ScopedLock sibling_lock(*sibling_mutex);  \n      sibling_mutex_ = std::make_shared&lt;Mutex&gt;();  \n      // \u5bf9\u7aef  \n      MessagePortData* sibling = sibling_;  \n      // \u5bf9\u7aef\u975e\u7a7a\uff0c\u5219\u628a\u5bf9\u7aef\u7684sibling\u4e5f\u6307\u5411\u7a7a\uff0c\u81ea\u5df1\u4e5f\u6307\u5411\u7a7a  \n      if (sibling_ != nullptr) {  \n        sibling_-&gt;sibling_ = nullptr;  \n        sibling_ = nullptr;  \n      }  \n\n      // \u63d2\u5165\u4e00\u4e2a\u7a7a\u7684\u6d88\u606f\u901a\u77e5\u5bf9\u7aef\u548c\u672c\u7aef  \n      AddToIncomingQueue(Message());  \n      if (sibling != nullptr) {  \n        sibling-&gt;AddToIncomingQueue(Message());  \n      }  \n    }  \n</code></pre>"},{"location":"chapter14-%E7%BA%BF%E7%A8%8B/#1423-messageport","title":"14.2.3 MessagePort","text":"<p>MessagePort\u8868\u793a\u7684\u662f\u901a\u4fe1\u7684\u4e00\u7aef\u3002</p> <pre><code>    class MessagePort : public HandleWrap {  \n     public:  \n      MessagePort(Environment* env,  \n                  v8::Local&lt;v8::Context&gt; context,  \n                  v8::Local&lt;v8::Object&gt; wrap);  \n      ~MessagePort() override;  \n\n       static MessagePort* New(Environment* env,  \n                               v8::Local&lt;v8::Context&gt; context,  \n                               std::unique_ptr&lt;MessagePortData&gt; data = nullptr);  \n      // \u53d1\u9001\u6d88\u606f  \n      v8::Maybe&lt;bool&gt; PostMessage(Environment* env,  \n                                  v8::Local&lt;v8::Value&gt; message,  \n                                  const TransferList&amp; transfer);  \n\n      // \u5f00\u542f/\u5173\u95ed\u63a5\u6536\u6d88\u606f  \n      void Start();  \n      void Stop();  \n\n      static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n      // \u63d0\u4f9bJS\u5c42\u4f7f\u7528\u7684\u65b9\u6cd5  \n      static void PostMessage(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n      static void Start(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n      static void Stop(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n      static void Drain(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n      static void ReceiveMessage(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n      // \u5173\u8054\u5bf9\u7aef  \n      static void Entangle(MessagePort* a, MessagePort* b);  \n      static void Entangle(MessagePort* a, MessagePortData* b);  \n\n      // \u89e3\u9664MessagePortData\u548c\u7aef\u53e3\u7684\u5173\u7cfb  \n      std::unique_ptr&lt;MessagePortData&gt; Detach();  \n      // \u5173\u95ed\u7aef\u53e3  \n      void Close(  \n          v8::Local&lt;v8::Value&gt; close_callback = v8::Local&lt;v8::Value&gt;()) override;  \n\n      inline bool IsDetached() const;  \n     private:  \n      void OnClose() override;  \n      void OnMessage();  \n      void TriggerAsync();  \n      v8::MaybeLocal&lt;v8::Value&gt; ReceiveMessage(v8::Local&lt;v8::Context&gt; context,  \n                                               bool only_if_receiving);  \n      // MessagePortData\u7528\u4e8e\u7ba1\u7406\u6d88\u606f\u7684\u53d1\u9001\u548c\u63a5\u6536  \n      std::unique_ptr&lt;MessagePortData&gt; data_ = nullptr;  \n      // \u662f\u5426\u5f00\u542f\u63a5\u6536\u6d88\u606f\u6807\u8bb0  \n      bool receiving_messages_ = false;  \n      // \u7528\u4e8e\u6536\u5230\u6d88\u606f\u65f6\u901a\u77e5\u4e8b\u4ef6\u5faa\u73af\uff0c\u4e8b\u4ef6\u5faa\u73af\u6267\u884c\u56de\u8c03\u5904\u7406\u6d88\u606f  \n      uv_async_t async_;  \n    };  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u5b9e\u73b0\uff0c\u53ea\u5217\u51fa\u90e8\u5206\u51fd\u6570\u3002</p> <pre><code>    // \u7aef\u53e3\u662f\u5426\u4e0d\u63a5\u6536\u6d88\u606f\u4e86  \n    bool MessagePort::IsDetached() const {  \n      return data_ == nullptr || IsHandleClosing();  \n    }  \n\n    // \u6709\u6d88\u606f\u5230\u8fbe\uff0c\u901a\u77e5\u4e8b\u4ef6\u5faa\u73af\u6267\u884c\u56de\u8c03  \n    void MessagePort::TriggerAsync() {  \n      if (IsHandleClosing()) return;  \n      CHECK_EQ(uv_async_send(&amp;async_), 0);  \n    }  \n\n    // \u5173\u95ed\u63a5\u6536\u6d88\u606f\u7684\u7aef\u53e3  \n    void MessagePort::Close(v8::Local&lt;v8::Value&gt; close_callback) {  \n      if (data_) {  \n        // \u6301\u6709\u9501\uff0c\u9632\u6b62\u518d\u63a5\u6536\u6d88\u606f  \n        Mutex::ScopedLock sibling_lock(data_-&gt;mutex_);  \n        HandleWrap::Close(close_callback);  \n      } else {  \n        HandleWrap::Close(close_callback);  \n      }  \n    }  \n\n    // \u65b0\u5efa\u4e00\u4e2a\u7aef\u53e3\uff0c\u5e76\u4e14\u53ef\u4ee5\u6302\u8f7d\u4e00\u4e2aMessagePortData  \n    MessagePort* MessagePort::New(  \n        Environment* env,  \n        Local&lt;Context&gt; context,  \n        std::unique_ptr&lt;MessagePortData&gt; data) {  \n      Context::Scope context_scope(context);  \n      Local&lt;FunctionTemplate&gt; ctor_templ = GetMessagePortConstructorTemplate(env);  \n\n      Local&lt;Object&gt; instance;  \n      // JS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61  \n      if (!ctor_templ-&gt;InstanceTemplate()-&gt;NewInstance(context).ToLocal(&amp;instance))  \n        return nullptr;  \n      // \u65b0\u5efa\u4e00\u4e2a\u6d88\u606f\u7aef\u53e3  \n      MessagePort* port = new MessagePort(env, context, instance);  \n\n      // \u9700\u8981\u6302\u8f7dMessagePortData  \n      if (data) {  \n        port-&gt;Detach();  \n        port-&gt;data_ = std::move(data);  \n        Mutex::ScopedLock lock(port-&gt;data_-&gt;mutex_);  \n        // \u4fee\u6539data\u7684owner\u4e3a\u5f53\u524d\u6d88\u606f\u7aef\u53e3  \n        port-&gt;data_-&gt;owner_ = port;  \n        // data\u4e2d\u53ef\u80fd\u6709\u6d88\u606f  \n        port-&gt;TriggerAsync();  \n      }  \n      return port;  \n    }  \n\n    // \u5f00\u59cb\u63a5\u6536\u6d88\u606f  \n    void MessagePort::Start() {  \n      Debug(this, \"Start receiving messages\");  \n      receiving_messages_ = true;  \n      Mutex::ScopedLock lock(data_-&gt;mutex_);  \n      // \u6709\u7f13\u5b58\u7684\u6d88\u606f\uff0c\u901a\u77e5\u4e0a\u5c42  \n      if (!data_-&gt;incoming_messages_.empty())  \n        TriggerAsync();  \n    }  \n\n    // \u505c\u6b62\u63a5\u6536\u6d88\u606f  \n    void MessagePort::Stop() {  \n      Debug(this, \"Stop receiving messages\");  \n      receiving_messages_ = false;  \n    }  \n    // JS\u5c42\u8c03\u7528\n    void MessagePort::Start(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      MessagePort* port;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;port, args.This());  \n      if (!port-&gt;data_) {  \n        return;  \n      }  \n      port-&gt;Start();  \n    }  \n\n    void MessagePort::Stop(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      MessagePort* port;  \n      CHECK(args[0]-&gt;IsObject());  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;port, args[0].As&lt;Object&gt;());  \n      if (!port-&gt;data_) {  \n        return;  \n      }  \n      port-&gt;Stop();  \n    }  \n\n    // \u8bfb\u53d6\u6d88\u606f  \n    void MessagePort::Drain(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      MessagePort* port;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;port, args[0].As&lt;Object&gt;());  \n      port-&gt;OnMessage();  \n    }  \n\n    // \u83b7\u53d6\u67d0\u4e2a\u7aef\u53e3\u7684\u6d88\u606f  \n    void MessagePort::ReceiveMessage(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      CHECK(args[0]-&gt;IsObject());  \n      // \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u7aef\u53e3  \n      MessagePort* port = Unwrap&lt;MessagePort&gt;(args[0].As&lt;Object&gt;());  \n      // \u8c03\u7528\u5bf9\u8c61\u7684ReceiverMessage\u65b9\u6cd5  \n      MaybeLocal&lt;Value&gt; payload =  \n          port-&gt;ReceiveMessage(port-&gt;object()-&gt;CreationContext(), false);  \n      if (!payload.IsEmpty())  \n        args.GetReturnValue().Set(payload.ToLocalChecked());  \n    }  \n\n    // \u5173\u8054\u4e24\u4e2a\u7aef\u53e3  \n    void MessagePort::Entangle(MessagePort* a, MessagePort* b) {  \n      Entangle(a, b-&gt;data_.get());  \n    }  \n\n    void MessagePort::Entangle(MessagePort* a, MessagePortData* b) {  \n      MessagePortData::Entangle(a-&gt;data_.get(), b);  \n    }  \n</code></pre>"},{"location":"chapter14-%E7%BA%BF%E7%A8%8B/#1424-messagechannel","title":"14.2.4 MessageChannel","text":"<p>MessageChannel\u8868\u793a\u7ebf\u7a0b\u95f4\u901a\u4fe1\u7684\u4e24\u4e2a\u7aef\u3002</p> <pre><code>    static void MessageChannel(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n\n      Local&lt;Context&gt; context = args.This()-&gt;CreationContext();  \n      Context::Scope context_scope(context);  \n\n      MessagePort* port1 = MessagePort::New(env, context);  \n      MessagePort* port2 = MessagePort::New(env, context);  \n      MessagePort::Entangle(port1, port2);  \n      // port1-&gt;object()\u62ff\u5230JS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61\uff0c\u5b83\u5173\u8054\u4e86MessagePort\u5bf9\u8c61\n      args.This()-&gt;Set(context, env-&gt;port1_string(), port1-&gt;object())  \n          .Check();  \n      args.This()-&gt;Set(context, env-&gt;port2_string(), port2-&gt;object())  \n          .Check();  \n    }  \n</code></pre> <p>MessageChannel\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u65b0\u5efa\u4e24\u4e2a\u6d88\u606f\u7aef\u53e3\uff0c\u5e76\u4e14\u5173\u8054\u8d77\u6765\uff0c\u540e\u7eed\u5c31\u53ef\u4ee5\u57fa\u4e8e\u8fd9\u4e24\u4e2a\u7aef\u53e3\u8fdb\u884c\u901a\u4fe1\u4e86\u3002 Message\u3001MessagePortData\u3001MessagePort\u548cMessageChannel\u7684\u5173\u7cfb\u56fe\u5982\u56fe14-2\u6240\u793a\u3002  \u56fe14-2 \u6700\u540e\u6211\u4eec\u770b\u4e00\u4e0b\u7ebf\u7a0b\u95f4\u901a\u4fe1\u6a21\u5757\u5bfc\u51fa\u7684\u4e00\u4e9b\u529f\u80fd\u3002</p> <pre><code>    static void InitMessaging(Local&lt;Object&gt; target,  \n                              Local&lt;Value&gt; unused,  \n                              Local&lt;Context&gt; context,  \n                              void* priv) {  \n      Environment* env = Environment::GetCurrent(context);  \n\n      {  \n        // \u7ebf\u7a0b\u95f4\u901a\u4fe1\u7684\u901a\u9053  \n        Local&lt;String&gt; message_channel_string = FIXED_ONE_BYTE_STRING(env-&gt;isolate(), \n                                                                           \"MessageChannel\");  \n        Local&lt;FunctionTemplate&gt; templ = env-&gt;NewFunctionTemplate(MessageChannel);  \n        templ-&gt;SetClassName(message_channel_string);  \n        target-&gt;Set(context,  \n                    message_channel_string,  \n                    templ-&gt;GetFunction(context).ToLocalChecked()).Check();  \n      }  \n      // \u65b0\u5efa\u6d88\u606f\u7aef\u53e3\u7684\u6784\u9020\u51fd\u6570  \n      target-&gt;Set(context,  \n                  env-&gt;message_port_constructor_string(),  \n                  GetMessagePortConstructorTemplate(env)  \n                      -&gt;GetFunction(context).ToLocalChecked()).Check();  \n\n      env-&gt;SetMethod(target, \"stopMessagePort\", MessagePort::Stop);  \n      env-&gt;SetMethod(target, \"drainMessagePort\", MessagePort::Drain);  \n      env-&gt;SetMethod(target, \"receiveMessageOnPort\", MessagePort::ReceiveMessage);  \n      env-&gt;SetMethod(target, \"moveMessagePortToContext\",  \n                     MessagePort::MoveToContext);  \n    }  \n</code></pre>"},{"location":"chapter14-%E7%BA%BF%E7%A8%8B/#143","title":"14.3 \u591a\u7ebf\u7a0b\u7684\u5b9e\u73b0","text":"<p>\u672c\u8282\u6211\u4eec\u4eceworker_threads\u6a21\u5757\u5f00\u59cb\u5206\u6790\u591a\u7ebf\u7a0b\u7684\u5b9e\u73b0\u3002\u8fd9\u662f\u4e00\u4e2aC++\u6a21\u5757\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5b83\u5bfc\u51fa\u7684\u529f\u80fd\u3002require(\"work_threads\")\u7684\u65f6\u5019\u5c31\u662f\u5f15\u7528\u4e86InitWorker\u51fd\u6570\u5bfc\u51fa\u7684\u529f\u80fd\u3002</p> <pre><code>    void InitWorker(Local&lt;Object&gt; target,    \n                    Local&lt;Value&gt; unused,    \n                    Local&lt;Context&gt; context,    \n                    void* priv) {    \n      Environment* env = Environment::GetCurrent(context);    \n\n      {      \n        Local&lt;FunctionTemplate&gt; w = env-&gt;NewFunctionTemplate(Worker::New);    \n        w-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);    \n        w-&gt;Inherit(AsyncWrap::GetConstructorTemplate(env));    \n        // \u8bbe\u7f6e\u4e00\u7cfb\u5217\u539f\u578b\u65b9\u6cd5\uff0c\u5c31\u4e0d\u4e00\u4e00\u5217\u4e3e    \n        env-&gt;SetProtoMethod(w, \"setEnvVars\", Worker::SetEnvVars);    \n        // \u4e00\u7cfb\u5217\u539f\u578b\u65b9\u6cd5    \n        /*  \n         \u5bfc\u51fa\u51fd\u6570\u6a21\u5757\u5bf9\u5e94\u7684\u51fd\u6570\uff0c\u5373\u6211\u4eec\u4ee3\u7801\u4e2d \n         const { Worker } = require(\"worker_threads\");\u4e2d\u7684Worker  \n        */   \n        Local&lt;String&gt; workerString = FIXED_ONE_BYTE_STRING(env-&gt;isolate(), \"Worker\");    \n        w-&gt;SetClassName(workerString);    \n        target-&gt;Set(env-&gt;context(),    \n                    workerString,    \n                    w-&gt;GetFunction(env-&gt;context()).ToLocalChecked()).Check();    \n\n         /*  \n           \u5bfc\u51fagetEnvMessagePort\u65b9\u6cd5\uff0c\u83b7\u53d6\u7ebf\u7a0b\u63a5\u6536\u6d88\u606f\u7684\u7aef\u53e3     \n           const {getEnvMessagePort} = require(\"worker_threads\"); \n         */  \n         env-&gt;SetMethod(target, \"getEnvMessagePort\", GetEnvMessagePort);    \n         /*  \n           \u7ebf\u7a0bid\uff0c\u8fd9\u4e2a\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u7684\u90a3\u4e2a\uff0c\u800c\u662fNode.js\u5206\u914d\u7684, \n           \u5728\u521b\u5efa\u7ebf\u7a0b\u7684\u65f6\u5019\u8bbe\u7f6e  \n           const { threadId } = require(\"worker_threads\");  \n         */    \n        target-&gt;Set(env-&gt;context(),  \n                      env-&gt;thread_id_string(),    \n                      Number::New(env-&gt;isolate(),  \n                      static_cast&lt;double&gt;(env-&gt;thread_id())))    \n            .Check();    \n        /*  \n         \u662f\u5426\u662f\u4e3b\u7ebf\u7a0b\uff0c \n         const { isMainThread } = require(\"worker_threads\");  \n         \u8fd9\u8fb9\u53d8\u91cf\u5728Node.js\u542f\u52a8\u7684\u65f6\u5019\u8bbe\u7f6e\u4e3atrue\uff0c\u65b0\u5f00\u5b50\u7ebf\u7a0b\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u8bbe \n         \u7f6e\uff0c\u6240\u4ee5\u662ffalse  \n        */    \n        target-&gt;Set(env-&gt;context(),    \n                    FIXED_ONE_BYTE_STRING(env-&gt;isolate(), \"isMainThread\"),   \n                    Boolean::New(env-&gt;isolate(), env-&gt;is_main_thread()))  \n                    .Check();    \n        /*  \n         \u5982\u679c\u4e0d\u662f\u4e3b\u7ebf\u7a0b\uff0c\u5bfc\u51fa\u8d44\u6e90\u9650\u5236\u7684\u914d\u7f6e\uff0c  \n         \u5373\u5728\u5b50\u7ebf\u7a0b\u4e2d\u8c03\u7528 \n          const { resourceLimits } = require(\"worker_threads\");  \n        */    \n        if (!env-&gt;is_main_thread()) {    \n          target-&gt;Set(env-&gt;context(),    \n                FIXED_ONE_BYTE_STRING(env-&gt;isolate(),   \n                          \"resourceLimits\"),    \n                env-&gt;worker_context()-&gt;GetResourceLimits(env-&gt;isolate())).Check();    \n        }    \n        // \u5bfc\u51fa\u51e0\u4e2a\u5e38\u91cf    \n        NODE_DEFINE_CONSTANT(target, kMaxYoungGenerationSizeMb);    \n        NODE_DEFINE_CONSTANT(target, kMaxOldGenerationSizeMb);    \n        NODE_DEFINE_CONSTANT(target, kCodeRangeSizeMb);    \n        NODE_DEFINE_CONSTANT(target, kTotalResourceLimitCount);    \n    }   \n</code></pre> <p>\u4e86\u89e3work_threads\u6a21\u5757\u5bfc\u51fa\u7684\u529f\u80fd\u540e\uff0c\u6211\u4eec\u770b\u5728JS\u5c42\u6267\u884cnew Worker\u7684\u65f6\u5019\u7684\u903b\u8f91\u3002\u6839\u636e\u4e0a\u9762\u4ee3\u7801\u5bfc\u51fa\u7684\u903b\u8f91\uff0c\u6211\u4eec\u77e5\u9053\u8fd9\u65f6\u5019\u9996\u5148\u4f1a\u65b0\u5efa\u4e00\u4e2aC++\u5bf9\u8c61\u3002\u7136\u540e\u6267\u884cNew\u56de\u8c03\uff0c\u5e76\u4f20\u5165\u65b0\u5efa\u7684C++\u5bf9\u8c61\u3002\u6211\u4eec\u770bNew\u51fd\u6570\u7684\u903b\u8f91\u3002\u6211\u4eec\u7701\u7565\u4e00\u7cfb\u5217\u7684\u53c2\u6570\u5904\u7406\uff0c\u4e3b\u8981\u4ee3\u7801\u5982\u4e0b\u3002</p> <pre><code>    // args.This()\u5c31\u662f\u6211\u4eec\u521a\u624d\u4f20\u8fdb\u6765\u7684this  \n    Worker* worker = new Worker(env, args.This(),   \n                    url, per_isolate_opts,  \n                    std::move(exec_argv_out));  \n</code></pre> <p>\u6211\u4eec\u518d\u770bWorker\u7c7b\u7684\u58f0\u660e\u3002</p> <pre><code>    class Worker : public AsyncWrap {  \n     public:  \n      // \u51fd\u6570\u58f0\u660e  \n\n     private:  \n\n      std::shared_ptr&lt;PerIsolateOptions&gt; per_isolate_opts_;  \n      std::vector&lt;std::string&gt; exec_argv_;  \n      std::vector&lt;std::string&gt; argv_;  \n      MultiIsolatePlatform* platform_;  \n      v8::Isolate* isolate_ = nullptr;  \n      bool start_profiler_idle_notifier_;  \n      // \u771f\u6b63\u7684\u7ebf\u7a0bid\uff0c\u5e95\u5c42\u8fd4\u56de\u7684  \n      uv_thread_t tid_;  \n\n      // This mutex protects access to all variables listed below it.  \n      mutable Mutex mutex_;  \n\n      bool thread_joined_ = true;  \n      const char* custom_error_ = nullptr;  \n      int exit_code_ = 0;  \n      // \u7ebf\u7a0bid\uff0cNode.js\u5206\u914d\uff0c\u4e0d\u662f\u5e95\u5c42\u8fd4\u56de\u7684  \n      uint64_t thread_id_ = -1;  \n      uintptr_t stack_base_ = 0;  \n\n      // \u7ebf\u7a0b\u8d44\u6e90\u9650\u5236\u914d\u7f6e  \n      double resource_limits_[kTotalResourceLimitCount];  \n      void UpdateResourceConstraints(v8::ResourceConstraints* constraints);  \n\n      // \u6808\u4fe1\u606f  \n      static constexpr size_t kStackSize = 4 * 1024 * 1024;  \n      static constexpr size_t kStackBufferSize = 192 * 1024;  \n\n      std::unique_ptr&lt;MessagePortData&gt; child_port_data_;  \n      std::shared_ptr&lt;KVStore&gt; env_vars_;  \n      // \u7528\u4e8e\u7ebf\u7a0b\u95f4\u901a\u4fe1  \n      MessagePort* child_port_ = nullptr;  \n      MessagePort* parent_port_ = nullptr;  \n      // \u7ebf\u7a0b\u72b6\u6001  \n      bool stopped_ = true;  \n      // \u662f\u5426\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa  \n      bool has_ref_ = true;  \n      // \u5b50\u7ebf\u7a0b\u6267\u884c\u65f6\u7684\u73af\u5883\u53d8\u91cf\uff0c\u57fa\u7c7b\u4e5f\u5b9a\u4e49\u4e86  \n      Environment* env_ = nullptr;  \n    };  \n</code></pre> <p>\u8fd9\u91cc\u53ea\u8bb2\u4e00\u4e0benv_\u7684\u5b9a\u4e49\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5730\u65b9\u3002\u6211\u4eec\u770b\u5230Worker\u7c7b\u7ee7\u627fAsyncWrap\uff0cAsyncWrap\u7ee7\u627f\u4e86BaseObject\u3002BaseObject\u4e2d\u4e5f\u5b9a\u4e49\u4e86env_\u5c5e\u6027\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5728C++\u4e2d\u5982\u679c\u5b50\u7c7b\u7236\u7c7b\u90fd\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5c5e\u6027\u65f6\u662f\u600e\u6837\u7684\u3002\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50</p> <pre><code>    #include &lt;iostream&gt;  \n    using namespace std;  \n\n    class A  \n    {  \n    public:  \n        int value;  \n        A()  \n        {  \n            value=1;  \n        }  \n        void console()  \n        {  \n            cout&lt;&lt;value&lt;&lt;endl;  \n        }  \n\n    };  \n    class B: public A  \n    {  \n       public:  \n           int value;  \n        B():A()  \n        {  \n            value=2;  \n        }  \n    };  \n    int main()  \n    {  \n        B b;  \n        // b.value = 3;\u53ea\u4f1a\u4fee\u6539\u5b50\u7c7b\u7684\uff0c\u4e0d\u4f1a\u4fee\u6539\u7236\u7c7b\u7684  \n        b.console();  \n        cout&lt;&lt;b.value&lt;&lt;endl&lt;&lt;\"\u5185\u5b58\u5927\u5c0f\uff1a\"&lt;&lt;sizeof(b)&lt;&lt;endl;  \n        return 0;  \n    }  \n</code></pre> <p>\u4ee5\u4e0a\u4ee3\u7801\u6267\u884c\u65f6\u8f93\u51fa     1     2     \u5185\u5b58\u5927\u5c0f\uff1a8 \u7531\u8f93\u51fa\u7ed3\u679c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0cb\u5185\u5b58\u5927\u5c0f\u662f8\u4e2a\u5b57\u8282\u3002\u5373\u4e24\u4e2aint\u3002\u6240\u4ee5b\u7684\u5185\u5b58\u5e03\u5c40\u4e2d\u4e24\u4e2aa\u5c5e\u6027\u90fd\u5206\u914d\u4e86\u5185\u5b58\u3002\u5f53\u6211\u4eec\u901a\u8fc7b.console\u8f93\u51favalue\u65f6\uff0c\u56e0\u4e3aconsole\u662f\u5728A\u4e0a\u5b9a\u4e49\u7684\uff0c\u6240\u4ee5\u8f93\u51fa1\uff0c\u4f46\u662f\u6211\u4eec\u901a\u8fc7b.value\u8bbf\u95ee\u65f6\uff0c\u8f93\u51fa\u7684\u662f2\u3002\u56e0\u4e3a\u8bbf\u95ee\u7684\u662fB\u4e2d\u5b9a\u4e49\u7684value\uff0c\u540c\u7406\u5982\u679c\u6211\u4eec\u5728B\u4e2d\u5b9a\u4e49console\uff0c\u8f93\u51fa\u4e5f\u4f1a\u662f2\u3002Worker\u4e2d\u5b9a\u4e49\u7684env_\u6211\u4eec\u540e\u7eed\u4f1a\u770b\u5230\u5b83\u7684\u4f5c\u7528\u3002\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0bWorker\u7c7b\u7684\u521d\u59cb\u5316\u903b\u8f91\u3002</p> <pre><code>    Worker::Worker(Environment* env,    \n                   Local&lt;Object&gt; wrap,...)    \n        : AsyncWrap(env, wrap, AsyncWrap::PROVIDER_WORKER),    \n          ...    \n          // \u5206\u914d\u7ebf\u7a0bid    \n          thread_id_(Environment::AllocateThreadId()),   \n          // \u7ee7\u627f\u4e3b\u7ebf\u7a0b\u7684\u73af\u5883\u53d8\u91cf   \n          env_vars_(env-&gt;env_vars()) {    \n\n      // \u65b0\u5efa\u4e00\u4e2a\u7aef\u53e3\u548c\u5b50\u7ebf\u7a0b\u901a\u4fe1    \n      parent_port_ = MessagePort::New(env, env-&gt;context());    \n      /*  \n        \u5173\u8054\u8d77\u6765\uff0c\u7528\u4e8e\u901a\u4fe1  \n        const parent_port_ = {data: {sibling: null}};  \n        const child_port_data_  = {sibling: null};  \n        parent_port_.data.sibling = child_port_data_;  \n        child_port_data_.sibling = parent_port_.data;  \n      */    \n      child_port_data_ = std::make_unique&lt;MessagePortData&gt;(nullptr);    \n      MessagePort::Entangle(parent_port_, child_port_data_.get());    \n      // \u8bbe\u7f6eJS\u5c42Worker\u5bf9\u8c61\u7684messagePort\u5c5e\u6027\u4e3aparent_port_    \n      object()-&gt;Set(env-&gt;context(),    \n                    env-&gt;message_port_string(),    \n                    parent_port_-&gt;object()).Check();    \n      // \u8bbe\u7f6eWorker\u5bf9\u8c61\u7684\u7ebf\u7a0bid\uff0c\u5373threadId\u5c5e\u6027    \n      object()-&gt;Set(env-&gt;context(),    \n                    env-&gt;thread_id_string(),    \n                    Number::New(env-&gt;isolate(), static_cast&lt;double&gt;(thread_id_)))    \n          .Check();    \n    }   \n</code></pre> <p>\u65b0\u5efa\u4e00\u4e2aWorker\uff0c\u7ed3\u6784\u5982\u56fe14-3\u6240\u793a\u3002  \u56fe14-3</p> <p>\u4e86\u89e3\u4e86new Worker\u7684\u903b\u8f91\u540e\uff0c\u6211\u4eec\u770b\u5728JS\u5c42\u662f\u5982\u4f55\u4f7f\u7528\u7684\u3002\u6211\u4eec\u770bJS\u5c42Worker\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002</p> <pre><code>    constructor(filename, options = {}) {  \n        super();  \n        // \u5ffd\u7565\u4e00\u7cfb\u5217\u53c2\u6570\u5904\u7406\uff0cnew Worker\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684C++\u5c42\u7684  \n        this[kHandle] = new Worker(url, options.execArgv, parseResourceLimits(options.resourceLimits));  \n        // messagePort\u6307\u5411_parent_port  \n        this[kPort] = this[kHandle].messagePort;  \n        this[kPort].on('message', (data) =&gt; this[kOnMessage](data));\n        // \u5f00\u59cb\u63a5\u6536\u6d88\u606f  \n        this[kPort].start();  \n        // \u7533\u8bf7\u4e00\u4e2a\u901a\u4fe1\u901a\u9053\uff0c\u4e24\u4e2a\u7aef\u53e3  \n        const { port1, port2 } = new MessageChannel();  \n        this[kPublicPort] = port1;  \n        this[kPublicPort].on('message', (message) =&gt; this.emit('message', message));  \n        // \u5411\u53e6\u4e00\u7aef\u53d1\u9001\u6d88\u606f  \n        this[kPort].postMessage({  \n          argv,  \n          type: messageTypes.LOAD_SCRIPT,  \n          filename,  \n          doEval: !!options.eval,  \n          cwdCounter: cwdCounter || workerIo.sharedCwdCounter,  \n          workerData: options.workerData,  \n          publicPort: port2,  \n          manifestSrc: getOptionValue('--experimental-policy') ?  \n            require('internal/process/policy').src :  \n            null,  \n          hasStdin: !!options.stdin  \n        }, [port2]);  \n        // \u5f00\u542f\u7ebf\u7a0b  \n        this[kHandle].startThread();  \n      }  \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u4e3b\u8981\u903b\u8f91\u5982\u4e0b 1 \u4fdd\u5b58messagePort\uff0c\u76d1\u542c\u8be5\u7aef\u53e3\u7684message\u4e8b\u4ef6\uff0c\u7136\u540e\u7ed9messagePort\u7684\u5bf9\u7aef\u53d1\u9001\u6d88\u606f\uff0c\u4f46\u662f\u8fd9\u65f6\u5019\u8fd8\u6ca1\u6709\u63a5\u6536\u7aef\u53e3\uff0c\u6240\u4ee5\u6d88\u606f\u4f1a\u7f13\u5b58\u5230MessagePortData\uff0c\u5373child_port_data_ \u4e2d\u3002\u53e6\u5916\u6211\u4eec\u770b\u5230\u4e3b\u7ebf\u7a0b\u628a\u901a\u4fe1\u7aef\u53e3port2\u53d1\u9001\u7ed9\u4e86\u5b50\u7ebf\u7a0b\u3002 2 \u7533\u8bf7\u4e00\u4e2a\u901a\u4fe1\u901a\u9053port1\u548cport2\uff0c\u7528\u4e8e\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u901a\u4fe1\u3002_parent_port\u548cchild_port\u662f\u7ed9Node.js\u4f7f\u7528\u7684\uff0c\u65b0\u7533\u8bf7\u7684\u7aef\u53e3\u662f\u7ed9\u7528\u6237\u4f7f\u7528\u7684\u3002 3 \u521b\u5efa\u5b50\u7ebf\u7a0b\u3002 \u6211\u4eec\u770b\u521b\u5efa\u7ebf\u7a0b\u7684\u65f6\u5019\uff0c\u505a\u4e86\u4ec0\u4e48\u3002</p> <pre><code>    void Worker::StartThread(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Worker* w;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;w, args.This());  \n      Mutex::ScopedLock lock(w-&gt;mutex_);  \n\n      // The object now owns the created thread and should not be garbage collected  \n      // until that finishes.  \n      w-&gt;ClearWeak();  \n      // \u52a0\u5165\u4e3b\u7ebf\u7a0b\u7ef4\u62a4\u7684\u5b50\u7ebf\u7a0b\u6570\u636e\u7ed3\u6784  \n      w-&gt;env()-&gt;add_sub_worker_context(w);  \n      w-&gt;stopped_ = false;  \n      w-&gt;thread_joined_ = false;  \n      // \u662f\u5426\u9700\u8981\u963b\u585e\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa\uff0c\u9ed8\u8ba4true  \n      if (w-&gt;has_ref_)  \n        w-&gt;env()-&gt;add_refs(1);  \n      // \u662f\u5426\u9700\u8981\u6808\u548c\u6808\u5927\u5c0f  \n      uv_thread_options_t thread_options;  \n      thread_options.flags = UV_THREAD_HAS_STACK_SIZE;  \n      thread_options.stack_size = kStackSize;  \n      // \u521b\u5efa\u7ebf\u7a0b  \n      CHECK_EQ(uv_thread_create_ex(&amp;w-&gt;tid_, &amp;thread_options, [](void* arg) {  \n\n        Worker* w = static_cast&lt;Worker*&gt;(arg);  \n        const uintptr_t stack_top = reinterpret_cast&lt;uintptr_t&gt;(&amp;arg);  \n        w-&gt;stack_base_ = stack_top - (kStackSize - kStackBufferSize);  \n        // \u6267\u884c\u4e3b\u903b\u8f91  \n        w-&gt;Run();  \n\n        Mutex::ScopedLock lock(w-&gt;mutex_);  \n        // \u7ed9\u4e3b\u7ebf\u7a0b\u63d0\u4ea4\u4e00\u4e2a\u4efb\u52a1\uff0c\u901a\u77e5\u4e3b\u7ebf\u7a0b\u5b50\u7ebf\u7a0b\u6267\u884c\u5b8c\u6bd5\uff0c\u56e0\u4e3a\u4e3b\u7ebf\u7a0b\u4e0d\u80fd\u76f4\u63a5\u6267\u884cjoin\u963b\u585e\u81ea\u5df1  \n        w-&gt;env()-&gt;SetImmediateThreadsafe(  \n            [w = std::unique_ptr&lt;Worker&gt;(w)](Environment* env) {  \n              if (w-&gt;has_ref_)  \n                env-&gt;add_refs(-1);  \n              w-&gt;JoinThread();  \n              // implicitly delete w  \n            });  \n      }, static_cast&lt;void*&gt;(w)), 0);  \n    }  \n</code></pre> <p>StartThread\u65b0\u5efa\u4e86\u4e00\u4e2a\u5b50\u7ebf\u7a0b\uff0c\u7136\u540e\u5728\u5b50\u7ebf\u7a0b\u4e2d\u6267\u884cRun\uff0c\u6211\u4eec\u7ee7\u7eed\u770bRun</p> <pre><code>    void Worker::Run() {  \n      // \u7ebf\u7a0b\u6267\u884c\u6240\u9700\u8981\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982loop\uff0cisolate\uff0c\u548c\u4e3b\u7ebf\u7a0b\u72ec\u7acb  \n      WorkerThreadData data(this);  \n\n      {  \n        Locker locker(isolate_);  \n        Isolate::Scope isolate_scope(isolate_);  \n        SealHandleScope outer_seal(isolate_);  \n        // std::unique_ptr&lt;Environment, FreeEnvironment&gt; env_;  \n        DeleteFnPtr&lt;Environment, FreeEnvironment&gt; env_;  \n        // \u7ebf\u7a0b\u6267\u884c\u5b8c\u540e\u6267\u884c\u7684\u6e05\u9664\u51fd\u6570  \n        auto cleanup_env = OnScopeLeave([&amp;]() {  \n        // ...  \n        });  \n\n        {  \n          HandleScope handle_scope(isolate_);  \n          Local&lt;Context&gt; context;  \n          // \u65b0\u5efa\u4e00\u4e2acontext\uff0c\u548c\u4e3b\u7ebf\u7a0b\u72ec\u7acb  \n          context = NewContext(isolate_);  \n          Context::Scope context_scope(context);  \n          {  \n            // \u65b0\u5efa\u4e00\u4e2aenv\u5e76\u521d\u59cb\u5316\uff0cenv\u4e2d\u4f1a\u548c\u65b0\u7684context\u5173\u8054  \n            env_.reset(new Environment(data.isolate_data_.get(),  \n                                       context,  \n                                       std::move(argv_),  \n                                       std::move(exec_argv_),  \n                                       Environment::kNoFlags,  \n                                       thread_id_));  \n            env_-&gt;set_env_vars(std::move(env_vars_));  \n            env_-&gt;set_abort_on_uncaught_exception(false);  \n            env_-&gt;set_worker_context(this);  \n\n            env_-&gt;InitializeLibuv(start_profiler_idle_notifier_);  \n          }  \n          {  \n            Mutex::ScopedLock lock(mutex_);  \n            // \u66f4\u65b0\u5b50\u7ebf\u7a0b\u6240\u5c5e\u7684env  \n            this-&gt;env_ = env_.get();  \n          }  \n\n          {  \n            if (!env_-&gt;RunBootstrapping().IsEmpty()) {  \n              CreateEnvMessagePort(env_.get());  \n              USE(StartExecution(env_.get(), \"internal/main/worker_thread\"));  \n            }  \n          }  \n\n          {  \n            SealHandleScope seal(isolate_);  \n            bool more;  \n            // \u5f00\u59cb\u4e8b\u4ef6\u5faa\u73af  \n            do {  \n              if (is_stopped()) break;  \n              uv_run(&amp;data.loop_, UV_RUN_DEFAULT);  \n              if (is_stopped()) break;  \n\n              platform_-&gt;DrainTasks(isolate_);  \n\n              more = uv_loop_alive(&amp;data.loop_);  \n              if (more &amp;&amp; !is_stopped()) continue;  \n\n              EmitBeforeExit(env_.get());  \n\n              more = uv_loop_alive(&amp;data.loop_);  \n            } while (more == true &amp;&amp; !is_stopped());  \n          }  \n        }  \n    }  \n</code></pre> <p>\u6211\u4eec\u5206\u6b65\u9aa4\u5206\u6790\u4e0a\u9762\u7684\u4ee3\u7801 1 \u65b0\u5efaIsolate\u3001context\u548cEnvironment\uff0c\u5b50\u7ebf\u7a0b\u5728\u72ec\u7acb\u7684\u73af\u5883\u6267\u884c\u3002\u7136\u540e\u521d\u59cb\u5316Environment\u3002\u8fd9\u4e2a\u5728Node.js\u542f\u52a8\u8fc7\u7a0b\u7ae0\u8282\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u4e0d\u518d\u5206\u6790\u3002 2 \u66f4\u65b0\u5b50\u7ebf\u7a0b\u7684env_\u3002\u521a\u624d\u5df2\u7ecf\u5206\u6790\u8fc7\uff0cWorker\u7c7b\u4e2d\u5b9a\u4e49\u4e86env_\u5c5e\u6027\uff0c\u6240\u4ee5\u8fd9\u91cc\u901a\u8fc7this.env_\u66f4\u65b0\u65f6\uff0c\u662f\u4e0d\u4f1a\u5f71\u54cd\u57fa\u7c7b\uff08BaseObject\uff09\u4e2d\u7684\u503c\u7684\u3002\u56e0\u4e3a\u5b50\u7ebf\u7a0b\u662f\u5728\u65b0\u7684\u73af\u5883\u6267\u884c\u7684\uff0c\u6240\u4ee5\u5728\u65b0\u73af\u5883\u4e2d\u4f7f\u7528\u8be5Worker\u5b9e\u4f8b\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u65b0\u7684\u73af\u5883\u53d8\u91cf\u3002\u800c\u5728\u4e3b\u7ebf\u7a0b\u4f7f\u7528\u8be5Worker\u5b9e\u4f8b\u65f6\uff0c\u662f\u901a\u8fc7BaseObject\u7684env()\u8bbf\u95ee\u7684\u3002\u4ece\u800c\u83b7\u53d6\u7684\u662f\u4e3b\u7ebf\u7a0b\u7684\u73af\u5883\u3002\u56e0\u4e3aWorker\u5b9e\u4f8b\u662f\u5728\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u7684\uff0cNode.js\u5728Worker\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u4e86\u4e00\u4e2aenv_\u5c5e\u6027\u6b63\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 3 CreateEnvMessagePort</p> <pre><code>    void Worker::CreateEnvMessagePort(Environment* env) {  \n      child_port_ = MessagePort::New(env,\n                                         env-&gt;context(),  \n                       std::move(child_port_data_));  \n      if (child_port_ != nullptr)  \n        env-&gt;set_message_port(child_port_-&gt;object(isolate_));  \n    }  \n</code></pre> <p>child_port_data_\u8fd9\u4e2a\u53d8\u91cf\u521a\u624d\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u8fc7\uff0c\u5728\u8fd9\u91cc\u9996\u5148\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684\u7aef\u53e3\u3002\u5e76\u4e14\u548cchild_port_data_\u4e92\u76f8\u5173\u8054\u8d77\u6765\u3002\u7136\u540e\u5728env\u7f13\u5b58\u8d77\u6765\u3002\u540e\u7eed\u4f1a\u4f7f\u7528\u3002\u8fd9\u65f6\u5019\u7684\u5173\u7cfb\u56fe\u5982\u56fe14-4\u6240\u793a\u3002  \u56fe14-4</p> <p>4 \u6267\u884cinternal/main/worker_thread.js</p> <pre><code>    // \u8bbe\u7f6eprocess\u5bf9\u8c61  \n    patchProcessObject();  \n    // \u83b7\u53d6\u521a\u624d\u7f13\u5b58\u7684\u7aef\u53e3child_port_  \n    onst port = getEnvMessagePort();  \n    port.on('message', (message) =&gt; {  \n      // \u52a0\u8f7d\u811a\u672c  \n      if (message.type === LOAD_SCRIPT) {  \n        const {  \n          argv,  \n          cwdCounter,  \n          filename,  \n          doEval,  \n          workerData,  \n          publicPort,  \n          manifestSrc,  \n          manifestURL,  \n          hasStdin  \n        } = message;  \n\n        const CJSLoader = require('internal/modules/cjs/loader');  \n        loadPreloadModules();  \n        /* \n         \u7531\u4e3b\u7ebf\u7a0b\u7533\u8bf7\u7684MessageChannel\u4e2d\u67d0\u4e00\u7aef\u7684\u7aef\u53e3\uff0c \n         \u4e3b\u7ebf\u7a0b\u4f20\u9012\u8fc7\u6765\u7684\uff0c\u4fdd\u5b58\u7528\u4e8e\u548c\u4e3b\u7ebf\u7a0b\u901a\u4fe1 \n        */  \n        publicWorker.parentPort = publicPort;  \n        // \u6267\u884c\u65f6\u4f7f\u7528\u7684\u6570\u636e  \n        publicWorker.workerData = workerData;  \n        // \u901a\u77e5\u4e3b\u7ebf\u7a0b\uff0c\u6b63\u5728\u6267\u884c\u811a\u672c  \n        port.postMessage({ type: UP_AND_RUNNING });  \n        // \u6267\u884cnew Worker(filename)\u65f6\u4f20\u5165\u7684\u6587\u4ef6  \n        CJSLoader.Module.runMain(filename);  \n    })  \n    // \u5f00\u59cb\u63a5\u6536\u6d88\u606f  \n    port.start()  \n</code></pre> <p>\u6211\u4eec\u770b\u5230worker_thread.js\u4e2d\u901a\u8fc7runMain\u5b8c\u6210\u4e86\u5b50\u7ebf\u7a0b\u7684\u4ee3\u7801\u6267\u884c\uff0c\u7136\u540e\u5f00\u59cb\u4e8b\u4ef6\u5faa\u73af\u3002 \u6211\u4eec\u770b\u4e00\u4e0b\u5f53\u4e8b\u4ef6\u5faa\u73af\u7ed3\u675f\u65f6\uff0cNode.js\u7684\u903b\u8f91\u3002</p> <pre><code>    // \u7ed9\u4e3b\u7ebf\u7a0b\u63d0\u4ea4\u4e00\u4e2a\u4efb\u52a1\uff0c\u901a\u77e5\u4e3b\u7ebf\u7a0b\u5b50\u7ebf\u7a0b\u6267\u884c\u5b8c\u6bd5\uff0c\u56e0\u4e3a\u4e3b\u7ebf\u7a0b\u4e0d\u80fd\u76f4\u63a5\u6267\u884cjoin\u963b\u585e\u81ea\u5df1    \n    w-&gt;env()-&gt;SetImmediateThreadsafe(    \n        [w = std::unique_ptr&lt;Worker&gt;(w)](Environment* env) {    \n          if (w-&gt;has_ref_)    \n            env-&gt;add_refs(-1);    \n          w-&gt;JoinThread();    \n          // implicitly delete w    \n        });    \n    }, static_cast&lt;void*&gt;(w)), 0);    \n</code></pre> <p>\u901a\u8fc7w-&gt;env()\u83b7\u53d6\u7684\u662f\u4e3b\u7ebf\u7a0b\u7684\u6267\u884c\u73af\u5883\u3002\u6211\u4eec\u770b\u4e00\u4e0bSetImmediateThreadsafe\u3002</p> <pre><code>    template &lt;typename Fn&gt;  \n    void Environment::SetImmediateThreadsafe(Fn&amp;&amp; cb) {  \n      auto callback = std::make_unique&lt;NativeImmediateCallbackImpl&lt;Fn&gt;&gt;(  \n          std::move(cb), false);  \n      {  \n        Mutex::ScopedLock lock(native_immediates_threadsafe_mutex_);  \n        native_immediates_threadsafe_.Push(std::move(callback));  \n      }  \n      uv_async_send(&amp;task_queues_async_);  \n    }  \n</code></pre> <p>SetImmediateThreadsafe\u7528\u4e8e\u901a\u77e5\u6267\u884c\u73af\u5883\u6240\u5728\u7684\u4e8b\u4ef6\u5faa\u73af\u6709\u5f02\u6b65\u4efb\u52a1\u5b8c\u6210\u3002\u5e76\u4e14\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\u56e0\u4e3a\u53ef\u80fd\u6709\u591a\u4e2a\u7ebf\u7a0b\u4f1a\u64cd\u4f5cnative_immediates_threadsafe_\u3002\u5728\u4e3b\u7ebf\u7a0b\u4e8b\u4ef6\u5faa\u73af\u7684Poll IO\u9636\u6bb5\u5c31\u4f1a\u6267\u884ctask_queues_async_\u56de\u8c03\u3002\u6211\u4eec\u770b\u4e00\u4e0btask_queues_async_\u5bf9\u5e94\u7684\u56de\u8c03\u3002</p> <pre><code>    uv_async_init(  \n         event_loop(),  \n         &amp;task_queues_async_,  \n         [](uv_async_t* async) {  \n           Environment* env = ContainerOf(  \n               &amp;Environment::task_queues_async_, async);  \n           env-&gt;CleanupFinalizationGroups();  \n           env-&gt;RunAndClearNativeImmediates();  \n         });  \n</code></pre> <p>\u6240\u4ee5\u5728Poll IO\u9636\u6bb5\u6267\u884c\u7684\u56de\u8c03\u662fRunAndClearNativeImmediates</p> <pre><code>    void Environment::RunAndClearNativeImmediates(bool only_refed) {  \n      TraceEventScope trace_scope(TRACING_CATEGORY_NODE1(environment),  \n                                  \"RunAndClearNativeImmediates\", this);  \n      size_t ref_count = 0;  \n\n      if (native_immediates_threadsafe_.size() &gt; 0) {  \n        Mutex::ScopedLock lock(native_immediates_threadsafe_mutex_);  \n        native_immediates_.ConcatMove(std::move(native_immediates_threadsafe_));  \n      }  \n\n      auto drain_list = [&amp;]() {  \n        TryCatchScope try_catch(this);  \n        DebugSealHandleScope seal_handle_scope(isolate());  \n        while (std::unique_ptr&lt;NativeImmediateCallback&gt; head =  \n                   native_immediates_.Shift()) {  \n          if (head-&gt;is_refed())  \n            ref_count++;  \n\n          if (head-&gt;is_refed() || !only_refed)  \n            // \u6267\u884c\u56de\u8c03  \n            head-&gt;Call(this);  \n\n          head.reset();   \n      };  \n    }  \n</code></pre> <p>RunAndClearNativeImmediates\u4f1a\u6267\u884c\u961f\u5217\u91cc\u7684\u56de\u8c03\u3002\u5bf9\u5e94Worker\u7684JoinThread</p> <pre><code>    void Worker::JoinThread() {  \n      // \u963b\u585e\u7b49\u5f85\u5b50\u7ebf\u7a0b\u7ed3\u675f\uff0c\u6267\u884c\u5230\u8fd9\u5b50\u7ebf\u7a0b\u5df2\u7ecf\u7ed3\u675f\u4e86  \n      CHECK_EQ(uv_thread_join(&amp;tid_), 0);  \n      thread_joined_ = true;  \n      // \u4ece\u4e3b\u7ebf\u7a0b\u6570\u636e\u7ed3\u6784\u4e2d\u5220\u9664\u8be5\u7ebf\u7a0b\u5bf9\u5e94\u7684\u5b9e\u4f8b  \n      env()-&gt;remove_sub_worker_context(this);  \n\n      {  \n        HandleScope handle_scope(env()-&gt;isolate());  \n        Context::Scope context_scope(env()-&gt;context());  \n\n        // Reset the parent port as we're closing it now anyway.  \n        object()-&gt;Set(env()-&gt;context(),  \n                      env()-&gt;message_port_string(),  \n                      Undefined(env()-&gt;isolate())).Check();  \n        // \u5b50\u7ebf\u7a0b\u9000\u51fa\u7801  \n        Local&lt;Value&gt; args[] = {  \n          Integer::New(env()-&gt;isolate(), exit_code_),  \n          custom_error_ != nullptr ?  \n              OneByteString(env()-&gt;isolate(), custom_error_).As&lt;Value&gt;() :  \n              Null(env()-&gt;isolate()).As&lt;Value&gt;(),  \n        };  \n        // \u6267\u884cJS\u5c42\u56de\u8c03\uff0c\u89e6\u53d1exit\u4e8b\u4ef6  \n        MakeCallback(env()-&gt;onexit_string(), arraysize(args), args);  \n      }  \n    }  \n</code></pre> <p>\u6700\u540e\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u679c\u7ed3\u675f\u6b63\u5728\u6267\u884c\u7684\u5b50\u7ebf\u7a0b\u3002\u5728JS\u4e2d\u6211\u80fd\u53ef\u4ee5\u901a\u8fc7terminate\u51fd\u6570\u7ec8\u6b62\u7ebf\u7a0b\u7684\u6267\u884c\u3002</p> <pre><code>    terminate(callback) {  \n        this[kHandle].stopThread();  \n    }  \nTerminate\u662f\u5bf9C++\u6a21\u5757stopThread\u7684\u5c01\u88c5\u3002\n    void Worker::StopThread(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Worker* w;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;w, args.This());  \n      w-&gt;Exit(1);  \n    }  \n\n    void Worker::Exit(int code) {  \n      Mutex::ScopedLock lock(mutex_);  \n      // env_\u662f\u5b50\u7ebf\u7a0b\u6267\u884c\u7684env \n      if (env_ != nullptr) {  \n        exit_code_ = code;  \n        Stop(env_);  \n      } else {  \n        stopped_ = true;  \n      }  \n    }  \n\n\n    int Stop(Environment* env) {  \n      env-&gt;ExitEnv();  \n      return 0;  \n    }  \n\n    void Environment::ExitEnv() {  \n      set_can_call_into_js(false);  \n      set_stopping(true);  \n      isolate_-&gt;TerminateExecution();  \n      SetImmediateThreadsafe([](Environment* env) { uv_stop(env-&gt;event_loop()); });  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u4e3b\u7ebf\u7a0b\u6700\u7ec8\u901a\u8fc7SetImmediateThreadsafe\u7ed9\u5b50\u7ebf\u7a0b\u6240\u5c5e\u7684env\u63d0\u4ea4\u4e86\u4e00\u4e2a\u4efb\u52a1\u3002\u5b50\u7ebf\u7a0b\u5728Poll IO\u9636\u6bb5\u4f1a\u8bbe\u7f6e\u505c\u6b62\u4e8b\u4ef6\u5faa\u73af\u7684\u6807\u8bb0\uff0c\u7b49\u5230\u4e0b\u4e00\u6b21\u4e8b\u4ef6\u5faa\u73af\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u8df3\u51fa\u4e8b\u4ef6\u5faa\u73af\u4ece\u800c\u7ed3\u675f\u5b50\u7ebf\u7a0b\u7684\u6267\u884c\u3002</p>"},{"location":"chapter14-%E7%BA%BF%E7%A8%8B/#144","title":"14.4 \u7ebf\u7a0b\u95f4\u901a\u4fe1","text":"<p>\u672c\u8282\u6211\u4eec\u770b\u4e00\u4e0b\u7ebf\u7a0b\u95f4\u901a\u4fe1\u7684\u8fc7\u7a0b\u3002</p> <pre><code>    const { Worker, isMainThread, parentPort } = require('worker_threads');  \n    if (isMainThread) {  \n      const worker = new Worker(__filename);  \n      worker.once('message', (message) =&gt; {  \n        ...  \n      });  \n      worker.postMessage('Hello, world!');  \n    } else {  \n      // \u505a\u70b9\u8017\u65f6\u7684\u4e8b\u60c5  \n      parentPort.once('message', (message) =&gt; {  \n        parentPort.postMessage(message);  \n      });  \n    }  \n</code></pre> <p>\u6211\u4eec\u77e5\u9053isMainThread\u5728\u5b50\u7ebf\u7a0b\u91cc\u662ffalse\uff0cparentPort\u5c31\u662fmessageChannel\u4e2d\u7684\u4e00\u7aef\u3002\u7528\u4e8e\u548c\u4e3b\u7ebf\u7a0b\u901a\u4fe1\uff0c\u6240\u4ee5parentPort.postMessage\u7ed9\u5bf9\u7aef\u53d1\u9001\u6d88\u606f\uff0c\u5c31\u662f\u7ed9\u4e3b\u7ebf\u7a0b\u53d1\u9001\u6d88\u606f\uff0c\u6211\u4eec\u518d\u770b\u770bworker.postMessage('Hello, world!')\u3002</p> <pre><code>    postMessage(...args) {  \n       this[kPublicPort].postMessage(...args);  \n    }  \n</code></pre> <p>kPublicPort\u6307\u5411\u7684\u5c31\u662fmessageChannel\u7684\u4e00\u7aef\u3002this[kPublicPort].postMessage(...args)\u5373\u7ed9\u53e6\u4e00\u7aef\u53d1\u9001\u6d88\u606f\u3002\u6211\u4eec\u770b\u4e00\u4e0bpostMessage\u7684\u5b9e\u73b0\u3002</p> <pre><code>    void MessagePort::PostMessage(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n      Local&lt;Object&gt; obj = args.This();  \n      Local&lt;Context&gt; context = obj-&gt;CreationContext();  \n\n      TransferList transfer_list;  \n      if (args[1]-&gt;IsObject()) {  \n        // \u5904\u7406transfer_list  \n      }  \n      // \u62ff\u5230JS\u5c42\u4f7f\u7528\u7684\u5bf9\u8c61\u6240\u5173\u8054\u7684MessagePort  \n      MessagePort* port = Unwrap&lt;MessagePort&gt;(args.This());  \n\n      port-&gt;PostMessage(env, args[0], transfer_list);  \n    }  \n</code></pre> <p>\u6211\u4eec\u63a5\u7740\u770bport-&gt;PostMessage</p> <pre><code>    Maybe&lt;bool&gt; MessagePort::PostMessage(Environment* env,  \n                                         Local&lt;Value&gt; message_v,  \n                                         const TransferList&amp; transfer_v) {  \n      Isolate* isolate = env-&gt;isolate();  \n      Local&lt;Object&gt; obj = object(isolate);  \n      Local&lt;Context&gt; context = obj-&gt;CreationContext();  \n\n      Message msg;  \n\n      // \u5e8f\u5217\u5316  \n      Maybe&lt;bool&gt; serialization_maybe =  \n          msg.Serialize(env, context, message_v, transfer_v, obj);  \n      // \u62ff\u5230\u64cd\u4f5c\u5bf9\u7aefsibling\u7684\u9501  \n      Mutex::ScopedLock lock(*data_-&gt;sibling_mutex_);  \n\n      // \u628a\u6d88\u606f\u63d2\u5165\u5230\u5bf9\u7aef\u961f\u5217  \n      data_-&gt;sibling_-&gt;AddToIncomingQueue(std::move(msg));  \n      return Just(true);  \n    }  \n</code></pre> <p>PostMessage\u901a\u8fc7AddToIncomingQueue\u628a\u6d88\u606f\u63d2\u5165\u5bf9\u7aef\u7684\u6d88\u606f\u961f\u5217\u6211\u4eec\u770b\u4e00\u4e0bAddToIncomingQueue</p> <pre><code>    void MessagePortData::AddToIncomingQueue(Message&amp;&amp; message) {  \n      // \u52a0\u9501\u64cd\u4f5c\u6d88\u606f\u961f\u5217  \n      Mutex::ScopedLock lock(mutex_);  \n      incoming_messages_.emplace_back(std::move(message));  \n      // \u901a\u77e5owner  \n      if (owner_ != nullptr) {  \n        owner_-&gt;TriggerAsync();  \n      }  \n    }  \n</code></pre> <p>\u63d2\u5165\u6d88\u606f\u961f\u5217\u540e\uff0c\u5982\u679c\u6709\u5173\u8054\u7684\u7aef\u53e3\uff0c\u5219\u4f1a\u901a\u77e5Libuv\u3002\u6211\u4eec\u7ee7\u7eed\u770bTriggerAsync\u3002</p> <pre><code>    void MessagePort::TriggerAsync() {  \n      if (IsHandleClosing()) return;  \n      CHECK_EQ(uv_async_send(&amp;async_), 0);  \n    }  \n</code></pre> <p>Libuv\u5728Poll IO\u9636\u6bb5\u5c31\u4f1a\u6267\u884c\u5bf9\u5e94\u7684\u56de\u8c03\u3002\u56de\u8c03\u662f\u5728new MessagePort\u65f6\u8bbe\u7f6e\u7684\u3002</p> <pre><code>    auto onmessage = [](uv_async_t* handle) {  \n      MessagePort* channel = ContainerOf(&amp;MessagePort::async_, handle);  \n      channel-&gt;OnMessage();  \n    };  \n    // \u521d\u59cb\u5316async\u7ed3\u6784\u4f53\uff0c\u5b9e\u73b0\u5f02\u6b65\u901a\u4fe1  \n    CHECK_EQ(uv_async_init(env-&gt;event_loop(),  \n                           &amp;async_,  \n                           onmessage), 0);  \n</code></pre> <p>\u6211\u4eec\u7ee7\u7eed\u770bOnMessage\u3002</p> <pre><code>    void MessagePort::OnMessage() {  \n      HandleScope handle_scope(env()-&gt;isolate());  \n      Local&lt;Context&gt; context = object(env()-&gt;isolate())-&gt;CreationContext();  \n      // \u63a5\u6536\u6d88\u606f\u6761\u6570\u7684\u9608\u503c  \n      size_t processing_limit;  \n      {   \n        // \u52a0\u9501\u64cd\u4f5c\u6d88\u606f\u961f\u5217  \n        Mutex::ScopedLock(data_-&gt;mutex_);  \n        processing_limit = std::max(data_-&gt;incoming_messages_.size(),  \n                                    static_cast&lt;size_t&gt;(1000));  \n      }  \n      while (data_) {  \n        // \u8bfb\u53d6\u7684\u6761\u6570\u8fbe\u5230\u9608\u503c\uff0c\u901a\u77e5Libuv\u4e0b\u4e00\u8f6ePoll IO\u9636\u6bb5\u7ee7\u7eed\u8bfb  \n        if (processing_limit-- == 0) {  \n          // \u901a\u77e5\u4e8b\u4ef6\u5faa\u73af  \n          TriggerAsync();  \n          return;  \n        }  \n\n        HandleScope handle_scope(env()-&gt;isolate());  \n        Context::Scope context_scope(context);  \n\n        Local&lt;Value&gt; payload;  \n        // \u8bfb\u53d6\u6d88\u606f  \n        if (!ReceiveMessage(context, true).ToLocal(&amp;payload)) break;  \n        // \u6ca1\u6709\u4e86  \n        if (payload == env()-&gt;no_message_symbol()) break;  \n\n        Local&lt;Object&gt; event;  \n        Local&lt;Value&gt; cb_args[1];  \n        // \u65b0\u5efa\u4e00\u4e2aMessageEvent\u5bf9\u8c61\uff0c\u56de\u8c03onmessage\u4e8b\u4ef6  \n        if (!env()-&gt;message_event_object_template()-&gt;NewInstance(context)  \n                .ToLocal(&amp;event) ||  \n            event-&gt;Set(context, env()-&gt;data_string(), payload).IsNothing() ||  \n            event-&gt;Set(context, env()-&gt;target_string(), object()).IsNothing() ||  \n            (cb_args[0] = event, false) ||  \n            MakeCallback(env()-&gt;onmessage_string(),  \n                         arraysize(cb_args),  \n                         cb_args).IsEmpty()) {  \n          // \u5982\u679c\u56de\u8c03\u5931\u8d25\uff0c\u901a\u77e5Libuv\u4e0b\u6b21\u7ee7\u7eed\u8bfb  \n          if (data_)  \n            TriggerAsync();  \n          return;  \n        }  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u8fd9\u91cc\u4f1a\u4e0d\u65ad\u5730\u8c03\u7528ReceiveMessage\u8bfb\u53d6\u6570\u636e\uff0c\u7136\u540e\u56de\u8c03JS\u5c42\u3002\u76f4\u5230\u8fbe\u5230\u9608\u503c\u6216\u8005\u56de\u8c03\u5931\u8d25\u3002\u6211\u4eec\u770b\u4e00\u4e0bReceiveMessage\u7684\u903b\u8f91\u3002</p> <pre><code>    MaybeLocal&lt;Value&gt; MessagePort::ReceiveMessage(Local&lt;Context&gt; context,  \n                                                  bool only_if_receiving) {  \n      Message received;  \n      {  \n        // Get the head of the message queue.  \n        // \u4e92\u65a5\u8bbf\u95ee\u6d88\u606f\u961f\u5217  \n        Mutex::ScopedLock lock(data_-&gt;mutex_);  \n\n        bool wants_message = receiving_messages_ || !only_if_receiving;  \n        // \u6ca1\u6709\u6d88\u606f\u3001\u4e0d\u9700\u8981\u63a5\u6536\u6d88\u606f\u3001\u6d88\u606f\u662f\u5173\u95ed\u6d88\u606f  \n        if (data_-&gt;incoming_messages_.empty() ||  \n            (!wants_message &amp;&amp;  \n             !data_-&gt;incoming_messages_.front().IsCloseMessage())) {  \n          return env()-&gt;no_message_symbol();  \n        }  \n        // \u83b7\u53d6\u961f\u5217\u7b2c\u4e00\u4e2a\u6d88\u606f  \n        received = std::move(data_-&gt;incoming_messages_.front());  \n        data_-&gt;incoming_messages_.pop_front();  \n      }  \n      // \u662f\u5173\u95ed\u6d88\u606f\u5219\u5173\u95ed\u7aef\u53e3  \n      if (received.IsCloseMessage()) {  \n        Close();  \n        return env()-&gt;no_message_symbol();  \n      }  \n\n      // \u53cd\u5e8f\u5217\u5316\u540e\u8fd4\u56de  \n      return received.Deserialize(env(), context);  \n    }  \n</code></pre> <p>ReceiveMessage\u4f1a\u6d88\u606f\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\u8fd4\u56de\u3002\u4ee5\u4e0a\u5c31\u662f\u7ebf\u7a0b\u95f4\u901a\u4fe1\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002\u5177\u4f53\u6b65\u9aa4\u5982\u56fe14-5\u6240\u793a\u3002  \u56fe14-5</p>"},{"location":"chapter15-Cluster/","title":"15-Cluster","text":"<p>Node.js\u662f\u5355\u8fdb\u7a0b\u5355\u7ebf\u7a0b\u7684\u5e94\u7528\uff0c\u8fd9\u79cd\u67b6\u6784\u5e26\u6765\u7684\u7f3a\u70b9\u662f\u4e0d\u80fd\u5f88\u597d\u5730\u5229\u7528\u591a\u6838\u7684\u80fd\u529b\uff0c\u56e0\u4e3a\u4e00\u4e2a\u7ebf\u7a0b\u540c\u65f6\u53ea\u80fd\u5728\u4e00\u4e2a\u6838\u4e0a\u6267\u884c\u3002child_process\u6a21\u5757\u4e00\u5b9a\u7a0b\u5ea6\u5730\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0cchild_process\u6a21\u5757\u4f7f\u5f97Node.js\u5e94\u7528\u53ef\u4ee5\u5728\u591a\u4e2a\u6838\u4e0a\u6267\u884c\uff0c\u800ccluster\u6a21\u5757\u5728child_process\u6a21\u5757\u7684\u57fa\u7840\u4e0a\u4f7f\u5f97\u591a\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u76d1\u542c\u7684\u540c\u4e00\u4e2a\u7aef\u53e3\uff0c\u5b9e\u73b0\u670d\u52a1\u5668\u7684\u591a\u8fdb\u7a0b\u67b6\u6784\u3002\u672c\u7ae0\u5206\u6790cluster\u6a21\u5757\u7684\u4f7f\u7528\u548c\u539f\u7406\u3002</p>"},{"location":"chapter15-Cluster/#151-cluster","title":"15.1 cluster\u4f7f\u7528\u4f8b\u5b50","text":"<p>\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0bcluster\u7684\u4e00\u4e2a\u4f7f\u7528\u4f8b\u5b50\u3002</p> <pre><code>    const cluster = require('cluster');  \n    const http = require('http');  \n    const numCPUs = require('os').cpus().length;  \n\n    if (cluster.isMaster) {  \n      for (let i = 0; i &lt; numCPUs; i++) {  \n        cluster.fork();  \n      }  \n    } else {  \n      http.createServer((req, res) =&gt; {  \n        res.writeHead(200);  \n        res.end('hello world\\n');  \n      }).listen(8888);  \n    }  \n</code></pre> <p>\u4ee5\u4e0a\u4ee3\u7801\u5728\u7b2c\u4e00\u6b21\u6267\u884c\u7684\u65f6\u5019\uff0ccluster.isMaster\u4e3atrue\uff0c\u8bf4\u660e\u662f\u4e3b\u8fdb\u7a0b\uff0c\u7136\u540e\u901a\u8fc7fork\u8c03\u7528\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5728\u5b50\u8fdb\u7a0b\u91cc\u540c\u6837\u6267\u884c\u4ee5\u4e0a\u4ee3\u7801\uff0c\u4f46\u662fcluster.isMaster\u4e3afalse\uff0c\u4ece\u800c\u6267\u884celse\u7684\u903b\u8f91\uff0c\u6211\u4eec\u770b\u5230\u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u90fd\u4f1a\u76d1\u542c8888\u8fd9\u4e2a\u7aef\u53e3\u4f46\u662f\u53c8\u4e0d\u4f1a\u5f15\u8d77EADDRINUSE\u9519\u8bef\u3002\u4e0b\u9762\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002</p>"},{"location":"chapter15-Cluster/#152","title":"15.2 \u4e3b\u8fdb\u7a0b\u521d\u59cb\u5316","text":"<p>\u6211\u4eec\u5148\u770b\u4e3b\u8fdb\u7a0b\u65f6\u7684\u903b\u8f91\u3002\u6211\u4eec\u770b\u4e00\u4e0brequire(\u2018cluster\u2019)\u7684\u65f6\u5019\uff0cNode.js\u662f\u600e\u4e48\u5904\u7406\u7684\u3002</p> <pre><code>    const childOrMaster = 'NODE_UNIQUE_ID' in process.env ? 'child' : 'master';  \n    module.exports = require(`internal/cluster/${childOrMaster}`)  \n</code></pre> <p>\u6211\u4eec\u770b\u5230Node.js\u4f1a\u6839\u636e\u5f53\u524d\u73af\u5883\u53d8\u91cf\u7684\u503c\u52a0\u8f7d\u4e0d\u540c\u7684\u6a21\u5757\uff0c\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230NODE_UNIQUE_ID\u662f\u4e3b\u8fdb\u7a0b\u7ed9\u5b50\u8fdb\u7a0b\u8bbe\u7f6e\u7684\uff0c\u5728\u4e3b\u8fdb\u7a0b\u4e2d\uff0cNODE_UNIQUE_ID\u662f\u4e0d\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u4e3b\u8fdb\u7a0b\u65f6\uff0c\u4f1a\u52a0\u8f7dmaster\u6a21\u5757\u3002</p> <pre><code>    cluster.isWorker = false;  \n    cluster.isMaster = true; \n    // \u8c03\u5ea6\u7b56\u7565  \n    cluster.SCHED_NONE = SCHED_NONE;    \n    cluster.SCHED_RR = SCHED_RR;     \n    // \u8c03\u5ea6\u7b56\u7565\u7684\u9009\u62e9   \n    let schedulingPolicy = {  \n      'none': SCHED_NONE,  \n      'rr': SCHED_RR  \n    }[process.env.NODE_CLUSTER_SCHED_POLICY];  \n\n    if (schedulingPolicy === undefined) {  \n      schedulingPolicy = (process.platform === 'win32') ? \n                           SCHED_NONE : SCHED_RR;  \n    }  \n\n    cluster.schedulingPolicy = schedulingPolicy;  \n    // \u521b\u5efa\u5b50\u8fdb\u7a0b  \n    cluster.fork = function(env) {  \n      // \u53c2\u6570\u5904\u7406\n      cluster.setupMaster();  \n      const id = ++ids;  \n      // \u8c03\u7528child_process\u6a21\u5757\u7684fork\n      const workerProcess = createWorkerProcess(id, env);  \n      const worker = new Worker({  \n        id: id,  \n        process: workerProcess  \n      });  \n      // ...  \n      worker.process.on('internalMessage', internal(worker, onmessage));  \n      process.nextTick(emitForkNT, worker);  \n      cluster.workers[worker.id] = worker;  \n      return worker;  \n    };  \n</code></pre> <p>cluster.fork\u662f\u5bf9child_process\u6a21\u5757fork\u7684\u5c01\u88c5\uff0c\u6bcf\u6b21cluster.fork\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u65b0\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u6240\u4ee5cluster\u4e0b\u9762\u4f1a\u6709\u591a\u4e2a\u5b50\u8fdb\u7a0b\uff0cNode.js\u63d0\u4f9b\u7684\u5de5\u4f5c\u6a21\u5f0f\u6709\u8f6e\u8be2\u548c\u5171\u4eab\u4e24\u79cd\uff0c\u4e0b\u9762\u4f1a\u5177\u4f53\u4ecb\u7ecd\u3002Worker\u662f\u5bf9\u5b50\u8fdb\u7a0b\u7684\u5c01\u88c5\uff0c\u901a\u8fc7process\u6301\u6709\u5b50\u8fdb\u7a0b\u7684\u5b9e\u4f8b\uff0c\u5e76\u901a\u8fc7\u76d1\u542cinternalMessage\u548cmessage\u4e8b\u4ef6\u5b8c\u6210\u4e3b\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u7684\u901a\u4fe1\uff0cinternalMessage\u8fd9\u662fNode.js\u5b9a\u4e49\u7684\u5185\u90e8\u901a\u4fe1\u4e8b\u4ef6\uff0c\u5904\u7406\u51fd\u6570\u662finternal(worker, onmessage)\u3002\u6211\u4eec\u5148\u770b\u4e00\u4e0binternal\u3002</p> <pre><code>    const callbacks = new Map();  \n    let seq = 0;  \n\n    function internal(worker, cb) {  \n      return function onInternalMessage(message, handle) {  \n        if (message.cmd !== 'NODE_CLUSTER')  \n          return;  \n\n        let fn = cb;  \n\n        if (message.ack !== undefined) {  \n          const callback = callbacks.get(message.ack);  \n\n          if (callback !== undefined) {  \n            fn = callback;  \n            callbacks.delete(message.ack);  \n          }  \n        }  \n\n        fn.apply(worker, arguments);  \n      };  \n    }  \n</code></pre> <p>internal\u51fd\u6570\u5bf9\u5f02\u6b65\u6d88\u606f\u901a\u4fe1\u505a\u4e86\u4e00\u5c42\u5c01\u88c5\uff0c\u56e0\u4e3a\u8fdb\u7a0b\u95f4\u901a\u4fe1\u662f\u5f02\u6b65\u7684\uff0c\u5f53\u6211\u4eec\u53d1\u9001\u591a\u4e2a\u6d88\u606f\u540e\uff0c\u5982\u679c\u6536\u5230\u4e00\u4e2a\u56de\u590d\uff0c\u6211\u4eec\u65e0\u6cd5\u8fa8\u522b\u51fa\u8be5\u56de\u590d\u662f\u9488\u5bf9\u54ea\u4e00\u4e2a\u8bf7\u6c42\u7684\uff0cNode.js\u901a\u8fc7seq\u7684\u65b9\u5f0f\u5bf9\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u548c\u54cd\u5e94\u505a\u4e86\u4e00\u4e2a\u7f16\u53f7\uff0c\u4ece\u800c\u533a\u5206\u54cd\u5e94\u5bf9\u5e94\u7684\u8bf7\u6c42\u3002\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0bmessage\u7684\u5b9e\u73b0\u3002</p> <pre><code>    function onmessage(message, handle) {  \n      const worker = this;  \n\n      if (message.act === 'online')  \n        online(worker);  \n      else if (message.act === 'queryServer')  \n        queryServer(worker, message);  \n      else if (message.act === 'listening')  \n        listening(worker, message);  \n      else if (message.act === 'exitedAfterDisconnect')  \n        exitedAfterDisconnect(worker, message);  \n      else if (message.act === 'close')  \n        close(worker, message);  \n    }  \n</code></pre> <p>onmessage\u6839\u636e\u6536\u5230\u6d88\u606f\u7684\u4e0d\u540c\u7c7b\u578b\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002\u540e\u9762\u6211\u4eec\u518d\u5177\u4f53\u5206\u6790\u3002\u81f3\u6b64\uff0c\u4e3b\u8fdb\u7a0b\u7684\u903b\u8f91\u5c31\u5206\u6790\u5b8c\u4e86\u3002</p>"},{"location":"chapter15-Cluster/#153","title":"15.3 \u5b50\u8fdb\u7a0b\u521d\u59cb\u5316","text":"<p>\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5b50\u8fdb\u7a0b\u7684\u903b\u8f91\u3002\u5f53\u6267\u884c\u5b50\u8fdb\u7a0b\u65f6\uff0c\u4f1a\u52a0\u8f7dchild\u6a21\u5757\u3002</p> <pre><code>    const cluster = new EventEmitter();  \n    const handles = new Map();  \n    const indexes = new Map();  \n    const noop = () =&gt; {};  \n\n    module.exports = cluster;  \n\n    cluster.isWorker = true;  \n    cluster.isMaster = false;  \n    cluster.worker = null;  \n    cluster.Worker = Worker;  \n\n    cluster._setupWorker = function() {  \n      const worker = new Worker({  \n        id: +process.env.NODE_UNIQUE_ID | 0,  \n        process: process,  \n        state: 'online'  \n      });  \n\n      cluster.worker = worker;  \n\n      process.on('internalMessage', internal(worker, onmessage));  \n      // \u901a\u77e5\u4e3b\u8fdb\u7a0b\u5b50\u8fdb\u7a0b\u542f\u52a8\u6210\u529f  \n      send({ act: 'online' });  \n\n      function onmessage(message, handle) {  \n        if (message.act === 'newconn')  \n          onconnection(message, handle);  \n        else if (message.act === 'disconnect')  \n          _disconnect.call(worker, true);  \n      }  \n    };  \n</code></pre> <p>_setupWorker\u51fd\u6570\u5728\u5b50\u8fdb\u7a0b\u521d\u59cb\u5316\u65f6\u88ab\u6267\u884c\uff0c\u548c\u4e3b\u8fdb\u7a0b\u7c7b\u4f3c\uff0c\u5b50\u8fdb\u7a0b\u7684\u903b\u8f91\u4e5f\u4e0d\u591a\uff0c\u76d1\u542cinternalMessage\u4e8b\u4ef6\uff0c\u5e76\u4e14\u901a\u77e5\u4e3b\u7ebf\u7a0b\u81ea\u5df1\u542f\u52a8\u6210\u529f\u3002</p>"},{"location":"chapter15-Cluster/#154-httpcreateserver","title":"15.4 http.createServer\u7684\u5904\u7406","text":"<p>\u4e3b\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u6267\u884c\u5b8c\u521d\u59cb\u5316\u4ee3\u7801\u540e\uff0c\u5b50\u8fdb\u7a0b\u5f00\u59cb\u6267\u884c\u4e1a\u52a1\u4ee3\u7801http.createServer\uff0c\u5728HTTP\u6a21\u5757\u7ae0\u8282\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u8fc7http.createServer\u7684\u8fc7\u7a0b\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5177\u4f53\u5206\u6790\uff0c\u6211\u4eec\u77e5\u9053http.createServer\u6700\u540e\u4f1a\u8c03\u7528net\u6a21\u5757\u7684listen\uff0c\u7136\u540e\u8c03\u7528listenIncluster\u3002\u6211\u4eec\u4ece\u8be5\u51fd\u6570\u5f00\u59cb\u5206\u6790\u3002</p> <pre><code>    function listenIncluster(server, address, port, addressType,  \n                             backlog, fd, exclusive, flags) {  \n\n      const serverQuery = {  \n        address: address,  \n        port: port,  \n        addressType: addressType,  \n        fd: fd,  \n        flags,  \n      };  \n\n      cluster._getServer(server, serverQuery, listenOnMasterHandle);    \n      function listenOnMasterHandle(err, handle) {  \n        err = checkBindError(err, port, handle);  \n\n        if (err) {  \n          const ex = exceptionWithHostPort(err,\n                                               'bind', \n                                               address, \n                                               port);  \n          return server.emit('error', ex);  \n        }  \n\n        server._handle = handle;  \n        server._listen2(address,\n                          port, \n                          addressType, \n                          backlog, \n                          fd, \n                          flags);  \n      }  \n    }  \n</code></pre> <p>listenIncluster\u51fd\u6570\u4f1a\u8c03\u7528\u5b50\u8fdb\u7a0bcluster\u6a21\u5757\u7684_getServer\u3002</p> <pre><code>    cluster._getServer = function(obj, options, cb) {  \n      let address = options.address;  \n\n      // \u5ffd\u7565index\u7684\u5904\u7406\u903b\u8f91\n\n      const message = {  \n        act: 'queryServer',  \n        index,  \n        data: null,  \n        ...options  \n      };  \n\n      message.address = address;  \n      // \u7ed9\u4e3b\u8fdb\u7a0b\u53d1\u9001\u6d88\u606f  \n      send(message, (reply, handle) =&gt; {  \n        // \u6839\u636e\u4e0d\u540c\u6a21\u5f0f\u505a\u5904\u7406\n        if (handle)  \n          shared(reply, handle, indexesKey, cb);  \n        else  \n          rr(reply, indexesKey, cb);             \n      });  \n    };  \n</code></pre> <p>_getServer\u4f1a\u7ed9\u4e3b\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2aqueryServer\u7684\u8bf7\u6c42\u3002\u6211\u4eec\u770b\u4e00\u4e0bsend\u51fd\u6570\u3002</p> <pre><code>    function send(message, cb) {  \n      return sendHelper(process, message, null, cb);  \n    }  \n\n    function sendHelper(proc, message, handle, cb) {  \n      if (!proc.connected)  \n        return false;  \n\n      message = { cmd: 'NODE_CLUSTER', ...message, seq };  \n\n     if (typeof cb === 'function')  \n       callbacks.set(seq, cb);  \n\n     seq += 1;  \n     return proc.send(message, handle);  \n    }  \n</code></pre> <p>send\u8c03\u7528\u4e86sendHelper\uff0csendHelper\u662f\u5bf9\u5f02\u6b65\u8bf7\u6c42\u505a\u4e86\u4e00\u4e2a\u5c01\u88c5\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u4e3b\u8fdb\u7a0b\u662f\u5982\u4f55\u5904\u7406queryServer\u8bf7\u6c42\u7684\u3002</p> <pre><code>    function queryServer(worker, message) {  \n      const key = `${message.address}:${message.port}:${message.addressType}:` +  `${message.fd}:${message.index}`;  \n      let handle = handles.get(key);  \n\n      if (handle === undefined) {  \n        let address = message.address;  \n        let constructor = RoundRobinHandle;  \n        // \u6839\u636e\u7b56\u7565\u9009\u53d6\u4e0d\u540c\u7684\u6784\u9020\u51fd\u6570  \n        if (schedulingPolicy !== SCHED_RR ||  \n            message.addressType === 'udp4' ||  \n            message.addressType === 'udp6') {  \n          constructor = SharedHandle;  \n        }  \n\n        handle = new constructor(key,  \n                                 address,  \n                                 message.port,  \n                                 message.addressType,  \n                                 message.fd,  \n                                 message.flags);  \n        handles.set(key, handle);  \n      }  \n      handle.add(worker, (errno, reply, handle) =&gt; {  \n        const { data } = handles.get(key);  \n\n        send(worker, {  \n          errno,  \n          key,  \n          ack: message.seq,  \n          data,  \n          ...reply  \n        }, handle);  \n      });  \n    }  \n</code></pre> <p>queryServer\u9996\u5148\u6839\u636e\u8c03\u5ea6\u7b56\u7565\u9009\u62e9\u6784\u9020\u51fd\u6570\uff0c\u7136\u540e\u6267\u884c\u5bf9\u5e94\u7684add\u65b9\u6cd5\u5e76\u4e14\u4f20\u5165\u4e00\u4e2a\u56de\u8c03\u3002\u4e0b\u9762\u6211\u4eec\u770b\u770b\u4e0d\u540c\u6a21\u5f0f\u4e0b\u7684\u5904\u7406\u3002</p>"},{"location":"chapter15-Cluster/#155","title":"15.5 \u5171\u4eab\u6a21\u5f0f","text":"<p>\u4e0b\u9762\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b\u5171\u4eab\u6a21\u5f0f\u7684\u5904\u7406\uff0c\u903b\u8f91\u5982\u56fe19-1\u6240\u793a\u3002  \u56fe19-1</p> <pre><code>    function SharedHandle(key, address, port, addressType, fd, flags) {  \n      this.key = key;  \n      this.workers = [];  \n      this.handle = null;  \n      this.errno = 0;  \n\n      let rval;  \n      if (addressType === 'udp4' || addressType === 'udp6')  \n        rval = dgram._createSocketHandle(address, \n                                            port, \n                                            addressType, \n                                            fd, \n                                            flags);  \n      else  \n        rval = net._createServerHandle(address,  \n                                           port, \n                                           addressType, \n                                           fd, \n                                           flags);  \n\n      if (typeof rval === 'number')  \n        this.errno = rval;  \n      else  \n        this.handle = rval;  \n    }  \n</code></pre> <p>SharedHandle\u662f\u5171\u4eab\u6a21\u5f0f\uff0c\u5373\u4e3b\u8fdb\u7a0b\u521b\u5efa\u597dhandle\uff0c\u4ea4\u7ed9\u5b50\u8fdb\u7a0b\u5904\u7406\u3002</p> <pre><code>    SharedHandle.prototype.add = function(worker, send) {  \n      this.workers.push(worker);  \n      send(this.errno, null, this.handle);  \n    };  \n</code></pre> <p>SharedHandle\u7684add\u628aSharedHandle\u4e2d\u521b\u5efa\u7684handle\u8fd4\u56de\u7ed9\u5b50\u8fdb\u7a0b\uff0c\u63a5\u7740\u6211\u4eec\u770b\u770b\u5b50\u8fdb\u7a0b\u62ff\u5230handle\u540e\u7684\u5904\u7406</p> <pre><code>    function shared(message, handle, indexesKey, cb) {  \n      const key = message.key;  \n\n      const close = handle.close;  \n\n      handle.close = function() {  \n        send({ act: 'close', key });  \n        handles.delete(key);  \n        indexes.delete(indexesKey);  \n        return close.apply(handle, arguments);  \n      };  \n      handles.set(key, handle); \n      // \u6267\u884cnet\u6a21\u5757\u7684\u56de\u8c03 \n      cb(message.errno, handle);  \n    }  \n</code></pre> <p>Shared\u51fd\u6570\u628a\u63a5\u6536\u5230\u7684handle\u518d\u56de\u4f20\u5230\u8c03\u7528\u65b9\u3002\u5373net\u6a21\u5757\u3002net\u6a21\u5757\u4f1a\u6267\u884clisten\u5f00\u59cb\u76d1\u542c\u5730\u5740\uff0c\u4f46\u662f\u6709\u8fde\u63a5\u5230\u6765\u65f6\uff0c\u7cfb\u7edf\u53ea\u4f1a\u6709\u4e00\u4e2a\u8fdb\u7a0b\u62ff\u5230\u8be5\u8fde\u63a5\u3002\u6240\u4ee5\u6240\u6709\u5b50\u8fdb\u7a0b\u5b58\u5728\u7ade\u4e89\u5173\u7cfb\u5bfc\u81f4\u8d1f\u8f7d\u4e0d\u5747\u8861\uff0c\u8fd9\u53d6\u51b3\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b9e\u73b0\u3002 \u5171\u4eab\u6a21\u5f0f\u5b9e\u73b0\u7684\u6838\u5fc3\u903b\u8f91\u4e3b\u8fdb\u7a0b\u5728_createServerHandle\u521b\u5efahandle\u65f6\u6267\u884cbind\u7ed1\u5b9a\u4e86\u5730\u5740\uff08\u4f46\u6ca1\u6709listen\uff09\uff0c\u7136\u540e\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u9012\u7684\u65b9\u5f0f\u4f20\u7ed9\u5b50\u8fdb\u7a0b\uff0c\u5b50\u8fdb\u7a0b\u6267\u884clisten\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u62a5\u7aef\u53e3\u5df2\u7ecf\u88ab\u76d1\u542c\u7684\u9519\u8bef\u4e86\u3002\u56e0\u4e3a\u7aef\u53e3\u88ab\u76d1\u542c\u7684\u9519\u8bef\u662f\u6267\u884cbind\u7684\u65f6\u5019\u8fd4\u56de\u7684\u3002</p>"},{"location":"chapter15-Cluster/#156","title":"15.6 \u8f6e\u8be2\u6a21\u5f0f","text":"<p>\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0bRoundRobinHandle\u7684\u5904\u7406\uff0c\u903b\u8f91\u5982\u56fe19-2\u6240\u793a\u3002  \u56fe19-2</p> <pre><code>    function RoundRobinHandle(key, address, port, addressType, fd, flags) {  \n      this.key = key;  \n      this.all = new Map();  \n      this.free = [];  \n      this.handles = [];  \n      this.handle = null;  \n      this.server = net.createServer(assert.fail);  \n\n      if (fd &gt;= 0)  \n        this.server.listen({ fd });  \n      else if (port &gt;= 0) {  \n        this.server.listen({  \n          port,  \n          host: address,  \n          ipv6Only: Boolean(flags &amp; constants.UV_TCP_IPV6ONLY),  \n        });  \n      } else  \n        this.server.listen(address);  // UNIX socket path.  \n      // \u76d1\u542c\u6210\u529f\u540e\uff0c\u6ce8\u518conconnection\u56de\u8c03\uff0c\u6709\u8fde\u63a5\u5230\u6765\u65f6\u6267\u884c  \n      this.server.once('listening', () =&gt; {  \n        this.handle = this.server._handle;  \n        this.handle.onconnection = (err, handle) =&gt; this.distribute(err, handle);  \n        this.server._handle = null;  \n        this.server = null;  \n      });  \n    }  \n</code></pre> <p>RoundRobinHandle\u7684\u5de5\u4f5c\u6a21\u5f0f\u662f\u4e3b\u8fdb\u7a0b\u8d1f\u8d23\u76d1\u542c\uff0c\u6536\u5230\u8fde\u63a5\u540e\u5206\u53d1\u7ed9\u5b50\u8fdb\u7a0b\u3002\u6211\u4eec\u770b\u4e00\u4e0bRoundRobinHandle\u7684add</p> <pre><code>    RoundRobinHandle.prototype.add = function(worker, send) {  \n       this.all.set(worker.id, worker);  \n\n       const done = () =&gt; {  \n        if (this.handle.getsockname) {  \n          const out = {};  \n          this.handle.getsockname(out);  \n          send(null, { sockname: out }, null);  \n        } else {  \n          send(null, null, null);  // UNIX socket.  \n        }  \n\n        // In case there are connections pending. \n        this.handoff(worker);   \n      };  \n      // \u8bf4\u660elisten\u6210\u529f\u4e86  \n      if (this.server === null)  \n        return done();  \n      // \u5426\u5219\u7b49\u5f85listen\u6210\u529f\u540e\u6267\u884c\u56de\u8c03  \n      this.server.once('listening', done);  \n      this.server.once('error', (err) =&gt; {  \n        send(err.errno, null);  \n      });  \n    };  \n</code></pre> <p>RoundRobinHandle\u4f1a\u5728listen\u6210\u529f\u540e\u6267\u884c\u56de\u8c03\u3002\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u6267\u884cadd\u51fd\u6570\u65f6\u7684\u56de\u8c03\u3002</p> <pre><code>    handle.add(worker, (errno, reply, handle) =&gt; {  \n      const { data } = handles.get(key);  \n\n      send(worker, {  \n        errno,  \n        key,  \n        ack: message.seq,  \n        data,  \n        ...reply  \n      }, handle);  \n    });  \n</code></pre> <p>\u56de\u8c03\u51fd\u6570\u4f1a\u628ahandle\u7b49\u4fe1\u606f\u8fd4\u56de\u7ed9\u5b50\u8fdb\u7a0b\u3002\u4f46\u662f\u5728RoundRobinHandle\u548cSharedHandle\u4e2d\u8fd4\u56de\u7684handle\u662f\u4e0d\u4e00\u6837\u7684\u3002\u5206\u522b\u662fnull\u548cnet.createServer\u5b9e\u4f8b\u3002\u63a5\u7740\u6211\u4eec\u56de\u5230\u5b50\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u3002\u770b\u5b50\u8fdb\u7a0b\u662f\u5982\u4f55\u5904\u7406\u54cd\u5e94\u7684\u3002\u521a\u624d\u6211\u4eec\u8bb2\u8fc7\uff0c\u4e0d\u540c\u7684\u8c03\u5ea6\u7b56\u7565\uff0c\u8fd4\u56de\u7684handle\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6211\u4eec\u770b\u8f6e\u8be2\u6a21\u5f0f\u4e0b\u7684\u5904\u7406\u3002</p> <pre><code>    function rr(message, indexesKey, cb) { \n      let key = message.key;  \n      function listen(backlog) {  \n        return 0;  \n      }  \n\n      function close() {  \n        // ...  \n      }  \n\n      const handle = { close, listen, ref: noop, unref: noop };  \n\n      if (message.sockname) {  \n        handle.getsockname = getsockname;  // TCP handles only.  \n      }  \n\n      handles.set(key, handle); \n      // \u6267\u884cnet\u6a21\u5757\u7684\u56de\u8c03 \n      cb(0, handle);  \n    }  \n</code></pre> <p>round-robin\u6a21\u5f0f\u4e0b\uff0c\u6784\u9020\u4e00\u4e2a\u5047\u7684handle\u8fd4\u56de\u7ed9\u8c03\u7528\u65b9\uff0c\u56e0\u4e3a\u8c03\u7528\u65b9\u4f1a\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u3002\u6700\u540e\u56de\u5230net\u6a21\u5757\u3002net\u6a21\u5757\u9996\u5148\u4fdd\u5b58handle\uff0c\u7136\u540e\u8c03\u7528listen\u51fd\u6570\u3002\u5f53\u6709\u8bf7\u6c42\u5230\u6765\u65f6\uff0cround-bobin\u6a21\u5757\u4f1a\u6267\u884cdistribute\u5206\u53d1\u8bf7\u6c42\u7ed9\u5b50\u8fdb\u7a0b\u3002</p> <pre><code>    RoundRobinHandle.prototype.distribute = function(err, handle) {  \n      // \u9996\u5148\u4fdd\u5b58handle\u5230\u961f\u5217  \n      this.handles.push(handle);  \n      // \u4ece\u7a7a\u95f2\u961f\u5217\u83b7\u53d6\u4e00\u4e2a\u5b50\u8fdb\u7a0b  \n      const worker = this.free.shift();  \n      // \u5206\u53d1  \n      if (worker)  \n        this.handoff(worker);  \n    };  \n\n    RoundRobinHandle.prototype.handoff = function(worker) {  \n      // \u62ff\u5230\u4e00\u4e2ahandle  \n      const handle = this.handles.shift();  \n      // \u6ca1\u6709handle\uff0c\u5219\u5b50\u8fdb\u7a0b\u91cd\u65b0\u5165\u961f  \n      if (handle === undefined) {  \n        this.free.push(worker);  // Add to ready queue again.  \n        return;  \n      }  \n      // \u901a\u77e5\u5b50\u8fdb\u7a0b\u6709\u65b0\u8fde\u63a5  \n      const message = { act: 'newconn', key: this.key };  \n\n      sendHelper(worker.process, message, handle, (reply) =&gt; {  \n        // \u63a5\u6536\u6210\u529f  \n        if (reply.accepted)  \n          handle.close();  \n        else  \n          // \u7ed3\u675f\u5931\u8d25\uff0c\u5219\u91cd\u65b0\u5206\u53d1  \n          this.distribute(0, handle);  // Worker is shutting down. Send to another.  \n\n        this.handoff(worker);  \n      });  \n    };  \n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0b\u5b50\u8fdb\u7a0b\u662f\u600e\u4e48\u5904\u7406\u8be5\u8bf7\u6c42\u7684\u3002</p> <pre><code>    function onmessage(message, handle) {  \n        if (message.act === 'newconn')  \n          onconnection(message, handle);  \n    }  \n\n    function onconnection(message, handle) {  \n      const key = message.key;  \n      const server = handles.get(key);  \n      const accepted = server !== undefined;  \n      // \u56de\u590d\u63a5\u6536\u6210\u529f  \n      send({ ack: message.seq, accepted });  \n\n      if (accepted)  \n         // \u5728net\u6a21\u5757\u8bbe\u7f6e\n        server.onconnection(0, handle);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u5b50\u8fdb\u7a0b\u4f1a\u6267\u884cserver.onconnection\uff0c\u8fd9\u4e2a\u548c\u6211\u4eec\u5206\u6790net\u6a21\u5757\u65f6\u89e6\u53d1onconnection\u4e8b\u4ef6\u662f\u4e00\u6837\u7684\u3002</p>"},{"location":"chapter15-Cluster/#157cluster","title":"15.7\u5b9e\u73b0\u81ea\u5df1\u7684cluster\u6a21\u5757","text":"<p>Node.js\u7684cluster\u5728\u8bf7\u6c42\u5206\u53d1\u65f6\u662f\u6309\u7167\u8f6e\u8be2\u7684\uff0c\u65e0\u6cd5\u6839\u636e\u8fdb\u7a0b\u5f53\u524d\u60c5\u51b5\u505a\u76f8\u5e94\u7684\u5904\u7406\u3002\u4e86\u89e3\u4e86cluster\u6a21\u5757\u7684\u539f\u7406\u540e\uff0c\u6211\u4eec\u81ea\u5df1\u6765\u5b9e\u73b0\u4e00\u4e2acluster\u6a21\u5757\u3002</p>"},{"location":"chapter15-Cluster/#1571","title":"15.7.1 \u8f6e\u8be2\u6a21\u5f0f","text":"<p>\u6574\u4f53\u67b6\u6784\u5982\u56fe15-3\u6240\u793a\u3002  \u56fe15-3 Parent.js</p> <pre><code>    const childProcess = require('child_process');  \n    const net = require('net');  \n    const workers = [];  \n    const workerNum = 10;  \n    let index = 0;  \n    for (let i = 0; i &lt; workerNum; i++) {  \n      workers.push(childProcess.fork('child.js', {env: {index: i}}));\n    }  \n\n    const server = net.createServer((client) =&gt; {  \n        workers[index].send(null, client);  \n        console.log('dispatch to', index);  \n        index = (index + 1) % workerNum;  \n    });  \n    server.listen(11111);  \n</code></pre> <p>child.js</p> <pre><code>    process.on('message', (message, client) =&gt; {  \n        console.log('receive connection from master');  \n    });  \n</code></pre> <p>\u4e3b\u8fdb\u7a0b\u8d1f\u8d23\u76d1\u542c\u8bf7\u6c42\uff0c\u4e3b\u8fdb\u7a0b\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u6309\u7167\u4e00\u5b9a\u7684\u7b97\u6cd5\u628a\u8bf7\u6c42\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u65b9\u5f0f\u4f20\u7ed9worker\u8fdb\u7a0b\uff0cworker\u8fdb\u7a0b\u5c31\u53ef\u4ee5\u5904\u7406\u8fde\u63a5\u4e86\u3002\u5728\u5206\u53d1\u7b97\u6cd5\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u8fdb\u884c\u81ea\u5b9a\u4e49\uff0c\u6bd4\u5982\u6839\u636e\u5f53\u524d\u8fdb\u7a0b\u7684\u8d1f\u8f7d\uff0c\u6b63\u5728\u5904\u7406\u7684\u8fde\u63a5\u6570\u3002</p>"},{"location":"chapter15-Cluster/#1572","title":"15.7.2 \u5171\u4eab\u6a21\u5f0f","text":"<p>\u6574\u4f53\u67b6\u6784\u5982\u56fe15-4\u6240\u793a\u3002  \u56fe15-4 Parent.js</p> <pre><code>    const childProcess = require('child_process');  \n    const net = require('net');  \n    const workers = [];  \n    const workerNum = 10    ;  \n    const handle = net._createServerHandle('127.0.0.1', 11111, 4);  \n\n    for (let i = 0; i &lt; workerNum; i++) {  \n      const worker = childProcess.fork('child.js', {env: {index: i}});  \n        workers.push(worker);  \n       worker.send(null ,handle);  \n       /*\n         \u9632\u6b62\u6587\u4ef6\u63cf\u8ff0\u7b26\u6cc4\u6f0f\uff0c\u4f46\u662f\u91cd\u65b0fork\u5b50\u8fdb\u7a0b\u7684\u65f6\u5019\u5c31\u65e0\u6cd5\n         \u518d\u4f20\u9012\u4e86\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e86\n       */\n       handle.close();\n    }  \n</code></pre> <p>Child.js</p> <pre><code>    const net = require('net');  \n    process.on('message', (message, handle) =&gt; {  \n        net.createServer(() =&gt; {  \n            console.log(process.env.index, 'receive connection');  \n        }).listen({handle});  \n    });  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u4e3b\u8fdb\u7a0b\u8d1f\u8d23\u7ed1\u5b9a\u7aef\u53e3\uff0c\u7136\u540e\u628ahandle\u4f20\u7ed9worker\u8fdb\u7a0b\uff0cworker\u8fdb\u7a0b\u5404\u81ea\u6267\u884clisten\u76d1\u542csocket\u3002\u5f53\u6709\u8fde\u63a5\u5230\u6765\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u9009\u62e9\u67d0\u4e00\u4e2aworker\u8fdb\u7a0b\u5904\u7406\u8be5\u8fde\u63a5\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5171\u4eab\u6a21\u5f0f\u4e0b\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u67b6\u6784\uff0c\u5982\u56fe15-5\u6240\u793a\u3002  \u56fe15-5 \u5b9e\u73b0\u5171\u4eab\u6a21\u5f0f\u7684\u91cd\u70b9\u5728\u4e8e\u7406\u89e3EADDRINUSE\u9519\u8bef\u662f\u600e\u4e48\u6765\u7684\u3002\u5f53\u4e3b\u8fdb\u7a0b\u6267\u884cbind\u7684\u65f6\u5019\uff0c\u7ed3\u6784\u5982\u56fe15-6\u6240\u793a\u3002  \u56fe15-6 \u5982\u679c\u5176\u5b83\u8fdb\u7a0b\u4e5f\u6267\u884cbind\u5e76\u4e14\u7aef\u53e3\u4e5f\u4e00\u6837\uff0c\u5219\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u544a\u8bc9\u6211\u4eec\u7aef\u53e3\u5df2\u7ecf\u88ab\u76d1\u542c\u4e86\uff08EADDRINUSE\uff09\u3002\u4f46\u662f\u5982\u679c\u6211\u4eec\u5728\u5b50\u8fdb\u7a0b\u91cc\u4e0d\u6267\u884cbind\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u7ed5\u8fc7\u8fd9\u4e2a\u9650\u5236\u3002\u90a3\u4e48\u91cd\u70b9\u5728\u4e8e\uff0c\u5982\u4f55\u5728\u5b50\u8fdb\u7a0b\u4e2d\u4e0d\u6267\u884cbind\uff0c\u4f46\u662f\u53c8\u53ef\u4ee5\u7ed1\u5b9a\u5230\u540c\u6837\u7684\u7aef\u53e3\u5462\uff1f\u6709\u4e24\u79cd\u65b9\u5f0f\u3002 1 fork \u6211\u4eec\u77e5\u9053fork\u7684\u65f6\u5019\uff0c\u5b50\u8fdb\u7a0b\u4f1a\u7ee7\u627f\u4e3b\u8fdb\u7a0b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5982\u56fe15-7\u6240\u793a\u3002  \u56fe15-7 \u8fd9\u65f6\u5019\uff0c\u4e3b\u8fdb\u7a0b\u53ef\u4ee5\u6267\u884cbind\u548clisten\uff0c\u7136\u540efork\u5b50\u8fdb\u7a0b\uff0c\u6700\u540eclose\u6389\u81ea\u5df1\u7684fd\uff0c\u8ba9\u6240\u6709\u7684\u8fde\u63a5\u90fd\u7531\u5b50\u8fdb\u7a0b\u5904\u7406\u5c31\u884c\u3002\u4f46\u662f\u5728Node.js\u4e2d\uff0c\u6211\u4eec\u65e0\u6cd5\u5b9e\u73b0\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\u3002 2 \u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u9012 Node.js\u7684\u5b50\u8fdb\u7a0b\u662f\u901a\u8fc7fork+exec\u6a21\u5f0f\u521b\u5efa\u7684\uff0c\u5e76\u4e14Node.js\u6587\u4ef6\u63cf\u8ff0\u7b26\u8bbe\u7f6e\u4e86close_on_exec\u6807\u8bb0\uff0c\u8fd9\u5c31\u610f\u5473\u7740\uff0c\u5728Node.js\u4e2d\uff0c\u521b\u5efa\u5b50\u8fdb\u7a0b\u540e\uff0c\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u7ed3\u6784\u4f53\u5982\u56fe15-8\u6240\u793a\uff08\u6709\u6807\u51c6\u8f93\u5165\u3001\u6807\u51c6\u8f93\u51fa\u3001\u6807\u51c6\u9519\u8bef\u4e09\u4e2afd\uff09\u3002  \u56fe15-8 \u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u9012\u7684\u65b9\u5f0f\u3002\u628a\u65b9\u5f0f1\u4e2d\u62ff\u4e0d\u5230\u7684fd\u4f20\u7ed9\u5b50\u8fdb\u7a0b\u3002\u56e0\u4e3a\u5728Node.js\u4e2d\uff0c\u867d\u7136\u6211\u4eec\u62ff\u4e0d\u5230fd\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u62ff\u5f97\u5230fd\u5bf9\u5e94\u7684handle\uff0c\u6211\u4eec\u901a\u8fc7IPC\u4f20\u8f93handle\u7684\u65f6\u5019\uff0cNode.js\u4f1a\u4e3a\u6211\u4eec\u5904\u7406fd\u7684\u95ee\u9898\u3002\u6700\u540e\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5904\u7406\u3002\u7ed3\u6784\u5982\u56fe15-9\u6240\u793a\u3002  \u56fe15-9 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u5c31\u7ed5\u8fc7\u4e86bind\u540c\u4e00\u4e2a\u7aef\u53e3\u7684\u95ee\u9898\u3002\u901a\u8fc7\u4ee5\u4e0a\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u77e5\u9053\u7ed5\u8fc7bind\u7684\u95ee\u9898\u91cd\u70b9\u5728\u4e8e\u8ba9\u4e3b\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u5171\u4eabsocket\u800c\u4e0d\u662f\u5355\u72ec\u6267\u884cbind\u3002\u5bf9\u4e8e\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0cNode.js\u4e2d\u652f\u6301\u5f88\u591a\u79cd\u65b9\u5f0f\u3002\u4e0a\u9762\u7684\u65b9\u5f0f\u662f\u5b50\u8fdb\u7a0b\u5404\u81ea\u6267\u884clisten\u3002\u8fd8\u6709\u53e6\u4e00\u79cd\u6a21\u5f0f\u5982\u4e0b parent.js</p> <pre><code>    const childProcess = require('child_process');  \n    const net = require('net');  \n    const workers = [];  \n    const workerNum = 10;  \n    const server = net.createServer(() =&gt; {  \n        console.log('master receive connection');  \n    })  \n    server.listen(11111);  \n    for (let i = 0; i &lt; workerNum; i++) {  \n        const worker = childProcess.fork('child.js', {env: {index: i}});  \n        workers.push(worker);  \n        worker.send(null, server);  \n    }  \n</code></pre> <p>child.js</p> <pre><code>    const net = require('net');  \n    process.on('message', (message, server) =&gt; {  \n        server.on('connection', () =&gt; {  \n            console.log(process.env.index, 'receive connection');  \n        })  \n    });  \n</code></pre> <p>\u4e0a\u9762\u7684\u65b9\u5f0f\u4e2d\uff0c\u4e3b\u8fdb\u7a0b\u5b8c\u6210\u4e86bind\u548clisten\u3002\u7136\u540e\u628aserver\u5b9e\u4f8b\u4f20\u7ed9\u5b50\u8fdb\u7a0b\uff0c\u5b50\u8fdb\u7a0b\u5c31\u53ef\u4ee5\u76d1\u542c\u8fde\u63a5\u7684\u5230\u6765\u4e86\u3002\u8fd9\u65f6\u5019\u4e3b\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u90fd\u53ef\u4ee5\u5904\u7406\u8fde\u63a5\u3002 \u6700\u540e\u5199\u4e00\u4e2a\u5ba2\u6237\u7aef\u6d4b\u8bd5\u3002 \u5ba2\u6237\u7aef</p> <pre><code>    const net = require('net');  \n    for (let i = 0; i &lt; 50; i++) {  \n        net.connect({port: 11111});  \n    }  \n</code></pre> <p>\u6267\u884cclient\u6211\u4eec\u5c31\u53ef\u4ee5\u770b\u5230\u591a\u8fdb\u7a0b\u5904\u7406\u8fde\u63a5\u7684\u60c5\u51b5\u3002</p>"},{"location":"chapter16-UDP/","title":"16-UDP","text":"<p>\u672c\u7ae0\u4ecb\u7ecdNode.js\u4e2d\u7684UDP\u6a21\u5757\uff0cUDP\u662f\u4f20\u8f93\u5c42\u975e\u9762\u5411\u8fde\u63a5\u7684\u4e0d\u53ef\u9760\u534f\u8bae\uff0c\u4f7f\u7528UDP\u65f6,\u4e0d\u9700\u8981\u5efa\u7acb\u8fde\u63a5\u5c31\u53ef\u4ee5\u5f80\u5bf9\u7aef\u76f4\u63a5\u53d1\u9001\u6570\u636e\uff0c\u51cf\u5c11\u4e86\u4e09\u6b21\u63e1\u624b\u5e26\u6765\u7684\u65f6\u5ef6\uff0c\u4f46\u662fUDP\u7684\u4e0d\u53ef\u9760\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6570\u636e\u4e22\u5931\uff0c\u6240\u4ee5\u6bd4\u8f83\u9002\u5408\u8981\u6c42\u65f6\u5ef6\u4f4e\uff0c\u5c11\u91cf\u4e22\u5305\u4e0d\u5f71\u54cd\u6574\u4f53\u529f\u80fd\u7684\u573a\u666f\uff0c\u53e6\u5916UDP\u652f\u6301\u591a\u64ad\u3001\u7aef\u53e3\u590d\u7528\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4e00\u6b21\u7ed9\u591a\u4e2a\u4e3b\u673a\u7684\u591a\u4e2a\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\u3002\u4e0b\u9762\u6211\u4eec\u5f00\u59cb\u5206\u6790\u4e00\u4e0bUDP\u7684\u76f8\u5173\u5185\u5bb9\u3002</p>"},{"location":"chapter16-UDP/#161-cudp","title":"16.1 \u5728C\u8bed\u8a00\u4e2d\u4f7f\u7528UDP","text":"<p>\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b\u5728C\u8bed\u8a00\u4e2d\u5982\u4f55\u4f7f\u7528UDP\u529f\u80fd\uff0c\u8fd9\u662fNode.js\u7684\u5e95\u5c42\u57fa\u7840\u3002</p>"},{"location":"chapter16-UDP/#1611","title":"16.1.1 \u670d\u52a1\u5668\u6d41\u7a0b\uff08\u4f2a\u4ee3\u7801\uff09","text":"<pre><code>    // \u7533\u8bf7\u4e00\u4e2asocket    \n    int fd = socket(...);    \n    // \u7ed1\u5b9a\u4e00\u4e2a\u4f17\u6240\u5468\u77e5\u7684\u5730\u5740\uff0c\u50cfTCP\u4e00\u6837    \n    bind(fd, ip\uff0c port);    \n    // \u76f4\u63a5\u963b\u585e\u7b49\u5f85\u6d88\u606f\u7684\u5230\u6765\uff0cUDP\u4e0d\u9700\u8981listen    \n    recvmsg()\uff1b  \n</code></pre>"},{"location":"chapter16-UDP/#1612","title":"16.1.2 \u5ba2\u6237\u7aef\u6d41\u7a0b","text":"<p>\u5ba2\u6237\u7aef\u7684\u6d41\u7a0b\u6709\u591a\u79cd\u65b9\u5f0f\uff0c\u539f\u56e0\u5728\u4e8e\u6e90IP\u3001\u7aef\u53e3\u548c\u76ee\u7684IP\u3001\u7aef\u53e3\u53ef\u4ee5\u6709\u591a\u79cd\u8bbe\u7f6e\u65b9\u5f0f\u3002\u4e0d\u50cf\u670d\u52a1\u5668\u4e00\u6837\uff0c\u670d\u52a1\u5668\u7aef\u53e3\u662f\u9700\u8981\u5bf9\u5916\u516c\u5e03\u7684\uff0c\u5426\u5219\u5ba2\u6237\u7aef\u5c31\u65e0\u6cd5\u627e\u5230\u76ee\u7684\u5730\u8fdb\u884c\u901a\u4fe1\u3002\u8fd9\u5c31\u610f\u5473\u7740\u670d\u52a1\u5668\u7684\u7aef\u53e3\u662f\u9700\u8981\u7528\u6237\u663e\u5f0f\u6307\u5b9a\u7684\uff0c\u800c\u5ba2\u6237\u7aef\u5219\u4e0d\u7136\uff0c\u5ba2\u6237\u7aef\u7684IP\u548c\u7aef\u53e3\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6307\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u7531\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a\uff0c\u4e0b\u9762\u6211\u4eec\u770b\u770b\u5404\u79cd\u4f7f\u7528\u65b9\u5f0f\u3002</p>"},{"location":"chapter16-UDP/#16121-ip","title":"16.1.2.1 \u663e\u5f0f\u6307\u5b9a\u6e90IP\u548c\u7aef\u53e3","text":"<pre><code>    // \u7533\u8bf7\u4e00\u4e2asocket  \n    int fd = socket(...);  \n    // \u7ed1\u5b9a\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684\u5730\u5740  \n    bind(fd, ip\uff0c port);  \n    // \u7ed9\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e  \n    sendto(fd, \u670d\u52a1\u5668ip,\u670d\u52a1\u5668\u7aef\u53e3, data);  \n</code></pre> <p>\u56e0\u4e3aUDP\u4e0d\u662f\u9762\u5411\u8fde\u63a5\u7684\uff0c\u6240\u4ee5\u4f7f\u7528UDP\u65f6\uff0c\u4e0d\u9700\u8981\u8c03\u7528connect\u5efa\u7acb\u8fde\u63a5\uff0c\u53ea\u8981\u6211\u4eec\u77e5\u9053\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c\u76f4\u63a5\u7ed9\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u5373\u53ef\u3002\u800c\u9762\u5411\u8fde\u63a5\u7684TCP\uff0c\u9996\u5148\u9700\u8981\u901a\u8fc7connect\u53d1\u8d77\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u8fde\u63a5\uff0c\u5efa\u7acb\u8fde\u63a5\u7684\u672c\u8d28\u662f\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u8bb0\u5f55\u5bf9\u7aef\u7684\u4fe1\u606f\uff0c\u8fd9\u662f\u540e\u9762\u901a\u4fe1\u7684\u901a\u884c\u8bc1\u3002</p>"},{"location":"chapter16-UDP/#16122-ip","title":"16.1.2.2 \u7531\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a\u6e90ip\u548c\u7aef\u53e3","text":"<pre><code>    // \u7533\u8bf7\u4e00\u4e2asocket  \n    int fd = socket(...);  \n    // \u7ed9\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e  \n    sendto(fd, \u670d\u52a1\u5668ip,\u670d\u52a1\u5668\u7aef\u53e3, data)  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u8fd9\u91cc\u6ca1\u6709\u7ed1\u5b9a\u5ba2\u6237\u7aef\u7684\u6e90ip\u548c\u7aef\u53e3\uff0c\u800c\u662f\u76f4\u63a5\u5c31\u7ed9\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u3002\u5982\u679c\u7528\u6237\u4e0d\u6307\u5b9aip\u548c\u7aef\u53e3\uff0c\u5219\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u63d0\u4f9b\u9ed8\u8ba4\u7684\u6e90ip\u548c\u7aef\u53e3\u3002\u5bf9\u4e8eip\uff0c\u5982\u679c\u662f\u591a\u5bbf\u4e3b\u4e3b\u673a\uff0c\u6bcf\u6b21\u8c03\u7528sendto\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u52a8\u6001\u9009\u62e9\u6e90ip\u3002\u5bf9\u4e8e\u7aef\u53e3\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u5728\u7b2c\u4e00\u6b21\u8c03\u7528sendto\u7684\u65f6\u5019\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u7aef\u53e3\uff0c\u5e76\u4e14\u4e0d\u80fd\u4fee\u6539\u3002\u53e6\u5916\u8fd8\u6709\u4e00\u79cd\u4f7f\u7528\u65b9\u5f0f\u3002</p> <pre><code>    // \u7533\u8bf7\u4e00\u4e2asocket  \n    int fd = socket(...);  \n    connect(fd, \u670d\u52a1\u5668ip\uff0c\u670d\u52a1\u5668\u7aef\u53e3);  \n    /*\n      \u7ed9\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e,\u6216\u8005sendto(fd, null,null, data)\uff0c\n      \u8c03\u7528sendto\u5219\u4e0d\u9700\u8981\u518d\u6307\u5b9a\u670d\u52a1\u5668ip\u548c\u7aef\u53e3  \n    */\n    write(fd, data);  \n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u5148\u8c03\u7528connect\u7ed1\u5b9a\u670d\u52a1\u5668ip\u548c\u7aef\u53e3\u5230fd\uff0c\u7136\u540e\u76f4\u63a5\u8c03\u7528write\u53d1\u9001\u6570\u636e\u3002 \u867d\u7136\u4f7f\u7528\u65b9\u5f0f\u5f88\u591a\uff0c\u4f46\u662f\u5f52\u6839\u5230\u5e95\u8fd8\u662f\u5bf9\u56db\u5143\u7ec4\u8bbe\u7f6e\u7684\u7ba1\u7406\u3002bind\u662f\u7ed1\u5b9a\u6e90ip\u7aef\u53e3\u5230fd\uff0cconnect\u662f\u7ed1\u5b9a\u670d\u52a1\u5668ip\u7aef\u53e3\u5230fd\u3002\u5bf9\u4e8e\u6e90ip\u548c\u7aef\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3b\u52a8\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u968f\u673a\u9009\u62e9\u3002\u5bf9\u4e8e\u76ee\u7684ip\u548c\u7aef\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u53d1\u9001\u6570\u636e\u524d\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u5728\u53d1\u9001\u6570\u636e\u65f6\u8bbe\u7f6e\u3002\u8fd9\u5c31\u5f62\u6210\u4e86\u591a\u79cd\u4f7f\u7528\u65b9\u5f0f\u3002</p>"},{"location":"chapter16-UDP/#1613","title":"16.1.3 \u53d1\u9001\u6570\u636e","text":"<p>\u6211\u4eec\u521a\u624d\u770b\u5230\u4f7f\u7528UDP\u4e4b\u524d\u90fd\u9700\u8981\u8c03\u7528socket\u51fd\u6570\u7533\u8bf7\u4e00\u4e2asocket\uff0c\u867d\u7136\u8c03\u7528socket\u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2afd\uff0c\u4f46\u662f\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u7684\u786e\u662f\u65b0\u5efa\u4e86\u4e00\u4e2asocket\u7ed3\u6784\u4f53\uff0cfd\u53ea\u662f\u4e00\u4e2a\u7d22\u5f15\uff0c\u64cd\u4f5c\u8fd9\u4e2afd\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6839\u636e\u8fd9\u4e2afd\u627e\u5230\u5bf9\u5e94\u7684socket\u3002socket\u662f\u4e00\u4e2a\u975e\u5e38\u590d\u6742\u7684\u7ed3\u6784\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u3002\u8fd9\u4e2a\u5bf9\u8c61\u4e2d\u6709\u4e24\u4e2a\u5c5e\u6027\uff0c\u4e00\u4e2a\u662f\u8bfb\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u4e00\u4e2a\u662f\u5199\u7f13\u51b2\u533a\u5927\u5c0f\u3002\u5f53\u6211\u4eec\u53d1\u9001\u6570\u636e\u7684\u65f6\u5019\uff0c\u867d\u7136\u7406\u8bba\u4e0a\u53ef\u4ee5\u53d1\u9001\u4efb\u610f\u5927\u5c0f\u7684\u6570\u636e\uff0c\u4f46\u662f\u56e0\u4e3a\u53d7\u9650\u4e8e\u53d1\u9001\u7f13\u51b2\u533a\u7684\u5927\u5c0f\uff0c\u5982\u679c\u9700\u8981\u53d1\u9001\u7684\u6570\u636e\u6bd4\u5f53\u524d\u7f13\u51b2\u533a\u5927\u5c0f\u5927\u5219\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u95ee\u9898\uff0c\u6211\u4eec\u5206\u60c5\u51b5\u5206\u6790\u4e00\u4e0b\u3002  1 \u53d1\u9001\u7684\u6570\u636e\u5927\u5c0f\u6bd4\u5f53\u524d\u7f13\u51b2\u533a\u5927\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u975e\u963b\u585e\u6a21\u5f0f\uff0c\u5219\u8fd4\u56deEAGAIN\uff0c\u5982\u679c\u662f\u963b\u585e\u6a21\u5f0f\uff0c\u5219\u4f1a\u5f15\u8d77\u8fdb\u7a0b\u7684\u963b\u585e\u3002  2 \u5982\u679c\u53d1\u9001\u7684\u6570\u636e\u5927\u5c0f\u6bd4\u7f13\u51b2\u533a\u7684\u6700\u5927\u503c\u8fd8\u5927\uff0c\u5219\u4f1a\u5bfc\u81f4\u62a5\u9519EMSGSIZE\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u5206\u5305\u53d1\u9001\u3002\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\u5230\u4fee\u6539\u7f13\u51b2\u533a\u6700\u5927\u503c\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u8fd9\u4e2a\u5927\u5c0f\u4e5f\u662f\u6709\u9650\u5236\u7684\u3002 \u8bb2\u5b8c\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\uff0c\u6211\u4eec\u518d\u6765\u770b\u770b\u6b63\u5e38\u7684\u6d41\u7a0b\uff0c\u6211\u4eec\u770b\u770b\u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5305\u7684\u6d41\u7a0b  1 \u9996\u5148\u5728socket\u7684\u5199\u7f13\u51b2\u533a\u7533\u8bf7\u4e00\u5757\u5185\u5b58\u7528\u4e8e\u6570\u636e\u53d1\u9001\u3002  2 \u8c03\u7528IP\u5c42\u53d1\u9001\u63a5\u53e3\uff0c\u5982\u679c\u6570\u636e\u5305\u5927\u5c0f\u8d85\u8fc7\u4e86IP\u5c42\u7684\u9650\u5236\uff0c\u5219\u9700\u8981\u5206\u5305\u3002 3 \u7ee7\u7eed\u8c03\u7528\u5e95\u5c42\u7684\u63a5\u53e3\u628a\u6570\u636e\u53d1\u5230\u7f51\u7edc\u4e0a\u3002 \u56e0\u4e3aUDP\u4e0d\u662f\u53ef\u9760\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u7f13\u5b58\u8fd9\u4e2a\u6570\u636e\u5305\uff08TCP\u534f\u8bae\u5219\u9700\u8981\u7f13\u5b58\u8fd9\u4e2a\u6570\u636e\u5305\uff0c\u7528\u4e8e\u8d85\u65f6\u91cd\u4f20\uff09\u3002 \u8fd9\u5c31\u662fUDP\u53d1\u9001\u6570\u636e\u7684\u6d41\u7a0b\u3002</p>"},{"location":"chapter16-UDP/#1614","title":"16.1.4 \u63a5\u6536\u6570\u636e","text":"<p>\u5f53\u6536\u5230\u4e00\u4e2aUDP\u6570\u636e\u5305\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9996\u5148\u4f1a\u628a\u8fd9\u4e2a\u6570\u636e\u5305\u7f13\u5b58\u5230socket\u7684\u7f13\u51b2\u533a\uff0c\u5982\u679c\u6536\u5230\u7684\u6570\u636e\u5305\u6bd4\u5f53\u524d\u7f13\u51b2\u533a\u5927\u5c0f\u5927\uff0c\u5219\u4e22\u5f03\u6570\u636e\u5305\uff0c\u5426\u5219\u628a\u6570\u636e\u5305\u6302\u8f7d\u5230\u63a5\u6536\u961f\u5217\uff0c\u7b49\u7528\u6237\u6765\u8bfb\u53d6\u7684\u65f6\u5019\uff0c\u5c31\u9010\u4e2a\u6458\u4e0b\u63a5\u6536\u961f\u5217\u7684\u8282\u70b9\u3002UDP\u548cTCP\u4e0d\u4e00\u6837\uff0c\u867d\u7136\u5b83\u4eec\u90fd\u6709\u4e00\u4e2a\u7f13\u5b58\u4e86\u6d88\u606f\u7684\u961f\u5217\uff0c\u4f46\u662f\u5f53\u7528\u6237\u8bfb\u53d6\u6570\u636e\u65f6\uff0cUDP\u6bcf\u6b21\u53ea\u4f1a\u8fd4\u56de\u4e00\u4e2aUDP\u6570\u636e\u5305\uff0c\u800cTCP\u662f\u4f1a\u6839\u636e\u7528\u6237\u8bbe\u7f6e\u7684\u5927\u5c0f\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a\u5305\u91cc\u7684\u6570\u636e\u3002\u56e0\u4e3aTCP\u662f\u9762\u5411\u5b57\u8282\u6d41\u7684\uff0c\u800cUDP\u662f\u9762\u5411\u6570\u636e\u5305\u7684\u3002</p>"},{"location":"chapter16-UDP/#162-udpnodejs","title":"16.2 UDP\u6a21\u5757\u5728Node.js\u4e2d\u7684\u5b9e\u73b0","text":"<p>\u4e86\u89e3\u4e86UDP\u7684\u4e00\u4e9b\u57fa\u7840\u548c\u4f7f\u7528\u540e\uff0c\u6211\u4eec\u5f00\u59cb\u5206\u6790\u5728Node.js\u4e2d\u662f\u5982\u4f55\u4f7f\u7528UDP\u7684\uff0cNode.js\u53c8\u662f\u5982\u4f55\u5b9e\u73b0UDP\u6a21\u5757\u7684\u3002</p>"},{"location":"chapter16-UDP/#1621","title":"16.2.1 \u670d\u52a1\u5668","text":"<p>\u6211\u4eec\u4ece\u4e00\u4e2a\u4f7f\u7528\u4f8b\u5b50\u5f00\u59cb\u770b\u770bUDP\u6a21\u5757\u7684\u4f7f\u7528\u3002</p> <pre><code>    const dgram = require('dgram');  \n    // \u521b\u5efa\u4e00\u4e2aUDP\u670d\u52a1\u5668  \n    const server = dgram.createSocket('udp4');  \n    // \u76d1\u542cUDP\u6570\u636e\u7684\u5230\u6765  \n    server.on('message', (msg, rinfo) =&gt; {  \n      // \u5904\u7406\u6570\u636e  \n    });  \n    // \u7ed1\u5b9a\u7aef\u53e3  \n    server.bind(41234);  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u521b\u5efa\u4e00\u4e2aUDP\u670d\u52a1\u5668\u5f88\u7b80\u5355\uff0c\u9996\u5148\u7533\u8bf7\u4e00\u4e2asocket\u5bf9\u8c61\uff0c\u5728Node.js\u4e2d\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u4e00\u6837\uff0csocket\u662f\u5bf9\u7f51\u7edc\u901a\u4fe1\u7684\u4e00\u4e2a\u62bd\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u7406\u89e3\u6210\u5bf9\u4f20\u8f93\u5c42\u7684\u62bd\u8c61\uff0c\u5b83\u53ef\u4ee5\u4ee3\u8868TCP\u4e5f\u53ef\u4ee5\u4ee3\u8868UDP\u3002\u6211\u4eec\u770b\u4e00\u4e0bcreateSocket\u505a\u4e86\u4ec0\u4e48\u3002</p> <pre><code>    function createSocket(type, listener) {  \n      return new Socket(type, listener);  \n    }  \n    function Socket(type, listener) {  \n      EventEmitter.call(this);  \n      let lookup;  \n      let recvBufferSize;  \n      let sendBufferSize;  \n\n      let options;  \n      if (type !== null &amp;&amp; typeof type === 'object') {  \n        options = type;  \n        type = options.type;  \n        lookup = options.lookup;  \n        recvBufferSize = options.recvBufferSize;  \n        sendBufferSize = options.sendBufferSize;  \n      }  \n      const handle = newHandle(type, lookup);   \n      this.type = type;  \n      if (typeof listener === 'function')  \n        this.on('message', listener);  \n      // \u4fdd\u5b58\u4e0a\u4e0b\u6587\n      this[kStateSymbol] = {  \n        handle,  \n        receiving: false,  \n        // \u8fd8\u6ca1\u6709\u6267\u884cbind\n        bindState: BIND_STATE_UNBOUND,  \n        connectState: CONNECT_STATE_DISCONNECTED,  \n        queue: undefined,  \n        // \u7aef\u53e3\u590d\u7528\uff0c\u53ea\u4f7f\u4e8e\u591a\u64ad   \n        reuseAddr: options &amp;&amp; options.reuseAddr, \n        ipv6Only: options &amp;&amp; options.ipv6Only,  \n        // \u53d1\u9001\u7f13\u51b2\u533a\u548c\u63a5\u6536\u7f13\u51b2\u533a\u5927\u5c0f\n        recvBufferSize,  \n        sendBufferSize  \n      };  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u4e00\u4e2asocket\u5bf9\u8c61\u662f\u5bf9handle\u7684\u4e00\u4e2a\u5c01\u88c5\u3002\u6211\u4eec\u770b\u770bhandle\u662f\u4ec0\u4e48\u3002</p> <pre><code>    function newHandle(type, lookup) {  \n      // \u7528\u4e8edns\u89e3\u6790\u7684\u51fd\u6570\uff0c\u6bd4\u5982\u6211\u4eec\u8c03send\u7684\u65f6\u5019\uff0c\u4f20\u7684\u662f\u4e00\u4e2a\u57df\u540d  \n      if (lookup === undefined) {  \n        if (dns === undefined) {  \n          dns = require('dns');  \n        }  \n        lookup = dns.lookup;  \n      }   \n\n      if (type === 'udp4') {  \n        const handle = new UDP();  \n        handle.lookup = lookup4.bind(handle, lookup);  \n        return handle;  \n      }  \n      // \u5ffd\u7565ipv6\u7684\u5904\u7406  \n    }  \n</code></pre> <p>handle\u53c8\u662f\u5bf9UDP\u6a21\u5757\u7684\u5c01\u88c5\uff0cUDP\u662fC++\u6a21\u5757\uff0c\u5728\u4e4b\u524d\u7ae0\u8282\u4e2d\u6211\u4eec\u8bb2\u8fc7\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8be6\u7ec6\u8bb2\u8ff0\u4e86\uff0c\u5f53\u6211\u4eec\u5728JS\u5c42new UDP\u7684\u65f6\u5019\uff0c\u4f1a\u65b0\u5efa\u4e00\u4e2aC++\u5bf9\u8c61\u3002</p> <pre><code>    UDPWrap::UDPWrap(Environment* env, Local&lt;Object&gt; object)  \n        : HandleWrap(env,  \n                     object,  \n                     reinterpret_cast&lt;uv_handle_t*&gt;(&amp;handle_),  \n                     AsyncWrap::PROVIDER_UDPWRAP) {  \n      int r = uv_udp_init(env-&gt;event_loop(), &amp;handle_);  \n    }  \n</code></pre> <p>\u6267\u884c\u4e86uv_udp_init\u521d\u59cb\u5316udp\u5bf9\u5e94\u7684handle\uff08uv_udp_t\uff09\u3002\u6211\u4eec\u770b\u4e00\u4e0bLibuv\u7684\u5b9a\u4e49\u3002</p> <pre><code>    int uv_udp_init_ex(uv_loop_t* loop, uv_udp_t* handle, unsigned int flags) {  \n      int domain;  \n      int err;  \n      int fd;  \n\n      /* Use the lower 8 bits for the domain */  \n      domain = flags &amp; 0xFF;  \n      // \u7533\u8bf7\u4e00\u4e2asocket\uff0c\u8fd4\u56de\u4e00\u4e2afd  \n      fd = uv__socket(domain, SOCK_DGRAM, 0);  \n      uv__handle_init(loop, (uv_handle_t*)handle, UV_UDP);  \n      handle-&gt;alloc_cb = NULL;  \n      handle-&gt;recv_cb = NULL;  \n      handle-&gt;send_queue_size = 0;  \n      handle-&gt;send_queue_count = 0;  \n      /*\n       \u521d\u59cb\u5316IO\u89c2\u5bdf\u8005\uff08\u8fd8\u6ca1\u6709\u6ce8\u518c\u5230\u4e8b\u4ef6\u5faa\u73af\u7684Poll IO\u9636\u6bb5\uff09\uff0c\n       \u76d1\u542c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u662ffd\uff0c\u56de\u8c03\u662fuv__udp_io  \n      */\n      uv__io_init(&amp;handle-&gt;io_watcher, uv__udp_io, fd);  \n      // \u521d\u59cb\u5316\u5199\u961f\u5217  \n      QUEUE_INIT(&amp;handle-&gt;write_queue);  \n      QUEUE_INIT(&amp;handle-&gt;write_completed_queue);  \n      return 0;  \n    }  \n</code></pre> <p>\u5c31\u662f\u6211\u4eec\u5728JS\u5c42\u6267\u884cdgram.createSocket('udp4')\u7684\u65f6\u5019\uff0c\u5728Node.js\u4e2d\u4e3b\u8981\u7684\u6267\u884c\u8fc7\u7a0b\u3002\u56de\u5230\u6700\u5f00\u59cb\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u6267\u884cbind\u7684\u65f6\u5019\u7684\u903b\u8f91\u3002</p> <pre><code>    Socket.prototype.bind = function(port_, address_ /* , callback */) {  \n      let port = port_;  \n      // socket\u7684\u4e0a\u4e0b\u6587  \n      const state = this[kStateSymbol];  \n      // \u5df2\u7ecf\u7ed1\u5b9a\u8fc7\u4e86\u5219\u62a5\u9519  \n      if (state.bindState !== BIND_STATE_UNBOUND)  \n        throw new ERR_SOCKET_ALREADY_BOUND();  \n      // \u5426\u5219\u6807\u8bb0\u5df2\u7ecf\u7ed1\u5b9a\u4e86  \n      state.bindState = BIND_STATE_BINDING;  \n      // \u6ca1\u4f20\u5730\u5740\u5219\u9ed8\u8ba4\u7ed1\u5b9a\u6240\u6709\u5730\u5740  \n      if (!address) {  \n        if (this.type === 'udp4')  \n          address = '0.0.0.0';  \n        else  \n          address = '::';  \n      }  \n      // dns\u89e3\u6790\u540e\u5728\u7ed1\u5b9a\uff0c\u5982\u679c\u9700\u8981\u7684\u8bdd  \n      state.handle.lookup(address, (err, ip) =&gt; {  \n        if (err) {  \n          state.bindState = BIND_STATE_UNBOUND;  \n          this.emit('error', err);  \n          return;  \n        }  \n        const err = state.handle.bind(ip, port || 0, flags);  \n        if (err) {  \n           const ex = exceptionWithHostPort(err, 'bind', ip, port);\n           state.bindState = BIND_STATE_UNBOUND;  \n           this.emit('error', ex);  \n           // Todo: close?  \n           return;  \n         }  \n\n         startListening(this);  \n      return this;  \n    }  \n</code></pre> <p>bind\u51fd\u6570\u4e3b\u8981\u7684\u903b\u8f91\u662fhandle.bind\u548cstartListening\u3002\u6211\u4eec\u4e00\u4e2a\u4e2a\u770b\u3002\u6211\u4eec\u770b\u4e00\u4e0bC++\u5c42\u7684bind\u3002</p> <pre><code>    void UDPWrap::DoBind(const FunctionCallbackInfo&lt;Value&gt;&amp; args, int family) {  \n      UDPWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap,  \n                              args.Holder(),  \n                              args.GetReturnValue().Set(UV_EBADF));  \n\n      // bind(ip, port, flags)  \n      CHECK_EQ(args.Length(), 3);  \n      node::Utf8Value address(args.GetIsolate(), args[0]);  \n      Local&lt;Context&gt; ctx = args.GetIsolate()-&gt;GetCurrentContext();  \n      uint32_t port, flags;  \n      struct sockaddr_storage addr_storage;  \n      int err = sockaddr_for_family(family, \n                                       address.out(), \n                                       port, \n                                       &amp;addr_storage);  \n      if (err == 0) {  \n        err = uv_udp_bind(&amp;wrap-&gt;handle_,  \n                          reinterpret_cast&lt;const sockaddr*&gt;(&amp;addr_storage),  \n                          flags);  \n      }  \n\n      args.GetReturnValue().Set(err);  \n    }       \n</code></pre> <p>\u4e5f\u6ca1\u6709\u592a\u591a\u903b\u8f91\uff0c\u5904\u7406\u53c2\u6570\u7136\u540e\u6267\u884cuv_udp_bind\u8bbe\u7f6e\u4e00\u4e9b\u6807\u8bb0\u3001\u5c5e\u6027\u548c\u7aef\u53e3\u590d\u7528\uff08\u7aef\u53e3\u590d\u7528\u540e\u7eed\u4f1a\u5355\u72ec\u5206\u6790\uff09\uff0c\u7136\u540e\u6267\u884c\u64cd\u4f5c\u7cfb\u7edfbind\u7684\u51fd\u6570\u628a\u672c\u7aef\u7684ip\u548c\u7aef\u53e3\u4fdd\u5b58\u5230socket\u4e2d\u3002\u6211\u4eec\u7ee7\u7eed\u770bstartListening\u3002</p> <pre><code>    function startListening(socket) {  \n      const state = socket[kStateSymbol];  \n      // \u6709\u6570\u636e\u65f6\u7684\u56de\u8c03\uff0c\u89e6\u53d1message\u4e8b\u4ef6  \n      state.handle.onmessage = onMessage;  \n      // \u91cd\u70b9\uff0c\u5f00\u59cb\u76d1\u542c\u6570\u636e  \n      state.handle.recvStart();  \n      state.receiving = true;  \n      state.bindState = BIND_STATE_BOUND;  \n       // \u8bbe\u7f6e\u64cd\u4f5c\u7cfb\u7edf\u7684\u63a5\u6536\u548c\u53d1\u9001\u7f13\u51b2\u533a\u5927\u5c0f\n      if (state.recvBufferSize)  \n        bufferSize(socket, state.recvBufferSize, RECV_BUFFER);  \n\n      if (state.sendBufferSize)  \n        bufferSize(socket, state.sendBufferSize, SEND_BUFFER);  \n\n      socket.emit('listening');  \n    }  \n</code></pre> <p>\u91cd\u70b9\u662frecvStart\u51fd\u6570\uff0c\u6211\u4eec\u770bC++\u7684\u5b9e\u73b0\u3002</p> <pre><code>    void UDPWrap::RecvStart(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      UDPWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap,  \n                              args.Holder(),  \n                              args.GetReturnValue().Set(UV_EBADF));  \n      int err = uv_udp_recv_start(&amp;wrap-&gt;handle_, OnAlloc, OnRecv);  \n      // UV_EALREADY means that the socket is already bound but that's okay  \n      if (err == UV_EALREADY)  \n        err = 0;  \n      args.GetReturnValue().Set(err);  \n    }  \n</code></pre> <p>OnAlloc, OnRecv\u5206\u522b\u662f\u5206\u914d\u5185\u5b58\u63a5\u6536\u6570\u636e\u7684\u51fd\u6570\u548c\u6570\u636e\u5230\u6765\u65f6\u6267\u884c\u7684\u56de\u8c03\u3002\u7ee7\u7eed\u770bLibuv</p> <pre><code>    int uv__udp_recv_start(uv_udp_t* handle,  \n                           uv_alloc_cb alloc_cb,  \n                           uv_udp_recv_cb recv_cb) {  \n      int err;  \n\n\n      err = uv__udp_maybe_deferred_bind(handle, AF_INET, 0);  \n      if (err)  \n        return err;  \n      // \u4fdd\u5b58\u4e00\u4e9b\u4e0a\u4e0b\u6587  \n      handle-&gt;alloc_cb = alloc_cb;  \n      handle-&gt;recv_cb = recv_cb;  \n      // \u6ce8\u518cIO\u89c2\u5bdf\u8005\u5230loop\uff0c\u5982\u679c\u4e8b\u4ef6\u5230\u6765\uff0c\u7b49\u5230Poll IO\u9636\u6bb5\u5904\u7406  \n      uv__io_start(handle-&gt;loop, &amp;handle-&gt;io_watcher, POLLIN);  \n      uv__handle_start(handle);  \n\n      return 0;  \n    }  \n</code></pre> <p>uv__udp_recv_start\u4e3b\u8981\u662f\u6ce8\u518cIO\u89c2\u5bdf\u8005\u5230loop\uff0c\u7b49\u5f85\u4e8b\u4ef6\u5230\u6765\u7684\u65f6\u5019\uff0c\u5230\u8fd9\uff0c\u670d\u52a1\u5668\u5c31\u542f\u52a8\u4e86\u3002</p>"},{"location":"chapter16-UDP/#1622","title":"16.2.2 \u5ba2\u6237\u7aef","text":"<p>\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0b\u5ba2\u6237\u7aef\u7684\u4f7f\u7528\u65b9\u5f0f\u548c\u6d41\u7a0b</p> <pre><code>    const dgram = require('dgram');  \n    const message = Buffer.from('Some bytes');  \n    const client = dgram.createSocket('udp4');  \n    client.connect(41234, 'localhost', (err) =&gt; {  \n      client.send(message, (err) =&gt; {  \n        client.close();  \n      });  \n    });  \n</code></pre> <p>\u6211\u4eec\u770b\u5230Node.js\u9996\u5148\u8c03\u7528connect\u7ed1\u5b9a\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c\u7136\u540e\u8c03\u7528send\u53d1\u9001\u4fe1\u606f\uff0c\u6700\u540e\u8c03\u7528close\u3002\u6211\u4eec\u4e00\u4e2a\u4e2a\u5206\u6790\u3002\u9996\u5148\u770bconnect\u3002</p> <pre><code>    Socket.prototype.connect = function(port, address, callback) {  \n      port = validatePort(port);  \n      // \u53c2\u6570\u5904\u7406  \n      if (typeof address === 'function') {  \n        callback = address;  \n        address = '';  \n      } else if (address === undefined) {  \n        address = '';  \n      }  \n\n      const state = this[kStateSymbol];  \n      // \u4e0d\u662f\u521d\u59cb\u5316\u72b6\u6001  \n      if (state.connectState !== CONNECT_STATE_DISCONNECTED)  \n        throw new ERR_SOCKET_DGRAM_IS_CONNECTED();  \n      // \u8bbe\u7f6esocket\u72b6\u6001  \n      state.connectState = CONNECT_STATE_CONNECTING;  \n      // \u8fd8\u6ca1\u6709\u7ed1\u5b9a\u5ba2\u6237\u7aef\u5730\u5740\u4fe1\u606f\uff0c\u5219\u5148\u7ed1\u5b9a\u968f\u673a\u5730\u5740\uff08\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a\uff09  \n      if (state.bindState === BIND_STATE_UNBOUND)  \n        this.bind({ port: 0, exclusive: true }, null);  \n      // \u6267\u884cbind\u7684\u65f6\u5019\uff0cstate.bindState\u4e0d\u662f\u540c\u6b65\u8bbe\u7f6e\u7684  \n      if (state.bindState !== BIND_STATE_BOUND) {  \n        enqueue(this, _connect.bind(this, port, address, callback));\n        return;  \n      }  \n\n      _connect.call(this, port, address, callback);  \n    };  \n</code></pre> <p>\u8fd9\u91cc\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f\u5728connect\u4e4b\u524d\u5df2\u7ecf\u8c03\u7528\u4e86bind\uff0c\u7b2c\u4e8c\u79cd\u662f\u6ca1\u6709\u8c03\u7528bind\uff0c\u5982\u679c\u6ca1\u6709\u8c03\u7528bind\uff0c\u5219\u5728connect\u4e4b\u524d\u5148\u8981\u8c03\u7528bind\uff08\u56e0\u4e3abind\u4e2d\u4e0d\u4ec5\u4ec5\u7ed1\u5b9a\u4e86ip\u7aef\u53e3\uff0c\u8fd8\u6709\u7aef\u53e3\u590d\u7528\u7684\u5904\u7406\uff09\u3002\u8fd9\u91cc\u53ea\u5206\u6790\u6ca1\u6709\u8c03\u7528bind\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u8fd9\u662f\u6700\u957f\u7684\u8def\u5f84\u3002bind\u521a\u624d\u6211\u4eec\u5206\u6790\u8fc7\u4e86\uff0c\u6211\u4eec\u4ece\u4ee5\u4e0b\u4ee3\u7801\u7ee7\u7eed\u5206\u6790</p> <pre><code>    if (state.bindState !== BIND_STATE_BOUND) {  \n        enqueue(this, _connect.bind(this, port, address, callback)); \n        return;  \n      }  \n</code></pre> <p>enqueue\u628a\u4efb\u52a1\u52a0\u5165\u4efb\u52a1\u961f\u5217\uff0c\u5e76\u4e14\u76d1\u542c\u4e86listening\u4e8b\u4ef6\uff08\u8be5\u4e8b\u4ef6\u5728bind\u6210\u529f\u540e\u89e6\u53d1\uff09\u3002</p> <pre><code>    function enqueue(self, toEnqueue) {  \n      const state = self[kStateSymbol];  \n      if (state.queue === undefined) {  \n        state.queue = [];  \n        self.once('error', onListenError);  \n        self.once('listening', onListenSuccess);  \n      }  \n      state.queue.push(toEnqueue);  \n    }  \n</code></pre> <p>\u8fd9\u65f6\u5019connect\u51fd\u6570\u5c31\u6267\u884c\u5b8c\u4e86\uff0c\u7b49\u5f85bind\u6210\u529f\u540e\uff08nextTick\uff09\u4f1a\u6267\u884c startListening\u51fd\u6570\u3002</p> <pre><code>    function startListening(socket) {  \n      const state = socket[kStateSymbol];  \n      state.handle.onmessage = onMessage;  \n      // \u6ce8\u518c\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6  \n      state.handle.recvStart();  \n      state.receiving = true;  \n      // \u6807\u8bb0\u5df2bind\u6210\u529f  \n      state.bindState = BIND_STATE_BOUND;  \n      // \u8bbe\u7f6e\u8bfb\u5199\u7f13\u51b2\u533a\u5927\u5c0f\n     if (state.recvBufferSize)  \n       bufferSize(socket, state.recvBufferSize, RECV_BUFFER);  \n\n     if (state.sendBufferSize)  \n       bufferSize(socket, state.sendBufferSize, SEND_BUFFER);  \n     // \u89e6\u53d1listening\u4e8b\u4ef6  \n     socket.emit('listening');  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230startListening\u89e6\u53d1\u4e86listening\u4e8b\u4ef6\uff0c\u4ece\u800c\u6267\u884c\u6211\u4eec\u521a\u624d\u5165\u961f\u7684\u56de\u8c03onListenSuccess\u3002</p> <pre><code>    function onListenSuccess() {  \n      this.removeListener('error', onListenError);  \n      clearQueue.call(this);  \n    }  \n\n    function clearQueue() {  \n      const state = this[kStateSymbol];  \n      const queue = state.queue;  \n      state.queue = undefined;  \n\n      for (const queueEntry of queue)  \n        queueEntry();  \n    }  \n</code></pre> <p>\u56de\u8c03\u5c31\u662f\u628a\u961f\u5217\u4e2d\u7684\u56de\u8c03\u6267\u884c\u4e00\u904d\uff0cconnect\u51fd\u6570\u8bbe\u7f6e\u7684\u56de\u8c03\u662f_connect\u3002</p> <pre><code>    function _connect(port, address, callback) {  \n      const state = this[kStateSymbol];  \n      if (callback)  \n        this.once('connect', callback);  \n\n      const afterDns = (ex, ip) =&gt; {  \n        defaultTriggerAsyncIdScope(  \n          this[async_id_symbol],  \n          doConnect,  \n          ex, this, ip, address, port, callback  \n        );  \n      };  \n\n      state.handle.lookup(address, afterDns);  \n    }  \n</code></pre> <p>\u8fd9\u91cc\u7684address\u662f\u670d\u52a1\u5668\u5730\u5740\uff0c_connect\u51fd\u6570\u4e3b\u8981\u903b\u8f91\u662f 1 \u76d1\u542cconnect\u4e8b\u4ef6 2 \u5bf9\u670d\u52a1\u5668\u5730\u5740\u8fdb\u884cdns\u89e3\u6790\uff08\u53ea\u80fd\u662f\u672c\u5730\u7684\u914d\u7684\u57df\u540d\uff09\u3002\u89e3\u6790\u6210\u529f\u540e\u6267\u884cafterDns\uff0c\u6700\u540e\u6267\u884cdoConnect\uff0c\u5e76\u4f20\u5165\u89e3\u6790\u51fa\u6765\u7684ip\u3002\u6211\u4eec\u770b\u770bdoConnect</p> <pre><code>    function doConnect(ex, self, ip, address, port, callback) {  \n      const state = self[kStateSymbol];  \n      // dns\u89e3\u6790\u6210\u529f\uff0c\u6267\u884c\u5e95\u5c42\u7684connect  \n      if (!ex) {  \n        const err = state.handle.connect(ip, port);  \n        if (err) {  \n          ex = exceptionWithHostPort(err, 'connect', address, port); \n        }  \n      }  \n\n      // connect\u6210\u529f\uff0c\u89e6\u53d1connect\u4e8b\u4ef6  \n      state.connectState = CONNECT_STATE_CONNECTED;  \n      process.nextTick(() =&gt; self.emit('connect'));  \n    }  \n</code></pre> <p>connect\u51fd\u6570\u901a\u8fc7C++\u5c42\uff0c\u7136\u540e\u8c03\u7528Libuv\uff0c\u5230\u64cd\u4f5c\u7cfb\u7edf\u7684connect\u3002\u4f5c\u7528\u662f\u628a\u670d\u52a1\u5668\u5730\u5740\u4fdd\u5b58\u5230socket\u4e2d\u3002connect\u7684\u6d41\u7a0b\u5c31\u8d70\u5b8c\u4e86\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u8c03\u7528send\u548crecv\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u3002</p>"},{"location":"chapter16-UDP/#1623","title":"16.2.3 \u53d1\u9001\u6570\u636e","text":"<p>\u53d1\u9001\u6570\u636e\u63a5\u53e3\u662fsendto\uff0c\u5b83\u662f\u5bf9send\u7684\u5c01\u88c5\u3002</p> <pre><code>    Socket.prototype.send = function(buffer,  \n                                     offset,  \n                                     length,  \n                                     port,  \n                                     address,  \n                                     callback) {  \n\n      let list;  \n      const state = this[kStateSymbol];  \n      const connected = state.connectState === CONNECT_STATE_CONNECTED;  \n      // \u6ca1\u6709\u8c03\u7528connect\u7ed1\u5b9a\u8fc7\u670d\u52a1\u7aef\u5730\u5740\uff0c\u5219\u9700\u8981\u4f20\u670d\u52a1\u7aef\u5730\u5740\u4fe1\u606f  \n      if (!connected) {  \n        if (address || (port &amp;&amp; typeof port !== 'function')) {  \n          buffer = sliceBuffer(buffer, offset, length);  \n        } else {  \n          callback = port;  \n          port = offset;  \n          address = length;  \n        }  \n      } else {  \n        if (typeof length === 'number') {  \n          buffer = sliceBuffer(buffer, offset, length);  \n          if (typeof port === 'function') {  \n            callback = port;  \n            port = null;  \n          }  \n        } else {  \n          callback = offset;  \n        }  \n        // \u5df2\u7ecf\u7ed1\u5b9a\u4e86\u670d\u52a1\u7aef\u5730\u5740\uff0c\u5219\u4e0d\u80fd\u518d\u4f20\u4e86  \n        if (port || address)  \n          throw new ERR_SOCKET_DGRAM_IS_CONNECTED();  \n      }  \n      // \u5982\u679c\u6ca1\u6709\u7ed1\u5b9a\u670d\u52a1\u5668\u7aef\u53e3\uff0c\u5219\u8fd9\u91cc\u9700\u8981\u4f20\uff0c\u5e76\u4e14\u6821\u9a8c  \n      if (!connected)  \n        port = validatePort(port);  \n      // \u5ffd\u7565\u4e00\u4e9b\u53c2\u6570\u5904\u7406\u903b\u8f91  \n      // \u6ca1\u6709\u7ed1\u5b9a\u5ba2\u6237\u7aef\u5730\u5740\u4fe1\u606f\uff0c\u5219\u9700\u8981\u5148\u7ed1\u5b9a\uff0c\u503c\u7531\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a  \n      if (state.bindState === BIND_STATE_UNBOUND)  \n        this.bind({ port: 0, exclusive: true }, null);  \n      // bind\u8fd8\u6ca1\u6709\u5b8c\u6210\uff0c\u5219\u5148\u5165\u961f\uff0c\u7b49\u5f85bind\u5b8c\u6210\u518d\u6267\u884c  \n      if (state.bindState !== BIND_STATE_BOUND) {  \n        enqueue(this, this.send.bind(this, \n                                        list, \n                                        port, \n                                        address, \n                                        callback));  \n        return;  \n      }  \n      // \u5df2\u7ecf\u7ed1\u5b9a\u4e86\uff0c\u8bbe\u7f6e\u670d\u52a1\u7aef\u5730\u5740\u540e\u53d1\u9001\u6570\u636e  \n      const afterDns = (ex, ip) =&gt; {  \n        defaultTriggerAsyncIdScope(  \n          this[async_id_symbol],  \n          doSend,  \n          ex, this, ip, list, address, port, callback  \n        );  \n      };  \n      // \u4f20\u4e86\u5730\u5740\u5219\u53ef\u80fd\u9700\u8981dns\u89e3\u6790  \n      if (!connected) {  \n        state.handle.lookup(address, afterDns);  \n      } else {  \n        afterDns(null, null);  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u7ee7\u7eed\u770bdoSend\u51fd\u6570\u3002</p> <pre><code>    function doSend(ex, self, ip, list, address, port, callback) {  \n      const state = self[kStateSymbol];  \n      // dns\u89e3\u6790\u51fa\u9519  \n      if (ex) {  \n        if (typeof callback === 'function') {  \n          process.nextTick(callback, ex);  \n          return;  \n        }  \n        process.nextTick(() =&gt; self.emit('error', ex));  \n        return;  \n      }  \n      // \u5b9a\u4e49\u4e00\u4e2a\u8bf7\u6c42\u5bf9\u8c61  \n      const req = new SendWrap();  \n      req.list = list;  // Keep reference alive.  \n      req.address = address;  \n      req.port = port;  \n      /*\n        \u8bbe\u7f6eNode.js\u548c\u7528\u6237\u7684\u56de\u8c03\uff0concomplete\u7531C++\u5c42\u8c03\u7528\uff0c\n        callback\u7531oncomplete\u8c03\u7528 \n      */ \n      if (callback) {  \n        req.callback = callback;  \n        req.oncomplete = afterSend;  \n      }  \n\n      let err;  \n      // \u6839\u636e\u662f\u5426\u9700\u8981\u8bbe\u7f6e\u670d\u52a1\u7aef\u5730\u5740\uff0c\u8c03C++\u5c42\u51fd\u6570  \n      if (port)  \n        err = state.handle.send(req, list, list.length, port, ip, !!callback);  \n      else  \n        err = state.handle.send(req, list, list.length, !!callback);  \n      /*\n        err\u5927\u4e8e\u7b49\u4e8e1\u8bf4\u660e\u540c\u6b65\u53d1\u9001\u6210\u529f\u4e86\uff0c\u76f4\u63a5\u6267\u884c\u56de\u8c03\uff0c\n        \u5426\u5219\u7b49\u5f85\u5f02\u6b65\u56de\u8c03 \n      */ \n      if (err &gt;= 1) {  \n        if (callback)  \n          process.nextTick(callback, null, err - 1);  \n        return;  \n      }  \n      // \u53d1\u9001\u5931\u8d25  \n      if (err &amp;&amp; callback) {   \n        const ex=exceptionWithHostPort(err, 'send', address, port); \n        process.nextTick(callback, ex);  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u7a7f\u8fc7C++\u5c42\uff0c\u76f4\u63a5\u770bLibuv\u7684\u4ee3\u7801\u3002</p> <pre><code>    int uv__udp_send(uv_udp_send_t* req,  \n                     uv_udp_t* handle,  \n                     const uv_buf_t bufs[],  \n                     unsigned int nbufs,  \n                     const struct sockaddr* addr,  \n                     unsigned int addrlen,  \n                     uv_udp_send_cb send_cb) {  \n      int err;  \n      int empty_queue;  \n\n      assert(nbufs &gt; 0);  \n      // \u8fd8\u6ca1\u6709\u7ed1\u5b9a\u670d\u52a1\u7aef\u5730\u5740\uff0c\u5219\u7ed1\u5b9a  \n      if (addr) {  \n        err = uv__udp_maybe_deferred_bind(handle, \n                                              addr-&gt;sa_family, \n                                              0);  \n        if (err)  \n          return err;  \n      }  \n      // \u5f53\u524d\u5199\u961f\u5217\u662f\u5426\u4e3a\u7a7a  \n      empty_queue = (handle-&gt;send_queue_count == 0);  \n      // \u521d\u59cb\u5316\u4e00\u4e2a\u5199\u8bf7\u6c42  \n      uv__req_init(handle-&gt;loop, req, UV_UDP_SEND);  \n      if (addr == NULL)  \n        req-&gt;addr.ss_family = AF_UNSPEC;  \n      else  \n        memcpy(&amp;req-&gt;addr, addr, addrlen);  \n      // \u4fdd\u5b58\u4e0a\u4e0b\u6587  \n      req-&gt;send_cb = send_cb;  \n      req-&gt;handle = handle;  \n      req-&gt;nbufs = nbufs;  \n      // \u521d\u59cb\u5316\u6570\u636e\uff0c\u9884\u5206\u914d\u7684\u5185\u5b58\u4e0d\u591f\uff0c\u5219\u5206\u914d\u65b0\u7684\u5806\u5185\u5b58  \n      req-&gt;bufs = req-&gt;bufsml;  \n      if (nbufs &gt; ARRAY_SIZE(req-&gt;bufsml))  \n        req-&gt;bufs = uv__malloc(nbufs * sizeof(bufs[0]));  \n      // \u590d\u5236\u8fc7\u53bb\u5806\u4e2d  \n      memcpy(req-&gt;bufs, bufs, nbufs * sizeof(bufs[0]));  \n      // \u66f4\u65b0\u5199\u961f\u5217\u6570\u636e  \n      handle-&gt;send_queue_size += uv__count_bufs(req-&gt;bufs, \n                                                    req-&gt;nbufs);  \n      handle-&gt;send_queue_count++;  \n      // \u63d2\u5165\u5199\u961f\u5217\uff0c\u7b49\u5f85\u53ef\u5199\u4e8b\u4ef6\u7684\u53d1\u751f  \n      QUEUE_INSERT_TAIL(&amp;handle-&gt;write_queue, &amp;req-&gt;queue);  \n      uv__handle_start(handle);  \n      // \u5f53\u524d\u5199\u961f\u5217\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u5f00\u59cb\u5199\uff0c\u5426\u5219\u8bbe\u7f6e\u7b49\u5f85\u53ef\u5199\u961f\u5217  \n      if (empty_queue &amp;&amp; \n          !(handle-&gt;flags &amp; UV_HANDLE_UDP_PROCESSING)) {  \n        // \u53d1\u9001\u6570\u636e  \n        uv__udp_sendmsg(handle);  \n        // \u5199\u961f\u5217\u662f\u5426\u975e\u7a7a\uff0c\u5219\u8bbe\u7f6e\u7b49\u5f85\u53ef\u5199\u4e8b\u4ef6\uff0c\u53ef\u5199\u7684\u65f6\u5019\u63a5\u7740\u5199  \n        if (!QUEUE_EMPTY(&amp;handle-&gt;write_queue))  \n          uv__io_start(handle-&gt;loop, &amp;handle-&gt;io_watcher, POLLOUT);\n      } else {  \n        uv__io_start(handle-&gt;loop, &amp;handle-&gt;io_watcher, POLLOUT);  \n      }  \n      return 0;  \n    }  \n</code></pre> <p>\u8be5\u51fd\u6570\u9996\u5148\u8bb0\u5f55\u5199\u8bf7\u6c42\u7684\u4e0a\u4e0b\u6587\uff0c\u7136\u540e\u628a\u5199\u8bf7\u6c42\u63d2\u5165\u5199\u961f\u5217\u4e2d\uff0c\u5f53\u5f85\u5199\u961f\u5217\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u6267\u884cuv__udp_sendmsg\u8fdb\u884c\u5199\u64cd\u4f5c\uff0c\u5426\u5219\u7b49\u5f85\u53ef\u5199\u4e8b\u4ef6\u7684\u5230\u6765\uff0c\u5f53\u53ef\u5199\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0c\u6267\u884c\u7684\u51fd\u6570\u662fuv__udp_io\u3002</p> <pre><code>    static void uv__udp_io(uv_loop_t* loop, uv__io_t* w, unsigned int revents) {  \n      uv_udp_t* handle;  \n      if (revents &amp; POLLOUT) {  \n        uv__udp_sendmsg(handle);  \n        uv__udp_run_completed(handle);  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u5148\u770buv__udp_sendmsg</p> <pre><code>    static void uv__udp_sendmsg(uv_udp_t* handle) {  \n      uv_udp_send_t* req;  \n      QUEUE* q;  \n      struct msghdr h;  \n      ssize_t size;  \n      // \u9010\u4e2a\u8282\u70b9\u53d1\u9001  \n      while (!QUEUE_EMPTY(&amp;handle-&gt;write_queue)) {  \n        q = QUEUE_HEAD(&amp;handle-&gt;write_queue);  \n        req = QUEUE_DATA(q, uv_udp_send_t, queue);  \n        memset(&amp;h, 0, sizeof h);  \n        // \u5ffd\u7565\u53c2\u6570\u5904\u7406  \n        h.msg_iov = (struct iovec*) req-&gt;bufs;  \n        h.msg_iovlen = req-&gt;nbufs;  \n\n        do {  \n          size = sendmsg(handle-&gt;io_watcher.fd, &amp;h, 0);  \n        } while (size == -1 &amp;&amp; errno == EINTR);  \n\n        if (size == -1) {  \n          // \u7e41\u5fd9\u5219\u5148\u4e0d\u53d1\u4e86\uff0c\u7b49\u5230\u53ef\u5199\u4e8b\u4ef6  \n          if (errno == EAGAIN || errno == EWOULDBLOCK || errno == ENOBUFS)  \n            break;  \n        }  \n        // \u8bb0\u5f55\u53d1\u9001\u7ed3\u679c  \n        req-&gt;status = (size == -1 ? UV__ERR(errno) : size);  \n        // \u53d1\u9001\u201c\u5b8c\u201d\u79fb\u51fa\u5199\u961f\u5217  \n        QUEUE_REMOVE(&amp;req-&gt;queue);  \n        // \u52a0\u5165\u5199\u5b8c\u6210\u961f\u5217  \n        QUEUE_INSERT_TAIL(&amp;handle-&gt;write_completed_queue, &amp;req-&gt;queue);  \n        /*\n          \u6709\u8282\u70b9\u6570\u636e\u5199\u5b8c\u4e86\uff0c\u628aIO\u89c2\u5bdf\u8005\u63d2\u5165pending\u961f\u5217\uff0c\n          pending\u9636\u6bb5\u6267\u884c\u56de\u8c03uv__udp_io  \n        */\n        uv__io_feed(handle-&gt;loop, &amp;handle-&gt;io_watcher);  \n      }  \n    }  \n</code></pre> <p>\u8be5\u51fd\u6570\u904d\u5386\u5199\u961f\u5217\uff0c\u7136\u540e\u9010\u4e2a\u53d1\u9001\u8282\u70b9\u4e2d\u7684\u6570\u636e\uff0c\u5e76\u8bb0\u5f55\u53d1\u9001\u7ed3\u679c\u3002  1 \u5982\u679c\u5199\u7e41\u5fd9\u5219\u7ed3\u675f\u5199\u903b\u8f91\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21\u5199\u4e8b\u4ef6\u89e6\u53d1\u3002 2 \u5982\u679c\u5199\u6210\u529f\u5219\u628a\u8282\u70b9\u63d2\u5165\u5199\u5b8c\u6210\u961f\u5217\u4e2d\uff0c\u5e76\u4e14\u628aIO\u89c2\u5bdf\u8005\u63d2\u5165pending\u961f\u5217\u3002 \u7b49\u5f85pending\u9636\u6bb5\u6267\u884c\u56de\u8c03\u65f6\uff0c\u6267\u884c\u7684\u51fd\u6570\u662fuv__udp_io\u3002 \u6211\u4eec\u518d\u6b21\u56de\u5230uv__udp_io\u4e2d</p> <pre><code>    if (revents &amp; POLLOUT) {  \n        uv__udp_sendmsg(handle);  \n        uv__udp_run_completed(handle);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u8fd9\u65f6\u5019\u4f1a\u7ee7\u7eed\u6267\u884c\u6570\u636e\u53d1\u9001\u7684\u903b\u8f91\uff0c\u7136\u540e\u5904\u7406\u5199\u5b8c\u6210\u961f\u5217\u3002\u6211\u4eec\u770buv__udp_run_completed\u3002</p> <pre><code>    static void uv__udp_run_completed(uv_udp_t* handle) {  \n      uv_udp_send_t* req;  \n      QUEUE* q;  \n      handle-&gt;flags |= UV_HANDLE_UDP_PROCESSING;  \n      // \u9010\u4e2a\u8282\u70b9\u5904\u7406  \n      while (!QUEUE_EMPTY(&amp;handle-&gt;write_completed_queue)) {  \n        q = QUEUE_HEAD(&amp;handle-&gt;write_completed_queue);  \n        QUEUE_REMOVE(q);  \n        req = QUEUE_DATA(q, uv_udp_send_t, queue);  \n        uv__req_unregister(handle-&gt;loop, req);  \n        // \u66f4\u65b0\u5f85\u5199\u6570\u636e\u5927\u5c0f  \n        handle-&gt;send_queue_size -= uv__count_bufs(req-&gt;bufs, req-&gt;nbufs);  \n        handle-&gt;send_queue_count--;  \n        // \u5982\u679c\u91cd\u65b0\u7533\u8bf7\u4e86\u5806\u5185\u5b58\uff0c\u5219\u9700\u8981\u91ca\u653e  \n        if (req-&gt;bufs != req-&gt;bufsml)  \n          uv__free(req-&gt;bufs);  \n        req-&gt;bufs = NULL;  \n        if (req-&gt;send_cb == NULL)  \n          continue;  \n        // \u6267\u884c\u56de\u8c03  \n        if (req-&gt;status &gt;= 0)  \n          req-&gt;send_cb(req, 0);  \n        else  \n          req-&gt;send_cb(req, req-&gt;status);  \n      }  \n      // \u5199\u961f\u5217\u4e3a\u7a7a\uff0c\u5219\u6ce8\u9500\u7b49\u5f85\u53ef\u5199\u4e8b\u4ef6  \n      if (QUEUE_EMPTY(&amp;handle-&gt;write_queue)) {  \n        uv__io_stop(handle-&gt;loop, &amp;handle-&gt;io_watcher, POLLOUT);  \n        if (!uv__io_active(&amp;handle-&gt;io_watcher, POLLIN))  \n          uv__handle_stop(handle);  \n      }  \n      handle-&gt;flags &amp;= ~UV_HANDLE_UDP_PROCESSING;  \n    }  \n</code></pre> <p>\u8fd9\u5c31\u662f\u53d1\u9001\u7684\u903b\u8f91\uff0c\u53d1\u9001\u5b8c\u540eLibuv\u4f1a\u8c03\u7528C++\u56de\u8c03\uff0c\u6700\u540e\u56de\u8c03JS\u5c42\u56de\u8c03\u3002\u5177\u4f53\u5230\u64cd\u4f5c\u7cfb\u7edf\u4e5f\u662f\u7c7b\u4f3c\u7684\u5b9e\u73b0\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9996\u5148\u5224\u65ad\u6570\u636e\u7684\u5927\u5c0f\u662f\u5426\u5c0f\u4e8e\u5199\u7f13\u51b2\u533a\uff0c\u662f\u7684\u8bdd\u7533\u8bf7\u4e00\u5757\u5185\u5b58\uff0c\u7136\u540e\u6784\u9020UDP\u534f\u8bae\u6570\u636e\u5305\uff0c\u518d\u9010\u5c42\u5f80\u4e0b\u8c03\uff0c\u6700\u540e\u53d1\u9001\u51fa\u6765\uff0c\u4f46\u662f\u5982\u679c\u6570\u636e\u8d85\u8fc7\u4e86\u5e95\u5c42\u7684\u62a5\u6587\u5927\u5c0f\u9650\u5236\uff0c\u5219\u4f1a\u88ab\u5206\u7247\u3002</p>"},{"location":"chapter16-UDP/#1624","title":"16.2.4 \u63a5\u6536\u6570\u636e","text":"<p>UDP\u670d\u52a1\u5668\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5c31\u6ce8\u518c\u4e86\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6\u7684\u53d1\u9001\uff0c\u5982\u679c\u6536\u5230\u4e86\u6570\u636e\uff0c\u5219\u5728Poll IO\u9636\u6bb5\u5c31\u4f1a\u88ab\u5904\u7406\u3002\u524d\u9762\u6211\u4eec\u8bb2\u8fc7\uff0c\u56de\u8c03\u51fd\u6570\u662fuv__udp_io\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0c\u8be5\u51fd\u6570\u600e\u4e48\u5904\u7406\u7684\u3002</p> <pre><code>    static void uv__udp_io(uv_loop_t* loop, uv__io_t* w, unsigned int revents) {  \n      uv_udp_t* handle;  \n\n      handle = container_of(w, uv_udp_t, io_watcher);  \n      // \u53ef\u8bfb\u4e8b\u4ef6\u89e6\u53d1  \n      if (revents &amp; POLLIN)  \n        uv__udp_recvmsg(handle);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770buv__udp_recvmsg\u7684\u903b\u8f91\u3002</p> <pre><code>    static void uv__udp_recvmsg(uv_udp_t* handle) {  \n      struct sockaddr_storage peer;  \n      struct msghdr h;  \n      ssize_t nread;  \n      uv_buf_t buf;  \n      int flags;  \n      int count;  \n\n      count = 32;  \n\n      do {  \n        // \u5206\u914d\u5185\u5b58\u63a5\u6536\u6570\u636e\uff0cC++\u5c42\u8bbe\u7f6e\u7684  \n        buf = uv_buf_init(NULL, 0);  \n        handle-&gt;alloc_cb((uv_handle_t*) handle, 64 * 1024, &amp;buf);  \n        memset(&amp;h, 0, sizeof(h));  \n        memset(&amp;peer, 0, sizeof(peer));  \n        h.msg_name = &amp;peer;  \n        h.msg_namelen = sizeof(peer);  \n        h.msg_iov = (void*) &amp;buf;  \n        h.msg_iovlen = 1;  \n        // \u8c03\u64cd\u4f5c\u7cfb\u7edf\u7684\u51fd\u6570\u8bfb\u53d6\u6570\u636e  \n        do {  \n          nread = recvmsg(handle-&gt;io_watcher.fd, &amp;h, 0);  \n        }  \n        while (nread == -1 &amp;&amp; errno == EINTR);  \n        // \u8c03\u7528C++\u5c42\u56de\u8c03  \n        handle-&gt;recv_cb(handle, \n                          nread, \n                          &amp;buf, \n                          (const struct sockaddr*) &amp;peer, \n                          flags);  \n      }  \n    }  \n</code></pre> <p>\u6700\u7ec8\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u8c03\u7528recvmsg\u8bfb\u53d6\u6570\u636e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u6536\u5230\u4e00\u4e2audp\u6570\u636e\u5305\u7684\u65f6\u5019\uff0c\u4f1a\u6302\u8f7d\u5230socket\u7684\u63a5\u6536\u961f\u5217\uff0c\u5982\u679c\u63a5\u6536\u961f\u5217\u6ee1\u4e86\u5219\u4f1a\u4e22\u5f03\uff0c\u5f53\u7528\u6237\u8c03\u7528recvmsg\u51fd\u6570\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c31\u628a\u63a5\u6536\u961f\u5217\u4e2d\u8282\u70b9\u9010\u4e2a\u8fd4\u56de\u7ed9\u7528\u6237\u3002\u8bfb\u53d6\u5b8c\u540e\uff0cLibuv\u4f1a\u56de\u8c03C++\u5c42\uff0c\u7136\u540eC++\u5c42\u56de\u8c03\u5230JS\u5c42\uff0c\u6700\u540e\u89e6\u53d1message\u4e8b\u4ef6\uff0c\u8fd9\u5c31\u662f\u5bf9\u5e94\u5f00\u59cb\u90a3\u6bb5\u4ee3\u7801\u7684message\u4e8b\u4ef6\u3002</p>"},{"location":"chapter16-UDP/#1625","title":"16.2.5 \u591a\u64ad","text":"<p>\u6211\u4eec\u77e5\u9053\uff0cTCP\u662f\u57fa\u4e8e\u8fde\u63a5\u548c\u53ef\u9760\u7684\uff0c\u591a\u64ad\u5219\u4f1a\u5e26\u6765\u8fc7\u591a\u7684\u8fde\u63a5\u548c\u6d41\u91cf\uff0c\u6240\u4ee5TCP\u662f\u4e0d\u652f\u6301\u591a\u64ad\u7684\uff0c\u800cUDP\u5219\u652f\u6301\u591a\u64ad\u3002\u591a\u64ad\u5206\u4e3a\u5c40\u57df\u7f51\u591a\u64ad\u548c\u5e7f\u57df\u7f51\u591a\u64ad\uff0c\u6211\u4eec\u77e5\u9053\u5728\u5c40\u57df\u7f51\u5185\u53d1\u751f\u4e00\u4e2a\u6570\u636e\uff0c\u662f\u4f1a\u4ee5\u5e7f\u64ad\u7684\u5f62\u5f0f\u53d1\u9001\u5230\u5404\u4e2a\u4e3b\u673a\u7684\uff0c\u4e3b\u673a\u6839\u636e\u76ee\u7684\u5730\u5740\u5224\u65ad\u662f\u5426\u9700\u8981\u5904\u7406\u8be5\u6570\u636e\u5305\u3002\u5982\u679cUDP\u662f\u5355\u64ad\u7684\u6a21\u5f0f\uff0c\u5219\u53ea\u4f1a\u6709\u4e00\u4e2a\u4e3b\u673a\u4f1a\u5904\u7406\u8be5\u6570\u636e\u5305\u3002\u5982\u679cUDP\u662f\u591a\u64ad\u7684\u6a21\u5f0f\uff0c\u5219\u6709\u591a\u4e2a\u4e3b\u673a\u5904\u7406\u8be5\u6570\u636e\u5305\u3002\u591a\u64ad\u7684\u65f6\u5019\uff0c\u5b58\u5728\u4e00\u4e2a\u591a\u64ad\u7ec4\u7684\u6982\u5ff5\uff0c\u8fd9\u5c31\u662fIGMP\u505a\u7684\u4e8b\u60c5\u3002\u5b83\u5b9a\u4e49\u4e86\u7ec4\u7684\u6982\u5ff5\u3002\u53ea\u6709\u52a0\u5165\u8fd9\u4e2a\u7ec4\u7684\u4e3b\u673a\u624d\u80fd\u5904\u7406\u8be5\u7ec4\u7684\u6570\u636e\u5305\u3002\u5047\u8bbe\u6709\u4ee5\u4e0b\u5c40\u57df\u7f51\uff0c\u5982\u56fe16-1\u6240\u793a\u3002  \u56fe16-1 \u5f53\u4e3b\u673a1\u7ed9\u591a\u64ad\u7ec41\u53d1\u9001\u6570\u636e\u7684\u65f6\u5019\uff0c\u4e3b\u673a4\u53ef\u4ee5\u6536\u5230\uff0c\u4e3b\u673a2\uff0c3\u5219\u65e0\u6cd5\u6536\u5230\u3002 \u6211\u4eec\u518d\u6765\u770b\u770b\u5e7f\u57df\u7f51\u7684\u591a\u64ad\u3002\u5e7f\u57df\u7f51\u7684\u591a\u64ad\u9700\u8981\u8def\u7531\u5668\u7684\u652f\u6301\uff0c\u591a\u4e2a\u8def\u7531\u5668\u4e4b\u95f4\u4f1a\u4f7f\u7528\u591a\u64ad\u8def\u7531\u534f\u8bae\u4ea4\u6362\u591a\u64ad\u7ec4\u7684\u4fe1\u606f\u3002\u5047\u8bbe\u6709\u4ee5\u4e0b\u5e7f\u57df\u7f51\uff0c\u5982\u56fe16-2\u6240\u793a\u3002  \u56fe16-2 \u5f53\u4e3b\u673a1\u7ed9\u591a\u64ad\u7ec41\u53d1\u9001\u6570\u636e\u7684\u65f6\u5019\uff0c\u8def\u7531\u56681\u4f1a\u7ed9\u8def\u7531\u56682\u53d1\u9001\u4e00\u4efd\u6570\u636e\uff08\u901a\u8fc7\u591a\u64ad\u8def\u7531\u534f\u8bae\u4ea4\u6362\u4e86\u4fe1\u606f\uff0c\u8def\u75311\u77e5\u9053\u8def\u7531\u56682\u7684\u4e3b\u673a7\u5728\u591a\u64ad\u7ec41\u4e2d\uff09\uff0c\u4f46\u662f\u8def\u7531\u56682\u4e0d\u4f1a\u7ed9\u8def\u7531\u56683\u53d1\u9001\u6570\u636e\uff0c\u56e0\u4e3a\u5b83\u77e5\u9053\u8def\u7531\u56683\u5bf9\u5e94\u7684\u7f51\u7edc\u4e2d\u6ca1\u6709\u4e3b\u673a\u5728\u591a\u64ad\u7ec41\u3002</p> <p>\u4ee5\u4e0a\u662f\u591a\u64ad\u7684\u4e00\u4e9b\u6982\u5ff5\u3002Node.js\u4e2d\u5173\u4e8e\u591a\u64ad\u7684\u5b9e\u73b0\uff0c\u57fa\u672c\u662f\u5bf9\u64cd\u4f5c\u7cfb\u7edfAPI\u7684\u5c01\u88c5\uff0c\u6240\u4ee5\u5c31\u4e0d\u6253\u7b97\u8bb2\u89e3\uff0c\u6211\u4eec\u76f4\u63a5\u770b\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5bf9\u4e8e\u591a\u64ad\u7684\u5b9e\u73b0\u3002</p>"},{"location":"chapter16-UDP/#16251","title":"16.2.5.1 \u52a0\u5165\u4e00\u4e2a\u591a\u64ad\u7ec4","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u63a5\u53e3\u52a0\u5165\u4e00\u4e2a\u591a\u64ad\u7ec4\u3002</p> <pre><code>    setsockopt(fd,  \n               IPPROTO_IP,  \n               IP_ADD_MEMBERSHIP,  \n               &amp;mreq, // \u8bb0\u5f55\u51fa\u53e3ip\u548c\u52a0\u5165\u591a\u64ad\u7ec4\u7684ip  \n               sizeof(mreq));  \n</code></pre> <p>mreq\u7684\u7ed3\u6784\u4f53\u5b9a\u4e49\u5982\u4e0b</p> <pre><code>    struct ip_mreq   \n    {  \n        // \u52a0\u5165\u7684\u591a\u64ad\u7ec4ip  \n        struct in_addr imr_multiaddr; \n        // \u51fa\u53e3ip  \n        struct in_addr imr_interface;   \n    };  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0bsetsockopt\u7684\u5b9e\u73b0\uff08\u53ea\u5217\u51fa\u76f8\u5173\u90e8\u5206\u4ee3\u7801\uff09</p> <pre><code>    case IP_ADD_MEMBERSHIP:   \n            {  \n                struct ip_mreq mreq;  \n                static struct options optmem;  \n                unsigned long route_src;  \n                struct rtable *rt;  \n                struct device *dev=NULL;  \n                err=verify_area(VERIFY_READ, optval, sizeof(mreq));  \n                memcpy_fromfs(&amp;mreq,optval,sizeof(mreq));  \n                // \u6ca1\u6709\u8bbe\u7f6edevice\u5219\u6839\u636e\u591a\u64ad\u7ec4ip\u9009\u62e9\u4e00\u4e2adevice  \n                if(mreq.imr_interface.s_addr==INADDR_ANY)   \n                {  \n                    if((rt=ip_rt_route(mreq.imr_multiaddr.s_addr,\n                                          &amp;optmem, &amp;route_src))!=NULL)  \n                    {  \n                        dev=rt-&gt;rt_dev;  \n                        rt-&gt;rt_use--;  \n                    }  \n                }  \n                else  \n                {  \n                    // \u6839\u636e\u8bbe\u7f6e\u7684ip\u627e\u5230\u5bf9\u5e94\u7684device  \n                    for(dev = dev_base; dev; dev = dev-&gt;next)  \n                    {  \n                        // \u5728\u5de5\u4f5c\u72b6\u6001\u3001\u652f\u6301\u591a\u64ad\uff0cip\u4e00\u6837  \n                        if((dev-&gt;flags&amp;IFF_UP)&amp;&amp;\n                              (dev-&gt;flags&amp;IFF_MULTICAST)&amp;&amp;  \n                            (dev-&gt;pa_addr==mreq.imr_interface.s_addr\n                             ))  \n                            break;  \n                    }  \n                }  \n                // \u52a0\u5165\u591a\u64ad\u7ec4  \n                return ip_mc_join_group(sk,\n                                           dev,\n                                           mreq.imr_multiaddr.s_addr);  \n            }  \n</code></pre> <p>\u9996\u5148\u62ff\u5230\u52a0\u5165\u7684\u591a\u64ad\u7ec4IP\u548c\u51fa\u53e3IP\u5bf9\u5e94\u7684device\u540e\uff0c\u8c03\u7528ip_mc_join_group\uff0c\u5728socket\u7ed3\u6784\u4f53\u4e2d\uff0c\u6709\u4e00\u4e2a\u5b57\u6bb5\u7ef4\u62a4\u4e86\u8be5socket\u52a0\u5165\u7684\u591a\u64ad\u7ec4\u4fe1\u606f\uff0c\u5982\u56fe16-3\u6240\u793a\u3002  \u56fe16-3 \u6211\u4eec\u63a5\u7740\u770b\u4e00\u4e0bip_mc_join_group</p> <pre><code>    int ip_mc_join_group(struct sock *sk , \n                           struct device *dev, \n                           unsigned long addr)  \n    {  \n        int unused= -1;  \n        int i;  \n        // \u8fd8\u6ca1\u6709\u52a0\u5165\u8fc7\u591a\u64ad\u7ec4\u5219\u5206\u914d\u4e00\u4e2aip_mc_socklist\u7ed3\u6784\u4f53  \n        if(sk-&gt;ip_mc_list==NULL)  \n        {  \n            if((sk-&gt;ip_mc_list=(struct ip_mc_socklist *)kmalloc(sizeof(*sk-&gt;ip_mc_list), GFP_KERNEL))==NULL)  \n                return -ENOMEM;  \n            memset(sk-&gt;ip_mc_list,'\\0',sizeof(*sk-&gt;ip_mc_list));  \n        }  \n        // \u904d\u5386\u52a0\u5165\u7684\u591a\u64ad\u7ec4\u961f\u5217\uff0c\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u52a0\u5165\u8fc7  \n        for(i=0;i&lt;IP_MAX_MEMBERSHIPS;i++)  \n        {  \n            if(sk-&gt;ip_mc_list-&gt;multiaddr[i]==addr &amp;&amp; \n                sk-&gt;ip_mc_list-&gt;multidev[i]==dev)  \n                return -EADDRINUSE;  \n            if(sk-&gt;ip_mc_list-&gt;multidev[i]==NULL) \n                 // \u8bb0\u5f55\u53ef\u7528\u4f4d\u7f6e\u7684\u7d22\u5f15 \n                unused=i;  \n        }  \n        // \u5230\u8fd9\u8bf4\u660e\u6ca1\u6709\u52a0\u5165\u8fc7\u5f53\u524d\u8bbe\u7f6e\u7684\u591a\u64ad\u7ec4\uff0c\u5219\u8bb0\u5f55\u5e76\u4e14\u52a0\u5165  \n        if(unused==-1)  \n            return -ENOBUFS;  \n        sk-&gt;ip_mc_list-&gt;multiaddr[unused]=addr;  \n        sk-&gt;ip_mc_list-&gt;multidev[unused]=dev;  \n        // addr\u4e3a\u591a\u64ad\u7ec4ip  \n        ip_mc_inc_group(dev,addr);  \n        return 0;  \n    }  \n</code></pre> <p>ip_mc_join_group\u51fd\u6570\u7684\u4e3b\u8981\u903b\u8f91\u662f\u628asocket\u60f3\u52a0\u5165\u7684\u591a\u64ad\u7ec4\u4fe1\u606f\u8bb0\u5f55\u5230socket\u7684ip_mc_list\u5b57\u6bb5\u4e2d\uff08\u5982\u679c\u8fd8\u6ca1\u6709\u52a0\u5165\u8fc7\u8be5\u591a\u64ad\u7ec4\u7684\u8bdd\uff09\u3002\u63a5\u7740\u8c03ip_mc_inc_group\u5f80\u4e0b\u8d70\u3002device\u7684ip_mc_list\u5b57\u6bb5\u7ef4\u62a4\u4e86\u4e3b\u673a\u4e2d\u4f7f\u7528\u4e86\u8be5device\u7684\u591a\u64ad\u7ec4\u4fe1\u606f\uff0c\u5982\u56fe16-4\u6240\u793a\u3002  \u56fe16-4</p> <pre><code>    static void ip_mc_inc_group(struct device *dev,     \n                                  unsigned long addr)  \n    {  \n        struct ip_mc_list *i;  \n        /*\n          \u904d\u5386\u8be5\u8bbe\u5907\u7ef4\u62a4\u7684\u591a\u64ad\u7ec4\u961f\u5217\uff0c\n          \u5224\u65ad\u662f\u5426\u5df2\u7ecf\u6709socket\u52a0\u5165\u8fc7\u8be5\u591a\u64ad\u7ec4\uff0c\u662f\u5219\u5f15\u7528\u6570\u52a0\u4e00  \n        */\n        for(i=dev-&gt;ip_mc_list;i!=NULL;i=i-&gt;next)  \n        {  \n            if(i-&gt;multiaddr==addr)  \n            {  \n                i-&gt;users++;  \n                return;  \n            }  \n        }  \n        // \u5230\u8fd9\u8bf4\u660e\uff0c\u8fd8\u6ca1\u6709socket\u52a0\u5165\u8fc7\u5f53\u524d\u591a\u64ad\u7ec4\uff0c\u5219\u8bb0\u5f55\u5e76\u52a0\u5165  \n        i=(struct ip_mc_list *)kmalloc(sizeof(*i), GFP_KERNEL);  \n        if(!i)  \n            return;  \n        i-&gt;users=1;  \n        i-&gt;interface=dev;  \n        i-&gt;multiaddr=addr;  \n        i-&gt;next=dev-&gt;ip_mc_list;  \n        // \u901a\u8fc7igmp\u901a\u77e5\u5176\u5b83\u65b9  \n        igmp_group_added(i);  \n        dev-&gt;ip_mc_list=i;  \n    }  \n</code></pre> <p>ip_mc_inc_group\u51fd\u6570\u7684\u4e3b\u8981\u903b\u8f91\u662f\u5224\u65adsocket\u60f3\u8981\u52a0\u5165\u7684\u591a\u64ad\u7ec4\u662f\u4e0d\u662f\u5df2\u7ecf\u5b58\u5728\u4e8e\u5f53\u524ddevice\u4e2d\uff0c\u5982\u679c\u4e0d\u662f\u5219\u65b0\u589e\u4e00\u4e2a\u8282\u70b9\u3002\u7ee7\u7eed\u8c03\u7528igmp_group_added</p> <pre><code>    static void igmp_group_added(struct ip_mc_list *im)  \n    {  \n        // \u521d\u59cb\u5316\u5b9a\u65f6\u5668  \n        igmp_init_timer(im);  \n        /*\n          \u53d1\u9001\u4e00\u4e2aigmp\u6570\u636e\u5305\uff0c\u540c\u6b65\u591a\u64ad\u7ec4\u4fe1\u606f\uff08socket\u52a0\u5165\n          \u4e86\u4e00\u4e2a\u65b0\u7684\u591a\u64ad\u7ec4\uff09  \n         */\n        igmp_send_report(im-&gt;interface, \n                          im-&gt;multiaddr, \n                          IGMP_HOST_MEMBERSHIP_REPORT);  \n        // \u8f6c\u6362\u591a\u64ad\u7ec4ip\u5230\u591a\u64admac\u5730\u5740\uff0c\u5e76\u8bb0\u5f55\u5230device\u4e2d  \n        ip_mc_filter_add(im-&gt;interface, im-&gt;multiaddr);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u770bigmp_send_report\u548cip_mc_filter_add\u7684\u5177\u4f53\u903b\u8f91\u3002</p> <pre><code>    static void igmp_send_report(struct device *dev, \n                                    unsigned long address, \n                                    int type)  \n    {  \n        // \u7533\u8bf7\u4e00\u4e2askb\u8868\u793a\u4e00\u4e2a\u6570\u636e\u5305  \n        struct sk_buff *skb=alloc_skb(MAX_IGMP_SIZE, GFP_ATOMIC);  \n        int tmp;  \n        struct igmphdr *igh;  \n        /*\n         \u6784\u5efaip\u5934\uff0cip\u534f\u8bae\u5934\u7684\u6e90ip\u662fINADDR_ANY\uff0c\n         \u5373\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u672c\u673a\u7684\uff0c\u76ee\u7684ip\u4e3a\u591a\u64ad\u7ec4ip\uff08address\uff09  \n        */\n        tmp=ip_build_header(skb, \n                              INADDR_ANY, \n                              address, \n                              &amp;dev, \n                              IPPROTO_IGMP, \n                              NULL,  \n                            skb-&gt;mem_len, 0, 1);  \n        /*\n          data\u8868\u793a\u6240\u6709\u7684\u6570\u636e\u90e8\u5206\uff0ctmp\u8868\u793aip\u5934\u5927\u5c0f\uff0c\u6240\u4ee5igh\n          \u5c31\u662fip\u534f\u8bae\u7684\u6570\u636e\u90e8\u5206\uff0c\u5373igmp\u62a5\u6587\u7684\u5185\u5bb9  \n        */\n        igh=(struct igmphdr *)(skb-&gt;data+tmp);  \n        skb-&gt;len=tmp+sizeof(*igh);  \n        igh-&gt;csum=0;  \n        igh-&gt;unused=0;  \n        igh-&gt;type=type;  \n        igh-&gt;group=address;  \n        igh-&gt;csum=ip_compute_csum((void *)igh,sizeof(*igh));  \n        // \u8c03\u7528ip\u5c42\u53d1\u9001\u51fa\u53bb  \n        ip_queue_xmit(NULL,dev,skb,1);  \n    }  \n</code></pre> <p>igmp_send_report\u5176\u5b9e\u5c31\u662f\u6784\u9020\u4e00\u4e2aIGMP\u534f\u8bae\u6570\u636e\u5305\uff0c\u7136\u540e\u53d1\u9001\u51fa\u53bb\uff0c\u544a\u8bc9\u8def\u7531\u5668\u67d0\u4e2a\u4e3b\u673a\u52a0\u5165\u4e86\u591a\u64ad\u7ec4\uff0cIGMP\u7684\u534f\u8bae\u683c\u5f0f\u5982\u4e0b</p> <pre><code>    struct igmphdr  \n    {  \n        // \u7c7b\u578b  \n        unsigned char type;  \n        unsigned char unused;  \n        // \u6821\u9a8c\u548c  \n        unsigned short csum;  \n        // igmp\u7684\u6570\u636e\u90e8\u5206\uff0c\u6bd4\u5982\u52a0\u5165\u591a\u64ad\u7ec4\u7684\u65f6\u5019\uff0cgroup\u8868\u793a\u591a\u64ad\u7ec4ip  \n        unsigned long group;  \n    };  \n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u770bip_mc_filter_add</p> <pre><code>    void ip_mc_filter_add(struct device *dev, unsigned long addr)  \n    {  \n        char buf[6];  \n        // \u628a\u591a\u64ad\u7ec4ip\u8f6c\u6210mac\u591a\u64ad\u5730\u5740  \n        addr=ntohl(addr);  \n        buf[0]=0x01;  \n        buf[1]=0x00;  \n        buf[2]=0x5e;  \n        buf[5]=addr&amp;0xFF;  \n       addr&gt;&gt;=8;  \n       buf[4]=addr&amp;0xFF;  \n       addr&gt;&gt;=8;  \n       buf[3]=addr&amp;0x7F;  \n       dev_mc_add(dev,buf,ETH_ALEN,0);  \n    }  \n</code></pre> <p>\u6211\u4eec\u77e5\u9053IP\u5730\u5740\u662f32\u4f4d\uff0cmac\u5730\u5740\u662f48\u4f4d\uff0c\u4f46\u662fIANA\u89c4\u5b9a\uff0cIP V4\u7ec4\u64adMAC\u5730\u5740\u7684\u9ad824\u4f4d\u662f0x01005E\uff0c\u7b2c25\u4f4d\u662f0\uff0c\u4f4e23\u4f4d\u662fipv4\u7ec4\u64ad\u5730\u5740\u7684\u4f4e23\u4f4d\u3002\u800c\u591a\u64ad\u7684IP\u5730\u5740\u9ad8\u56db\u4f4d\u56fa\u5b9a\u662f1110\u3002\u53e6\u5916\u4f4e23\u4f4d\u88ab\u6620\u5c04\u5230MAC\u591a\u64ad\u5730\u5740\u768423\u4f4d\uff0c\u6240\u4ee5\u591a\u64adIP\u5730\u5740\u4e2d\uff0c\u67095\u4f4d\u662f\u53ef\u4ee5\u968f\u673a\u7ec4\u5408\u7684\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0c\u6bcf32\u4e2a\u591a\u64adIP\u5730\u5740\uff0c\u6620\u5c04\u5230\u4e00\u4e2aMAC\u5730\u5740\u3002\u8fd9\u4f1a\u5e26\u6765\u4e00\u4e9b\u95ee\u9898\uff0c\u5047\u8bbe\u4e3b\u673ax\u52a0\u5165\u4e86\u591a\u64ad\u7ec4a\uff0c\u4e3b\u673ay\u52a0\u5165\u4e86\u591a\u64ad\u7ec4b\uff0c\u800ca\u548cb\u5bf9\u5e94\u7684mac\u591a\u64ad\u5730\u5740\u662f\u4e00\u6837\u7684\u3002\u5f53\u4e3b\u673az\u7ed9\u591a\u64ad\u7ec4a\u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5305\u7684\u65f6\u5019\uff0c\u8fd9\u65f6\u5019\u4e3b\u673ax\u548cy\u7684\u7f51\u5361\u90fd\u4f1a\u5904\u7406\u8be5\u6570\u636e\u5305\uff0c\u5e76\u4e0a\u62a5\u5230\u4e0a\u5c42\uff0c\u4f46\u662f\u591a\u64ad\u7ec4a\u5bf9\u5e94\u7684MAC\u591a\u64ad\u5730\u5740\u548c\u591a\u64ad\u7ec4b\u662f\u4e00\u6837\u7684\u3002\u6211\u4eec\u62ff\u5230\u4e00\u4e2a\u591a\u64ad\u7ec4ip\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8ba1\u7b97\u51fa\u5b83\u7684\u591a\u64adMAC\u5730\u5740\uff0c\u4f46\u662f\u53cd\u8fc7\u6765\u5c31\u4e0d\u884c\uff0c\u56e0\u4e3a\u4e00\u4e2a\u591a\u64admac\u5730\u5740\u5bf9\u5e94\u4e8632\u4e2a\u591a\u64adip\u5730\u5740\u3002\u90a3\u4e3b\u673ax\u548cy\u600e\u4e48\u5224\u65ad\u662f\u4e0d\u662f\u53d1\u7ed9\u81ea\u5df1\u7684\u6570\u636e\u5305\uff1f\u56e0\u4e3adevice\u7ef4\u62a4\u4e86\u4e00\u4e2a\u672cdevice\u4e0a\u7684\u591a\u64adIP\u5217\u8868\uff0c\u64cd\u4f5c\u7cfb\u7edf\u6839\u636e\u6536\u5230\u7684\u6570\u636e\u5305\u4e2d\u7684IP\u76ee\u7684\u5730\u5740\u548cdevice\u7684\u591a\u64adIP\u5217\u8868\u5bf9\u6bd4\u3002\u5982\u679c\u5728\u5217\u8868\u4e2d\uff0c\u5219\u8bf4\u660e\u662f\u53d1\u7ed9\u81ea\u5df1\u7684\u3002\u6700\u540e\u6211\u4eec\u770b\u770bdev_mc_add\u3002device\u4e2d\u7ef4\u62a4\u4e86\u5f53\u524d\u7684mac\u591a\u64ad\u5730\u5740\u5217\u8868\uff0c\u5b83\u4f1a\u628a\u8fd9\u4e2a\u5217\u8868\u4fe1\u606f\u540c\u6b65\u5230\u7f51\u5361\u4e2d\uff0c\u4f7f\u5f97\u7f51\u5361\u53ef\u4ee5\u5904\u7406\u8be5\u5217\u8868\u4e2d\u591a\u64admac\u5730\u5740\u7684\u6570\u636e\u5305\uff0c\u5982\u56fe16-5\u6240\u793a\u3002  \u56fe16-5</p> <pre><code>    void dev_mc_add(struct device *dev, void *addr, int alen, int newonly)  \n    {  \n        struct dev_mc_list *dmi;  \n        // device\u7ef4\u62a4\u7684\u591a\u64admac\u5730\u5740\u5217\u8868  \n        for(dmi=dev-&gt;mc_list;dmi!=NULL;dmi=dmi-&gt;next)  \n        {  \n            // \u5df2\u5b58\u5728\uff0c\u5219\u5f15\u7528\u8ba1\u6570\u52a0\u4e00  \n            if(memcmp(dmi-&gt;dmi_addr,addr,dmi-&gt;dmi_addrlen)==0 &amp;&amp; \n                dmi-&gt;dmi_addrlen==alen)  \n            {  \n                if(!newonly)  \n                    dmi-&gt;dmi_users++;  \n                return;  \n            }  \n        }  \n        // \u4e0d\u5b58\u5728\u5219\u65b0\u589e\u4e00\u4e2a\u9879\u5230device\u5217\u8868\u4e2d  \n        dmi=(struct dev_mc_list *)kmalloc(sizeof(*dmi),GFP_KERNEL); \n        memcpy(dmi-&gt;dmi_addr, addr, alen);  \n        dmi-&gt;dmi_addrlen=alen;  \n        dmi-&gt;next=dev-&gt;mc_list;  \n        dmi-&gt;dmi_users=1;  \n        dev-&gt;mc_list=dmi;  \n        dev-&gt;mc_count++;  \n        // \u901a\u77e5\u7f51\u5361\u9700\u8981\u5904\u7406\u8be5\u591a\u64admac\u5730\u5740  \n        dev_mc_upload(dev);  \n    }  \n</code></pre> <p>\u7f51\u5361\u7684\u5de5\u4f5c\u6a21\u5f0f\u6709\u51e0\u79cd\uff0c\u5206\u522b\u662f\u6b63\u5e38\u6a21\u5f0f\uff08\u53ea\u63a5\u6536\u53d1\u7ed9\u81ea\u5df1\u7684\u6570\u636e\u5305\uff09\u3001\u6df7\u6742\u6a21\u5f0f\uff08\u63a5\u6536\u6240\u6709\u6570\u636e\u5305\uff09\u3001\u591a\u64ad\u6a21\u5f0f\uff08\u63a5\u6536\u4e00\u822c\u6570\u636e\u5305\u548c\u591a\u64ad\u6570\u636e\u5305\uff09\u3002\u7f51\u5361\u9ed8\u8ba4\u662f\u53ea\u5904\u7406\u53d1\u7ed9\u81ea\u5df1\u7684\u6570\u636e\u5305\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u52a0\u5165\u4e00\u4e2a\u591a\u64ad\u7ec4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u544a\u8bc9\u7f51\u5361\uff0c\u5f53\u6536\u5230\u8be5\u591a\u64ad\u7ec4\u7684\u6570\u636e\u5305\u65f6\uff0c\u9700\u8981\u5904\u7406\uff0c\u800c\u4e0d\u662f\u5ffd\u7565\u3002dev_mc_upload\u51fd\u6570\u5c31\u662f\u901a\u77e5\u7f51\u5361\u3002</p> <pre><code>    void dev_mc_upload(struct device *dev)  \n    {  \n        struct dev_mc_list *dmi;  \n        char *data, *tmp;  \n        // \u4e0d\u5de5\u4f5c\u4e86  \n        if(!(dev-&gt;flags&amp;IFF_UP))  \n            return;  \n        /*\n          \u5f53\u524d\u662f\u6df7\u6742\u6a21\u5f0f\uff0c\u5219\u4e0d\u9700\u8981\u8bbe\u7f6e\u591a\u64ad\u4e86\uff0c\u56e0\u4e3a\u7f51\u5361\u4f1a\u5904\u7406\u6240\u6709\n         \u6536\u5230\u7684\u6570\u636e\uff0c\u4e0d\u7ba1\u662f\u4e0d\u662f\u53d1\u7ed9\u81ea\u5df1\u7684  \n        */\n        if(dev-&gt;flags&amp;IFF_PROMISC)  \n        {  \n            dev-&gt;set_multicast_list(dev, -1, NULL);  \n            return;  \n        }  \n        /*\n          \u591a\u64ad\u5730\u5740\u4e2a\u6570\uff0c\u4e3a0\uff0c\u5219\u8bbe\u7f6e\u7f51\u5361\u5de5\u4f5c\u6a21\u5f0f\u4e3a\u6b63\u5e38\u6a21\u5f0f\uff0c\n          \u56e0\u4e3a\u4e0d\u9700\u8981\u5904\u7406\u591a\u64ad\u4e86  \n        */\n        if(dev-&gt;mc_count==0)  \n        {  \n            dev-&gt;set_multicast_list(dev,0,NULL);  \n            return;  \n        }  \n\n        data=kmalloc(dev-&gt;mc_count*dev-&gt;addr_len, GFP_KERNEL);  \n        // \u590d\u5236\u6240\u6709\u7684\u591a\u64admac\u5730\u5740\u4fe1\u606f  \n        for(tmp = data, dmi=dev-&gt;mc_list;dmi!=NULL;dmi=dmi-&gt;next)  \n        {  \n            memcpy(tmp,dmi-&gt;dmi_addr, dmi-&gt;dmi_addrlen);  \n            tmp+=dev-&gt;addr_len;  \n        }  \n        // \u544a\u8bc9\u7f51\u5361  \n        dev-&gt;set_multicast_list(dev,dev-&gt;mc_count,data);  \n        kfree(data);  \n    }  \n</code></pre> <p>\u6700\u540e\u6211\u4eec\u770b\u4e00\u4e0bset_multicast_list</p> <pre><code>    static void set_multicast_list(struct device *dev, int num_addrs, void *addrs)  \n    {  \n        int ioaddr = dev-&gt;base_addr;  \n        // \u591a\u64ad\u6a21\u5f0f  \n        if (num_addrs &gt; 0) {  \n          outb(RX_MULT, RX_CMD);  \n          inb(RX_STATUS);     /* Clear status. */  \n        } else if (num_addrs &lt; 0) { // \u6df7\u6742\u6a21\u5f0f  \n          outb(RX_PROM, RX_CMD);  \n         inb(RX_STATUS);  \n       } else { // \u6b63\u5e38\u6a21\u5f0f  \n        outb(RX_NORM, RX_CMD);  \n        inb(RX_STATUS);  \n       }  \n    }  \n</code></pre> <p>set_multicast_list\u5c31\u662f\u8bbe\u7f6e\u7f51\u5361\u5de5\u4f5c\u6a21\u5f0f\u7684\u51fd\u6570\u3002\u81f3\u6b64\uff0c\u6211\u4eec\u5c31\u6210\u529f\u52a0\u5165\u4e86\u4e00\u4e2a\u591a\u64ad\u7ec4\u3002\u79bb\u5f00\u4e00\u4e2a\u591a\u64ad\u7ec4\u4e5f\u662f\u7c7b\u4f3c\u7684\u8fc7\u7a0b\u3002</p>"},{"location":"chapter16-UDP/#16252","title":"16.2.5.2 \u7ef4\u62a4\u591a\u64ad\u7ec4\u4fe1\u606f","text":"<p>\u52a0\u5165\u591a\u64ad\u7ec4\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3b\u52a8\u9000\u51fa\u591a\u64ad\u7ec4\uff0c\u4f46\u662f\u5982\u679c\u4e3b\u673a\u6302\u4e86\uff0c\u5c31\u65e0\u6cd5\u4e3b\u52a8\u9000\u51fa\u4e86\uff0c\u6240\u4ee5\u591a\u64ad\u8def\u7531\u4e5f\u4f1a\u5b9a\u671f\u5411\u6240\u6709\u591a\u64ad\u7ec4\u7684\u6240\u6709\u4e3b\u673a\u53d1\u9001\u63a2\u6d4b\u62a5\u6587\uff0c\u6240\u4ee5\u4e3b\u673a\u9700\u8981\u76d1\u542c\u6765\u81ea\u591a\u64ad\u8def\u7531\u7684\u63a2\u6d4b\u62a5\u6587\u3002</p> <pre><code>    void ip_mc_allhost(struct device *dev)  \n    {  \n        struct ip_mc_list *i;  \n        for(i=dev-&gt;ip_mc_list;i!=NULL;i=i-&gt;next)  \n            if(i-&gt;multiaddr==IGMP_ALL_HOSTS)  \n                return;  \n        i=(struct ip_mc_list *)kmalloc(sizeof(*i), GFP_KERNEL);  \n        if(!i)  \n            return;  \n        I   -&gt;users=1;  \n        i-&gt;interface=dev;  \n        i-&gt;multiaddr=IGMP_ALL_HOSTS;  \n        i-&gt;next=dev-&gt;ip_mc_list;  \n        dev-&gt;ip_mc_list=i;  \n        ip_mc_filter_add(i-&gt;interface, i-&gt;multiaddr);  \n    }  \n</code></pre> <p>\u8bbe\u5907\u542f\u52a8\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u8bbe\u7f6e\u7f51\u5361\u76d1\u542c\u76ee\u7684IP\u662f224.0.0.1\u7684\u62a5\u6587\uff0c\u4f7f\u5f97\u53ef\u4ee5\u5904\u7406\u76ee\u7684IP\u662f224.0.0.1\u7684\u591a\u64ad\u6d88\u606f\u3002\u8be5\u7c7b\u578b\u7684\u62a5\u6587\u662f\u591a\u64ad\u8def\u7531\u7528\u4e8e\u67e5\u8be2\u5c40\u57df\u7f51\u5f53\u524d\u591a\u64ad\u7ec4\u60c5\u51b5\u7684\uff0c\u6bd4\u5982\u67e5\u8be2\u54ea\u4e9b\u591a\u64ad\u7ec4\u5df2\u7ecf\u6ca1\u6709\u6210\u5458\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u6210\u5458\u5219\u5220\u9664\u8def\u7531\u4fe1\u606f\u3002\u6211\u4eec\u770b\u770b\u5982\u4f55\u5904\u7406\u67d0\u8bbe\u5907\u7684IGMP\u62a5\u6587\u3002</p> <pre><code>    int igmp_rcv(struct sk_buff *skb, struct device *dev, struct options *opt,  \n        unsigned long daddr, unsigned short len, unsigned long saddr, int redo,  \n        struct inet_protocol *protocol)  \n    {  \n        // IGMP\u62a5\u5934  \n        struct igmphdr *igh=(struct igmphdr *)skb-&gt;h.raw;  \n        // \u8be5\u6570\u636e\u5305\u662f\u53d1\u7ed9\u6240\u6709\u591a\u64ad\u4e3b\u673a\u7684\uff0c\u7528\u4e8e\u67e5\u8be2\u672c\u591a\u64ad\u7ec4\u4e2d\u662f\u5426\u8fd8\u6709\u6210\u5458  \n        if(igh-&gt;type==IGMP_HOST_MEMBERSHIP_QUERY &amp;&amp; daddr==IGMP_ALL_HOSTS)  \n            igmp_heard_query(dev);  \n        // \u8be5\u6570\u636e\u5305\u662f\u5176\u5b83\u6210\u5458\u5bf9\u591a\u64ad\u8def\u7531\u67e5\u8be2\u62a5\u6587\u7684\u56de\u590d\uff0c\u540c\u591a\u64ad\u7ec4\u7684\u4e3b\u673a\u4e5f\u4f1a\u6536\u5230  \n        if(igh-&gt;type==IGMP_HOST_MEMBERSHIP_REPORT &amp;&amp; daddr==igh-&gt;group)  \n            igmp_heard_report(dev,igh-&gt;group);  \n        kfree_skb(skb, FREE_READ);  \n        return 0;  \n    }  \n</code></pre> <p>IGMP V1\u53ea\u5904\u7406\u4e24\u79cd\u62a5\u6587\uff0c\u5206\u522b\u662f\u7ec4\u6210\u5458\u67e5\u8be2\u62a5\u6587\uff08\u67e5\u8be2\u7ec4\u662f\u5426\u6709\u6210\u5458\uff09\uff0c\u5176\u5b83\u6210\u5458\u56de\u590d\u591a\u64ad\u8def\u7531\u7684\u62a5\u544a\u62a5\u6587\u3002\u7ec4\u6210\u5458\u67e5\u8be2\u62a5\u6587\u7531\u591a\u64ad\u8def\u7531\u53d1\u51fa\uff0c\u6240\u6709\u7684\u591a\u64ad\u7ec4\u4e2d\u7684\u6240\u6709\u4e3b\u673a\u90fd\u53ef\u4ee5\u6536\u5230\u3002\u7ec4\u6210\u5458\u67e5\u8be2\u62a5\u6587\u7684IP\u534f\u8bae\u5934\u7684\u76ee\u7684\u5730\u5740\u662f224.0.0.1\uff08IGMP_ALL_HOSTS\uff09\uff0c\u4ee3\u8868\u6240\u6709\u7684\u7ec4\u64ad\u4e3b\u673a\u90fd\u53ef\u4ee5\u5904\u7406\u8be5\u62a5\u6587\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e24\u79cd\u62a5\u6587\u7684\u5177\u4f53\u5b9e\u73b0\u3002</p> <pre><code>    static void igmp_heard_query(struct device *dev)  \n    {  \n        struct ip_mc_list *im;  \n        for(im=dev-&gt;ip_mc_list;im!=NULL;im=im-&gt;next)  \n            // IGMP_ALL_HOSTS\u8868\u793a\u6240\u6709\u7ec4\u64ad\u4e3b\u673a  \n            if(!im-&gt;tm_running &amp;&amp; im-&gt;multiaddr!=IGMP_ALL_HOSTS)  \n                igmp_start_timer(im);  \n    }  \n</code></pre> <p>\u8be5\u51fd\u6570\u7528\u4e8e\u5904\u7406\u7ec4\u64ad\u8def\u7531\u7684\u67e5\u8be2\u62a5\u6587\uff0cdev-&gt;ip_mc_list\u662f\u8be5\u8bbe\u5907\u5bf9\u5e94\u7684\u6240\u6709\u591a\u64ad\u7ec4\u4fe1\u606f\uff0c\u8fd9\u91cc\u9488\u5bf9\u8be5\u8bbe\u5907\u4e2d\u7684\u6bcf\u4e00\u4e2a\u591a\u64ad\u7ec4\uff0c\u5f00\u542f\u5bf9\u5e94\u7684\u5b9a\u65f6\u5668\uff0c\u8d85\u65f6\u540e\u4f1a\u53d1\u9001\u56de\u590d\u62a5\u6587\u7ed9\u591a\u64ad\u8def\u7531\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5f00\u542f\u5b9a\u65f6\u5668\u7684\u903b\u8f91\u3002</p> <pre><code>    // \u5f00\u542f\u4e00\u4e2a\u5b9a\u65f6\u5668  \n    static void igmp_start_timer(struct ip_mc_list *im)  \n    {  \n        int tv;  \n        if(im-&gt;tm_running)  \n            return;  \n        tv=random()%(10*HZ);        /* Pick a number any number 8) */  \n        im-&gt;timer.expires=tv;  \n        im-&gt;tm_running=1;  \n        add_timer(&amp;im-&gt;timer);  \n    }  \n</code></pre> <p>\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u8d85\u65f6\u65f6\u95f4\uff0c\u7136\u540e\u63d2\u5165\u7cfb\u7edf\u7ef4\u62a4\u7684\u5b9a\u65f6\u5668\u961f\u5217\u3002\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5b9a\u65f6\u5668\uff0c\u800c\u4e0d\u662f\u7acb\u5373\u56de\u590d\u5462\uff1f\u56e0\u4e3a\u591a\u64ad\u8def\u7531\u53ea\u9700\u8981\u77e5\u9053\u67d0\u4e2a\u591a\u64ad\u7ec4\u662f\u5426\u81f3\u5c11\u8fd8\u6709\u4e00\u4e2a\u6210\u5458\uff0c\u5982\u679c\u6709\u7684\u8bdd\u5c31\u4fdd\u5b58\u8be5\u591a\u64ad\u7ec4\u4fe1\u606f\uff0c\u5426\u5219\u5c31\u5220\u9664\u8def\u7531\u9879\u3002\u5982\u679c\u67d0\u591a\u64ad\u7ec4\u5728\u5c40\u57df\u7f51\u4e2d\u6709\u591a\u4e2a\u6210\u5458\uff0c\u90a3\u4e48\u591a\u4e2a\u6210\u5458\u90fd\u4f1a\u5904\u7406\u8be5\u62a5\u6587\uff0c\u5982\u679c\u90fd\u7acb\u5373\u54cd\u5e94\uff0c\u5219\u4f1a\u5f15\u8d77\u8fc7\u591a\u6ca1\u6709\u5fc5\u8981\u7684\u6d41\u91cf\uff0c\u56e0\u4e3a\u7ec4\u64ad\u8def\u7531\u53ea\u9700\u8981\u6536\u5230\u4e00\u4e2a\u54cd\u5e94\u5c31\u884c\u3002\u6211\u4eec\u770b\u770b\u8d85\u65f6\u65f6\u7684\u903b\u8f91\u3002</p> <pre><code>    static void igmp_init_timer(struct ip_mc_list *im)  \n    {  \n        im-&gt;tm_running=0;  \n        init_timer(&amp;im-&gt;timer);  \n        im-&gt;timer.data=(unsigned long)im;  \n        im-&gt;timer.function=&amp;igmp_timer_expire;  \n    }  \n\n    static void igmp_timer_expire(unsigned long data)  \n    {  \n        struct ip_mc_list *im=(struct ip_mc_list *)data;  \n        igmp_stop_timer(im);  \n        igmp_send_report(im-&gt;interface, im-&gt;multiaddr, IGMP_HOST_MEMBERSHIP_REPORT);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\uff0c\u8d85\u65f6\u540e\u4f1a\u6267\u884cigmp_send_report\u53d1\u9001\u4e00\u4e2a\u7c7b\u578b\u662fIGMP_HOST_MEMBERSHIP_REPORT\u7684IGMP\u3001\u76ee\u7684IP\u662f\u591a\u64ad\u7ec4IP\u7684\u62a5\u6587\uff0c\u8bf4\u660e\u8be5\u591a\u64ad\u7ec4\u8fd8\u6709\u6210\u5458\u3002\u8be5\u62a5\u6587\u4e0d\u4ec5\u4f1a\u53d1\u9001\u7ed9\u591a\u64ad\u8def\u7531\uff0c\u8fd8\u4f1a\u53d1\u7ed9\u540c\u591a\u64ad\u7ec4\u7684\u6240\u6709\u4e3b\u673a\u3002\u5176\u5b83\u4e3b\u673a\u4e5f\u662f\u7c7b\u4f3c\u7684\u903b\u8f91\uff0c\u5373\u5f00\u542f\u4e00\u4e2a\u5b9a\u65f6\u5668\u3002\u6240\u4ee5\u6700\u5feb\u5230\u671f\u7684\u4e3b\u673a\u4f1a\u5148\u53d1\u9001\u56de\u590d\u62a5\u6587\u7ed9\u591a\u64ad\u8def\u7531\u548c\u540c\u591a\u64ad\u7ec4\u7684\u6210\u5458\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u5176\u5b83\u540c\u591a\u64ad\u7ec4\u7684\u4e3b\u673a\u6536\u5230\u8be5\u7c7b\u62a5\u6587\u65f6\u7684\u5904\u7406\u903b\u8f91\u3002</p> <pre><code>    // \u6210\u5458\u62a5\u544a\u62a5\u6587\u5e76\u4e14\u591a\u64ad\u7ec4\u662f\u5f53\u524d\u8bbe\u7f6e\u5173\u8054\u7684\u591a\u64ad\u7ec4  \n    if(igh-&gt;type==IGMP_HOST_MEMBERSHIP_REPORT &amp;&amp; daddr==igh-&gt;group)  \n            igmp_heard_report(dev,igh-&gt;group);  \n</code></pre> <p>\u5f53\u4e00\u4e2a\u591a\u64ad\u7ec4\u7684\u5176\u5b83\u6210\u5458\u9488\u5bf9\u591a\u64ad\u8def\u7531\u7684\u67e5\u8be2\u62a5\u6587\u4f5c\u4e86\u54cd\u5e94\uff0c\u56e0\u4e3a\u8be5\u54cd\u5e94\u62a5\u6587\u7684\u76ee\u7684IP\u662f\u591a\u64ad\u7ec4IP\uff0c\u6240\u4ee5\u8be5\u591a\u64ad\u7ec4\u7684\u5176\u5b83\u6210\u5458\u4e5f\u80fd\u6536\u5230\u8be5\u62a5\u6587\u3002\u5f53\u67d0\u4e2a\u4e3b\u673a\u6536\u5230\u8be5\u7c7b\u578b\u7684\u62a5\u6587\u7684\u65f6\u5019\uff0c\u5c31\u77e5\u9053\u540c\u591a\u64ad\u7ec4\u7684\u5176\u5b83\u6210\u5458\u5df2\u7ecf\u56de\u590d\u4e86\u591a\u64ad\u8def\u7531\u4e86\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u56de\u590d\u4e86\u3002</p> <pre><code>    /* \n        \u6536\u5230\u5176\u5b83\u7ec4\u6210\u5458\uff0c\u5bf9\u4e8e\u591a\u64ad\u8def\u7531\u67e5\u8be2\u62a5\u6587\u7684\u56de\u590d\uff0c\u5219\u81ea\u5df1\u5c31\u4e0d\u7528\u56de\u590d\u4e86\uff0c \n        \u56e0\u4e3a\u591a\u64ad\u8def\u7531\u77e5\u9053\u8be5\u7ec4\u8fd8\u6709\u6210\u5458\uff0c\u4e0d\u4f1a\u5220\u9664\u8def\u7531\u4fe1\u606f\uff0c\u51cf\u5c11\u7f51\u7edc\u6d41\u91cf \n    */  \n    static void igmp_heard_report(struct device *dev, unsigned long address)  \n    {  \n        struct ip_mc_list *im;  \n        for(im=dev-&gt;ip_mc_list;im!=NULL;im=im-&gt;next)  \n            if(im-&gt;multiaddr==address)  \n                igmp_stop_timer(im);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\uff0c\u8fd9\u91cc\u4f1a\u5220\u9664\u5b9a\u65f6\u5668\u3002\u5373\u4e0d\u4f1a\u4f5c\u4e3a\u54cd\u5e94\u4e86\u3002 2.3 \u5176\u5b83 socket\u5173\u95ed\uff0c \u9000\u51fa\u5b83\u4e4b\u524d\u52a0\u5165\u8fc7\u7684\u591a\u64ad</p> <pre><code>    void ip_mc_drop_socket(struct sock *sk)  \n    {  \n        int i;  \n\n        if(sk-&gt;ip_mc_list==NULL)  \n            return;  \n\n        for(i=0;i&lt;IP_MAX_MEMBERSHIPS;i++)  \n        {  \n            if(sk-&gt;ip_mc_list-&gt;multidev[i])  \n            {  \n                ip_mc_dec_group(sk-&gt;ip_mc_list-&gt;multidev[i], sk-&gt;ip_mc_list-&gt;multiaddr[i]);  \n                sk-&gt;ip_mc_list-&gt;multidev[i]=NULL;  \n            }  \n        }  \n        kfree_s(sk-&gt;ip_mc_list,sizeof(*sk-&gt;ip_mc_list));  \n        sk-&gt;ip_mc_list=NULL;  \n    }  \n</code></pre> <p>\u8bbe\u5907\u505c\u6b62\u5de5\u4f5c\u4e86\uff0c\u5220\u9664\u5bf9\u5e94\u7684\u591a\u64ad\u4fe1\u606f</p> <pre><code>    void ip_mc_drop_device(struct device *dev)  \n    {  \n        struct ip_mc_list *i;  \n        struct ip_mc_list *j;  \n        for(i=dev-&gt;ip_mc_list;i!=NULL;i=j)  \n        {  \n            j=i-&gt;next;  \n            kfree_s(i,sizeof(*i));  \n        }  \n        dev-&gt;ip_mc_list=NULL;  \n    }  \n</code></pre> <p>\u4ee5\u4e0a\u662fIGMP V1\u7248\u672c\u7684\u5b9e\u73b0\uff0c\u5728\u540e\u7eedV2 V3\u7248\u672c\u4e86\u53c8\u589e\u52a0\u4e86\u5f88\u591a\u529f\u80fd\uff0c\u6bd4\u5982\u79bb\u5f00\u7ec4\u62a5\u6587\uff0c\u9488\u5bf9\u79bb\u5f00\u62a5\u6587\u4e2d\u7684\u591a\u64ad\u7ec4\uff0c\u589e\u52a0\u7279\u5b9a\u7ec4\u67e5\u8be2\u62a5\u6587\uff0c\u7528\u4e8e\u67e5\u8be2\u67d0\u4e2a\u7ec4\u4e2d\u662f\u5426\u8fd8\u6709\u6210\u5458\uff0c\u53e6\u5916\u8fd8\u6709\u8def\u7531\u9009\u4e3e\uff0c\u5f53\u5c40\u57df\u7f51\u4e2d\u6709\u591a\u4e2a\u591a\u64ad\u8def\u7531\uff0c\u591a\u64ad\u8def\u7531\u4e4b\u95f4\u901a\u8fc7\u534f\u8bae\u9009\u4e3e\u51faIP\u6700\u5c0f\u7684\u8def\u7531\u4e3a\u67e5\u8be2\u8def\u7531\uff0c\u5b9a\u65f6\u7ed9\u591a\u64ad\u7ec4\u53d1\u9001\u63a2\u6d4b\u62a5\u6587\u3002\u7136\u540e\u6210\u4e3a\u67e5\u8be2\u5668\u7684\u591a\u64ad\u8def\u7531\uff0c\u4f1a\u5b9a\u671f\u7ed9\u5176\u5b83\u591a\u64ad\u8def\u7531\u540c\u6b65\u5fc3\u8df3\u3002\u5426\u5219\u5176\u5b83\u591a\u64ad\u8def\u7531\u4f1a\u5728\u5b9a\u65f6\u5668\u8d85\u65f6\u65f6\u8ba4\u4e3a\u5f53\u524d\u67e5\u8be2\u8def\u7531\u5df2\u7ecf\u6302\u4e86\uff0c\u91cd\u65b0\u9009\u4e3e\u3002</p>"},{"location":"chapter16-UDP/#16253","title":"16.2.5.3 \u5f00\u542f\u591a\u64ad","text":"<p>UDP\u7684\u591a\u64ad\u80fd\u529b\u662f\u9700\u8981\u7528\u6237\u4e3b\u52a8\u5f00\u542f\u7684\uff0c\u539f\u56e0\u662f\u9632\u6b62\u7528\u6237\u53d1\u9001UDP\u6570\u636e\u5305\u7684\u65f6\u5019\uff0c\u8bef\u4f20\u4e86\u4e00\u4e2a\u591a\u64ad\u5730\u5740\uff0c\u4f46\u5176\u5b9e\u7528\u6237\u662f\u60f3\u53d1\u9001\u4e00\u4e2a\u5355\u64ad\u7684\u6570\u636e\u5305\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7setBroadcast\u5f00\u542f\u591a\u64ad\u80fd\u529b\u3002\u6211\u4eec\u770bLibuv\u7684\u4ee3\u7801\u3002</p> <pre><code>    int uv_udp_set_broadcast(uv_udp_t* handle, int on) {  \n      if (setsockopt(handle-&gt;io_watcher.fd,  \n                     SOL_SOCKET,  \n                     SO_BROADCAST,  \n                     &amp;on,  \n                     sizeof(on))) {  \n        return UV__ERR(errno);  \n      }  \n\n      return 0;  \n    }  \n</code></pre> <p>\u518d\u770b\u770b\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b9e\u73b0\u3002</p> <pre><code>    int sock_setsockopt(struct sock *sk, int level, int optname,  \n            char *optval, int optlen){  \n        ...  \n        case SO_BROADCAST:  \n            sk-&gt;broadcast=val?1:0;  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u8bbe\u7f6e\u4e00\u4e2a\u6807\u8bb0\u4f4d\u3002\u5f53\u6211\u4eec\u53d1\u9001\u6d88\u606f\u7684\u65f6\u5019\uff0c\u5982\u679c\u76ee\u7684\u5730\u5740\u662f\u591a\u64ad\u5730\u5740\uff0c\u4f46\u662f\u53c8\u6ca1\u6709\u8bbe\u7f6e\u8fd9\u4e2a\u6807\u8bb0\uff0c\u5219\u4f1a\u62a5\u9519\u3002</p> <pre><code>    if(!sk-&gt;broadcast &amp;&amp; ip_chk_addr(sin.sin_addr.s_addr)==IS_BROADCAST)  \n          return -EACCES;  \n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u6765\u81ea\u8c03\u7528udp\u7684\u53d1\u9001\u51fd\u6570\uff08\u4f8b\u5982sendto\uff09\u65f6\uff0c\u8fdb\u884c\u7684\u6821\u9a8c\uff0c\u5982\u679c\u53d1\u9001\u7684\u76ee\u7684ip\u662f\u591a\u64ad\u5730\u5740\uff0c\u4f46\u662f\u6ca1\u6709\u8bbe\u7f6e\u591a\u64ad\u6807\u8bb0\uff0c\u5219\u62a5\u9519\u3002</p>"},{"location":"chapter16-UDP/#16254","title":"16.2.5.4 \u591a\u64ad\u7684\u95ee\u9898","text":"<p>\u670d\u52a1\u5668</p> <pre><code>    const dgram = require('dgram');  \n    const udp = dgram.createSocket('udp4');  \n\n    udp.bind(1234, () =&gt; {  \n        // \u5c40\u57df\u7f51\u591a\u64ad\u5730\u5740\uff08224.0.0.0~224.0.0.255\uff0c\u8be5\u8303\u56f4\u7684\u591a\u64ad\u6570\u636e\u5305\uff0c\u8def\u7531\u5668\u4e0d\u4f1a\u8f6c\u53d1\uff09  \n        udp.addMembership('224.0.0.114');  \n    });  \n\n    udp.on('message', (msg, rinfo) =&gt; {  \n        console.log(`receive msg: ${msg} from ${rinfo.address}:${rinfo.port}`);  \n    });  \n</code></pre> <p>\u670d\u52a1\u5668\u7ed1\u5b9a1234\u7aef\u53e3\u540e\uff0c\u52a0\u5165\u591a\u64ad\u7ec4224.0.0.114\uff0c\u7136\u540e\u7b49\u5f85\u591a\u64ad\u6570\u636e\u7684\u5230\u6765\u3002 \u5ba2\u6237\u7aef</p> <pre><code>    const dgram = require('dgram');  \n    const udp = dgram.createSocket('udp4');  \n    udp.bind(1234, () =&gt; {  \n        udp.addMembership('224.0.0.114');  \n    });  \n    udp.send('test', 1234, '224.0.0.114', (err) =&gt; {});   \n</code></pre> <p>\u5ba2\u6237\u7aef\u7ed1\u5b9a1234\u7aef\u53e3\u540e\uff0c\u4e5f\u52a0\u5165\u4e86\u591a\u64ad\u7ec4224.0.0.114\uff0c\u7136\u540e\u53d1\u9001\u6570\u636e\uff0c\u4f46\u662f\u53d1\u73b0\u670d\u52a1\u7aef\u6ca1\u6709\u6536\u5230\u6570\u636e\uff0c\u5ba2\u6237\u7aef\u6253\u5370\u4e86receive msg test from 169.254.167.41:1234\u3002\u8fd9\u600e\u4e48\u591a\u4e86\u4e00\u4e2aIP\u51fa\u6765\uff1f\u539f\u6765\u6211\u4e3b\u673a\u6709\u4e24\u4e2a\u5c40\u57df\u7f51\u5730\u5740\u3002\u5f53\u6211\u4eec\u52a0\u5165\u591a\u64ad\u7ec4\u7684\u65f6\u5019\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u8bbe\u7f6e\u52a0\u5165\u54ea\u4e2a\u591a\u64ad\u7ec4\uff0c\u8fd8\u80fd\u8bbe\u7f6e\u51fa\u53e3\u7684\u8bbe\u5907\u548cIP\u3002\u5f53\u6211\u4eec\u8c03\u7528udp.addMembership('224.0.0.114')\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u662f\u8bbe\u7f6e\u4e86\u6211\u4eec\u52a0\u5165\u7684\u591a\u64ad\u7ec4\uff0c\u6ca1\u6709\u8bbe\u7f6e\u51fa\u53e3\u3002\u8fd9\u65f6\u5019\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u4e3a\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u3002\u6839\u636e\u8f93\u51fa\uff0c\u6211\u4eec\u53d1\u73b0\u64cd\u4f5c\u7cfb\u7edf\u9009\u62e9\u7684\u662f169.254.167.41\uff08\u5b50\u7f51\u63a9\u7801\u662f255.255.0.0\uff09\u3002\u56e0\u4e3a\u8fd9\u4e2aIP\u548c192\u5f00\u5934\u7684\u90a3\u4e2a\u4e0d\u662f\u540c\u4e00\u5b50\u7f51\uff0c\u4f46\u662f\u6211\u4eec\u52a0\u5165\u7684\u662f\u5c40\u57df\u7f51\u7684\u591a\u64adIP\uff0c\u6240\u6709\u670d\u52a1\u7aef\u65e0\u6cd5\u6536\u5230\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u6570\u636e\u5305\u3002\u4e0b\u9762\u662fNode.js\u6587\u6863\u7684\u89e3\u91ca\u3002</p> <p>Tells the kernel to join a multicast group at the given multicastAddress and multicastInterface using the IP_ADD_MEMBERSHIP socket option. If the multicastInterface argument is not specified, the operating system will choose one interface and will add membership to it. To add membership to every available interface, call addMembership multiple times, once per interface.</p> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u64cd\u4f5c\u7cfb\u7edf\u7684\u76f8\u5173\u903b\u8f91\u3002</p> <pre><code>    if(MULTICAST(daddr) &amp;&amp; *dev==NULL &amp;&amp; skb-&gt;sk &amp;&amp; *skb-&gt;sk-&gt;ip_mc_name)  \n            *dev=dev_get(skb-&gt;sk-&gt;ip_mc_name);  \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u6765\u81ea\u64cd\u4f5c\u7cfb\u7edf\u53d1\u9001IP\u6570\u636e\u5305\u65f6\u7684\u903b\u8f91\uff0c\u5982\u679c\u76ee\u7684IP\u4f3c\u4e4e\u591a\u64ad\u5730\u5740\u5e76\u4e14ip_mc_name\u975e\u7a7a\uff08\u5373\u6211\u4eec\u901a\u8fc7addMembership\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8bbe\u7f6e\u7684\u503c\uff09\uff0c\u5219\u51fa\u53e3\u8bbe\u5907\u5c31\u662f\u6211\u4eec\u8bbe\u7f6e\u7684\u503c\u3002\u5426\u5219\u64cd\u4f5c\u7cfb\u7edf\u81ea\u5df1\u9009\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u663e\u793a\u6307\u5b9a\u8fd9\u4e2a\u51fa\u53e3\uff0c\u628a\u4ee3\u7801\u6539\u6210udp.addMembership('224.0.0.114', '192.168.8.164');\u91cd\u65b0\u6267\u884c\u53d1\u73b0\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u90fd\u663e\u793a\u4e86receive msg test from 192.168.8.164:1234\u3002\u4e3a\u4ec0\u4e48\u5ba2\u6237\u7aef\u81ea\u5df1\u4e5f\u4f1a\u6536\u5230\u5462\uff1f\u539f\u6765\u64cd\u4f5c\u7cfb\u7edf\u53d1\u9001\u591a\u64ad\u6570\u636e\u7684\u65f6\u5019\uff0c\u4e5f\u4f1a\u7ed9\u81ea\u5df1\u53d1\u9001\u4e00\u4efd\u3002\u6211\u4eec\u770b\u770b\u76f8\u5173\u903b\u8f91</p> <pre><code>    // \u76ee\u7684\u5730\u662f\u591a\u64ad\u5730\u5740\uff0c\u5e76\u4e14\u4e0d\u662f\u56de\u73af\u8bbe\u5907   \n    if (MULTICAST(iph-&gt;daddr) &amp;&amp; !(dev-&gt;flags&amp;IFF_LOOPBACK))  \n    {  \n        // \u662f\u5426\u9700\u8981\u7ed9\u81ea\u5df1\u4e00\u4efd\uff0c\u9ed8\u8ba4\u4e3atrue  \n        if(sk==NULL || sk-&gt;ip_mc_loop)  \n        {     \n            // \u7ed9\u6240\u6709\u591a\u64ad\u7ec4\u7684\u6240\u6709\u4e3b\u673a\u7684\u6570\u636e\u5305\uff0c\u5219\u76f4\u63a5\u7ed9\u81ea\u5df1\u4e00\u4efd  \n            if(iph-&gt;daddr==IGMP_ALL_HOSTS)  \n                ip_loopback(dev,skb);  \n            else  \n            {     \n                // \u5224\u65ad\u76ee\u7684ip\u662f\u5426\u5728\u5f53\u524d\u8bbe\u5907\u7684\u591a\u64adip\u5217\u8868\u4e2d\uff0c\u662f\u7684\u56de\u4f20\u4e00\u4efd  \n                struct ip_mc_list *imc=dev-&gt;ip_mc_list;  \n                while(imc!=NULL)  \n                {  \n                    if(imc-&gt;multiaddr==iph-&gt;daddr)  \n                    {  \n                        ip_loopback(dev,skb);  \n                        break;  \n                    }  \n                    imc=imc-&gt;next;  \n                }  \n            }  \n        }  \n    }  \n</code></pre> <p>\u4ee5\u4e0a\u4ee3\u7801\u6765\u81eaIP\u5c42\u53d1\u9001\u6570\u636e\u5305\u65f6\u7684\u903b\u8f91\u3002\u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u4e86sk-&gt;ip_mc_loop\u5b57\u6bb5\u4e3a1\uff0c\u5e76\u4e14\u6570\u636e\u5305\u7684\u76ee\u7684IP\u5728\u51fa\u53e3\u8bbe\u5907\u7684\u591a\u64ad\u5217\u8868\u4e2d\uff0c\u5219\u9700\u8981\u7ed9\u81ea\u5df1\u56de\u4f20\u4e00\u4efd\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5173\u95ed\u8fd9\u4e2a\u7279\u6027\u5462\uff1f\u8c03\u7528udp.setMulticastLoopback(false)\u5c31\u53ef\u4ee5\u4e86\u3002</p>"},{"location":"chapter16-UDP/#16255","title":"16.2.5.5 \u5176\u5b83\u529f\u80fd","text":"<p>UDP\u6a21\u5757\u8fd8\u63d0\u4f9b\u4e86\u5176\u5b83\u4e00\u4e9b\u529f\u80fd 1 \u83b7\u53d6\u672c\u7aef\u5730\u5740address \u5982\u679c\u7528\u6237\u6ca1\u6709\u663e\u793a\u8c03\u7528bind\u7ed1\u5b9a\u81ea\u5df1\u8bbe\u7f6e\u7684IP\u548c\u7aef\u53e3\uff0c\u90a3\u4e48\u64cd\u4f5c\u7cfb\u7edf\u5c31\u4f1a\u968f\u673a\u9009\u62e9\u3002\u901a\u8fc7address\u51fd\u6570\u5c31\u53ef\u4ee5\u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf\u9009\u62e9\u7684\u6e90IP\u548c\u7aef\u53e3\u3002 2 \u83b7\u53d6\u5bf9\u7aef\u7684\u5730\u5740 \u901a\u8fc7remoteAddress\u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u5bf9\u7aef\u5730\u5740\u3002\u8be5\u5730\u5740\u7531\u7528\u6237\u8c03\u7528connect\u6216sendto\u51fd\u6570\u65f6\u8bbe\u7f6e\u3002 3 \u83b7\u53d6/\u8bbe\u7f6e\u7f13\u51b2\u533a\u5927\u5c0fget/setRecvBufferSize\uff0cget/setSendBufferSize 4 setMulticastLoopback \u53d1\u9001\u591a\u64ad\u6570\u636e\u5305\u7684\u65f6\u5019\uff0c\u5982\u679c\u591a\u64adIP\u5728\u51fa\u53e3\u8bbe\u5907\u7684\u591a\u64ad\u5217\u8868\u4e2d\uff0c\u5219\u7ed9\u56de\u73af\u8bbe\u5907\u4e5f\u53d1\u4e00\u4efd\u3002 5 setMulticastInterface \u8bbe\u7f6e\u591a\u64ad\u6570\u636e\u7684\u51fa\u53e3\u8bbe\u5907 6 \u52a0\u5165\u6216\u9000\u51fa\u591a\u64ad\u7ec4addMembership/dropMembership 7 addSourceSpecificMembership/dropSourceSpecificMembership \u8fd9\u4e24\u4e2a\u51fd\u6570\u662f\u8bbe\u7f6e\u672c\u7aef\u53ea\u63a5\u6536\u7279\u6027\u6e90\uff08\u4e3b\u673a\uff09\u7684\u591a\u64ad\u6570\u636e\u5305\u3002 8 setTTL \u5355\u64adttl\uff08\u5355\u64ad\u7684\u65f6\u5019\uff0cIP\u534f\u8bae\u5934\u4e2d\u7684ttl\u5b57\u6bb5\uff09\u3002 9 setMulticastTTL \u591a\u64adttl\uff08\u591a\u64ad\u7684\u65f6\u5019\uff0cIP\u534f\u8bae\u7684ttl\u5b57\u6bb5\uff09\u3002 10 ref/unref \u8fd9\u4e24\u4e2a\u51fd\u6570\u8bbe\u7f6e\u5982\u679cNode.js\u4e3b\u8fdb\u7a0b\u4e2d\u53ea\u6709UDP\u5bf9\u5e94\u7684handle\u65f6\uff0c\u662f\u5426\u5141\u8bb8Node.js\u9000\u51fa\u3002Node.js\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa\u7684\u6761\u4ef6\u4e4b\u4e00\u662f\u662f\u5426\u8fd8\u6709ref\u72b6\u6001\u7684handle\u3002 \u8fd9\u4e9b\u90fd\u662f\u5bf9\u64cd\u4f5c\u7cfb\u7edfAPI\u7684\u5c01\u88c5\uff0c\u5c31\u4e0d\u4e00\u4e00\u5206\u6790\u3002</p>"},{"location":"chapter16-UDP/#1626","title":"16.2.6 \u7aef\u53e3\u590d\u7528","text":"<p>\u6211\u4eec\u5728\u7f51\u7edc\u7f16\u7a0b\u4e2d\u7ecf\u5e38\u4f1a\u9047\u5230\u7aef\u53e3\u91cd\u590d\u7ed1\u5b9a\u7684\u9519\u8bef\uff0c\u6839\u636e\u5230\u5e95\u662f\u6211\u4eec\u4e0d\u80fd\u7ed1\u5b9a\u5230\u540c\u4e00\u4e2a\u7aef\u53e3\u548cIP\u4e24\u6b21\u3002\u4f46\u662f\u5728UDP\u4e2d\uff0c\u8fd9\u662f\u5141\u8bb8\u7684\uff0c\u8fd9\u5c31\u662f\u7aef\u53e3\u590d\u7528\u7684\u529f\u80fd\uff0c\u5728TCP\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u7aef\u53e3\u590d\u7528\u6765\u89e3\u51b3\u670d\u52a1\u5668\u91cd\u542f\u65f6\u91cd\u65b0\u7ed1\u5b9a\u5230\u540c\u4e00\u4e2a\u7aef\u53e3\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u7aef\u53e3\u6709\u4e00\u4e2a2msl\u7684\u7b49\u5f85\u65f6\u95f4\uff0c\u91cd\u542f\u670d\u52a1\u5668\u91cd\u65b0\u7ed1\u5b9a\u5230\u8fd9\u4e2a\u7aef\u53e3\u65f6\uff0c\u9ed8\u8ba4\u4f1a\u62a5\u9519\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u4e86\u7aef\u53e3\u590d\u7528\uff08Node.js\u81ea\u52a8\u5e2e\u6211\u4eec\u8bbe\u7f6e\u4e86\uff09\uff0c\u5219\u53ef\u4ee5\u7ed5\u8fc7\u8fd9\u4e2a\u9650\u5236\u3002UDP\u4e2d\u4e5f\u652f\u6301\u7aef\u53e3\u590d\u7528\u7684\u529f\u80fd\uff0c\u4f46\u662f\u529f\u80fd\u3001\u7528\u9014\u548cTCP\u7684\u4e0d\u592a\u4e00\u6837\u3002\u56e0\u4e3a\u591a\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u7ed1\u5b9a\u540c\u4e00\u4e2aIP\u548c\u7aef\u53e3\u3002\u4f46\u662f\u4e00\u822c\u53ea\u7528\u4e8e\u591a\u64ad\u7684\u60c5\u51b5\u4e0b\u3002\u4e0b\u9762\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0budp\u7aef\u53e3\u590d\u7528\u7684\u903b\u8f91\u3002\u5728Node.js\u4e2d\uff0c\u4f7f\u7528UDP\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7reuseAddr\u9009\u9879\u4f7f\u5f97\u8fdb\u7a0b\u53ef\u4ee5\u590d\u7528\u7aef\u53e3\uff0c\u5e76\u4e14\u6bcf\u4e00\u4e2a\u60f3\u590d\u7528\u7aef\u53e3\u7684socket\u90fd\u9700\u8981\u8bbe\u7f6ereuseAddr\u3002\u6211\u4eec\u770b\u4e00\u4e0bNode.js\u4e2d\u5173\u4e8ereuseAddr\u7684\u903b\u8f91\u3002</p> <pre><code>    Socket.prototype.bind = function(port_, address_ /* , callback */) {  \n      let flags = 0;  \n        if (state.reuseAddr)  \n          flags |= UV_UDP_REUSEADDR;  \n        state.handle.bind(ip, port || 0, flags);  \n    };  \n    // \u6211\u4eec\u770b\u5230Node.js\u5728bind\u7684\u65f6\u5019\u4f1a\u5904\u7406reuseAddr\u5b57\u6bb5\u3002\u6211\u4eec\u76f4\u63a5\u770bLibuv\u7684\u903b\u8f91\u3002\n    int uv__udp_bind(uv_udp_t* handle,  \n                     const struct sockaddr* addr,  \n                     unsigned int addrlen,  \n                     unsigned int flags) {  \n      if (flags &amp; UV_UDP_REUSEADDR) {  \n        err = uv__set_reuse(fd);  \n      }  \n      bind(fd, addr, addrlen))\n      return 0;  \n    }  \n\n    static int uv__set_reuse(int fd) {  \n      int yes;  \n      yes = 1;  \n\n      if (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &amp;yes, sizeof(yes)))  \n        return UV__ERR(errno);  \n      return 0;  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230Libuv\u901a\u8fc7\u6700\u7ec8\u901a\u8fc7setsockopt\u8bbe\u7f6e\u4e86\u7aef\u53e3\u590d\u7528\uff0c\u5e76\u4e14\u662f\u5728bind\u4e4b\u524d\u3002\u6211\u4eec\u4e0d\u59a8\u518d\u6df1\u5165\u4e00\u70b9\uff0c\u770b\u4e00\u4e0bLinux\u5185\u6838\u7684\u5b9e\u73b0\u3002</p> <pre><code>    asmlinkage long sys_setsockopt(int fd, int level, int optname, char __user *optval, int optlen)  \n    {  \n        int err;  \n        struct socket *sock;  \n\n        if (optlen &lt; 0)  \n            return -EINVAL;  \n\n        if ((sock = sockfd_lookup(fd, &amp;err))!=NULL)  \n        {  \n            if (level == SOL_SOCKET)  \n                err=sock_setsockopt(sock,level,optname,optval,optlen);  \n            else  \n                err=sock-&gt;ops-&gt;setsockopt(sock, level, optname, optval, optlen);  \n            sockfd_put(sock);  \n        }  \n        return err;  \n    }  \n</code></pre> <p>sys_setsockopt\u662fsetsockopt\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u6211\u4eec\u770b\u5230sys_setsockopt\u4e5f\u53ea\u662f\u4e2a\u5165\u53e3\u51fd\u6570\uff0c\u5177\u4f53\u51fd\u6570\u662fsock_setsockopt\u3002</p> <pre><code>    int sock_setsockopt(struct socket *sock, int level, int optname,  \n                char __user *optval, int optlen)  \n    {  \n        struct sock *sk=sock-&gt;sk;  \n        int val;  \n        int valbool;  \n        int ret = 0;  \n\n        if (get_user(val, (int __user *)optval))  \n            return -EFAULT;  \n\n        valbool = val?1:0;  \n\n        lock_sock(sk);  \n\n        switch(optname)   \n        {  \n            case SO_REUSEADDR:  \n                sk-&gt;sk_reuse = valbool;  \n                break;  \n            // ...  \n        release_sock(sk);  \n        return ret;  \n    }  \n</code></pre> <p>\u64cd\u4f5c\u7cfb\u7edf\u7684\u5904\u7406\u5f88\u7b80\u5355\uff0c\u53ea\u662f\u505a\u4e86\u4e00\u4e2a\u6807\u8bb0\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0bbind\u7684\u65f6\u5019\u662f\u600e\u4e48\u5904\u7406\u7684\uff0c\u56e0\u4e3a\u7aef\u53e3\u662f\u5426\u91cd\u590d\u548c\u80fd\u5426\u590d\u7528\u662f\u5728bind\u7684\u65f6\u5019\u5224\u65ad\u7684\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5728TCP\u4e2d\uff0c\u5373\u4f7f\u4e24\u4e2a\u8fdb\u7a0b\u4e0d\u80fd\u7ed1\u5b9a\u5230\u540c\u4e00\u4e2aIP\u548c\u7aef\u53e3\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u5728\u4e3b\u8fdb\u7a0b\u91cc\u6267\u884c\u4e86bind\u4e4b\u540e\uff0c\u518dfork\u51fd\u6570\u65f6\uff0c\u662f\u53ef\u4ee5\u5b9e\u73b0\u7ed1\u5b9a\u540c\u4e00\u4e2aIP\u7aef\u53e3\u7684\u3002\u8a00\u5f52\u6b63\u4f20\u6211\u4eec\u770b\u4e00\u4e0bUDP\u4e2d\u6267\u884cbind\u65f6\u7684\u903b\u8f91\u3002</p> <pre><code>    int inet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)  \n    {  \n        if (sk-&gt;sk_prot-&gt;get_port(sk, snum)) {  \n            inet-&gt;saddr = inet-&gt;rcv_saddr = 0;  \n            err = -EADDRINUSE;  \n            goto out_release_sock;  \n        }  \n\n    }  \n</code></pre> <p>\u6bcf\u4e2a\u534f\u8bae\u90fd\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684get_port\u94a9\u5b50\u51fd\u6570\u3002\u7528\u6765\u5224\u65ad\u5f53\u524d\u7684\u7aef\u53e3\u662f\u5426\u5141\u8bb8\u88ab\u7ed1\u5b9a\u3002\u5982\u679c\u4e0d\u5141\u8bb8\u5219\u8fd4\u56deEADDRINUSE\uff0c\u6211\u4eec\u770b\u770bUDP\u534f\u8bae\u7684\u5b9e\u73b0\u3002</p> <pre><code>    static int udp_v4_get_port(struct sock *sk, unsigned short snum)  \n    {  \n        struct hlist_node *node;  \n        struct sock *sk2;  \n        struct inet_sock *inet = inet_sk(sk);  \n        // \u901a\u8fc7\u7aef\u53e3\u627e\u5230\u5bf9\u5e94\u7684\u94fe\u8868\uff0c\u7136\u540e\u904d\u5386\u94fe\u8868  \n        sk_for_each(sk2, node, &amp;udp_hash[snum &amp; (UDP_HTABLE_SIZE - 1)]) {  \n                struct inet_sock *inet2 = inet_sk(sk2);  \n                 // \u7aef\u53e3\u5df2\u4f7f\u7528\uff0c\u5219\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u590d\u7528  \n                if (inet2-&gt;num == snum &amp;&amp;  \n                    sk2 != sk &amp;&amp;  \n                    (!inet2-&gt;rcv_saddr ||  \n                     !inet-&gt;rcv_saddr ||  \n                     inet2-&gt;rcv_saddr == inet-&gt;rcv_saddr) &amp;&amp;  \n                    // \u6bcf\u4e2asocket\u90fd\u9700\u8981\u8bbe\u7f6e\u7aef\u53e3\u590d\u7528\u6807\u8bb0  \n                    (!sk2-&gt;sk_reuse || !sk-&gt;sk_reuse))  \n                    // \u4e0d\u53ef\u4ee5\u590d\u7528\uff0c\u62a5\u9519  \n                    goto fail;  \n            }  \n        // \u53ef\u4ee5\u590d\u7528  \n        inet-&gt;num = snum;  \n        if (sk_unhashed(sk)) {  \n            // \u627e\u5230\u7aef\u53e3\u5bf9\u5e94\u7684\u4f4d\u7f6e  \n            struct hlist_head *h = &amp;udp_hash[snum &amp; (UDP_HTABLE_SIZE - 1)];  \n            // \u63d2\u5165\u94fe\u8868  \n            sk_add_node(sk, h);  \n            sock_prot_inc_use(sk-&gt;sk_prot);  \n        }  \n        return 0;  \n\n    fail:  \n        write_unlock_bh(&amp;udp_hash_lock);  \n        return 1;  \n    }  \n</code></pre> <p>\u5206\u6790\u4e4b\u524d\u6211\u4eec\u5148\u770b\u4e00\u4e0b\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\uff0cUDP\u534f\u8bae\u7684\u5b9e\u73b0\u4e2d\uff0c\u4f1a\u4f7f\u7528\u5982\u4e0b\u7684\u6570\u636e\u7ed3\u6784\u8bb0\u5f55\u6bcf\u4e00\u4e2aUDP socket\uff0c\u5982\u56fe16-6\u6240\u793a\u3002  \u56fe16-6</p> <p>\u6211\u4eec\u770b\u5230\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u4f5c\u4e3a\u54c8\u5e0c\u8868\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e00\u4e2asocket\u7684\u65f6\u5019\uff0c\u9996\u5148\u4f1a\u6839\u636esocket\u7684\u6e90\u7aef\u53e3\u548c\u54c8\u5e0c\u7b97\u6cd5\u8ba1\u7b97\u5f97\u5230\u4e00\u4e2a\u6570\u7ec4\u7d22\u5f15\uff0c\u7136\u540e\u628asocket\u63d2\u5165\u7d22\u5f15\u9501\u5bf9\u5e94\u7684\u94fe\u8868\u4e2d\uff0c\u5373\u54c8\u5e0c\u51b2\u7a81\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u94fe\u5730\u5740\u6cd5\u3002\u56de\u5230\u4ee3\u7801\u7684\u903b\u8f91\uff0c\u5f53\u7528\u6237\u60f3\u7ed1\u5b9a\u4e00\u4e2a\u7aef\u53e3\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6839\u636e\u7aef\u53e3\u62ff\u5230\u5bf9\u5e94\u7684socket\u94fe\u8868\uff0c\u7136\u540e\u9010\u4e2a\u5224\u65ad\u662f\u5426\u6709\u76f8\u7b49\u7684\u7aef\u53e3\uff0c\u5982\u679c\u6709\u5219\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u590d\u7528\u3002\u4f8b\u5982\u4e24\u4e2asocket\u90fd\u8bbe\u7f6e\u4e86\u590d\u7528\u6807\u8bb0\u5219\u53ef\u4ee5\u590d\u7528\u3002\u6700\u540e\u628asocket\u63d2\u5165\u5230\u94fe\u8868\u4e2d\u3002</p> <pre><code>    static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)  \n    {         \n            // \u5934\u7ed3\u70b9  \n        struct hlist_node *first = h-&gt;first;  \n        n-&gt;next = first;  \n        if (first)  \n            first-&gt;pprev = &amp;n-&gt;next;  \n        h-&gt;first = n;  \n        n-&gt;pprev = &amp;h-&gt;first;  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u64cd\u4f5c\u7cfb\u7edf\u662f\u4ee5\u5934\u63d2\u6cd5\u7684\u65b9\u5f0f\u63d2\u5165\u65b0\u8282\u70b9\u7684\u3002\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0b\u64cd\u4f5c\u7cfb\u7edf\u662f\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7684\u3002</p>"},{"location":"chapter16-UDP/#16261","title":"16.2.6.1 \u591a\u64ad","text":"<p>\u6211\u4eec\u5148\u770b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5728\u540c\u4e3b\u673a\u4e0a\u65b0\u5efa\u4e24\u4e2aJS\u6587\u4ef6\uff08\u5ba2\u6237\u7aef\uff09\uff0c\u4ee3\u7801\u5982\u4e0b</p> <pre><code>    const dgram = require('dgram');    \n    const udp = dgram.createSocket({type: 'udp4', reuseAddr: true});    \n    udp.bind(1234, \u2018192.168.8.164\u2018, () =&gt; {    \n        udp.addMembership('224.0.0.114', '192.168.8.164');    \n    });    \n    udp.on('message', (msg) =&gt; {  \n      console.log(msg)  \n    });  \n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u4f7f\u5f97\u4e24\u4e2a\u8fdb\u7a0b\u90fd\u76d1\u542c\u4e86\u540c\u6837\u7684IP\u548c\u7aef\u53e3\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5199\u4e00\u4e2aUDP\u670d\u52a1\u5668\u3002</p> <pre><code>    const dgram = require('dgram');    \n    const udp = dgram.createSocket({type: 'udp4'});    \n    const socket = udp.bind(5678);    \n    socket.send('hi', 1234, '224.0.0.114', (err) =&gt; {  \n      console.log(err)  \n    });  \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u7ed9\u4e00\u4e2a\u591a\u64ad\u7ec4\u53d1\u9001\u4e86\u4e00\u4e2a\u6570\u636e\uff0c\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u5ba2\u6237\u7aef\u8fdb\u7a0b\u90fd\u6536\u5230\u4e86\u6570\u636e\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u6536\u5230\u6570\u636e\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u662f\u5982\u4f55\u628a\u6570\u636e\u5206\u53d1\u7ed9\u6bcf\u4e2a\u76d1\u542c\u4e86\u540c\u6837IP\u548c\u7aef\u53e3\u7684\u8fdb\u7a0b\u7684\u3002\u4e0b\u9762\u662f\u64cd\u4f5c\u7cfb\u7edf\u6536\u5230\u4e00\u4e2aUDP\u6570\u636e\u5305\u65f6\u7684\u903b\u8f91\u3002</p> <pre><code>    int udp_rcv(struct sk_buff *skb)  \n    {  \n        struct sock *sk;  \n        struct udphdr *uh;  \n        unsigned short ulen;  \n        struct rtable *rt = (struct rtable*)skb-&gt;dst;\n        // ip\u5934\u4e2d\u8bb0\u5f55\u7684\u6e90ip\u548c\u76ee\u7684ip  \n        u32 saddr = skb-&gt;nh.iph-&gt;saddr;  \n        u32 daddr = skb-&gt;nh.iph-&gt;daddr;  \n        int len = skb-&gt;len;  \n        // udp\u534f\u8bae\u5934\u7ed3\u6784\u4f53  \n        uh = skb-&gt;h.uh;  \n        ulen = ntohs(uh-&gt;len);  \n        // \u5e7f\u64ad\u6216\u591a\u64ad\u5305  \n        if(rt-&gt;rt_flags &amp; (RTCF_BROADCAST|RTCF_MULTICAST))  \n            return udp_v4_mcast_deliver(skb, uh, saddr, daddr);  \n        // \u5355\u64ad  \n        sk = udp_v4_lookup(saddr, uh-&gt;source, daddr, uh-&gt;dest, skb-&gt;dev-&gt;ifindex);  \n        // \u627e\u5230\u5bf9\u5e94\u7684socket  \n        if (sk != NULL) {  \n            // \u628a\u6570\u636e\u63d2\u5230socket\u7684\u6d88\u606f\u961f\u5217  \n            int ret = udp_queue_rcv_skb(sk, skb);  \n            sock_put(sk);  \n            if (ret &gt; 0)  \n                return -ret;  \n            return 0;  \n        }  \n        return(0);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u5355\u64ad\u548c\u975e\u5355\u64ad\u65f6\u5904\u7406\u903b\u8f91\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6211\u4eec\u5148\u770b\u4e00\u4e0b\u975e\u5355\u64ad\u7684\u60c5\u51b5</p> <pre><code>    static int udp_v4_mcast_deliver(struct sk_buff *skb, struct udphdr *uh,  \n                     u32 saddr, u32 daddr)  \n    {  \n        struct sock *sk;  \n        int dif;  \n\n        read_lock(&amp;udp_hash_lock);  \n        // \u901a\u8fc7\u7aef\u53e3\u627e\u5230\u5bf9\u5e94\u7684\u94fe\u8868  \n        sk = sk_head(&amp;udp_hash[ntohs(uh-&gt;dest) &amp; (UDP_HTABLE_SIZE - 1)]);  \n        dif = skb-&gt;dev-&gt;ifindex;  \n        sk = udp_v4_mcast_next(sk, uh-&gt;dest, daddr, uh-&gt;source, saddr, dif);  \n        if (sk) {  \n            struct sock *sknext = NULL;  \n            // \u904d\u5386\u6bcf\u4e00\u4e2a\u9700\u8981\u5904\u7406\u8be5\u6570\u636e\u5305\u7684socket  \n            do {  \n                struct sk_buff *skb1 = skb;  \n                sknext = udp_v4_mcast_next(sk_next(sk), \n                                               uh-&gt;dest, daddr,  \n                                            uh-&gt;source, \n                                               saddr, \n                                               dif);  \n                if(sknext)  \n                    // \u590d\u5236\u4e00\u4efd\n                     skb1 = skb_clone(skb, GFP_ATOMIC);  \n                // \u63d2\u5165\u6bcf\u4e00\u4e2asocket\u7684\u6570\u636e\u5305\u961f\u5217  \n                if(skb1) {  \n                    int ret = udp_queue_rcv_skb(sk, skb1);  \n                    if (ret &gt; 0)  \n                      kfree_skb(skb1);  \n                }  \n                sk = sknext;  \n            } while(sknext);  \n        } else  \n            kfree_skb(skb);  \n        read_unlock(&amp;udp_hash_lock);  \n        return 0;  \n    }  \n</code></pre> <p>\u5728\u975e\u5355\u64ad\u7684\u60c5\u51b5\u4e0b\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u904d\u5386\u94fe\u8868\u627e\u5230\u6bcf\u4e00\u4e2a\u53ef\u4ee5\u63a5\u6536\u8be5\u6570\u636e\u5305\u7684socket\uff0c\u7136\u540e\u628a\u6570\u636e\u5305\u590d\u5236\u4e00\u4efd\uff0c\u6302\u8f7d\u5230socket\u7684\u63a5\u6536\u961f\u5217\u3002\u8fd9\u5c31\u89e3\u91ca\u4e86\u672c\u8282\u5f00\u5934\u7684\u4f8b\u5b50\uff0c\u5373\u4e24\u4e2a\u5ba2\u6237\u7aef\u8fdb\u7a0b\u90fd\u4f1a\u6536\u5230UDP\u6570\u636e\u5305\u3002</p>"},{"location":"chapter16-UDP/#16262","title":"16.2.6.2 \u5355\u64ad","text":"<p>\u63a5\u7740\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b\u5355\u64ad\u7684\u60c5\u51b5\u3002\u9996\u5148\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\u3002\u6211\u4eec\u540c\u6837\u65b0\u5efa\u4e24\u4e2aJS\u6587\u4ef6\u7528\u4f5c\u5ba2\u6237\u7aef\u3002</p> <pre><code>    const dgram = require('dgram');    \n    const udp = dgram.createSocket({type: 'udp4', reuseAddr: true});    \n    const socket = udp.bind(5678);    \n    socket.on('message', (msg) =&gt; {  \n      console.log(msg)  \n    })  \n</code></pre> <p>\u7136\u540e\u518d\u65b0\u5efa\u4e00\u4e2aJS\u6587\u4ef6\u7528\u4f5c\u670d\u52a1\u5668\u3002</p> <pre><code>    const dgram = require('dgram');    \n    const udp = dgram.createSocket({type: 'udp4'});    \n    const socket = udp.bind(1234);    \n    udp.send('hi', 5678)  \n</code></pre> <p>\u6267\u884c\u4ee5\u4e0a\u4ee3\u7801\uff0c\u9996\u5148\u6267\u884c\u5ba2\u6237\u7aef\uff0c\u518d\u6267\u884c\u670d\u52a1\u5668\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u4f1a\u6536\u5230\u6570\u636e\u3002\u4e0b\u9762\u6211\u4eec\u5206\u6790\u5177\u4f53\u7684\u539f\u56e0\uff0c\u5355\u64ad\u65f6\u6536\u5230\u4f1a\u8c03\u7528udp_v4_lookup\u51fd\u6570\u627e\u5230\u63a5\u6536\u8be5UDP\u6570\u636e\u5305\u7684socket\uff0c\u7136\u540e\u628a\u6570\u636e\u5305\u6302\u8f7d\u5230socket\u7684\u63a5\u6536\u961f\u5217\u4e2d\u3002\u6211\u4eec\u770b\u770budp_v4_lookup\u3002</p> <pre><code>    static __inline__ struct sock *udp_v4_lookup(u32 saddr, u16 sport,  \n                             u32 daddr, u16 dport, int dif)  \n    {  \n        struct sock *sk;  \n        sk = udp_v4_lookup_longway(saddr, sport, daddr, dport, dif);  \n        return sk;  \n    }  \n\n    static struct sock *udp_v4_lookup_longway(u32 saddr, u16 sport,  \n                          u32 daddr, u16 dport, int dif)  \n    {  \n        struct sock *sk, *result = NULL;  \n        struct hlist_node *node;  \n        unsigned short hnum = ntohs(dport);  \n        int badness = -1;  \n            // \u904d\u5386\u7aef\u53e3\u5bf9\u5e94\u7684\u94fe\u8868  \n        sk_for_each(sk, node, &amp;udp_hash[hnum &amp; (UDP_HTABLE_SIZE - 1)]) {  \n            struct inet_sock *inet = inet_sk(sk);  \n\n            if (inet-&gt;num == hnum &amp;&amp; !ipv6_only_sock(sk)) {  \n                int score = (sk-&gt;sk_family == PF_INET ? 1 : 0);  \n                if (inet-&gt;rcv_saddr) {  \n                    if (inet-&gt;rcv_saddr != daddr)  \n                        continue;  \n                    score+=2;  \n                }  \n                if (inet-&gt;daddr) {  \n                    if (inet-&gt;daddr != saddr)  \n                        continue;  \n                    score+=2;  \n                }  \n                if (inet-&gt;dport) {  \n                    if (inet-&gt;dport != sport)  \n                        continue;  \n                    score+=2;  \n                }  \n                if (sk-&gt;sk_bound_dev_if) {  \n                    if (sk-&gt;sk_bound_dev_if != dif)  \n                        continue;  \n                    score+=2;  \n                }  \n                // \u5168\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u5426\u5219\u8bb0\u5f55\u5f53\u524d\u6700\u597d\u7684\u5339\u914d\u7ed3\u679c  \n                if(score == 9) {  \n                    result = sk;  \n                    break;  \n                } else if(score &gt; badness) {  \n                    result = sk;  \n                    badness = score;  \n                }  \n            }  \n        }  \n        return result;  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u4ee3\u7801\u5f88\u591a\uff0c\u4f46\u662f\u903b\u8f91\u5e76\u4e0d\u590d\u6742\uff0c\u64cd\u4f5c\u7cfb\u7edf\u6536\u5230\u6839\u636e\u7aef\u53e3\u4ece\u54c8\u5e0c\u8868\u4e2d\u62ff\u5230\u5bf9\u5e94\u7684\u94fe\u8868\uff0c\u7136\u540e\u904d\u5386\u8be5\u94fe\u8868\u627e\u51fa\u6700\u5339\u914d\u7684socket\u3002\u7136\u540e\u628a\u6570\u636e\u6302\u8f7d\u5230socket\u4e0a\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u7ec6\u8282\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u8fdb\u7a0b\u90fd\u76d1\u542c\u4e86\u540c\u4e00\u4e2aIP\u548c\u7aef\u53e3\uff0c\u90a3\u4e48\u54ea\u4e00\u4e2a\u8fdb\u7a0b\u4f1a\u6536\u5230\u6570\u636e\u5462\uff1f\u8fd9\u4e2a\u53d6\u51b3\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b9e\u73b0\uff0c\u4eceLinux\u6e90\u7801\u6211\u4eec\u770b\u5230\uff0c\u63d2\u5165socket\u7684\u65f6\u5019\u662f\u4f7f\u7528\u5934\u63d2\u6cd5\uff0c\u67e5\u627e\u7684\u65f6\u5019\u662f\u4ece\u5934\u5f00\u59cb\u627e\u6700\u5339\u914d\u7684socket\u3002\u5373\u540e\u9762\u63d2\u5165\u7684socket\u4f1a\u5148\u88ab\u641c\u7d22\u5230\u3002\u4f46\u662fWindows\u4e0b\u7ed3\u6784\u5374\u76f8\u53cd\uff0c\u5148\u76d1\u542c\u4e86\u8be5IP\u7aef\u53e3\u7684\u8fdb\u7a0b\u4f1a\u6536\u5230\u6570\u636e\u3002 \u7b2c</p>"},{"location":"chapter17-TCP/","title":"17-TCP","text":"<p>\u672c\u7ae0\u6211\u4eec\u4e3b\u8981\u770b\u4e00\u4e0bNode.js\u4e2d\u5bf9TCP\u7684\u5c01\u88c5\uff0c\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b\u5728\u7f51\u7edc\u7f16\u7a0b\u4e2d\uff0c\u662f\u5982\u4f55\u7f16\u5199\u4e00\u4e2a\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u7684\uff08\u4f2a\u4ee3\u7801\uff09\u3002 \u670d\u52a1\u5668</p> <pre><code>    const fd = socket();  \n    bind(fd, ip, port);  \n    listen(fd);  \n    const acceptedFd = accept(fd);  \n    handle(acceptedFd);  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u51e0\u4e2a\u51fd\u6570\u7684\u4f5c\u7528 1 socket\uff1asocket\u51fd\u6570\u7528\u4e8e\u4ece\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u4e00\u4e2asocket\u7ed3\u6784\u4f53\uff0cLinux\u4e2d\u4e07\u7269\u7686\u6587\u4ef6\uff0c\u6240\u4ee5\u6700\u540e\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u8fd4\u56de\u4e00\u4e2afd\uff0cfd\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7c7b\u4f3c\u6570\u636e\u5e93\u7684id\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5e95\u5c42\u7ef4\u62a4\u4e86fd\u5bf9\u5e94\u7684\u8d44\u6e90\uff0c\u6bd4\u5982\u7f51\u7edc\u3001\u6587\u4ef6\u3001\u7ba1\u9053\u7b49\uff0c\u540e\u7eed\u5c31\u53ef\u4ee5\u901a\u8fc7\u8be5fd\u53bb\u64cd\u4f5c\u5bf9\u5e94\u7684\u8d44\u6e90\u3002 2 bind\uff1abind\u51fd\u6570\u7528\u4e8e\u7ed9fd\u5bf9\u5e94\u7684socket\u8bbe\u7f6e\u5730\u5740\uff08IP\u548c\u7aef\u53e3\uff09\uff0c\u540e\u7eed\u9700\u8981\u7528\u5230\u3002 3 listen\uff1alisten\u51fd\u6570\u7528\u4e8e\u4fee\u6539fd\u5bf9\u5e94\u7684socket\u7684\u72b6\u6001\u548c\u76d1\u542c\u72b6\u6001\u3002\u53ea\u6709\u76d1\u542c\u72b6\u6001\u7684socket\u53ef\u4ee5\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u3002socket\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u76d1\u542c\u578b\u7684\uff0c\u4e00\u79cd\u662f\u901a\u4fe1\u578b\u7684\uff0c\u76d1\u542c\u578b\u7684socket\u53ea\u8d1f\u8d23\u5904\u7406\u4e09\u6b21\u63e1\u624b\uff0c\u5efa\u7acb\u8fde\u63a5\uff0c\u901a\u4fe1\u578b\u7684\u8d1f\u8d23\u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u3002 4 accept\uff1aaccept\u51fd\u6570\u9ed8\u8ba4\u4f1a\u963b\u585e\u8fdb\u7a0b\uff0c\u76f4\u5230\u6709\u6709\u8fde\u63a5\u5230\u6765\u5e76\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u3002 \u6267\u884c\u5b8c\u4ee5\u4e0a\u4ee3\u7801\uff0c\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2a\u670d\u52a1\u5668\u7684\u542f\u52a8\u3002\u8fd9\u65f6\u5019\u5173\u7cfb\u56fe\u5982\u56fe17-1\u6240\u793a\u3002    \u56fe17-1 \u5ba2\u6237\u7aef</p> <pre><code>    const fd = socket();  \n    const connectRet = connect(fd, ip, port);  \n    write(fd, 'hello');  \n</code></pre> <p>\u5ba2\u6237\u7aef\u6bd4\u670d\u52a1\u5668\u7a0d\u5fae\u7b80\u5355\u4e00\u70b9\uff0c\u6211\u4eec\u770b\u770b\u8fd9\u51e0\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u3002 1 socket\uff1a\u548c\u670d\u52a1\u5668\u4e00\u6837\uff0c\u5ba2\u6237\u7aef\u4e5f\u9700\u8981\u7533\u8bf7\u4e00\u4e2asocket\u7528\u4e8e\u548c\u670d\u52a1\u5668\u901a\u4fe1\u3002 2 connect\uff1aconnect\u4f1a\u5f00\u59cb\u4e09\u6b21\u63e1\u624b\u8fc7\u7a0b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u963b\u585e\u8fdb\u7a0b\uff0c\u76f4\u5230\u8fde\u63a5\u6709\u7ed3\u679c\uff0c\u8fde\u63a5\u7ed3\u679c\u901a\u8fc7\u8fd4\u56de\u503c\u544a\u8bc9\u8c03\u7528\u65b9\uff0c\u5982\u679c\u4e09\u6b21\u63e1\u624b\u5b8c\u6210\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u53d1\u9001\u6570\u636e\u4e86\u3002 3 write\uff1awrite\u7528\u4e8e\u7ed9\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\uff0c\u4e0d\u8fc7\u5e76\u4e0d\u662f\u76f4\u63a5\u53d1\u9001\uff0c\u8fd9\u4e9b\u6570\u636e\u53ea\u662f\u4fdd\u5b58\u5230socket\u7684\u53d1\u9001\u7f13\u51b2\u533a\uff0c\u5e95\u5c42\u4f1a\u6839\u636eTCP\u534f\u8bae\u51b3\u5b9a\u4ec0\u4e48\u65f6\u5019\u53d1\u9001\u6570\u636e\u3002</p> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u5f53\u5ba2\u6237\u7aef\u53d1\u9001\u7b2c\u4e00\u4e2a\u63e1\u624b\u7684syn\u5305\u65f6\uff0csocket\u5904\u4e8esyn\u53d1\u9001\u72b6\u6001\uff0c\u6211\u4eec\u770b\u770b\u8fd9\u65f6\u5019\u7684\u670d\u52a1\u5668\u662f\u600e\u6837\u7684\uff0c\u5982\u56fe17-2\u6240\u793a\u3002  \u56fe17-2 \u6211\u4eec\u770b\u5230\u8fd9\u65f6\u5019\uff0c\u670d\u52a1\u5668\u5bf9\u5e94\u7684socket\u4e2d\uff0c\u4f1a\u65b0\u5efa\u4e00\u4e2asocket\u7528\u4e8e\u540e\u7eed\u901a\u4fe1\uff08socket\u7ed3\u6784\u4f53\u6709\u4e00\u4e2a\u5b57\u6bb5\u6307\u5411\u8be5\u961f\u5217\uff09\u3002\u5e76\u4e14\u6807\u8bb0\u8be5socket\u7684\u72b6\u6001\u4e3a\u6536\u5230syn\uff0c\u7136\u540e\u53d1\u9001ack\uff0c\u5373\u7b2c\u4e8c\u6b21\u63e1\u624b\uff0c\u7b49\u5230\u5ba2\u6237\u7aef\u56de\u590d\u7b2c\u4e09\u6b21\u63e1\u624b\u7684\u6570\u636e\u5305\u65f6\uff0c\u5c31\u5b8c\u6210\u4e86\u8fde\u63a5\u7684\u5efa\u7acb\u3002\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\u5b9e\u73b0\u4e0d\u4e00\u6837\uff0c\u6709\u7684\u7248\u672c\u5b9e\u73b0\u4e2d\uff0c\u5df2\u5b8c\u6210\u8fde\u63a5\u548c\u6b63\u5728\u5efa\u7acb\u8fde\u63a5\u7684socket\u662f\u5728\u4e00\u4e2a\u961f\u5217\u4e2d\u7684\uff0c\u6709\u7684\u7248\u672c\u5b9e\u73b0\u4e2d\uff0c\u5df2\u5b8c\u6210\u8fde\u63a5\u548c\u6b63\u5728\u5efa\u7acb\u8fde\u63a5\u7684socket\u662f\u5206\u4e3a\u4e24\u4e2a\u961f\u5217\u7ef4\u62a4\u7684\u3002 \u5f53\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u5b8c\u6210\u4e86TCP\u8fde\u63a5\u540e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u6570\u636e\u901a\u4fe1\u4e86\uff0c\u8fd9\u65f6\u5019\u670d\u52a1\u5668\u7684accept\u5c31\u4f1a\u4ece\u963b\u585e\u4e2d\u88ab\u5524\u9192\uff0c\u5e76\u4ece\u8fde\u63a5\u961f\u5217\u4e2d\u6458\u4e0b\u4e00\u4e2a\u5df2\u5b8c\u6210\u8fde\u63a5\u7684socket\u7ed3\u70b9\uff0c\u7136\u540e\u751f\u6210\u4e00\u4e2a\u65b0\u7684fd\u3002\u540e\u7eed\u5c31\u53ef\u4ee5\u5728\u8be5fd\u4e0a\u548c\u5bf9\u7aef\u901a\u4fe1\u3002\u90a3\u4e48\u5f53\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2aTCP\u6570\u636e\u5305\u8fc7\u6765\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u662f\u5982\u4f55\u5904\u7406\u7684\u5462\uff1f 1 \u64cd\u4f5c\u7cfb\u7edf\u9996\u5148\u6839\u636eTCP\u62a5\u6587\u7684\u6e90IP\u3001\u6e90\u7aef\u53e3\u3001\u76ee\u7684IP\u3001\u76ee\u7684\u7aef\u53e3\u7b49\u4fe1\u606f\u4ecesocket\u6c60\u4e2d\u627e\u5230\u5bf9\u5e94\u7684socket\u3002 2 \u64cd\u4f5c\u7cfb\u7edf\u5224\u65ad\u8bfb\u7f13\u51b2\u533a\u662f\u5426\u8fd8\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff0c\u5982\u679c\u7a7a\u95f4\u4e0d\u591f\uff0c\u5219\u4e22\u5f03TCP\u62a5\u6587\uff0c\u5426\u5219\u628a\u62a5\u6587\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u6302\u8f7d\u5230socket\u7684\u6570\u636e\u961f\u5217\uff0c\u7b49\u5f85\u8bfb\u53d6\u3002  </p> <p>\u4e86\u89e3\u4e86TCP\u901a\u4fe1\u7684\u5927\u81f4\u8fc7\u7a0b\u540e\uff0c\u6211\u4eec\u770b\u4e00\u4e0bNode.js\u4e2d\u662f\u5982\u4f55\u5c01\u88c5\u5e95\u5c42\u7684\u80fd\u529b\u7684\u3002</p>"},{"location":"chapter17-TCP/#171-tcp","title":"17.1 TCP\u5ba2\u6237\u7aef","text":""},{"location":"chapter17-TCP/#1711","title":"17.1.1 \u5efa\u7acb\u8fde\u63a5","text":"<p>net.connect\u662fNode.js\u4e2d\u53d1\u8d77TCP\u8fde\u63a5\u7684API\u3002\u672c\u8d28\u4e0a\u662f\u5bf9\u5e95\u5c42TCP connect\u51fd\u6570\u7684\u5c01\u88c5\u3002connect\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u5ba2\u6237\u7aef\u7684Socket\u5bf9\u8c61\u3002\u6211\u4eec\u770b\u4e00\u4e0bNode.js\u4e2d\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0bconnect\u51fd\u6570\u7684\u5165\u53e3\u5b9a\u4e49\u3002</p> <pre><code>    function connect(...args) {  \n      // \u5904\u7406\u53c2\u6570  \n      var normalized = normalizeArgs(args);  \n      var options = normalized[0];  \n      // \u7533\u8bf7\u4e00\u4e2asocket\u8868\u793a\u4e00\u4e2a\u5ba2\u6237\u7aef  \n      var socket = new Socket(options);  \n      // \u8bbe\u7f6e\u8d85\u65f6\uff0c\u8d85\u65f6\u540e\u4f1a\u89e6\u53d1timeout\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5904\u7406\u8d85\u65f6\u903b\u8f91\n      if (options.timeout) {  \n        socket.setTimeout(options.timeout);  \n      }  \n      // \u8c03\u7528socket\u7684connect  \n      return Socket.prototype.connect.call(socket, normalized);  \n    }  \n</code></pre> <p>\u4ece\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u5230\uff0cconnect\u51fd\u6570\u662f\u5bf9Socket\u5bf9\u8c61\u7684\u5c01\u88c5\u3002Socket\u8868\u793a\u4e00\u4e2aTCP\u5ba2\u6237\u7aef\u3002\u6211\u4eec\u5206\u6210\u4e09\u90e8\u5206\u5206\u6790\u3002</p> <pre><code>1 new Socket \n2 setTimeout \n3 Socket\u7684connect\n</code></pre> <p>1 new Socket \u6211\u4eec\u770b\u770b\u65b0\u5efa\u4e00\u4e2aSocket\u5bf9\u8c61\uff0c\u505a\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002  </p> <pre><code>    function Socket(options) {  \n      // \u662f\u5426\u6b63\u5728\u5efa\u7acb\u8fde\u63a5\uff0c\u5373\u4e09\u6b21\u63e1\u624b\u4e2d  \n      this.connecting = false;  \n      // \u89e6\u53d1close\u4e8b\u4ef6\u65f6\uff0c\u8be5\u5b57\u6bb5\u6807\u8bb0\u662f\u5426\u7531\u4e8e\u9519\u8bef\u5bfc\u81f4\u4e86close  \n      this._hadError = false;  \n      // \u5bf9\u5e94\u7684\u5e95\u5c42handle\uff0c\u6bd4\u5982tcp_wrap  \n      this._handle = null;  \n      // \u5b9a\u65f6\u5668id  \n      this[kTimeout] = null;  \n      options = options || {};  \n      // socket\u662f\u53cc\u5411\u6d41  \n      stream.Duplex.call(this, options);  \n      // \u8fd8\u4e0d\u80fd\u8bfb\u5199\uff0c\u5148\u8bbe\u7f6e\u6210false\uff0c\u8fde\u63a5\u6210\u529f\u540e\u518d\u91cd\u65b0\u8bbe\u7f6e    \n      this.readable = this.writable = false;  \n        // \u6ce8\u518c\u5199\u7aef\u5173\u95ed\u7684\u56de\u8c03\n      this.on('finish', onSocketFinish); \n        // \u6ce8\u518c\u8bfb\u7aef\u5173\u95ed\u7684\u56de\u8c03 \n      this.on('_socketEnd', onSocketEnd);  \n      // \u662f\u5426\u5141\u8bb8\u534a\u5f00\u5173\uff0c\u9ed8\u8ba4\u4e0d\u5141\u8bb8  \n      this.allowHalfOpen = options &amp;&amp; options.allowHalfOpen||false; \n    }  \n</code></pre> <p>Socket\u662f\u5bf9C++\u6a21\u5757tcp_wrap\u7684\u5c01\u88c5\u3002\u4e3b\u8981\u662f\u521d\u59cb\u5316\u4e86\u4e00\u4e9b\u5c5e\u6027\u548c\u76d1\u542c\u4e00\u4e9b\u4e8b\u4ef6\u3002 2 setTimeout    </p> <pre><code>    Socket.prototype.setTimeout = function(msecs, callback) {  \n      // \u6e05\u9664\u4e4b\u524d\u7684\uff0c\u5982\u679c\u6709\u7684\u8bdd  \n      clearTimeout(this[kTimeout]);  \n      // 0\u4ee3\u8868\u6e05\u9664  \n      if (msecs === 0) {  \n        if (callback) {  \n          this.removeListener('timeout', callback);  \n        }  \n      } else {  \n        // \u5f00\u542f\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u8d85\u65f6\u65f6\u95f4\u662fmsecs\uff0c\u8d85\u65f6\u56de\u8c03\u662f_onTimeout  \n        this[kTimeout] = setUnrefTimeout(this._onTimeout.bind(this), msecs);  \n        /*\n              \u76d1\u542ctimeout\u4e8b\u4ef6\uff0c\u5b9a\u65f6\u5668\u8d85\u65f6\u65f6\uff0c\u5e95\u5c42\u4f1a\u8c03\u7528Node.js\u7684\u56de\u8c03\uff0c\n              Node.js\u4f1a\u8c03\u7528\u7528\u6237\u7684\u56de\u8c03callback  \n            */\n        if (callback) {  \n          this.once('timeout', callback);  \n        }  \n      }  \n      return this;  \n    };  \n</code></pre> <p>setTimeout\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u8bbe\u7f6e\u4e00\u4e2a\u8d85\u65f6\u65f6\u95f4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u7528\u4e8e\u68c0\u6d4bsocket\u7684\u6d3b\u8dc3\u60c5\u51b5\uff08\u6bd4\u5982\u6709\u6570\u636e\u901a\u4fe1\uff09\uff0c\u5f53socket\u6d3b\u8dc3\u65f6\uff0cNode.js\u4f1a\u91cd\u7f6e\u8be5\u5b9a\u65f6\u5668\uff0c\u5982\u679csocket\u4e00\u76f4\u4e0d\u6d3b\u8dc3\u5219\u8d85\u65f6\u4f1a\u89e6\u53d1timeout\u4e8b\u4ef6\uff0c\u4ece\u800c\u6267\u884cNode.js\u7684_onTimeout\u56de\u8c03\uff0c\u5728\u56de\u8c03\u91cc\u518d\u89e6\u53d1\u7528\u6237\u4f20\u5165\u7684\u56de\u8c03\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u8d85\u65f6\u5904\u7406\u51fd\u6570_onTimeout\u3002 </p> <pre><code>    Socket.prototype._onTimeout = function() {  \n      this.emit('timeout');  \n    };\n</code></pre> <p>\u76f4\u63a5\u89e6\u53d1timeout\u51fd\u6570\uff0c\u56de\u8c03\u7528\u6237\u7684\u51fd\u6570\u3002\u6211\u4eec\u770b\u5230setTimeout\u53ea\u662f\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u7136\u540e\u89e6\u53d1timeout\u4e8b\u4ef6\uff0cNode.js\u5e76\u6ca1\u6709\u5e2e\u6211\u4eec\u505a\u989d\u5916\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u81ea\u5df1\u5904\u7406\uff0c\u6bd4\u5982\u5173\u95edsocket\u3002</p> <pre><code>    socket.setTimeout(10000);  \n    socket.on('timeout', () =&gt; {  \n      socket.close();  \n    });  \n</code></pre> <p>\u53e6\u5916\u6211\u4eec\u770b\u5230\u8fd9\u91cc\u662f\u4f7f\u7528setUnrefTimeout\u8bbe\u7f6e\u7684\u5b9a\u65f6\u5668\uff0c\u56e0\u4e3a\u8fd9\u4e00\u7c7b\u5b9a\u65f6\u5668\u4e0d\u5e94\u8be5\u963b\u6b62\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa\u3002 3 connect\u51fd\u6570  \u5728\u7b2c\u4e00\u6b65\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2asocket\uff0c\u63a5\u7740\u6211\u4eec\u8c03\u7528\u8be5socket\u7684connect\u51fd\u6570\u5f00\u59cb\u53d1\u8d77\u8fde\u63a5\u3002 </p> <pre><code>    // \u5efa\u7acb\u8fde\u63a5\uff0c\u5373\u4e09\u6b21\u63e1\u624b  \n    Socket.prototype.connect = function(...args) {  \n      let normalized;  \n      /* \u5ffd\u7565\u53c2\u6570\u5904\u7406 */  \n      var options = normalized[0];  \n      var cb = normalized[1]; \n        // TCP\u5728tcp_wrap.cc\u4e2d\u5b9a\u4e49   \n      this._handle = new TCP(TCPConstants.SOCKET); \n        // \u6709\u6570\u636e\u53ef\u8bfb\u65f6\u7684\u56de\u8c03 \n      this._handle.onread = onread;  \n      // \u8fde\u63a5\u6210\u529f\u65f6\u6267\u884c\u7684\u56de\u8c03  \n      if (cb !== null) {  \n        this.once('connect', cb);  \n      }  \n      // \u6b63\u5728\u8fde\u63a5  \n      this.connecting = true;  \n      this.writable = true;  \n        // \u91cd\u7f6e\u5b9a\u65f6\u5668\n        this._unrefTimer();\n      // \u53ef\u80fd\u9700\u8981DNS\u89e3\u6790\uff0c\u89e3\u6790\u6210\u529f\u518d\u53d1\u8d77\u8fde\u63a5  \n      lookupAndConnect(this, options);  \n      return this;  \n    };  \n</code></pre> <p>connect \u51fd\u6570\u4e3b\u8981\u662f\u4e09\u4e2a\u903b\u8f91 1 \u9996\u5148\u901a\u8fc7new TCP()\u521b\u5efa\u4e00\u4e2a\u5e95\u5c42\u7684handle\uff0c\u6bd4\u5982\u6211\u4eec\u8fd9\u91cc\u662fTCP\uff08\u5bf9\u5e94tcp_wrap.cc\u7684\u5b9e\u73b0\uff09\u3002  2 \u8bbe\u7f6e\u4e00\u4e9b\u56de\u8c03  3 \u505aDNS\u89e3\u6790\uff08\u5982\u679c\u9700\u8981\u7684\u8bdd\uff09\uff0c\u7136\u540e\u53d1\u8d77\u4e09\u6b21\u63e1\u624b\u3002 \u6211\u4eec\u770b\u4e00\u4e0bnew TCP\u610f\u5473\u7740\u4ec0\u4e48\uff0c\u6211\u4eec\u770btcp_wrap.cc\u7684\u5b9e\u73b0 <pre><code>    void TCPWrap::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      // \u8981\u4ee5new TCP\u7684\u5f62\u5f0f\u8c03\u7528  \n      CHECK(args.IsConstructCall());  \n      // \u7b2c\u4e00\u4e2a\u5165\u53c2\u662f\u6570\u5b57  \n      CHECK(args[0]-&gt;IsInt32());  \n      Environment* env = Environment::GetCurrent(args);  \n      // \u4f5c\u4e3a\u5ba2\u6237\u7aef\u8fd8\u662f\u670d\u52a1\u5668  \n      int type_value = args[0].As&lt;Int32&gt;()-&gt;Value();  \n      TCPWrap::SocketType type = static_cast&lt;TCPWrap::SocketType&gt;(type_value);  \n\n      ProviderType provider;  \n      switch (type) {  \n        // \u4f5c\u4e3a\u5ba2\u6237\u7aef\uff0c\u5373\u53d1\u8d77\u8fde\u63a5\u65b9  \n        case SOCKET:  \n          provider = PROVIDER_TCPWRAP;  \n          break;  \n        // \u4f5c\u4e3a\u670d\u52a1\u5668  \n        case SERVER:  \n          provider = PROVIDER_TCPSERVERWRAP;  \n          break;  \n        default:  \n          UNREACHABLE();  \n      }  \n      new TCPWrap(env, args.This(), provider);  \n    }  \n</code></pre></p> <p>new TCP\u5bf9\u5e94\u5230C++\u5c42\uff0c\u5c31\u662f\u521b\u5efa\u4e00\u4e2aTCPWrap\u5bf9\u8c61\u3002\u5e76\u521d\u59cb\u5316\u5bf9\u8c61\u4e2d\u7684handle_\u5b57\u6bb5</p> <pre><code>    TCPWrap::TCPWrap(Environment* env, \n                     Local&lt;Object&gt; object, \n                     ProviderType provider)  \n        : ConnectionWrap(env, object, provider) {  \n      int r = uv_tcp_init(env-&gt;event_loop(), &amp;handle_);  \n    }  \n</code></pre> <p>\u521d\u59cb\u5316\u5b8c\u5e95\u5c42\u7684\u6570\u636e\u7ed3\u6784\u540e\uff0c\u6211\u4eec\u7ee7\u7eed\u770blookupAndConnect\uff0clookupAndConnect\u4e3b\u8981\u662f\u5bf9\u53c2\u6570\u8fdb\u884c\u6821\u9a8c\uff0c\u7136\u540e\u8fdb\u884cDNS\u89e3\u6790\uff08\u5982\u679c\u4f20\u7684\u662f\u57df\u540d\u7684\u8bdd\uff09\uff0cDNS\u89e3\u6790\u6210\u529f\u540e\u6267\u884cinternalConnect</p> <pre><code>    function internalConnect(  \n      self,   \n      // \u9700\u8981\u8fde\u63a5\u7684\u8fdc\u7aefIP\u3001\u7aef\u53e3  \n      address,   \n      port,   \n      addressType,   \n      /*\n          \u7528\u4e8e\u548c\u5bf9\u7aef\u8fde\u63a5\u7684\u672c\u5730IP\u3001\u7aef\u53e3\uff08\u5982\u679c\u4e0d\u8bbe\u7f6e\uff0c\n          \u5219\u64cd\u4f5c\u7cfb\u7edf\u81ea\u5df1\u51b3\u5b9a\uff09  \n        */\n      localAddress,   \n      localPort) {  \n      var err;  \n      /*\n          \u5982\u679c\u4f20\u4e86\u672c\u5730\u7684\u5730\u5740\u6216\u7aef\u53e3\uff0c\u5219TCP\u8fde\u63a5\u4e2d\u7684\u6e90IP\n          \u548c\u7aef\u53e3\u5c31\u662f\u4f20\u7684\uff0c\u5426\u5219\u7531\u64cd\u4f5c\u7cfb\u7edf\u81ea\u5df1\u9009\n        */  \n      if (localAddress || localPort) {  \n          // IP v4  \n        if (addressType === 4) {  \n          localAddress = localAddress || '0.0.0.0';  \n          // \u7ed1\u5b9a\u5730\u5740\u548c\u7aef\u53e3\u5230handle\n          err = self._handle.bind(localAddress, localPort);  \n        } else if (addressType === 6) {  \n          localAddress = localAddress || '::';  \n          err = self._handle.bind6(localAddress, localPort);  \n        }  \n\n        // \u7ed1\u5b9a\u662f\u5426\u6210\u529f  \n        err = checkBindError(err, localPort, self._handle);  \n        if (err) {  \n          const ex = exceptionWithHostPort(err,\n                                                    'bind', \n                                                    localAddress, \n                                                    localPort);  \n          self.destroy(ex);  \n          return;  \n        }  \n      }  \n        // \u5bf9\u7aef\u7684\u5730\u5740\u4fe1\u606f\n      if (addressType === 6 || addressType === 4) {  \n        // \u65b0\u5efa\u4e00\u4e2a\u8bf7\u6c42\u5bf9\u8c61\uff0cC++\u5c42\u5b9a\u4e49  \n        const req = new TCPConnectWrap();  \n        // \u8bbe\u7f6e\u4e00\u4e9b\u5217\u5c5e\u6027  \n        req.oncomplete = afterConnect;  \n        req.address = address;  \n        req.port = port;  \n        req.localAddress = localAddress;  \n        req.localPort = localPort;  \n        // \u8c03\u7528\u5e95\u5c42\u5bf9\u5e94\u7684\u51fd\u6570  \n        if (addressType === 4)  \n          err = self._handle.connect(req, address, port);  \n        else  \n          err = self._handle.connect6(req, address, port);  \n      }  \n      /*\n         \u975e\u963b\u585e\u8c03\u7528\uff0c\u53ef\u80fd\u5728\u8fd8\u6ca1\u53d1\u8d77\u4e09\u6b21\u63e1\u624b\u4e4b\u524d\u5c31\u62a5\u9519\u4e86\uff0c\n          \u800c\u4e0d\u662f\u4e09\u6b21\u63e1\u624b\u51fa\u9519\uff0c\u8fd9\u91cc\u8fdb\u884c\u51fa\u9519\u5904\u7406  \n        */\n      if (err) {  \n        // \u83b7\u53d6socket\u5bf9\u5e94\u7684\u5e95\u5c42IP\u7aef\u53e3\u4fe1\u606f  \n        var sockname = self._getsockname();  \n        var details;  \n\n        if (sockname) {  \n          details = sockname.address + ':' + sockname.port;  \n        }  \n          // \u6784\u9020\u9519\u8bef\u4fe1\u606f\uff0c\u9500\u9b42socket\u5e76\u89e6\u53d1error\u4e8b\u4ef6\n        const ex = exceptionWithHostPort(err, \n                                                'connect', \n                                                address, \n                                                port, \n                                                details);  \n        self.destroy(ex);  \n      }  \n    }  \n</code></pre> <p>\u8fd9\u91cc\u7684\u4ee3\u7801\u6bd4\u8f83\u591a\uff0c\u9664\u4e86\u9519\u8bef\u5904\u7406\u5916\uff0c\u4e3b\u8981\u7684\u903b\u8f91\u662fbind\u548cconnect\u3002bind\u51fd\u6570\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5373\u4f7f\u662f\u5e95\u5c42\u7684bind\uff09\uff0c\u5b83\u5c31\u662f\u5728\u5e95\u5c42\u7684\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e0a\u8bbe\u7f6e\u4e86\u4e24\u4e2a\u5b57\u6bb5\u7684\u503c\u3002\u6240\u4ee5\u6211\u4eec\u4e3b\u8981\u6765\u5206\u6790connect\u3002\u6211\u4eec\u628a\u5173\u4e8econnect\u7684\u8fd9\u6bb5\u903b\u8f91\u62ce\u51fa\u6765\u3002  </p> <pre><code>        const req = new TCPConnectWrap();  \n        // \u8bbe\u7f6e\u4e00\u4e9b\u5217\u5c5e\u6027  \n        req.oncomplete = afterConnect;  \n        req.address = address;  \n        req.port = port;  \n        req.localAddress = localAddress;  \n        req.localPort = localPort;  \n        // \u8c03\u7528\u5e95\u5c42\u5bf9\u5e94\u7684\u51fd\u6570  \n        self._handle.connect(req, address, port); \n</code></pre> <p>TCPConnectWrap\u662fC++\u5c42\u63d0\u4f9b\u7684\u7c7b\uff0cconnect\u5bf9\u5e94C++\u5c42\u7684Conenct\uff0c \u524d\u9762\u7684\u7ae0\u8282\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u4e0d\u518d\u5177\u4f53\u5206\u6790\u3002\u8fde\u63a5\u5b8c\u6210\u540e\uff0c\u56de\u8c03\u51fd\u6570\u662fuv__stream_io\u3002\u5728uv__stream_io\u91cc\u4f1a\u8c03\u7528connect_req\u4e2d\u7684\u56de\u8c03\u3002\u5047\u8bbe\u8fde\u63a5\u5efa\u7acb\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u6267\u884cC++\u5c42\u7684AfterConnect\u3002AfterConnect\u4f1a\u6267\u884cJS\u5c42\u7684afterConnect\u3002 </p> <pre><code>    // \u8fde\u63a5\u540e\u6267\u884c\u7684\u56de\u8c03\uff0c\u6210\u529f\u6216\u5931\u8d25  \n    function afterConnect(status, handle, req, readable, writable) {   // handle\u5173\u8054\u7684socket  \n      var self = handle.owner;  \n      // \u8fde\u63a5\u8fc7\u7a0b\u4e2d\u6267\u884c\u4e86socket\u88ab\u9500\u6bc1\u4e86\uff0c\u5219\u4e0d\u9700\u8981\u7ee7\u7eed\u5904\u7406  \n      if (self.destroyed) {  \n        return;  \n      }  \n\n      handle = self._handle;\n     self.connecting = false;  \n     self._sockname = null;  \n     // \u8fde\u63a5\u6210\u529f  \n     if (status === 0) {  \n        // \u8bbe\u7f6e\u8bfb\u5199\u5c5e\u6027  \n        self.readable = readable;  \n        self.writable = writable;  \n        // socket\u5f53\u524d\u6d3b\u8dc3\uff0c\u91cd\u7f6e\u5b9a\u65f6\u5668  \n        self._unrefTimer();  \n        // \u89e6\u53d1\u8fde\u63a5\u6210\u529f\u4e8b\u4ef6  \n        self.emit('connect');  \n        // socket\u53ef\u8bfb\u5e76\u4e14\u6ca1\u6709\u8bbe\u7f6e\u6682\u505c\u6a21\u5f0f\uff0c\u5219\u5f00\u542f\u8bfb  \n        if (readable &amp;&amp; !self.isPaused())  \n          self.read(0);  \n     } else {  \n        // \u8fde\u63a5\u5931\u8d25\uff0c\u62a5\u9519\u5e76\u9500\u6bc1socket  \n        self.connecting = false;  \n        var details;  \n        // \u63d0\u793a\u51fa\u9519\u4fe1\u606f  \n        if (req.localAddress &amp;&amp; req.localPort) {  \n          details = req.localAddress + ':' + req.localPort;  \n        }  \n        var ex = exceptionWithHostPort(status,  \n                                       'connect',  \n                                       req.address,  \n                                       req.port,  \n                                       details);  \n        if (details) {  \n          ex.localAddress = req.localAddress;  \n          ex.localPort = req.localPort;  \n        }  \n        // \u9500\u6bc1socket  \n        self.destroy(ex);  \n      }  \n    }  \n</code></pre> <p>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u6210\u529f\u540e\uff0cJS\u5c42\u8c03\u7528self.read(0)\u6ce8\u518c\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6\u3002</p>"},{"location":"chapter17-TCP/#1712","title":"17.1.2 \u8bfb\u64cd\u4f5c","text":"<p>\u6211\u4eec\u770b\u4e00\u4e0bsocket\u7684\u8bfb\u64cd\u4f5c\u903b\u8f91\uff0c\u5728\u8fde\u63a5\u6210\u529f\u540e\uff0csocket\u4f1a\u901a\u8fc7read\u51fd\u6570\u5728\u5e95\u5c42\u6ce8\u518c\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6\uff0c\u7b49\u5f85\u5e95\u5c42\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u901a\u77e5\u6709\u6570\u636e\u53ef\u8bfb\u3002</p> <pre><code>    Socket.prototype.read = function(n) {  \n      if (n === 0)  \n        return stream.Readable.prototype.read.call(this, n);  \n\n      this.read = stream.Readable.prototype.read;  \n      this._consuming = true;  \n      return this.read(n);  \n    };  \n</code></pre> <p>\u8fd9\u91cc\u4f1a\u6267\u884cReadable\u6a21\u5757\u7684read\u51fd\u6570\uff0c\u4ece\u800c\u6267\u884c_read\u51fd\u6570\uff0c_read\u51fd\u6570\u662f\u7531\u5b50\u7c7b\u5b9e\u73b0\u3002\u6240\u4ee5\u6211\u4eec\u770bSocket\u7684_read</p> <pre><code>    Socket.prototype._read = function(n) {  \n      // \u8fd8\u6ca1\u5efa\u7acb\u8fde\u63a5\uff0c\u5219\u5efa\u7acb\u540e\u518d\u6267\u884c  \n      if (this.connecting || !this._handle) {  \n        this.once('connect', () =&gt; this._read(n));  \n      } else if (!this._handle.reading) {  \n        this._handle.reading = true;  \n        // \u6267\u884c\u5e95\u5c42\u7684readStart\u6ce8\u518c\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6  \n        var err = this._handle.readStart();  \n        if (err)  \n          this.destroy(errnoException(err, 'read'));  \n      }  \n    };  \n</code></pre> <p>\u4f46\u662f\u6211\u4eec\u53d1\u73b0tcp_wrap.cc\u6ca1\u6709readStart\u51fd\u6570\u3002\u4e00\u8def\u5f80\u7236\u7c7b\u627e\uff0c\u6700\u7ec8\u5728stream_wrap.cc\u627e\u5230\u4e86\u8be5\u51fd\u6570\u3002</p> <pre><code>    // \u6ce8\u518c\u8bfb\u4e8b\u4ef6  \n    int LibuvStreamWrap::ReadStart() {  \n      return uv_read_start(stream(), \n       [](uv_handle_t* handle,  \n       size_t suggested_size,  \n       uv_buf_t* buf) {  \n      // \u5206\u914d\u5b58\u50a8\u6570\u636e\u7684\u5185\u5b58  \n      static_cast&lt;LibuvStreamWrap*&gt;(handle-&gt;data)-&gt;OnUvAlloc(suggested_size, buf);  \n      },\n      [](uv_stream_t* stream,ssize_t nread,const uv_buf_t* buf) {\n       // \u8bfb\u53d6\u6570\u636e\u6210\u529f\u7684\u56de\u8c03  \n       static_cast&lt;LibuvStreamWrap*&gt;(stream-&gt;data)-&gt;OnUvRead(nread, buf);  \n      });  \n    }  \n</code></pre> <p>uv_read_start\u51fd\u6570\u5728\u6d41\u7ae0\u8282\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u4f5c\u7528\u5c31\u662f\u6ce8\u518c\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u6df1\u5165\u3002OnUvAlloc\u662f\u5206\u914d\u5b58\u50a8\u6570\u636e\u7684\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u5173\u6ce8\uff0c\u6211\u4eec\u770b\u4e00\u4e0bOnUvRead\uff0c\u5f53\u53ef\u8bfb\u4e8b\u4ef6\u89e6\u53d1\u65f6\u4f1a\u6267\u884cOnUvRead</p> <pre><code>    void LibuvStreamWrap::OnUvRead(ssize_t nread, const uv_buf_t* buf) {  \n      HandleScope scope(env()-&gt;isolate());  \n      Context::Scope context_scope(env()-&gt;context());  \n      // \u89e6\u53d1onread\u4e8b\u4ef6  \n      EmitRead(nread, *buf);  \n    }  \n</code></pre> <p>OnUvRead\u51fd\u6570\u89e6\u53d1onread\u56de\u8c03\u3002</p> <pre><code>    function onread(nread, buffer) {  \n      var handle = this;  \n        // handle\u5173\u8054\u7684socket\n      var self = handle.owner; \n        // socket\u6709\u6570\u636e\u5230\u6765\uff0c\u5904\u4e8e\u6d3b\u8dc3\u72b6\u6001\uff0c\u91cd\u7f6e\u5b9a\u65f6\u5668 \n        self._unrefTimer(); \n      // \u6210\u529f\u8bfb\u53d6\u6570\u636e  \n      if (nread &gt; 0) {  \n        // push\u5230\u6d41\u4e2d  \n        var ret = self.push(buffer);  \n        /*\n              push\u8fd4\u56defalse\uff0c\u8bf4\u660e\u7f13\u5b58\u7684\u6570\u636e\u5df2\u7ecf\u8fbe\u5230\u9608\u503c\uff0c\n              \u4e0d\u80fd\u518d\u89e6\u53d1\u8bfb\uff0c\u9700\u8981\u6ce8\u9500\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6  \n            */\n        if (handle.reading &amp;&amp; !ret) {  \n          handle.reading = false;  \n          var err = handle.readStop();  \n          if (err)  \n            self.destroy(errnoException(err, 'read'));  \n        }  \n        return;  \n      }  \n\n      // \u6ca1\u6709\u6570\u636e\uff0c\u5ffd\u7565 \n      if (nread === 0) {  \n        debug('not any data, keep waiting');  \n        return;  \n      }  \n      // \u4e0d\u7b49\u4e8e\u7ed3\u675f\uff0c\u5219\u8bfb\u51fa\u9519\uff0c\u9500\u6bc1\u6d41  \n      if (nread !== UV_EOF) {  \n        return self.destroy(errnoException(nread, 'read'));  \n      }  \n      // \u6d41\u7ed3\u675f\u4e86\uff0c\u6ca1\u6709\u6570\u636e\u8bfb\u4e86  \n      self.push(null);  \n      /*\n          \u4e5f\u6ca1\u6709\u7f13\u5b58\u7684\u6570\u636e\u4e86\uff0c\u53ef\u80fd\u9700\u8981\u9500\u6bc1\u6d41\uff0c\u6bd4\u5982\u662f\u53ea\u8bfb\u6d41\uff0c\n          \u6216\u8005\u53ef\u8bfb\u5199\u6d41\uff0c\u5199\u7aef\u4e5f\u6ca1\u6709\u6570\u636e\u4e86\uff0c\u53c2\u8003maybeDestroy  \n        */\n      if (self.readableLength === 0) {  \n        self.readable = false;  \n        maybeDestroy(self);  \n      }  \n      // \u89e6\u53d1\u4e8b\u4ef6  \n      self.emit('_socketEnd');  \n    }  \n</code></pre> <p>socket\u53ef\u8bfb\u4e8b\u4ef6\u89e6\u53d1\u65f6\u5927\u6982\u6709\u4e0b\u9762\u51e0\u79cd\u60c5\u51b5 1 \u6709\u6709\u6548\u6570\u636e\u53ef\u8bfb\uff0cpush\u5230\u6d41\u4e2d\uff0c\u89e6\u53d1ondata\u4e8b\u4ef6\u901a\u77e5\u7528\u6237\u3002 2 \u6ca1\u6709\u6709\u6548\u6570\u636e\u53ef\u8bfb\uff0c\u5ffd\u7565\u3002 3 \u8bfb\u51fa\u9519\uff0c\u9500\u6bc1\u6d41 4 \u8bfb\u7ed3\u675f\u3002 \u6211\u4eec\u5206\u6790\u4e00\u4e0b4\u3002\u5728\u65b0\u5efa\u4e00\u4e2asocket\u7684\u65f6\u5019\u6ce8\u518c\u4e86\u6d41\u7ed3\u675f\u7684\u5904\u7406\u51fd\u6570onSocketEnd\u3002</p> <pre><code>    // \u8bfb\u7ed3\u675f\u540e\u6267\u884c\u7684\u51fd\u6570  \n    function onSocketEnd() {  \n      // \u8bfb\u7ed3\u675f\u6807\u8bb0  \n      this._readableState.ended = true;  \n      /* \n        \u5df2\u7ecf\u89e6\u53d1\u8fc7end\u4e8b\u4ef6\uff0c\u5219\u5224\u65ad\u662f\u5426\u9700\u8981\u9500\u6bc1\uff0c\u53ef\u80fd\u8fd8\u6709\u5199\u7aef \n      */\n      if (this._readableState.endEmitted) {  \n        this.readable = false;  \n       maybeDestroy(this);  \n     } else {  \n       // \u8fd8\u6ca1\u6709\u89e6\u53d1end\u5219\u7b49\u5f85\u89e6\u53d1end\u4e8b\u4ef6\u518d\u6267\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c  \n       this.once('end', function end() {  \n         this.readable = false;  \n         maybeDestroy(this);  \n       });  \n       /*\n         \u6267\u884cread\uff0c\u5982\u679c\u6d41\u4e2d\u6ca1\u6709\u7f13\u5b58\u7684\u6570\u636e\u5219\u4f1a\u89e6\u53d1end\u4e8b\u4ef6\uff0c\n         \u5426\u5219\u7b49\u5f85\u6d88\u8d39\u5b8c\u540e\u518d\u89e6\u53d1  \n       */\n       this.read(0);  \n     }  \n     /*\n       1 \u8bfb\u7ed3\u675f\u540e\uff0c\u5982\u679c\u4e0d\u5141\u8bb8\u534a\u5f00\u5173\uff0c\u5219\u5173\u95ed\u5199\u7aef\uff0c\u5982\u679c\u8fd8\u6709\u6570\u636e\u8fd8\u6ca1\u6709\u53d1\u9001\n       \u5b8c\u6bd5\uff0c\u5219\u5148\u53d1\u9001\u5b8c\u518d\u5173\u95ed\n       2 \u91cd\u7f6e\u5199\u51fd\u6570\uff0c\u540e\u7eed\u6267\u884c\u5199\u7684\u65f6\u5019\u62a5\u9519  \n     */\n     if (!this.allowHalfOpen) {  \n       this.write = writeAfterFIN;  \n       this.destroySoon();  \n     }  \n    }  \n</code></pre> <p>\u5f53socket\u7684\u8bfb\u7aef\u7ed3\u675f\u65f6\uff0csocket\u7684\u72b6\u6001\u53d8\u66f4\u5206\u4e3a\u51e0\u79cd\u60c5\u51b5 1 \u5982\u679c\u53ef\u8bfb\u6d41\u4e2d\u8fd8\u6709\u7f13\u5b58\u7684\u6570\u636e\uff0c\u5219\u7b49\u5f85\u8bfb\u53d6\u3002 2 \u5982\u679c\u5199\u7aef\u4e5f\u7ed3\u675f\u4e86\uff0c\u5219\u9500\u6bc1\u6d41\u3002 3 \u5982\u679c\u5199\u7aef\u6ca1\u6709\u7ed3\u675f\uff0c\u5219\u5224\u65adallowHalfOpen\u662f\u5426\u5141\u8bb8\u534a\u5f00\u5173\uff0c\u4e0d\u5141\u8bb8\u5e76\u4e14\u5199\u7aef\u6570\u636e\u5df2\u7ecf\u53d1\u9001\u5b8c\u6bd5\u5219\u5173\u95ed\u5199\u7aef\u3002  </p>"},{"location":"chapter17-TCP/#1713","title":"17.1.3 \u5199\u64cd\u4f5c","text":"<p>\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0b\u5728\u4e00\u4e2a\u6d41\u4e0a\u5199\u7684\u65f6\u5019\uff0c\u903b\u8f91\u662f\u600e\u6837\u7684\u3002Socket\u5b9e\u73b0\u4e86\u5355\u4e2a\u5199\u548c\u6279\u91cf\u5199\u63a5\u53e3\u3002</p> <pre><code>    // \u6279\u91cf\u5199  \n    Socket.prototype._writev = function(chunks, cb) {  \n      this._writeGeneric(true, chunks, '', cb);  \n    };  \n\n    // \u5355\u4e2a\u5199  \n    Socket.prototype._write = function(data, encoding, cb) {  \n      this._writeGeneric(false, data, encoding, cb);  \n    };  \n</code></pre> <p>_writeGeneric</p> <pre><code>    Socket.prototype._writeGeneric = function(writev, data, encoding, cb) {  \n      /*  \n         \u6b63\u5728\u8fde\u63a5\uff0c\u5219\u5148\u4fdd\u5b58\u5f85\u5199\u7684\u6570\u636e\uff0c\u56e0\u4e3astream\u6a21\u5757\u662f\u4e32\u884c\u5199\u7684\uff0c \n         \u6240\u4ee5\u7b2c\u4e00\u6b21\u5199\u6ca1\u5b8c\u6210\uff0c\u4e0d\u4f1a\u6267\u884c\u7b2c\u4e8c\u6b21\u5199\u64cd\u4f5c\uff08_write\uff09\uff0c \n         \u6240\u4ee5\u8fd9\u91cc\u7528\u4e00\u4e2a\u5b57\u6bb5\u800c\u4e0d\u662f\u4e00\u4e2a\u6570\u7ec4\u6216\u961f\u5217\u4fdd\u5b58\u6570\u636e\u548c\u7f16\u7801\uff0c \n         \u56e0\u4e3a\u6709pendingData\u65f6_writeGeneric \u4e0d\u4f1a\u88ab\u6267\u884c\u7b2c\u4e8c\u6b21\uff0c\u8fd9\u91cc\u7f13\u5b58 \n         pendingData\u4e0d\u662f\u4e3a\u4e86\u540e\u7eed\u5199\u5165\uff0c\u800c\u662f\u4e3a\u4e86\u7edf\u8ba1\u5199\u5165\u7684\u6570\u636e\u603b\u6570 \n      */  \n      if (this.connecting) {  \n        this._pendingData = data;  \n        this._pendingEncoding = encoding;  \n        this.once('connect', function connect() {  \n          this._writeGeneric(writev, data, encoding, cb);  \n        });  \n        return;  \n      }  \n      // \u5f00\u59cb\u5199\uff0c\u5219\u6e05\u7a7a\u4e4b\u524d\u7f13\u5b58\u7684\u6570\u636e  \n      this._pendingData = null;  \n      this._pendingEncoding = '';  \n      // \u5199\u64cd\u4f5c\uff0c\u6709\u6570\u636e\u901a\u4fe1\uff0c\u5237\u65b0\u5b9a\u65f6\u5668  \n      this._unrefTimer();  \n      // \u5df2\u7ecf\u5173\u95ed\uff0c\u5219\u9500\u6bc1socket  \n      if (!this._handle) {  \n        this.destroy(new errors.Error('ERR_SOCKET_CLOSED'), cb);  \n        return false;  \n      }  \n      // \u65b0\u5efa\u4e00\u4e2a\u5199\u8bf7\u6c42  \n      var req = new WriteWrap();  \n      req.handle = this._handle;  \n      req.oncomplete = afterWrite;  \n      // \u662f\u5426\u540c\u6b65\u6267\u884c\u5199\u5b8c\u6210\u56de\u8c03\uff0c\u53d6\u51b3\u4e8e\u5e95\u5c42\u662f\u540c\u6b65\u5199\u5165\uff0c\u7136\u540e\u6267\u884c\u56de\u8c03\u8fd8\u662f\u5f02\u6b65\u5199\u5165  \n      req.async = false;  \n      var err;  \n      // \u662f\u5426\u6279\u91cf\u5199  \n      if (writev) {  \n        // \u6240\u6709\u6570\u636e\u90fd\u662fbuffer\u7c7b\u578b\uff0c\u5219\u76f4\u63a5\u5806\u8d77\u6765\uff0c\u5426\u5219\u9700\u8981\u4fdd\u5b58\u7f16\u7801\u7c7b\u578b  \n        var allBuffers = data.allBuffers;  \n        var chunks;  \n        var i;  \n        if (allBuffers) {  \n          chunks = data;  \n          for (i = 0; i &lt; data.length; i++)  \n            data[i] = data[i].chunk;  \n        } else {  \n          // \u7533\u8bf7double\u4e2a\u5927\u5c0f\u7684\u6570\u7ec4  \n          chunks = new Array(data.length &lt;&lt; 1);  \n          for (i = 0; i &lt; data.length; i++) {  \n            var entry = data[i];  \n            chunks[i * 2] = entry.chunk;  \n            chunks[i * 2 + 1] = entry.encoding;  \n          }  \n        }  \n        err = this._handle.writev(req, chunks, allBuffers);  \n\n        // Retain chunks  \n        if (err === 0) req._chunks = chunks;  \n      } else {  \n        var enc;  \n        if (data instanceof Buffer) {  \n          enc = 'buffer';  \n        } else {  \n          enc = encoding;  \n        }  \n        err = createWriteReq(req, this._handle, data, enc);  \n      }  \n\n      if (err)  \n        return this.destroy(errnoException(err, 'write', req.error), cb);  \n      // \u8bf7\u6c42\u5199\u5165\u5e95\u5c42\u7684\u6570\u636e\u5b57\u8282\u957f\u5ea6  \n      this._bytesDispatched += req.bytes;  \n      // \u5728stream_base.cc\u4e2dreq_wrap_obj-&gt;Set(env-&gt;async(), True(env-&gt;isolate()));\u8bbe\u7f6e  \n      if (!req.async) {  \n        cb();  \n        return;  \n      }  \n\n      req.cb = cb;  \n      // \u6700\u540e\u4e00\u6b21\u8bf7\u6c42\u5199\u6570\u636e\u7684\u5b57\u8282\u957f\u5ea6  \n      this[kLastWriteQueueSize] = req.bytes;  \n    };  \n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u5f88\u591a\uff0c\u4f46\u662f\u903b\u8f91\u5e76\u4e0d\u590d\u6742\uff0c\u5177\u4f53\u5b9e\u73b0\u5728stream_base.cc\u548cstream_wrap.cc\uff0c\u8fd9\u91cc\u4e0d\u518d\u5c55\u5f00\u5206\u6790\uff0c\u4e3b\u8981\u662f\u6267\u884cwritev\u548ccreateWriteReq\u51fd\u6570\u8fdb\u884c\u5199\u64cd\u4f5c\u3002\u5b83\u4eec\u5e95\u5c42\u8c03\u7528\u7684\u90fd\u662fuv_write2\uff08\u9700\u8981\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\uff09\u6216uv_write\uff08\u4e0d\u9700\u8981\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\uff09\u6216\u8005uv_try_write\u51fd\u6570\u8fdb\u884c\u5199\u64cd\u4f5c\u3002\u8fd9\u91cc\u53ea\u5206\u6790\u4e00\u4e0basync\u7684\u610f\u4e49\uff0casync\u9ed8\u8ba4\u662ffalse\uff0c\u5b83\u8868\u793a\u7684\u610f\u4e49\u662f\u6267\u884c\u5e95\u5c42\u5199\u5165\u65f6\uff0c\u5e95\u5c42\u662f\u5426\u540c\u6b65\u6267\u884c\u56de\u8c03\uff0casync\u4e3afalse\u8bf4\u660e\u5199\u5165\u5b8c\u6210\u56de\u8c03\u662f\u540c\u6b65\u6267\u884c\u7684\u3002\u5728stream_base.cc\u7684\u5199\u51fd\u6570\u4e2d\u6709\u76f8\u5173\u7684\u903b\u8f91\u3002</p> <pre><code>    err = DoWrite(req_wrap, buf_list, count, nullptr);  \n    req_wrap_obj-&gt;Set(env-&gt;async(), True(env-&gt;isolate()));  \n</code></pre> <p>\u5f53\u6267\u884cDoWrite\u7684\u65f6\u5019\uff0creq_wrap\u4e2d\u4fdd\u5b58\u7684\u56de\u8c03\u53ef\u80fd\u4f1a\u88abLibuv\u540c\u6b65\u6267\u884c\uff0c\u4ece\u800c\u6267\u884cJS\u4ee3\u7801\uff0c\u8fd9\u65f6\u5019async\u662ffalse\uff08\u9ed8\u8ba4\u503c\uff09\uff0c\u8bf4\u660e\u56de\u8c03\u662f\u88ab\u540c\u6b65\u6267\u884c\u7684\uff0c\u5982\u679cDoWrite\u6ca1\u6709\u540c\u6b65\u6267\u884c\u56de\u8c03\u3002\u5219\u8bf4\u660e\u662f\u5f02\u6b65\u6267\u884c\u56de\u8c03\u3002\u8bbe\u7f6easync\u4e3atrue\uff0c\u518d\u6267\u884cJS\u4ee3\u7801\u3002</p>"},{"location":"chapter17-TCP/#1714","title":"17.1.4 \u5173\u95ed\u5199\u64cd\u4f5c","text":"<p>\u5f53\u6211\u4eec\u53d1\u9001\u5b8c\u6570\u636e\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528socket\u5bf9\u8c61\u7684end\u51fd\u6570\u5173\u95ed\u6d41\u7684\u5199\u7aef\u3002\u6211\u4eec\u770b\u4e00\u4e0bend\u7684\u903b\u8f91\u3002</p> <pre><code>    Socket.prototype.end = function(data, encoding, callback) {  \n      stream.Duplex.prototype.end.call(this, \n                                           data, \n                                           encoding, \n                                           callback);  \n      return this;  \n    };  \n</code></pre> <p>Socket\u7684end\u662f\u8c03\u7528\u7684Duplex\u7684end\uff0c\u800cDuplex\u7684end\u662f\u7ee7\u627f\u4e8eWritable\u7684end\u3002Writable\u7684end\u6700\u7ec8\u4f1a\u89e6\u53d1finish\u4e8b\u4ef6\uff0csocket\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u76d1\u542c\u4e86\u8be5\u4e8b\u4ef6\u3002</p> <p><pre><code>    this.on('finish', onSocketFinish); \n</code></pre> \u6211\u4eec\u770b\u770bonSocketFinish\u3002 <pre><code>    // \u6267\u884c\u4e86end\uff0c\u5e76\u4e14\u6570\u636e\u53d1\u9001\u5b8c\u6bd5\uff0c\u5219\u5173\u95ed\u5199\u7aef  \n    function onSocketFinish() {  \n      // \u8fd8\u6ca1\u8fde\u63a5\u6210\u529f\u5c31\u6267\u884c\u4e86end  \n      if (this.connecting) {  \n        return this.once('connect', onSocketFinish);  \n      }  \n      // \u5199\u7ed3\u675f\u4e86\uff0c\u5982\u679c\u4e5f\u4e0d\u80fd\u8bfb\u6216\u8005\u8bfb\u7ed3\u675f\u4e86\uff0c\u5219\u9500\u6bc1socket  \n      if (!this.readable || this._readableState.ended) {  \n        return this.destroy();  \n      }  \n      // \u4e0d\u652f\u6301shutdown\u5219\u76f4\u63a5\u9500\u6bc1  \n      if (!this._handle || !this._handle.shutdown)  \n        return this.destroy();  \n      // \u652f\u6301shutdown\u5219\u6267\u884c\u5173\u95ed\uff0c\u5e76\u8bbe\u7f6e\u56de\u8c03  \n      var err = defaultTriggerAsyncIdScope(  \n        this[async_id_symbol], shutdownSocket, this, afterShutdown  \n      );  \n      // \u6267\u884cshutdown\u5931\u8d25\u5219\u76f4\u63a5\u9500\u6bc1  \n      if (err)  \n        return this.destroy(errnoException(err, 'shutdown'));  \n    }  \n\n    // \u53d1\u9001\u5173\u95ed\u5199\u7aef\u7684\u8bf7\u6c42  \n    function shutdownSocket(self, callback) {  \n      var req = new ShutdownWrap();  \n      req.oncomplete = callback;  \n      req.handle = self._handle;  \n      return self._handle.shutdown(req);  \n    }  \n</code></pre></p> <p>Shutdown\u51fd\u6570\u5728stream_base.cc\u4e2d\u5b9a\u4e49\uff0c\u6700\u7ec8\u8c03\u7528uv_shutdown\u5173\u95ed\u6d41\u7684\u5199\u7aef\uff0c\u5728Libuv\u6d41\u7ae0\u8282\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u8fc7\u3002\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0b\u5173\u95ed\u5199\u7aef\u540e\uff0c\u56de\u8c03\u51fd\u6570\u7684\u903b\u8f91\u3002</p> <pre><code>    // \u5173\u95ed\u5199\u7aef\u6210\u529f\u540e\u7684\u56de\u8c03  \n    function afterShutdown(status, handle, req) {  \n      // handle\u5173\u8054\u7684socket  \n      var self = handle.owner;  \n      // \u5df2\u7ecf\u9500\u6bc1\u4e86\uff0c\u5219\u4e0d\u9700\u8981\u5f80\u4e0b\u8d70\u4e86\uff0c\u5426\u5219\u6267\u884c\u9500\u6bc1\u64cd\u4f5c  \n      if (self.destroyed)  \n        return;  \n      // \u5199\u5173\u95ed\u6210\u529f\uff0c\u5e76\u4e14\u8bfb\u4e5f\u7ed3\u675f\u4e86\uff0c\u5219\u9500\u6bc1socket\uff0c\u5426\u5219\u7b49\u5f85\u8bfb\u7ed3\u675f\u518d\u6267\u884c\u9500\u6bc1  \n      if (self._readableState.ended) {  \n        self.destroy();  \n      } else {  \n        self.once('_socketEnd', self.destroy);  \n      }  \n    }  \n</code></pre>"},{"location":"chapter17-TCP/#1715","title":"17.1.5 \u9500\u6bc1","text":"<p>\u5f53\u4e00\u4e2asocket\u4e0d\u53ef\u8bfb\u4e5f\u4e0d\u53ef\u5199\u7684\u65f6\u5019\u3001\u88ab\u5173\u95ed\u3001\u53d1\u751f\u9519\u8bef\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u88ab\u9500\u6bc1\u3002\u9500\u6bc1\u4e00\u4e2a\u6d41\u5c31\u662f\u9500\u6bc1\u6d41\u7684\u8bfb\u7aef\u3001\u5199\u7aef\u3002\u7136\u540e\u6267\u884c\u6d41\u5b50\u7c7b\u7684_destory\u51fd\u6570\u3002\u6211\u4eec\u770b\u4e00\u4e0bsocket\u7684_destroy\u51fd\u6570</p> <p><pre><code>    // \u9500\u6bc1\u65f6\u6267\u884c\u7684\u94a9\u5b50\u51fd\u6570\uff0cexception\u4ee3\u8868\u662f\u5426\u56e0\u4e3a\u9519\u8bef\u5bfc\u81f4\u7684\u9500\u6bc1  \n    Socket.prototype._destroy = function(exception, cb) {  \n      this.connecting = false;  \n      this.readable = this.writable = false;  \n      // \u6e05\u9664\u5b9a\u65f6\u5668  \n      for (var s = this; s !== null; s = s._parent) {  \n        clearTimeout(s[kTimeout]);  \n      }  \n\n      if (this._handle) {  \n        // \u662f\u5426\u56e0\u4e3a\u51fa\u9519\u5bfc\u81f4\u9500\u6bc1\u6d41  \n        var isException = exception ? true : false;    \n        // \u5173\u95ed\u5e95\u5c42handle  \n        this._handle.close(() =&gt; {  \n          // close\u4e8b\u4ef6\u7684\u5165\u53c2\uff0c\u8868\u793a\u662f\u5426\u56e0\u4e3a\u9519\u8bef\u5bfc\u81f4\u7684\u5173\u95ed  \n          this.emit('close', isException);  \n        });  \n        this._handle.onread = noop;  \n        this._handle = null;  \n        this._sockname = null;  \n      }  \n      // \u6267\u884c\u56de\u8c03  \n      cb(exception);  \n      // socket\u6240\u5c5e\u7684server\uff0c\u4f5c\u4e3a\u5ba2\u6237\u7aef\u65f6\u662fnull  \n      if (this._server) {  \n        // server\u4e0b\u7684\u8fde\u63a5\u6570\u51cf\u4e00  \n        this._server._connections--;  \n        /*\n          \u662f\u5426\u9700\u8981\u89e6\u53d1server\u7684close\u4e8b\u4ef6\uff0c\n          \u5f53\u6240\u6709\u7684\u8fde\u63a5\uff08socket\uff09\u90fd\u5173\u95ed\u65f6\u624d\u89e6\u53d1server\u7684\u662fclose\u4e8b\u4ef6  \n        */\n        if (this._server._emitCloseIfDrained) {  \n          this._server._emitCloseIfDrained();  \n        }  \n      }  \n    };  \n</code></pre> _stream_writable.js\u4e2d\u7684destroy\u51fd\u6570\u53ea\u662f\u4fee\u6539\u8bfb\u5199\u6d41\u7684\u72b6\u6001\u548c\u6807\u8bb0\uff0c\u5b50\u7c7b\u9700\u8981\u5b9a\u4e49_destroy\u51fd\u6570\u9500\u6bc1\u76f8\u5173\u7684\u8d44\u6e90\uff0csocket\u901a\u8fc7\u8c03\u7528close\u5173\u95ed\u5e95\u5c42\u5173\u8054\u7684\u8d44\u6e90\uff0c\u5173\u95ed\u540e\u89e6\u53d1socket\u7684close\u4e8b\u4ef6\uff08\u56de\u8c03\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fboolean\u7c7b\u578b\uff0c\u8bf4\u660e\u662f\u5426\u56e0\u4e3a\u9519\u8bef\u5bfc\u81f4socket\u5173\u95ed\uff09\u3002\u6700\u540e\u5224\u65ad\u8be5socket\u662f\u5426\u6765\u81ea\u670d\u52a1\u5668\u521b\u5efa\u7684\uff0c\u662f\u7684\u8bdd\u8be5\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6570\u51cf\u4e00\uff0c\u5982\u679c\u670d\u52a1\u5668\u6267\u884c\u4e86close\u5e76\u4e14\u5f53\u524d\u8fde\u63a5\u6570\u4e3a0\uff0c\u5219\u5173\u95ed\u670d\u52a1\u5668\u3002</p>"},{"location":"chapter17-TCP/#172-tcp","title":"17.2 TCP \u670d\u52a1\u5668","text":"<p>net\u6a21\u5757\u63d0\u4f9b\u4e86createServer\u51fd\u6570\u521b\u5efa\u4e00\u4e2aTCP\u670d\u52a1\u5668\u3002</p> <pre><code>    function createServer(options, connectionListener) {  \n      return new Server(options, connectionListener);  \n    }  \n\n    function Server(options, connectionListener) {  \n      EventEmitter.call(this);  \n      // \u6ce8\u518c\u8fde\u63a5\u5230\u6765\u65f6\u6267\u884c\u7684\u56de\u8c03  \n      if (typeof options === 'function') {  \n        connectionListener = options;  \n        options = {};  \n        this.on('connection', connectionListener);  \n      } else if (options == null || typeof options === 'object') {  \n        options = options || {};  \n        if (typeof connectionListener === 'function') {  \n          this.on('connection', connectionListener);  \n        }  \n      } else {  \n        throw new errors.TypeError('ERR_INVALID_ARG_TYPE',  \n                                   'options',  \n                                   'Object',  \n                                   options);  \n      }  \n      // \u670d\u52a1\u5668\u5efa\u7acb\u7684\u8fde\u63a5\u6570  \n      this._connections = 0;  \n      this._handle = null;  \n      this._unref = false;  \n      // \u670d\u52a1\u5668\u4e0b\u7684\u6240\u6709\u8fde\u63a5\u662f\u5426\u5141\u8bb8\u534a\u8fde\u63a5  \n      this.allowHalfOpen = options.allowHalfOpen || false;  \n      // \u6709\u8fde\u63a5\u65f6\u662f\u5426\u6ce8\u518c\u8bfb\u4e8b\u4ef6  \n      this.pauseOnConnect = !!options.pauseOnConnect;  \n    }  \n</code></pre> <p>createServer\u8fd4\u56de\u7684\u5c31\u662f\u4e00\u4e2a\u4e00\u822c\u7684JS\u5bf9\u8c61\uff0c\u63a5\u7740\u8c03\u7528listen\u51fd\u6570\u76d1\u542c\u7aef\u53e3\u3002\u770b\u4e00\u4e0blisten\u51fd\u6570\u7684\u903b\u8f91</p> <pre><code>    Server.prototype.listen = function(...args) {  \n      /*\n         \u5904\u7406\u5165\u53c2\uff0c\u6839\u636e\u6587\u6863\u6211\u4eec\u77e5\u9053listen\u53ef\u4ee5\u63a5\u6536\u597d\u51e0\u4e2a\u53c2\u6570\uff0c\n          \u5047\u8bbe\u6211\u4eec\u8fd9\u91cc\u662f\u53ea\u4f20\u4e86\u7aef\u53e3\u53f79297  \n        */\n      var normalized = normalizeArgs(args);  \n      //  normalized = [{port: 9297}, null];  \n      var options = normalized[0];  \n      var cb = normalized[1];  \n      // \u7b2c\u4e00\u6b21listen\u7684\u65f6\u5019\u4f1a\u521b\u5efa\uff0c\u5982\u679c\u975e\u7a7a\u8bf4\u660e\u5df2\u7ecflisten\u8fc7  \n      if (this._handle) {  \n        throw new errors.Error('ERR_SERVER_ALREADY_LISTEN');  \n      }  \n      // listen\u6210\u529f\u540e\u6267\u884c\u7684\u56de\u8c03  \n      var hasCallback = (cb !== null);  \n      if (hasCallback) {  \n        // listen\u6210\u529f\u7684\u56de\u8c03  \n        this.once('listening', cb);  \n      }  \n\n      options = options._handle || options.handle || options;  \n      // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4f20\u8fdb\u6765\u7684\u662f\u4e00\u4e2aTCP\u670d\u52a1\u5668\uff0c\u800c\u4e0d\u662f\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5668  \n      if (options instanceof TCP) {  \n        this._handle = options;  \n        this[async_id_symbol] = this._handle.getAsyncId();  \n        listenIncluster(this, null, -1, -1, backlogFromArgs);  \n        return this;  \n      }  \n      // \u7b2c\u4e8c\u79cd\uff0c\u4f20\u8fdb\u6765\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u4e14\u5e26\u4e86fd  \n      if (typeof options.fd === 'number' &amp;&amp; options.fd &gt;= 0) {  \n        listenIncluster(this, \n                            null, \n                            null, \n                            null, \n                            backlogFromArgs, \n                            options.fd);  \n        return this;  \n      }  \n      // \u521b\u5efa\u4e00\u4e2atcp\u670d\u52a1\u5668  \n      var backlog;  \n      if (typeof options.port === 'number' || \n             typeof options.port === 'string') {  \n        backlog = options.backlog || backlogFromArgs;  \n        // \u7b2c\u4e09\u79cd \u542f\u52a8\u4e00\u4e2aTCP\u670d\u52a1\u5668\uff0c\u4f20\u4e86host\u5219\u5148\u8fdb\u884cDNS\u89e3\u6790\n        if (options.host) {  \n              lookupAndListen(this,\n                              options.port | 0, \n                              options.host, \n                              backlog,\n                              options.exclusive);  \n        } else {\n          listenIncluster(this, \n                                null, \n                                options.port | 0, \n                                4,      \n                                backlog, \n                                undefined, \n                                options.exclusive);  \n        }  \n        return this;  \n      }  \n    };  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u5206\u522b\u662f\u4f20\u4e86\u4e00\u4e2a\u670d\u52a1\u5668\u3001\u4f20\u4e86\u4e00\u4e2afd\u3001\u4f20\u4e86\u7aef\u53e3\uff08\u6216\u8005host\uff09\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u51e0\u79cd\u60c5\u51b5\u6700\u540e\u90fd\u662f\u8c03\u7528\u4e86listenIncluster\uff08lookupAndListen\u662f\u5148DNS\u89e3\u6790\u540e\u518d\u6267\u884clistenIncluster\uff09\uff0c\u53ea\u662f\u5165\u53c2\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u770blistenIncluster\u3002 <pre><code>    function listenIncluster(server, \n                              address, \n                              port, \n                              addressType,      \n                              backlog, \n                              fd, \n                              exclusive) {  \n      exclusive = !!exclusive;  \n      if (cluster === null) cluster = require('cluster'); \n      if (cluster.isMaster || exclusive) {  \n        server._listen2(address, port, addressType, backlog, fd);\n        return;  \n      }  \n    }  \n</code></pre> \u56e0\u4e3a\u6211\u4eec\u662f\u5728\u4e3b\u8fdb\u7a0b\uff0c\u6240\u4ee5\u76f4\u63a5\u6267\u884c_listen2\uff0c\u5b50\u8fdb\u7a0b\u7684\u5728cluster\u6a21\u5757\u5206\u6790\u3002_listen\u5bf9\u5e94\u7684\u51fd\u6570\u662fsetupListenHandle</p> <pre><code>    function setupListenHandle(address, port, addressType, backlog, fd) {  \n      // \u6709handle\u5219\u4e0d\u9700\u8981\u521b\u5efa\u4e86\uff0c\u5426\u5219\u521b\u5efa\u4e00\u4e2a\u5e95\u5c42\u7684handle  \n      if (this._handle) {  \n\n      } else {  \n        var rval = null;  \n        // \u6ca1\u6709\u4f20fd\uff0c\u5219\u8bf4\u660e\u662f\u76d1\u542c\u7aef\u53e3\u548cIP  \n        if (!address &amp;&amp; typeof fd !== 'number') {  \n          rval = createServerHandle('::', port, 6, fd);  \n          /*\n                   \u8fd4\u56denumber\u8bf4\u660ebind IPv6\u7248\u672c\u7684handle\u5931\u8d25\uff0c\n                   \u56de\u9000\u5230v4\uff0c\u5426\u5219\u8bf4\u660e\u652f\u6301IPv6  \n                */\n          if (typeof rval === 'number') {  \n            // \u8d4b\u503c\u4e3anull\uff0c\u624d\u80fd\u8d70\u4e0b\u9762\u7684createServerHandle  \n            rval = null;  \n            address = '0.0.0.0';  \n            addressType = 4;  \n          } else {  \n            address = '::';  \n            addressType = 6;  \n          }  \n        }  \n        // \u521b\u5efa\u5931\u8d25\u5219\u7ee7\u7eed\u521b\u5efa  \n        if (rval === null)  \n          rval = createServerHandle(address, \n                                            port, \n                                            addressType, \n                                            fd);  \n        // \u8fd8\u62a5\u9519\u5219\u8bf4\u660e\u521b\u5efa\u670d\u52a1\u5668\u5931\u8d25\uff0c\u62a5\u9519  \n        if (typeof rval === 'number') {  \n          var error = exceptionWithHostPort(rval, \n                                                     'listen', \n                                                     address, \n                                                     port);  \n          process.nextTick(emitErrorNT, this, error);  \n          return;  \n        }  \n        this._handle = rval;  \n      }  \n\n      // \u6709\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u7684\u8fde\u63a5\u65f6\u6267\u884c\u7684\u56de\u8c03  \n      this._handle.onconnection = onconnection;  \n      this._handle.owner = this;  \n      // \u6267\u884cC++\u5c42listen  \n      var err = this._handle.listen(backlog || 511);  \n      // \u51fa\u9519\u5219\u62a5\u9519  \n      if (err) {  \n        var ex = exceptionWithHostPort(err, \n                                              'listen', \n                                              address, \n                                              port);  \n        this._handle.close();  \n        this._handle = null;  \n        nextTick(this[async_id_symbol], emitErrorNT, this, ex);  \n        return;  \n      } \n      // \u89e6\u53d1listen\u56de\u8c03  \n      nextTick(this[async_id_symbol], emitListeningNT, this);  \n    }  \n</code></pre> <p>\u4e3b\u8981\u662f\u8c03\u7528createServerHandle\u521b\u5efa\u4e00\u4e2ahandle\uff0c\u7136\u540e\u8c03\u7528listen\u51fd\u6570\u76d1\u542c\u3002\u6211\u4eec\u5148\u770bcreateServerHandle</p> <pre><code>    function createServerHandle(address, port, addressType, fd) {  \n      var err = 0;  \n      var handle;  \n\n      var isTCP = false;  \n      // \u4f20\u4e86fd\u5219\u6839\u636efd\u521b\u5efa\u4e00\u4e2ahandle  \n      if (typeof fd === 'number' &amp;&amp; fd &gt;= 0) {  \n        try {  \n          handle = createHandle(fd, true);  \n        } catch (e) {  \n          return UV_EINVAL;  \n        }  \n        // \u628afd\u5b58\u5230handle\u4e2d  \n        handle.open(fd);  \n        handle.readable = true;  \n        handle.writable = true;  \n        assert(!address &amp;&amp; !port);  \n        // \u7ba1\u9053  \n      } else if (port === -1 &amp;&amp; addressType === -1) {  \n        // \u521b\u5efa\u4e00\u4e2aUnix\u57df\u670d\u52a1\u5668  \n        handle = new Pipe(PipeConstants.SERVER);  \n      } else {  \n        // \u521b\u5efa\u4e00\u4e2aTCP\u670d\u52a1\u5668  \n        handle = new TCP(TCPConstants.SERVER);  \n        isTCP = true;  \n      }  \n      /*\n          \u6709\u5730\u5740\u6216\u8005IP\u8bf4\u660e\u662f\u901a\u8fc7IP\u7aef\u53e3\u521b\u5efa\u7684TCP\u670d\u52a1\u5668\uff0c\n           \u9700\u8981\u8c03bind\u7ed1\u5b9a\u5730\u5740 \n        */ \n      if (address || port || isTCP) {  \n        // \u6ca1\u6709\u5730\u5740\uff0c\u5219\u4f18\u5148\u7ed1\u5b9aIPv6\u7248\u672c\u7684\u672c\u5730\u5730\u5740  \n        if (!address) {  \n          // Try binding to IPv6 first  \n          err = handle.bind6('::', port);  \n          // \u5931\u8d25\u5219\u7ed1\u5b9av4\u7684  \n          if (err) {  \n            handle.close();  \n            // Fallback to IPv4  \n            return createServerHandle('0.0.0.0', port);  \n          }  \n        } else if (addressType === 6) { // IPv6\u6216v4  \n          err = handle.bind6(address, port);  \n        } else {  \n          err = handle.bind(address, port);  \n        }  \n      }  \n\n      if (err) {  \n        handle.close();  \n        return err;  \n      }  \n\n      return handle;  \n    }  \n</code></pre> <p>createServerHandle\u4e3b\u8981\u662f\u8c03\u7528createHandle\u521b\u5efa\u4e00\u4e2ahandle\u7136\u540e\u6267\u884cbind\u51fd\u6570\u3002\u521b\u5efahandle\u7684\u65b9\u5f0f\u6709\u51e0\u79cd\uff0c\u76f4\u63a5\u8c03\u7528C++\u5c42\u7684\u51fd\u6570\u6216\u8005\u901a\u8fc7fd\u521b\u5efa\u3002\u8c03\u7528createHandle\u53ef\u4ee5\u901a\u8fc7fd\u521b\u5efa\u4e00\u4e2ahandle</p> <pre><code>    // \u901a\u8fc7fd\u521b\u5efa\u4e00\u4e2ahandle\uff0c\u4f5c\u4e3a\u5ba2\u6237\u7aef\u6216\u8005\u670d\u52a1\u5668  \n    function createHandle(fd, is_server) {  \n      // \u5224\u65adfd\u5bf9\u5e94\u7684\u7c7b\u578b  \n      const type = TTYWrap.guessHandleType(fd);  \n      // Unix\u57df  \n      if (type === 'PIPE') {  \n        return new Pipe(  \n          is_server ? PipeConstants.SERVER : PipeConstants.SOCKET      );  \n      }  \n      // tcp  \n      if (type === 'TCP') {  \n        return new TCP(  \n          is_server ? TCPConstants.SERVER : TCPConstants.SOCKET  \n        );  \n      }  \n\n      throw new errors.TypeError('ERR_INVALID_FD_TYPE', type);  \n    }  \n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0bbind\u51fd\u6570\u7684\u903b\u8f91\uff0c</p> <pre><code>    int uv__tcp_bind(uv_tcp_t* tcp,  \n                     const struct sockaddr* addr,  \n                     unsigned int addrlen,  \n                     unsigned int flags) {  \n      int err;  \n      int on;  \n      // \u5982\u679c\u6ca1\u6709socket\u5219\u521b\u5efa\u4e00\u4e2a\uff0c\u6709\u5224\u65ad\u662f\u5426\u8bbe\u7f6e\u4e86UV_HANDLE_BOUND\uff0c\u662f\u5219\u6267\u884cbind\uff0c\u5426\u5219\u4e0d\u6267\u884cbind  \n      err = maybe_new_socket(tcp, addr-&gt;sa_family, 0);  \n      if (err)  \n        return err;  \n\n      on = 1;  \n      // \u8bbe\u7f6e\u5728\u65ad\u5f00\u8fde\u63a5\u76842 msl\u5185\u53ef\u4ee5\u91cd\u7528\u7aef\u53e3\uff0c\u6240\u4ee5Node.js\u670d\u52a1\u5668\u53ef\u4ee5\u5feb\u901f\u91cd\u542f  \n      if (setsockopt(tcp-&gt;io_watcher.fd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on)))  \n        return UV__ERR(errno);  \n      errno = 0;  \n      // \u6267\u884cbind  \n      if (bind(tcp-&gt;io_watcher.fd, addr, addrlen) &amp;&amp; errno != EADDRINUSE) {  \n        if (errno == EAFNOSUPPORT)  \n          return UV_EINVAL;  \n        return UV__ERR(errno);  \n      }  \n      // bind\u662f\u5426\u51fa\u9519  \n      tcp-&gt;delayed_error = UV__ERR(errno);  \n      // \u6253\u4e0a\u5df2\u7ecf\u6267\u884c\u4e86bind\u7684\u6807\u8bb0  \n      tcp-&gt;flags |= UV_HANDLE_BOUND;  \n      if (addr-&gt;sa_family == AF_INET6)  \n        tcp-&gt;flags |= UV_HANDLE_IPV6;  \n\n      return 0;  \n    }  \n</code></pre> <p>\u6267\u884c\u5b8cbind\u540e\uff0c\u4f1a\u7ee7\u7eed\u6267\u884clisten\uff0c\u6211\u4eec\u63a5\u7740\u770blisten\u51fd\u6570\u505a\u4e86\u4ec0\u4e48\u3002\u6211\u4eec\u76f4\u63a5\u770btcp_wrap.cc\u7684Listen\u3002</p> <pre><code>    void TCPWrap::Listen(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      TCPWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap,  \n                  args.Holder(),  \n                  args.GetReturnValue().Set(UV_EBADF));  \n      int backlog = args[0]-&gt;Int32Value();  \n      int err = uv_listen(reinterpret_cast&lt;uv_stream_t*&gt;(&amp;wrap-&gt;handle_),  \n                  backlog,  \n                  OnConnection);  \n      args.GetReturnValue().Set(err);  \n    }  \n</code></pre> <p>C++\u5c42\u51e0\u4e4e\u662f\u900f\u4f20\u5230Libuv\uff0cLibuv\u7684\u5185\u5bb9\u6211\u4eec\u4e0d\u518d\u5177\u4f53\u5c55\u5f00\uff0c\u5f53\u6709\u4e09\u6b21\u63e1\u624b\u7684\u8fde\u63a5\u5b8c\u6210\u65f6\uff0c\u4f1a\u6267\u884cOnConnection</p> <pre><code>    template &lt;typename WrapType, typename UVType&gt;  \n    void ConnectionWrap&lt;WrapType, UVType&gt;::OnConnection(uv_stream_t* handle, int status) {  \n      // TCPWrap                   \n      WrapType* wrap_data = static_cast&lt;WrapType*&gt;(handle-&gt;data);  \n      Environment* env = wrap_data-&gt;env();  \n      HandleScope handle_scope(env-&gt;isolate());  \n      Context::Scope context_scope(env-&gt;context());  \n      Local&lt;Value&gt; argv[] = {  \n        Integer::New(env-&gt;isolate(), status),  \n        Undefined(env-&gt;isolate())  \n      };  \n\n      if (status == 0) { \n        // \u65b0\u5efa\u4e00\u4e2a\u8868\u793a\u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u7684\u5bf9\u8c61,\u5fc5\u586bTCPWrap\u5bf9\u8c61  \n        Local&lt;Object&gt; client_obj = WrapType::Instantiate(env,wrap_data,WrapType::SOCKET);  \n        WrapType* wrap;  \n        // \u89e3\u5305\u51fa\u4e00\u4e2aTCPWrap\u5bf9\u8c61\u5b58\u5230wrap  \n        ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, client_obj);  \n        uv_stream_t* client_handle = reinterpret_cast&lt;uv_stream_t*&gt;(&amp;wrap-&gt;handle_);  \n        // \u628a\u901a\u4fe1fd\u5b58\u50a8\u5230client_handle\u4e2d  \n        if (uv_accept(handle, client_handle))  \n          return;  \n        argv[1] = client_obj;  \n      }  \n      // \u56de\u8c03\u4e0a\u5c42\u7684onconnection\u51fd\u6570  \n      wrap_data-&gt;MakeCallback(env-&gt;onconnection_string(), arraysize(argv), argv);  \n    }  \n</code></pre> <p>\u5f53\u5efa\u7acb\u4e86\u65b0\u8fde\u63a5\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u65b0\u5efa\u4e00\u4e2asocket\u8868\u793a\uff0c\u540c\u6837\uff0c\u5728Node.js\u5c42\uff0c\u4e5f\u4f1a\u65b0\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7684\u5bf9\u8c61\u8868\u793a\u548c\u5ba2\u6237\u7aef\u7684\u901a\u4fe1\uff0c\u63a5\u7740\u6211\u4eec\u770bJS\u5c42\u56de\u8c03\u3002</p> <pre><code>    // clientHandle\u4ee3\u8868\u4e00\u4e2a\u548c\u5ba2\u6237\u7aef\u5efa\u7acbTCP\u8fde\u63a5\u7684\u5b9e\u4f53  \n    function onconnection(err, clientHandle) {  \n      var handle = this;  \n      var self = handle.owner;  \n      // \u9519\u8bef\u5219\u89e6\u53d1\u9519\u8bef\u4e8b\u4ef6  \n      if (err) {  \n        self.emit('error', errnoException(err, 'accept'));  \n        return;  \n      }  \n      // \u5efa\u7acb\u8fc7\u591a\uff0c\u5173\u6389  \n      if (self.maxConnections &amp;&amp; self._connections &gt;= self.maxConnections) {  \n        clientHandle.close();  \n        return;  \n      }  \n      //\u65b0\u5efa\u4e00\u4e2asocket\u7528\u4e8e\u901a\u4fe1  \n      var socket = new Socket({  \n        handle: clientHandle,  \n        allowHalfOpen: self.allowHalfOpen,  \n        pauseOnCreate: self.pauseOnConnect  \n      });  \n      socket.readable = socket.writable = true;  \n      // \u670d\u52a1\u5668\u7684\u8fde\u63a5\u6570\u52a0\u4e00  \n      self._connections++;  \n      socket.server = self;  \n      socket._server = self;  \n      // \u89e6\u53d1\u7528\u6237\u5c42\u8fde\u63a5\u4e8b\u4ef6  \n      self.emit('connection', socket); \n    } \n</code></pre> <p>\u5728JS\u5c42\u4e5f\u4f1a\u5c01\u88c5\u4e00\u4e2aSocket\u5bf9\u8c61\u7528\u4e8e\u7ba1\u7406\u548c\u5ba2\u6237\u7aef\u7684\u901a\u4fe1\uff0c\u63a5\u7740\u89e6\u53d1connection\u4e8b\u4ef6\u3002\u5269\u4e0b\u7684\u4e8b\u60c5\u5c31\u662f\u5e94\u7528\u5c42\u5904\u7406\u4e86\u3002</p>"},{"location":"chapter17-TCP/#173-keepalive","title":"17.3 keepalive","text":"<p>\u672c\u8282\u5206\u6790\u57fa\u4e8eTCP\u5c42\u7684\u957f\u8fde\u63a5\u95ee\u9898\uff0c\u76f8\u6bd4\u5e94\u7528\u5c42HTTP\u534f\u8bae\u7684\u957f\u8fde\u63a5\uff0cTCP\u5c42\u63d0\u4f9b\u7684\u529f\u80fd\u66f4\u591a\u3002TCP\u5c42\u5b9a\u4e49\u4e86\u4e09\u4e2a\u914d\u7f6e\u3002 1 \u591a\u4e45\u6ca1\u6709\u6536\u5230\u6570\u636e\u5305\uff0c\u5219\u5f00\u59cb\u53d1\u9001\u63a2\u6d4b\u5305\u3002 2 \u6bcf\u9694\u591a\u4e45\uff0c\u518d\u6b21\u53d1\u9001\u63a2\u6d4b\u5305\u3002 3 \u53d1\u9001\u591a\u5c11\u4e2a\u63a2\u6d4b\u5305\u540e\uff0c\u5c31\u65ad\u5f00\u8fde\u63a5\u3002 \u6211\u4eec\u770bLinux\u5185\u6838\u4ee3\u7801\u91cc\u63d0\u4f9b\u7684\u914d\u7f6e\u3002</p> <pre><code>    // \u591a\u4e45\u6ca1\u6709\u6536\u5230\u6570\u636e\u5c31\u53d1\u8d77\u63a2\u6d4b\u5305  \n    #define TCP_KEEPALIVE_TIME  (120*60*HZ) /* two hours */  \n    // \u63a2\u6d4b\u6b21\u6570  \n    #define TCP_KEEPALIVE_PROBES  9   /* Max of 9 keepalive probes*/  \n    // \u6bcf\u9694\u591a\u4e45\u63a2\u6d4b\u4e00\u6b21  \n    #define TCP_KEEPALIVE_INTVL (75*HZ)  \n</code></pre> <p>\u8fd9\u662fLinux\u63d0\u4f9b\u7684\u9ed8\u8ba4\u503c\u3002\u4e0b\u9762\u518d\u770b\u770b\u9608\u503c</p> <pre><code>    #define MAX_TCP_KEEPIDLE    32767  \n    #define MAX_TCP_KEEPINTVL   32767  \n    #define MAX_TCP_KEEPCNT     127  \n</code></pre> <p>\u8fd9\u4e09\u4e2a\u914d\u7f6e\u548c\u4e0a\u9762\u4e09\u4e2a\u4e00\u4e00\u5bf9\u5e94\u3002\u662f\u4e0a\u9762\u4e09\u4e2a\u914d\u7f6e\u7684\u9608\u503c\u3002\u6211\u4eec\u770b\u4e00\u4e0bNode.js\u4e2dkeep-alive\u7684\u4f7f\u7528\u3002 socket.setKeepAlive([enable][, initialDelay]) enable\uff1a\u662f\u5426\u5f00\u542fkeep-alive\uff0cLinux\u4e0b\u9ed8\u8ba4\u662f\u4e0d\u5f00\u542f\u7684\u3002 initialDelay\uff1a\u591a\u4e45\u6ca1\u6709\u6536\u5230\u6570\u636e\u5305\u5c31\u5f00\u59cb\u53d1\u9001\u63a2\u6d4b\u5305\u3002 \u63a5\u7740\u6211\u4eec\u770b\u770b\u8fd9\u4e2aAPI\u5728Libuv\u4e2d\u7684\u5b9e\u73b0\u3002</p> <pre><code>    int uv__tcp_keepalive(int fd, int on, unsigned int delay) {    \n        if (setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, &amp;on, sizeof(on)))   \n          return UV__ERR(errno);    \n        // Linux\u5b9a\u4e49\u4e86\u8fd9\u4e2a\u5b8f    \n        #ifdef TCP_KEEPIDLE    \n          /*  \n              on\u662f1\u624d\u4f1a\u8bbe\u7f6e\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u5148\u5f00\u542fkeep-alive\uff0c\u5e76\u4e14\u8bbe\u7f6edelay\uff0c  \n              \u7136\u540e\u5173\u95edkeep-alive\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u4fee\u6539\u8fc7\u7684\u914d\u7f6e\u7684\u3002  \n              \u56e0\u4e3a\u8fd9\u4e2a\u914d\u7f6e\u5728keep-alive\u5173\u95ed\u7684\u65f6\u5019\u662f\u6ca1\u7528\u7684  \n          */    \n          if (on &amp;&amp; setsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, &amp;delay, sizeof(delay)))    \n            return UV__ERR(errno);    \n        #endif    \n\n        return 0;    \n    }    \n</code></pre> <p>\u6211\u4eec\u770b\u5230Libuv\u8c03\u7528\u4e86\u540c\u4e00\u4e2a\u7cfb\u7edf\u51fd\u6570\u4e24\u6b21\u3002\u6211\u4eec\u5206\u522b\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\u7684\u610f\u4e49\u3002\u53c2\u8003Linux2.6.13.1\u7684\u4ee3\u7801\u3002</p> <pre><code>    // net\\socket.c    \n    asmlinkage long sys_setsockopt(int fd, int level, int optname, char __user *optval, int optlen)    \n    {    \n        int err;    \n        struct socket *sock;    \n\n        if ((sock = sockfd_lookup(fd, &amp;err))!=NULL)    \n        {    \n            ...    \n            if (level == SOL_SOCKET)    \n                err=sock_setsockopt(sock,level,optname,optval,optlen);    \n            else    \n              err=sock-&gt;ops-&gt;setsockopt(sock, level, optname, optval, optlen);    \n            sockfd_put(sock);    \n        }    \n        return err;    \n    }    \n</code></pre> <p>\u5f53level\u662fSOL_SOCKET\u4ee3\u8868\u4fee\u6539\u7684socket\u5c42\u9762\u7684\u914d\u7f6e\u3002IPPROTO_TCP\u662f\u4fee\u6539TCP\u5c42\u7684\u914d\u7f6e\uff08\u8be5\u7248\u672c\u4ee3\u7801\u91cc\u662fSOL_TCP\uff09\u3002\u6211\u4eec\u5148\u770bSOL_SOCKET\u5c42\u9762\u7684\u3002</p> <pre><code>    // net\\socket.c -&gt; net\\core\\sock.c -&gt; net\\ipv4\\tcp_timer.c    \n    int sock_setsockopt(struct socket *sock, int level, int optname,    \n                char __user *optval, int optlen) {    \n        ...    \n        case SO_KEEPALIVE:    \n\n                if (sk-&gt;sk_protocol == IPPROTO_TCP)    \n                    tcp_set_keepalive(sk, valbool);    \n                // \u8bbe\u7f6eSOCK_KEEPOPEN\u6807\u8bb0\u4f4d1    \n                sock_valbool_flag(sk, SOCK_KEEPOPEN, valbool);    \n                break;    \n        ...    \n    }   \n</code></pre> <p>sock_setcsockopt\u9996\u5148\u8c03\u7528\u4e86tcp_set_keepalive\u51fd\u6570\uff0c\u7136\u540e\u7ed9\u5bf9\u5e94socket\u7684SOCK_KEEPOPEN\u5b57\u6bb5\u6253\u4e0a\u6807\u8bb0\uff080\u6216\u80051\u8868\u793a\u5f00\u542f\u8fd8\u662f\u5173\u95ed\uff09\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770btcp_set_keepalive  </p> <pre><code>    void tcp_set_keepalive(struct sock *sk, int val)    \n    {    \n        if ((1 &lt;&lt; sk-&gt;sk_state) &amp; (TCPF_CLOSE | TCPF_LISTEN))    \n            return;    \n        /*  \n            \u5982\u679cval\u662f1\u5e76\u4e14\u4e4b\u524d\u662f0\uff08\u6ca1\u5f00\u542f\uff09\u90a3\u4e48\u5c31\u5f00\u542f\u8ba1\u65f6\uff0c\u8d85\u65f6\u540e\u53d1\u9001\u63a2\u6d4b\u5305\uff0c  \n            \u5982\u679c\u4e4b\u524d\u662f1\uff0cval\u53c8\u662f1\uff0c\u5219\u5ffd\u7565\uff0c\u6240\u4ee5\u91cd\u590d\u8bbe\u7f6e\u662f\u65e0\u5bb3\u7684  \n        */    \n        if (val &amp;&amp; !sock_flag(sk, SOCK_KEEPOPEN))    \n            tcp_reset_keepalive_timer(sk, keepalive_time_when(tcp_sk(sk)));    \n        else if (!val)    \n            // val\u662f0\u8868\u793a\u5173\u95ed\uff0c\u5219\u6e05\u9664\u5b9a\u65f6\u5668\uff0c\u5c31\u4e0d\u53d1\u9001\u63a2\u6d4b\u5305\u4e86    \n            tcp_delete_keepalive_timer(sk);    \n    }   \n</code></pre> <p>\u6211\u4eec\u770b\u770b\u8d85\u65f6\u540e\u7684\u903b\u8f91\u3002  </p> <pre><code>    // \u591a\u4e45\u6ca1\u6709\u6536\u5230\u6570\u636e\u5305\u5219\u53d1\u9001\u7b2c\u4e00\u4e2a\u63a2\u6d4b\u5305      \n    static inline int keepalive_time_when(const struct tcp_sock *tp)      \n    {      \n        // \u7528\u6237\u8bbe\u7f6e\u7684\uff08TCP_KEEPIDLE\uff09\u548c\u7cfb\u7edf\u9ed8\u8ba4\u7684      \n        return tp-&gt;keepalive_time ? : sysctl_tcp_keepalive_time;      \n    }      \n    // \u9694\u591a\u4e45\u53d1\u9001\u4e00\u4e2a\u63a2\u6d4b\u5305      \n    static inline int keepalive_intvl_when(const struct tcp_sock *tp)      \n    {      \n        return tp-&gt;keepalive_intvl ? : sysctl_tcp_keepalive_intvl;      \n    }      \n\n    static void tcp_keepalive_timer (unsigned long data)      \n    {      \n    ...      \n    // \u591a\u4e45\u6ca1\u6709\u6536\u5230\u6570\u636e\u5305\u4e86      \n    elapsed = tcp_time_stamp - tp-&gt;rcv_tstamp;      \n        // \u662f\u5426\u8d85\u8fc7\u4e86\u9608\u503c      \n        if (elapsed &gt;= keepalive_time_when(tp)) {      \n            // \u53d1\u9001\u7684\u63a2\u6d4b\u5305\u4e2a\u6570\u8fbe\u5230\u9608\u503c\uff0c\u53d1\u9001\u91cd\u7f6e\u5305      \n            if ((!tp-&gt;keepalive_probes &amp;&amp; tp-&gt;probes_out &gt;= sysctl_tcp_keepalive_probes) ||      \n                 (tp-&gt;keepalive_probes &amp;&amp; tp-&gt;probes_out &gt;= tp-&gt;keepalive_probes)) {      \n                tcp_send_active_reset(sk, GFP_ATOMIC);      \n                tcp_write_err(sk);      \n                goto out;      \n            }      \n            // \u53d1\u9001\u63a2\u6d4b\u5305\uff0c\u5e76\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u63a2\u6d4b\u5305\u7684\u53d1\u9001\u65f6\u95f4\uff08\u8d85\u65f6\u65f6\u95f4\uff09      \n            tcp_write_wakeup(sk)      \n                tp-&gt;probes_out++;      \n                elapsed = keepalive_intvl_when(tp);      \n        } else {      \n            /*   \n                \u8fd8\u6ca1\u5230\u671f\u5219\u91cd\u65b0\u8ba1\u7b97\u5230\u671f\u65f6\u95f4\uff0c\u6536\u5230\u6570\u636e\u5305\u7684\u65f6\u5019\u5e94\u8be5\u4f1a\u91cd\u7f6e\u5b9a\u65f6\u5668\uff0c   \n                \u6240\u4ee5\u6267\u884c\u8be5\u51fd\u6570\u8bf4\u660e\u7684\u786e\u662f\u8d85\u65f6\u4e86\uff0c\u6309\u7406\u8bf4\u4e0d\u4f1a\u8fdb\u5165\u8fd9\u91cc\u3002   \n            */      \n            elapsed = keepalive_time_when(tp) - elapsed;      \n        }      \n\n        TCP_CHECK_TIMER(sk);      \n        sk_stream_mem_reclaim(sk);      \n\n    resched:      \n        // \u91cd\u65b0\u8bbe\u7f6e\u5b9a\u65f6\u5668      \n        tcp_reset_keepalive_timer (sk, elapsed);      \n    ...     \n</code></pre> <p>\u6240\u4ee5\u5728SOL_SOCKET\u5c42\u9762\u662f\u8bbe\u7f6e\u662f\u5426\u5f00\u542fkeep-alive\u673a\u5236\u3002\u5982\u679c\u5f00\u542f\u4e86\uff0c\u5c31\u4f1a\u8bbe\u7f6e\u5b9a\u65f6\u5668\uff0c\u8d85\u65f6\u7684\u65f6\u5019\u5c31\u4f1a\u53d1\u9001\u63a2\u6d4b\u5305\u3002\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0cSOL_SOCKET\u53ea\u662f\u8bbe\u7f6e\u4e86\u662f\u5426\u5f00\u542f\u63a2\u6d4b\u673a\u5236\uff0c\u5e76\u6ca1\u6709\u5b9a\u4e49\u4e0a\u9762\u4e09\u4e2a\u914d\u7f6e\u7684\u503c\uff0c\u6240\u4ee5\u7cfb\u7edf\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c\u8fdb\u884c\u5fc3\u8df3\u673a\u5236\uff08\u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u4e86\u5f00\u542fkeep-alive\u7684\u8bdd\uff09\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48Libuv\u8c03\u4e86\u4e24\u6b21setsockopt\u51fd\u6570\u3002\u7b2c\u4e8c\u6b21\u7684\u8c03\u7528\u8bbe\u7f6e\u4e86\u5c31\u662f\u4e0a\u9762\u4e09\u4e2a\u914d\u7f6e\u4e2d\u7684\u7b2c\u4e00\u4e2a\uff08\u540e\u9762\u4e24\u4e2a\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\uff0c\u4e0d\u8fc7Libuv\u6ca1\u6709\u63d0\u4f9b\u63a5\u53e3\uff0c\u53ef\u4ee5\u81ea\u5df1\u8c03\u7528setsockopt\u8bbe\u7f6e\uff09\u3002\u90a3\u4e48\u6211\u4eec\u6765\u770b\u4e00\u4e0bLibuv\u7684\u7b2c\u4e8c\u6b21\u8c03\u7528setsockopt\u662f\u505a\u4e86\u4ec0\u4e48\u3002\u6211\u4eec\u76f4\u63a5\u770bTCP\u5c42\u7684\u5b9e\u73b0\u3002</p> <pre><code>    // net\\ipv4\\tcp.c    \n    int tcp_setsockopt(struct sock *sk, int level, int optname, char __user *optval,int optlen)    \n    {    \n        ...    \n        case TCP_KEEPIDLE:    \n            // \u4fee\u6539\u591a\u4e45\u6ca1\u6709\u6536\u5230\u6570\u636e\u5305\u5219\u53d1\u9001\u63a2\u6d4b\u5305\u7684\u914d\u7f6e    \n            tp-&gt;keepalive_time = val * HZ;    \n                // \u662f\u5426\u5f00\u542f\u4e86keep-alive\u673a\u5236    \n                if (sock_flag(sk, SOCK_KEEPOPEN) &amp;&amp;    \n                    !((1 &lt;&lt; sk-&gt;sk_state) &amp;    \n                      (TCPF_CLOSE | TCPF_LISTEN))) {    \n                    // \u5f53\u524d\u65f6\u95f4\u51cf\u53bb\u4e0a\u6b21\u6536\u5230\u6570\u636e\u5305\u7684\u65f6\u5019\uff0c\u5373\u591a\u4e45\u6ca1\u6709\u6536\u5230\u6570\u636e\u5305\u4e86    \n                    __u32 elapsed = tcp_time_stamp - tp-&gt;rcv_tstamp;    \n                    // \u7b97\u51fa\u8fd8\u8981\u591a\u4e45\u53ef\u4ee5\u53d1\u9001\u63a2\u6d4b\u5305\uff0c\u8fd8\u662f\u53ef\u4ee5\u76f4\u63a5\u53d1\uff08\u5df2\u7ecf\u89e6\u53d1\u4e86\uff09    \n                    if (tp-&gt;keepalive_time &gt; elapsed)    \n                        elapsed = tp-&gt;keepalive_time - elapsed;    \n                    else    \n                        elapsed = 0;    \n                    // \u8bbe\u7f6e\u5b9a\u65f6\u5668    \n                    tcp_reset_keepalive_timer(sk, elapsed);    \n                }       \n            ...    \n    }    \n</code></pre> <p>\u8be5\u51fd\u6570\u9996\u5148\u4fee\u6539\u914d\u7f6e\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u5f00\u542f\u4e86keep-alive\u7684\u673a\u5236\uff0c\u5982\u679c\u5f00\u542f\u4e86\uff0c\u5219\u91cd\u65b0\u8bbe\u7f6e\u5b9a\u65f6\u5668\uff0c\u8d85\u65f6\u7684\u65f6\u5019\u5c31\u4f1a\u53d1\u9001\u63a2\u6d4b\u5305\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5fc3\u8df3\u673a\u5236\u5e76\u4e0d\u662f\u4ec0\u4e48\u65f6\u5019\u90fd\u597d\u4f7f\uff0c\u5982\u679c\u4e24\u7aef\u90fd\u6ca1\u6709\u6570\u636e\u6765\u5f80\u65f6\uff0c\u5fc3\u8df3\u673a\u5236\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\uff0c\u4f46\u662f\u4e00\u65e6\u672c\u7aef\u6709\u6570\u636e\u53d1\u9001\u7684\u65f6\u5019\uff0c\u5b83\u5c31\u4f1a\u6291\u5236\u5fc3\u8df3\u673a\u5236\u3002\u6211\u4eec\u770b\u4e00\u4e0bLinux\u5185\u68385.7.7\u7684\u4e00\u6bb5\u76f8\u5173\u4ee3\u7801\uff0c\u5982\u56fe17-3\u6240\u793a\u3002  \u56fe17-3 \u4e0a\u9762\u8fd9\u4e00\u6bb5\u662f\u5fc3\u8df3\u673a\u5236\u4e2d\uff0c\u5b9a\u65f6\u5668\u8d85\u65f6\u65f6\uff0c\u6267\u884c\u7684\u4e00\u6bb5\u903b\u8f91\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8\u7ea2\u8272\u6846\u91cc\u7684\u4ee3\u7801\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5fc3\u8df3\u5b9a\u65f6\u5668\u8d85\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u53d1\u9001\u4e00\u4e2a\u65b0\u7684\u5fc3\u8df3\u5305\uff0c\u4f46\u662f\u5982\u679c\u53d1\u9001\u961f\u5217\u91cc\u8fd8\u6709\u6570\u636e\u6ca1\u6709\u53d1\u9001\uff0c\u90a3\u4e48\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u4f18\u5148\u53d1\u9001\u3002\u6216\u8005\u53d1\u9001\u51fa\u53bb\u7684\u6ca1\u6709ack\uff0c\u4e5f\u4f1a\u4f18\u5148\u89e6\u53d1\u91cd\u4f20\u3002\u8fd9\u65f6\u5019\u5fc3\u8df3\u673a\u5236\u5c31\u5931\u6548\u4e86\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0cLinux\u63d0\u4f9b\u4e86\u53e6\u4e00\u4e2a\u5c5e\u6027TCP_USER_TIMEOUT\u3002\u8fd9\u4e2a\u5c5e\u6027\u7684\u529f\u80fd\u662f\uff0c\u53d1\u9001\u4e86\u6570\u636e\uff0c\u591a\u4e45\u6ca1\u6709\u6536\u5230ack\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c31\u8ba4\u4e3a\u8fd9\u4e2a\u8fde\u63a5\u65ad\u5f00\u4e86\u3002\u770b\u4e00\u4e0b\u76f8\u5173\u4ee3\u7801\uff0c\u5982\u56fe17-4\u6240\u793a\u3002  \u56fe17-4 \u4e0b\u9762\u662f\u8bbe\u7f6e\u9608\u503c\u7684\u4ee3\u7801\uff0c\u5982\u56fe17-5\u6240\u793a\u3002  \u56fe17-5 \u8fd9\u662f\u8d85\u65f6\u65f6\u5224\u65ad\u662f\u5426\u65ad\u5f00\u8fde\u63a5\u7684\u4ee3\u7801\u3002\u6211\u4eec\u770b\u5230\u6709\u4e24\u4e2a\u60c5\u51b5\u4e0b\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u8ba4\u4e3a\u8fde\u63a5\u65ad\u5f00\u4e86\u3002 1 \u8bbe\u7f6e\u4e86TCP_USER_TIMEOUT\u65f6\uff0c\u5982\u679c\u53d1\u9001\u5305\u6570\u91cf\u5927\u4e8e1\u5e76\u4e14\u5f53\u524d\u65f6\u95f4\u8ddd\u79bb\u4e0a\u6b21\u6536\u5230\u5305\u7684\u65f6\u95f4\u95f4\u9694\u5df2\u7ecf\u8fbe\u5230\u9608\u503c\u3002 2 \u6ca1\u6709\u8bbe\u7f6eTCP_USER_TIMEOUT\uff0c\u4f46\u662f\u5fc3\u8df3\u5305\u53d1\u9001\u6570\u91cf\u8fbe\u5230\u9608\u503c\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u8bbe\u7f6e\u8fd9\u4e24\u4e2a\u5c5e\u6027\u3002\u4fdd\u8bc1\u5fc3\u8df3\u673a\u5236\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff0c Node.js\u7684keep-alive\u6709\u4e24\u4e2a\u5c42\u9762\u7684\u5185\u5bb9\uff0c\u7b2c\u4e00\u4e2a\u662f\u662f\u5426\u5f00\u542f\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5f00\u542f\u540e\uff0c\u4f7f\u7528\u7684\u914d\u7f6e\u3002Node.js\u7684setKeepAlive\u5c31\u662f\u505a\u4e86\u8fd9\u4e24\u4ef6\u4e8b\u60c5\u3002\u53ea\u4e0d\u8fc7\u5b83\u53ea\u652f\u6301\u4fee\u6539\u4e00\u4e2a\u914d\u7f6e\u3002Node.js\u53ea\u652f\u6301TCP_KEEPALIVE_TIME\u3002\u53e6\u5916\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e0b\u4ee3\u7801\u5224\u65ad\u914d\u7f6e\u7684\u503c\u3002</p> <pre><code>    include &lt;stdio.h&gt;    \n    #include &lt;netinet/tcp.h&gt;         \n\n    int main(int argc, const char *argv[])    \n    {    \n        int sockfd;    \n        int optval;    \n        socklen_t optlen = sizeof(optval);    \n\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);    \n        getsockopt(sockfd, SOL_SOCKET, SO_KEEPALIVE, &amp;optval, &amp;optlen);    \n        printf(\"\u9ed8\u8ba4\u662f\u5426\u5f00\u542fkeep-alive\uff1a%d \\n\", optval);    \n\n        getsockopt(sockfd, SOL_TCP, TCP_KEEPIDLE, &amp;optval, &amp;optlen);    \n        printf(\"\u591a\u4e45\u6ca1\u6709\u6536\u5230\u6570\u636e\u5305\u5219\u53d1\u9001\u63a2\u6d4b\u5305\uff1a%d seconds \\n\", optval);    \n\n        getsockopt(sockfd, SOL_TCP, TCP_KEEPINTVL, &amp;optval, &amp;optlen);    \n        printf(\"\u591a\u4e45\u53d1\u9001\u4e00\u6b21\u63a2\u6d4b\u5305\uff1a%d seconds \\n\", optval);    \n\n        getsockopt(sockfd, SOL_TCP, TCP_KEEPCNT, &amp;optval, &amp;optlen);    \n        printf(\"\u6700\u591a\u53d1\u9001\u51e0\u4e2a\u63a2\u6d4b\u5305\u5c31\u65ad\u5f00\u8fde\u63a5\uff1a%d \\n\", optval);    \n\n        return 0;    \n    }\n</code></pre> <p>\u8f93\u51fa\u5982\u56fe17-6\u6240\u793a\u3002  \u56fe17-6 \u518d\u770b\u4e00\u4e0bwireshark\u4e0b\u7684keepalive\u5305\uff0c\u5982\u56fe17-7\u6240\u793a\u3002  \u56fe17-7  </p>"},{"location":"chapter17-TCP/#174-allowhalfopen","title":"17.4 allowHalfOpen","text":"<p>\u6211\u4eec\u77e5\u9053TCP\u8fde\u63a5\u5728\u6b63\u5e38\u65ad\u5f00\u7684\u65f6\u5019\uff0c\u4f1a\u8d70\u56db\u6b21\u6325\u624b\u7684\u6d41\u7a0b\uff0c\u5728Node.js\u4e2d\uff0c\u5f53\u6536\u5230\u5bf9\u7aef\u53d1\u9001\u8fc7\u6765\u7684fin\u5305\u65f6\uff0c\u56de\u590dack\u540e\uff0c\u9ed8\u8ba4\u4f1a\u53d1\u9001fin\u5305\u7ed9\u5bf9\u7aef\uff0c\u4ee5\u5b8c\u6210\u56db\u6b21\u6325\u624b\u3002\u4f46\u662f\u6211\u4eec\u53ef\u80fd\u4f1a\u6709\u8fd9\u6837\u7684\u573a\u666f\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u5b8c\u6570\u636e\u540e\uff0c\u53d1\u9001fin\u5305\u8868\u793a\u81ea\u5df1\u6ca1\u6709\u6570\u636e\u53ef\u5199\u4e86\uff0c\u53ea\u9700\u8981\u7b49\u5f85\u670d\u52a1\u5668\u8fd4\u56de\u3002\u8fd9\u65f6\u5019\u5982\u679c\u670d\u52a1\u5668\u5728\u6536\u5230fin\u5305\u540e\uff0c\u4e5f\u56de\u590dfin\uff0c\u90a3\u5c31\u4f1a\u6709\u95ee\u9898\u3002\u5728Node.js\u4e2d\u63d0\u4f9b\u4e86allowHalfOpen\u9009\u9879\u652f\u6301\u534a\u5173\u95ed\uff0c\u6211\u4eec\u77e5\u9053TCP\u662f\u5168\u53cc\u5de5\u7684\uff0c\u4e24\u7aef\u53ef\u4ee5\u540c\u65f6\u4e92\u76f8\u53d1\u9001\u6570\u636e\uff0callowHalfOpen\u76f8\u5f53\u4e8e\u628a\u4e00\u7aef\u5173\u95ed\u4e86\uff0c\u5141\u8bb8\u6570\u636e\u5355\u5411\u4f20\u8f93\u3002\u6211\u4eec\u770b\u4e00\u4e0ballowHalfOpen\u7684\u5b9e\u73b0\u3002allowHalfOpen\u662f\u5c5e\u4e8eSocket\u7684\u9009\u9879\u3002\u6211\u4eec\u4eceNode.js\u6536\u5230\u4e00\u4e2afin\u5305\u5f00\u59cb\u5206\u6790\u6574\u4e2a\u6d41\u7a0b\u3002\u9996\u5148\u5728\u65b0\u5efaSocket\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u6ce8\u518c\u5bf9\u5e94\u4e8b\u4ef6\u3002 socket.on('_socketEnd', onSocketEnd); \u5f53\u64cd\u4f5c\u7cfb\u7edf\u6536\u5230fin\u5305\u7684\u65f6\u5019\uff0c\u4f1a\u89e6\u53d1socket\u7684\u53ef\u8bfb\u4e8b\u4ef6\uff0c\u6267\u884cNode.js\u7684\u8bfb\u56de\u8c03\u3002Node.js\u6267\u884c\u8bfb\u53d6\u7684\u65f6\u5019\u53d1\u73b0\uff0c\u8bfb\u53d6\u5df2\u7ed3\u675f\uff0c\u56e0\u4e3a\u5bf9\u7aef\u53d1\u9001\u4e86fin\u5305\u3002\u8fd9\u65f6\u5019\u4f1a\u89e6\u53d1_socketEnd\u4e8b\u4ef6\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u76f8\u5173\u4ee3\u7801\u3002</p> <pre><code>    function onSocketEnd() {  \n      // ...  \n      if (!this.allowHalfOpen) {  \n        this.write = writeAfterFIN;  \n        this.destroySoon();  \n      }  \n    }  \n</code></pre> <p>allowHalfOpen\u9ed8\u8ba4\u662ffalse\u3002onSocketEnd\u9996\u5148\u8bbe\u7f6ewrite\u51fd\u6570\u4e3awriteAfterFIN\uff0c\u6211\u4eec\u770b\u770b\u8fd9\u65f6\u5019\u5982\u679c\u6211\u4eec\u5199\u4f1a\u600e\u6837\u3002\u6211\u4eec\u4f1a\u6536\u5230\u4e00\u4e2a\u9519\u8bef\u3002</p> <pre><code>    function writeAfterFIN(chunk, encoding, cb) {  \n      var er = new Error('This socket has been ended by the other party');  \n      er.code = 'EPIPE';  \n      this.emit('error', er);  \n      if (typeof cb === 'function') {  \n        nextTick(this[async_id_symbol], cb, er);  \n      }  \n    }  \n</code></pre> <p>\u8bbe\u7f6e\u5b8cwrite\u540e\uff0c\u63a5\u7740Node.js\u4f1a\u53d1\u9001fin\u5305\u3002</p> <pre><code>    Socket.prototype.destroySoon = function() {  \n      // \u5173\u95ed\u5199\u6d41  \n      if (this.writable)  \n        this.end();  \n      // \u5173\u95ed\u6210\u529f\u540e\u9500\u6bc1\u6d41  \n      if (this._writableState.finished)  \n        this.destroy();  \n      else  \n        this.once('finish', this.destroy);  \n    };  \n</code></pre> <p>\u9996\u5148\u5173\u95ed\u5199\u6d41\uff0c\u7136\u540e\u6267\u884cdestroy\u51fd\u6570\u9500\u6bc1\u6d41\u3002\u5728destroy\u4e2d\u4f1a\u6267\u884c_destroy\u3002_destroy\u4f1a\u6267\u884c\u5177\u4f53\u7684\u5173\u95ed\u64cd\u4f5c\uff0c\u5373\u53d1\u9001fin\u5305\u3002</p> <pre><code>    this._handle.close(() =&gt; {   \n      this.emit('close', isException);  \n    });  \n</code></pre> <p>\u6211\u4eec\u770b\u5230C++\u5c42\u7684close\u3002</p> <pre><code>    void HandleWrap::Close(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n\n      HandleWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap, args.Holder());  \n      // \u5173\u95edhandle  \n      uv_close(wrap-&gt;handle_, OnClose);  \n      wrap-&gt;state_ = kClosing;  \n      // \u6267\u884c\u56de\u8c03\uff0c\u89e6\u53d1close\u4e8b\u4ef6  \n      if (args[0]-&gt;IsFunction()) {  \n        wrap-&gt;object()-&gt;Set(env-&gt;onclose_string(), args[0]);  \n        wrap-&gt;state_ = kClosingWithCallback;  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u7ee7\u7eed\u5f80Libuv\u770b\u3002</p> <pre><code>    void uv_close(uv_handle_t* handle, uv_close_cb cb) {  \n      uv_loop_t* loop = handle-&gt;loop;  \n\n      handle-&gt;close_cb = cb;  \n      switch (handle-&gt;type) {  \n        case UV_TCP:  \n          uv_tcp_close(loop, (uv_tcp_t*)handle);  \n          return;  \n\n         // ...  \n      }  \n    }  \n</code></pre> <p>uv_tcp_close\u4f1a\u5bf9close\u7684\u5c01\u88c5\uff0c\u6211\u4eec\u770btcp close\u7684\u5927\u81f4\u5b9e\u73b0\u3002</p> <pre><code>    static void tcp_close(struct sock *sk, int timeout)  \n    {  \n\n        // \u76d1\u542c\u578b\u7684socket\u8981\u5173\u95ed\u5efa\u7acb\u7684\u8fde\u63a5  \n        if(sk-&gt;state == TCP_LISTEN)  \n        {  \n            /* Special case */  \n            tcp_set_state(sk, TCP_CLOSE);  \n            // \u5173\u95ed\u5df2\u7ecf\u5efa\u7acb\u7684\u8fde\u63a5  \n            tcp_close_pending(sk);  \n            release_sock(sk);  \n            return;  \n        }  \n\n        struct sk_buff *skb;  \n        // \u9500\u6bc1\u63a5\u6536\u961f\u5217\u4e2d\u672a\u5904\u7406\u7684\u6570\u636e   \n        while((skb=skb_dequeue(&amp;sk-&gt;receive_queue))!=NULL)  \n            kfree_skb(skb, FREE_READ);  \n        // \u53d1\u9001fin\u5305\n        tcp_send_fin(sk);  \n        release_sock(sk);  \n    }  \n</code></pre> <p>\u4ee5\u4e0a\u662fNode.js\u4e2dsocket\u6536\u5230fin\u5305\u65f6\u7684\u9ed8\u8ba4\u5904\u7406\u6d41\u7a0b\uff0c\u5f53\u6211\u4eec\u8bbe\u7f6eallowHalfOpen\u4e3atrue\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u884c\u4e3a\uff0c\u5141\u8bb8\u534a\u5173\u95ed\u72b6\u6001\u7684\u8fde\u63a5\u3002</p>"},{"location":"chapter17-TCP/#175-server-close","title":"17.5 server close","text":"<p>\u8c03\u7528close\u53ef\u4ee5\u5173\u95ed\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u9996\u5148\u6211\u4eec\u770b\u4e00\u4e0bNode.js\u6587\u6863\u5173\u4e8eclose\u51fd\u6570\u7684\u89e3\u91ca</p> <p>Stops the server from accepting new connections and keeps existing connections. This function is asynchronous, the server is finally closed when all connections are ended and the server emits a 'close' event. The optional callback will be called once the 'close' event occurs. Unlike that event, it will be called with an Error as its only argument if the server was not open when it was closed.  </p> <p>\u5728Node.js\u4e2d \uff0c\u5f53\u6211\u4eec\u4f7f\u7528close\u5173\u95ed\u4e00\u4e2aserver\u65f6\uff0cserver\u4f1a\u7b49\u6240\u6709\u7684\u8fde\u63a5\u5173\u95ed\u540e\u624d\u4f1a\u89e6\u53d1close\u4e8b\u4ef6\u3002\u6211\u4eec\u770bclose\u7684\u5b9e\u73b0\uff0c\u4e00\u63a2\u7a76\u7adf\u3002</p> <pre><code>    Server.prototype.close = function(cb) {  \n      // \u89e6\u53d1\u56de\u8c03  \n      if (typeof cb === 'function') {  \n        if (!this._handle) {  \n          this.once('close', function close() {  \n            cb(new errors.Error('ERR_SERVER_NOT_RUNNING'));  \n          });  \n        } else {  \n          this.once('close', cb);  \n        }  \n      }  \n      // \u5173\u95ed\u5e95\u5c42\u8d44\u6e90  \n      if (this._handle) {  \n        this._handle.close();  \n        this._handle = null;  \n      }  \n      // \u5224\u65ad\u662f\u5426\u9700\u8981\u7acb\u523b\u89e6\u53d1close\u4e8b\u4ef6  \n      this._emitCloseIfDrained();  \n      return this;  \n    };  \n</code></pre> <p>close\u7684\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u9996\u5148\u76d1\u542cclose\u4e8b\u4ef6\uff0c\u7136\u540e\u5173\u95edserver\u5bf9\u5e94\u7684handle\uff0c\u6240\u4ee5server\u4e0d\u4f1a\u518d\u63a5\u6536\u65b0\u7684\u8bf7\u6c42\u4e86\u3002\u6700\u540e\u8c03\u7528_emitCloseIfDrained\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\u662f\u5e72\u561b\u7684\u3002</p> <pre><code>    Server.prototype._emitCloseIfDrained = function() {  \n      // \u8fd8\u6709\u8fde\u63a5\u6216\u8005handle\u975e\u7a7a\u8bf4\u660ehandle\u8fd8\u6ca1\u6709\u5173\u95ed\uff0c\u5219\u5148\u4e0d\u89e6\u53d1close\u4e8b\u4ef6  \n      if (this._handle || this._connections) {  \n        return;  \n      }  \n      // \u89e6\u53d1close\u4e8b\u4ef6  \n      const asyncId = this._handle ? this[async_id_symbol] : null;  \n      nextTick(asyncId, emitCloseNT, this);  \n    };  \n\n\n    function emitCloseNT(self) {  \n      self.emit('close');  \n    }  \n</code></pre> <p>_emitCloseIfDrained\u4e2d\u6709\u4e00\u4e2a\u62e6\u622a\u7684\u5224\u65ad\uff0chandle\u975e\u7a7a\u6216\u8005\u8fde\u63a5\u6570\u975e0\u3002\u7531\u4e4b\u524d\u7684\u4ee3\u7801\u6211\u4eec\u5df2\u7ecf\u77e5\u9053handle\u662fnull\uff0c\u4f46\u662f\u5982\u679c\u8fd9\u65f6\u5019\u8fde\u63a5\u6570\u975e0\uff0c\u4e5f\u4e0d\u4f1a\u89e6\u53d1close\u4e8b\u4ef6\u3002\u90a3\u4ec0\u4e48\u65f6\u5019\u624d\u4f1a\u89e6\u53d1close\u4e8b\u4ef6\u5462\uff1f\u5728socket\u7684_destroy\u51fd\u6570\u4e2d\u6211\u4eec\u627e\u5230\u4fee\u6539\u8fde\u63a5\u6570\u7684\u903b\u8f91\u3002</p> <pre><code>    Socket.prototype._destroy = function(exception, cb) {  \n      ...  \n      // socket\u6240\u5c5e\u7684server  \n      if (this._server) {  \n        // server\u4e0b\u7684\u8fde\u63a5\u6570\u51cf\u4e00  \n        this._server._connections--;  \n        // \u662f\u5426\u9700\u8981\u89e6\u53d1server\u7684close\u4e8b\u4ef6\uff0c\u5f53\u6240\u6709\u7684\u8fde\u63a5\uff08socket\uff09\u90fd\u5173\u95ed\u65f6\u624d\u89e6\u53d1server\u7684\u662fclose\u4e8b\u4ef6  \n        if (this._server._emitCloseIfDrained) {  \n          this._server._emitCloseIfDrained();  \n        }  \n      }  \n    };  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u6bcf\u4e00\u4e2a\u8fde\u63a5\u5173\u95ed\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u5bfc\u81f4\u8fde\u63a5\u6570\u51cf\u4e00\uff0c\u76f4\u5230\u4e3a0\u7684\u65f6\u5019\u624d\u4f1a\u89e6\u53d1close\u4e8b\u4ef6\u3002\u5047\u8bbe\u6211\u4eec\u542f\u52a8\u4e86\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u63a5\u6536\u5230\u4e86\u4e00\u4e9b\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff0c\u8fd9\u65f6\u5019\uff0c\u5982\u679c\u6211\u4eec\u60f3\u4fee\u6539\u4e00\u4e2a\u4ee3\u7801\u53d1\u5e03\uff0c\u9700\u8981\u91cd\u542f\u670d\u52a1\u5668\uff0c\u600e\u4e48\u529e\uff1f\u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u4ee3\u7801\u3002 server.js</p> <pre><code>    const net = require('net');  \n    const server = net.createServer().listen(80);  \n</code></pre> <p>client.js</p> <pre><code>    const net = require('net');  \n    net.connect({port:80})  \n</code></pre> <p>\u5982\u679c\u6211\u4eec\u76f4\u63a5\u6740\u6b7b\u8fdb\u7a0b\uff0c\u90a3\u4e48\u5b58\u91cf\u7684\u8bf7\u6c42\u5c31\u4f1a\u65e0\u6cd5\u6b63\u5e38\u88ab\u5904\u7406\u3002\u8fd9\u4f1a\u5f71\u54cd\u6211\u4eec\u7684\u670d\u52a1\u8d28\u91cf\u3002\u6211\u4eec\u770b\u4e00\u4e0bNode.js\u5982\u4f55\u5728\u91cd\u542f\u65f6\u4f18\u96c5\u5730\u9000\u51fa\uff0c\u6240\u8c13\u4f18\u96c5\uff0c\u5373\u8ba9Node.js\u8fdb\u7a0b\u5904\u7406\u5b8c\u5b58\u91cf\u8bf7\u6c42\u540e\u518d\u9000\u51fa\u3002Server\u7684close\u7684\u5b9e\u73b0\u7ed9\u4e86\u6211\u4eec\u4e00\u4e9b\u601d\u8def\u3002\u6211\u4eec\u53ef\u4ee5\u76d1\u542cserver\u7684close\u4e8b\u4ef6\uff0c\u7b49\u5230\u89e6\u53d1close\u4e8b\u4ef6\u540e\u624d\u9000\u51fa\u8fdb\u7a0b\u3002</p> <pre><code>    const net = require('net');  \n    const server = net.createServer().listen(80);  \n    server.on('close', () =&gt; {  \n      process.exit();  \n    });  \n    // \u9632\u6b62\u8fdb\u7a0b\u63d0\u524d\u6302\u6389  \n    process.on('uncaughtException', () =&gt; {  \n\n    });  \n    process.on('SIGINT', function() {  \n      server.close();  \n    })  \n</code></pre> <p>\u6211\u4eec\u9996\u5148\u76d1\u542cSIGINT\u4fe1\u53f7\uff0c\u5f53\u6211\u4eec\u4f7f\u7528SIGINT\u4fe1\u53f7\u6740\u6b7b\u8fdb\u7a0b\u65f6\uff0c\u9996\u5148\u8c03\u7528server.close\uff0c\u7b49\u5230\u6240\u6709\u7684\u8fde\u63a5\u65ad\u5f00\uff0c\u89e6\u53d1close\u65f6\u5019\u65f6\uff0c\u518d\u9000\u51fa\u8fdb\u7a0b\u3002\u6211\u4eec\u9996\u5148\u5f00\u542f\u670d\u52a1\u5668\uff0c\u7136\u540e\u5f00\u542f\u4e24\u4e2a\u5ba2\u6237\u7aef\u3002\u63a5\u7740\u6309\u4e0bctrl+c\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u65f6\u5019\u670d\u52a1\u5668\u4e0d\u4f1a\u9000\u51fa\uff0c\u7136\u540e\u6211\u4eec\u5173\u95ed\u4e24\u4e2a\u5ba2\u6237\u7aef\uff0c\u8fd9\u65f6\u5019server\u5c31\u4f1a\u4f18\u96c5\u5730\u9000\u51fa\u3002</p>"},{"location":"chapter18-HTTP/","title":"18-HTTP","text":"<p>HTTP\u6a21\u5757\u5b9e\u73b0\u4e86HTTP\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u7684\u529f\u80fd\uff0c\u662fNode.js\u7684\u6838\u5fc3\u6a21\u5757\uff0c\u4e5f\u662f\u6211\u4eec\u4f7f\u7528\u5f97\u6700\u591a\u7684\u6a21\u5757\u3002\u672c\u7ae0\u6211\u4eec\u6765\u5206\u6790HTTP\u6a21\u5757\uff0c\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u5230\u4e00\u4e2aHTTP\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff0c\u4ee5\u53caHTTP\u534f\u8bae\u672c\u8eab\u7684\u4e00\u4e9b\u539f\u7406\u548c\u4f18\u5316\u3002</p>"},{"location":"chapter18-HTTP/#181-http","title":"18.1 HTTP\u89e3\u6790\u5668","text":"<p>HTTP\u89e3\u6790\u5668\u662fHTTP\u6a21\u5757\u7684\u6838\u5fc3\uff0c\u4e0d\u7ba1\u662f\u4f5c\u4e3a\u670d\u52a1\u5668\u5904\u7406\u8bf7\u6c42\u8fd8\u662f\u5ba2\u6237\u7aef\u5904\u7406\u54cd\u5e94\u90fd\u9700\u8981\u4f7f\u7528HTTP\u89e3\u6790\u5668\u89e3\u6790HTTP\u534f\u8bae\u3002\u65b0\u7248Node.js\u4f7f\u7528\u4e86\u65b0\u7684HTTP\u89e3\u6790\u5668llhttp\u3002\u6839\u636e\u5b98\u65b9\u8bf4\u660ellhttp\u6bd4\u65e7\u7248\u7684http_parser\u5728\u6027\u80fd\u4e0a\u6709\u4e86\u975e\u5e38\u5927\u7684\u63d0\u9ad8\u3002\u672c\u8282\u6211\u4eec\u5206\u6790\u5206\u6790llhttp\u7684\u57fa\u7840\u539f\u7406\u548c\u4f7f\u7528\u3002HTTP\u89e3\u6790\u5668\u662f\u4e00\u4e2a\u975e\u5e38\u590d\u6742\u7684\u72b6\u6001\u673a\uff0c\u5728\u89e3\u6790\u6570\u636e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u4e0d\u65ad\u89e6\u53d1\u94a9\u5b50\u51fd\u6570\u3002\u4e0b\u9762\u662fllhttp\u652f\u6301\u7684\u94a9\u5b50\u51fd\u6570\u3002\u5982\u679c\u7528\u6237\u5b9a\u4e49\u4e86\u5bf9\u5e94\u7684\u94a9\u5b50\uff0c\u5728\u89e3\u6790\u7684\u8fc7\u7a0b\u4e2d\u5c31\u4f1a\u88ab\u56de\u8c03\u3002</p> <pre><code>    // \u5f00\u59cb\u89e3\u6790HTTP\u534f\u8bae\n    int llhttp__on_message_begin(llhttp_t* s, const char* p, const char* endp) {  \n      int err;  \n      CALLBACK_MAYBE(s, on_message_begin, s);  \n      return err;  \n    }  \n\n    // \u89e3\u6790\u51fa\u8bf7\u6c42url\u65f6\u7684\u56de\u8c03\uff0c\u6700\u540e\u62ff\u5230\u4e00\u4e2aurl\n    int llhttp__on_url(llhttp_t* s, const char* p, const char* endp) {  \n      int err;  \n      CALLBACK_MAYBE(s, on_url, s, p, endp - p);  \n      return err;  \n    }  \n\n    // \u89e3\u6790\u51faHTTP\u54cd\u5e94\u72b6\u6001\u7684\u56de\u8c03\n    int llhttp__on_status(llhttp_t* s, const char* p, const char* endp) {  \n      int err;  \n      CALLBACK_MAYBE(s, on_status, s, p, endp - p);  \n      return err;  \n    }  \n\n    // \u89e3\u6790\u51fa\u5934\u90e8\u952e\u65f6\u7684\u56de\u8c03\n    int llhttp__on_header_field(llhttp_t* s, const char* p, const char* endp) {  \n      int err;  \n      CALLBACK_MAYBE(s, on_header_field, s, p, endp - p);  \n      return err;  \n    }  \n\n    // \u89e3\u6790\u51fa\u5934\u90e8\u503c\u65f6\u7684\u56de\u8c03\n    int llhttp__on_header_value(llhttp_t* s, const char* p, const char* endp) {  \n      int err;  \n      CALLBACK_MAYBE(s, on_header_value, s, p, endp - p);  \n      return err;  \n    }  \n\n    // \u89e3\u6790HTTP\u5934\u5b8c\u6210\u65f6\u7684\u56de\u8c03  \n    int llhttp__on_headers_complete(llhttp_t* s, const char* p, const char* endp) {  \n      int err;  \n      CALLBACK_MAYBE(s, on_headers_complete, s);  \n      return err;  \n    }  \n\n    // \u89e3\u6790\u5b8cbody\u7684\u56de\u8c03 \n    int llhttp__on_message_complete(llhttp_t* s, const char* p, const char* endp) {  \n      int err;  \n      CALLBACK_MAYBE(s, on_message_complete, s);  \n      return err;  \n    }  \n\n    // \u89e3\u6790body\u65f6\u7684\u56de\u8c03\n    int llhttp__on_body(llhttp_t* s, const char* p, const char* endp) {  \n      int err;  \n      CALLBACK_MAYBE(s, on_body, s, p, endp - p);  \n      return err;  \n    }  \n\n     // \u89e3\u6790\u5230\u4e00\u4e2achunk\u7ed3\u6784\u5934\u65f6\u7684\u56de\u8c03 \n    int llhttp__on_chunk_header(llhttp_t* s, const char* p, const char* endp) {  \n      int err;  \n      CALLBACK_MAYBE(s, on_chunk_header, s);  \n      return err;  \n    }  \n\n    // \u89e3\u6790\u5b8c\u4e00\u4e2achunk\u65f6\u7684\u56de\u8c03  \n    int llhttp__on_chunk_complete(llhttp_t* s, const char* p, const char* endp) {  \n      int err;  \n      CALLBACK_MAYBE(s, on_chunk_complete, s);  \n      return err;  \n    }  \n</code></pre> <p>Node.js\u5728node_http_parser.cc\u4e2d\u5bf9llhttp\u8fdb\u884c\u4e86\u5c01\u88c5\u3002\u8be5\u6a21\u5757\u5bfc\u51fa\u4e86\u4e00\u4e2aHTTPParser\u3002</p> <pre><code>    Local&lt;FunctionTemplate&gt; t=env-&gt;NewFunctionTemplate(Parser::New); \n    t-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);  \n    t-&gt;SetClassName(FIXED_ONE_BYTE_STRING(env-&gt;isolate(), \n                      \"HTTPParser\"));  \n    target-&gt;Set(env-&gt;context(),  \n      FIXED_ONE_BYTE_STRING(env-&gt;isolate(), \"HTTPParser\"),   \n      t-&gt;GetFunction(env-&gt;context()).ToLocalChecked()).Check();  \n</code></pre> <p>\u5728Node.js\u4e2d\u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4f7f\u7528HTTPParser\u3002</p> <pre><code>      const parser = new HTTPParser();  \n\n      cleanParser(parser);  \n      parser.onIncoming = null;  \n      parser[kOnHeaders] = parserOnHeaders;  \n      parser[kOnHeadersComplete] = parserOnHeadersComplete;  \n      parser[kOnBody] = parserOnBody;  \n      parser[kOnMessageComplete] = parserOnMessageComplete; \n      // \u521d\u59cb\u5316HTTP\u89e3\u6790\u5668\u5904\u7406\u7684\u62a5\u6587\u7c7b\u578b\uff0c\u8fd9\u91cc\u662f\u54cd\u5e94\u62a5\u6587\n      parser.initialize(HTTPParser.RESPONSE,\n         new HTTPClientAsyncResource('HTTPINCOMINGMESSAGE', req),\n         req.maxHeaderSize || 0,\n         req.insecureHTTPParser === undefined ?\n         isLenient() : req.insecureHTTPParser); \n      // \u6536\u5230\u6570\u636e\u540e\u4f20\u7ed9\u89e3\u6790\u5668\u5904\u7406\n      const ret = parser.execute(data);\n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0binitialize\u548cexecute\u7684\u4ee3\u7801\u3002Initialize\u51fd\u6570\u7528\u4e8e\u521d\u59cb\u5316llhttp\u3002</p> <pre><code>    static void Initialize(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n       Environment* env = Environment::GetCurrent(args);  \n       bool lenient = args[3]-&gt;IsTrue();  \n\n       uint64_t max_http_header_size = 0;  \n       // \u5934\u90e8\u7684\u6700\u5927\u5927\u5c0f  \n       if (args.Length() &gt; 2) {  \n         max_http_header_size = args[2].As&lt;Number&gt;()-&gt;Value();  \n       }  \n       // \u6ca1\u6709\u8bbe\u7f6e\u5219\u53d6Node.js\u7684\u9ed8\u8ba4\u503c  \n       if (max_http_header_size == 0) {  \n         max_http_header_size=env-&gt;options()-&gt;max_http_header_size;\n       }  \n       // \u89e3\u6790\u7684\u62a5\u6587\u7c7b\u578b  \n       llhttp_type_t type =  \n           static_cast&lt;llhttp_type_t&gt;(args[0].As&lt;Int32&gt;()-&gt;Value());\n\n       CHECK(type == HTTP_REQUEST || type == HTTP_RESPONSE);  \n       Parser* parser;  \n       ASSIGN_OR_RETURN_UNWRAP(&amp;parser, args.Holder());  \n       parser-&gt;Init(type, max_http_header_size, lenient);  \n     }  \n</code></pre> <p>Initialize\u505a\u4e86\u4e00\u4e9b\u9884\u5904\u7406\u540e\u8c03\u7528Init\u3002</p> <pre><code>    void Init(llhttp_type_t type, uint64_t max_http_header_size, bool lenient) {  \n       // \u521d\u59cb\u5316llhttp  \n       llhttp_init(&amp;parser_, type, &amp;settings);  \n       llhttp_set_lenient(&amp;parser_, lenient);  \n       header_nread_ = 0;  \n       url_.Reset();  \n       status_message_.Reset();  \n       num_fields_ = 0;  \n       num_values_ = 0;  \n      have_flushed_ = false;  \n      got_exception_ = false;  \n      max_http_header_size_ = max_http_header_size;  \n    }  \n</code></pre> <p>Init\u505a\u4e86\u4e00\u4e9b\u5b57\u6bb5\u7684\u521d\u59cb\u5316\uff0c\u6700\u91cd\u8981\u7684\u662f\u8c03\u7528\u4e86llhttp_init\u5bf9llhttp\u8fdb\u884c\u4e86\u521d\u59cb\u5316\uff0c\u53e6\u5916kOn\u5f00\u5934\u7684\u5c5e\u6027\u662f\u94a9\u5b50\u51fd\u6570\uff0c\u7531node_http_parser.cc\u4e2d\u7684\u56de\u8c03\uff0c\u800cnode_http_parser.cc\u4e5f\u4f1a\u5b9a\u4e49\u94a9\u5b50\u51fd\u6570\uff0c\u7531llhttp\u56de\u8c03\uff0c\u6211\u4eec\u770b\u4e00\u4e0bnode_http_parser.cc\u94a9\u5b50\u51fd\u6570\u7684\u5b9a\u4e49\u548c\u5b9e\u73b0\u3002</p> <pre><code>    const llhttp_settings_t Parser::settings = {  \n      Proxy&lt;Call, &amp;Parser::on_message_begin&gt;::Raw,  \n      Proxy&lt;DataCall, &amp;Parser::on_url&gt;::Raw,  \n      Proxy&lt;DataCall, &amp;Parser::on_status&gt;::Raw,  \n      Proxy&lt;DataCall, &amp;Parser::on_header_field&gt;::Raw,  \n      Proxy&lt;DataCall, &amp;Parser::on_header_value&gt;::Raw,  \n      Proxy&lt;Call, &amp;Parser::on_headers_complete&gt;::Raw,  \n      Proxy&lt;DataCall, &amp;Parser::on_body&gt;::Raw,  \n      Proxy&lt;Call, &amp;Parser::on_message_complete&gt;::Raw,  \n     Proxy&lt;Call, &amp;Parser::on_chunk_header&gt;::Raw,  \n     Proxy&lt;Call, &amp;Parser::on_chunk_complete&gt;::Raw,  \n    };  \n</code></pre> <p>1 \u5f00\u59cb\u89e3\u6790\u62a5\u6587\u7684\u56de\u8c03</p> <pre><code>      // \u5f00\u59cb\u89e3\u6790\u62a5\u6587\uff0c\u4e00\u4e2aTCP\u8fde\u63a5\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u62a5\u6587  \n      int on_message_begin() {  \n        num_fields_ = num_values_ = 0;  \n        url_.Reset();  \n        status_message_.Reset();  \n        return 0;  \n      }  \n</code></pre> <p>2 \u89e3\u6790url\u65f6\u7684\u56de\u8c03</p> <pre><code>    int on_url(const char* at, size_t length) {  \n        int rv = TrackHeader(length);  \n        if (rv != 0) {  \n          return rv;  \n        }  \n\n        url_.Update(at, length);  \n        return 0;  \n      }  \n</code></pre> <p>3\u89e3\u6790HTTP\u54cd\u5e94\u65f6\u7684\u56de\u8c03</p> <pre><code>    int on_status(const char* at, size_t length) {  \n       int rv = TrackHeader(length);  \n       if (rv != 0) {  \n         return rv;  \n       }  \n\n       status_message_.Update(at, length);  \n       return 0;  \n     }  \n</code></pre> <p>4\u89e3\u6790\u5230HTTP\u5934\u7684\u952e\u65f6\u56de\u8c03</p> <pre><code>    int on_header_field(const char* at, size_t length) {  \n        int rv = TrackHeader(length);  \n        if (rv != 0) {  \n          return rv;  \n        }  \n        // \u76f8\u7b49\u8bf4\u660e\u952e\u5bf9\u503c\u7684\u89e3\u6790\u662f\u4e00\u4e00\u5bf9\u5e94\u7684  \n        if (num_fields_ == num_values_) {  \n          // start of new field name  \n          // \u952e\u7684\u6570\u52a0\u4e00  \n          num_fields_++;  \n          // \u8d85\u8fc7\u9608\u503c\u5219\u5148\u56de\u8c03js\u6d88\u8d39\u6389  \n          if (num_fields_ == kMaxHeaderFieldsCount) {  \n            // ran out of space - flush to javascript land  \n            Flush();  \n            // \u91cd\u65b0\u5f00\u59cb  \n            num_fields_ = 1;  \n            num_values_ = 0;  \n          }  \n          // \u521d\u59cb\u5316  \n          fields_[num_fields_ - 1].Reset();  \n        }  \n\n        // \u4fdd\u5b58\u952e  \n        fields_[num_fields_ - 1].Update(at, length);  \n\n        return 0;  \n    }  \n</code></pre> <p>\u5f53\u89e3\u6790\u7684\u5934\u90e8\u4e2a\u6570\u8fbe\u5230\u9608\u503c\u65f6\uff0cNode.js\u4f1a\u5148\u901a\u8fc7Flush\u51fd\u6570\u56de\u8c03JS\u5c42\u4fdd\u5b58\u5f53\u524d\u7684\u4e00\u4e9b\u6570\u636e\u3002</p> <pre><code>    void Flush() {  \n        HandleScope scope(env()-&gt;isolate());  \n\n        Local&lt;Object&gt; obj = object();  \n        // JS\u5c42\u7684\u94a9\u5b50  \n        Local&lt;Value&gt; cb = obj-&gt;Get(env()-&gt;context(), kOnHeaders).ToLocalChecked();  \n        if (!cb-&gt;IsFunction())  \n          return;  \n\n        Local&lt;Value&gt; argv[2] = {  \n          CreateHeaders(),  \n          url_.ToString(env())  \n        };  \n\n        MaybeLocal&lt;Value&gt; r = MakeCallback(cb.As&lt;Function&gt;(),  \n                                           arraysize(argv),  \n                                           argv);  \n        url_.Reset();  \n        have_flushed_ = true;  \n      } \n\n    Local&lt;Array&gt; CreateHeaders() {  \n       // HTTP\u5934\u7684\u4e2a\u6570\u4e58\u4ee52\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5934\u7531\u952e\u548c\u503c\u7ec4\u6210  \n       Local&lt;Value&gt; headers_v[kMaxHeaderFieldsCount * 2];  \n       // \u4fdd\u5b58\u952e\u548c\u503c\u5230HTTP\u5934  \n       for (size_t i = 0; i &lt; num_values_; ++i) {  \n         headers_v[i * 2] = fields_[i].ToString(env());  \n         headers_v[i * 2 + 1] = values_[i].ToString(env());  \n       }  \n\n       return Array::New(env()-&gt;isolate(), headers_v, num_values_ * 2);  \n     }  \n</code></pre> <p>Flush\u4f1a\u8c03\u7528JS\u5c42\u7684kOnHeaders\u94a9\u5b50\u51fd\u6570\u3002</p> <p>5\u89e3\u6790\u5230HTTP\u5934\u7684\u503c\u65f6\u56de\u8c03</p> <pre><code>    int on_header_value(const char* at, size_t length) {  \n       int rv = TrackHeader(length);  \n       if (rv != 0) {  \n         return rv;  \n       }  \n       /* \n         \u503c\u7684\u4e2a\u6570\u4e0d\u7b49\u4e8e\u952e\u7684\u4e2a\u6570\u8bf4\u660e\u6b63\u89e3\u6790\u5230\u952e\u5bf9\u5e94\u7684\u503c\uff0c\u5373\u4e00\u4e00\u5bf9\u5e94\u3002 \n         \u5426\u5219\u8bf4\u660e\u4e00\u4e2a\u952e\u5b58\u5728\u591a\u4e2a\u503c\uff0c\u5219\u4e0d\u66f4\u65b0\u503c\u7684\u4e2a\u6570\uff0c\u591a\u4e2a\u503c\u7d2f\u52a0\u5230\u4e00\u4e2aslot \n       */  \n       if (num_values_ != num_fields_) {  \n         // start of new header value  \n         num_values_++;  \n         values_[num_values_ - 1].Reset();  \n       }  \n\n       CHECK_LT(num_values_, arraysize(values_));  \n       CHECK_EQ(num_values_, num_fields_);  \n\n       values_[num_values_ - 1].Update(at, length);  \n\n       return 0;  \n     }  \n</code></pre> <p>6\u89e3\u6790\u5b8cHTTP\u5934\u540e\u7684\u56de\u8c03</p> <pre><code>    int on_headers_complete() {  \n        header_nread_ = 0;   \n        enum on_headers_complete_arg_index {  \n           A_VERSION_MAJOR = 0,  \n           A_VERSION_MINOR,  \n           A_HEADERS,  \n           A_METHOD,  \n           A_URL,  \n           A_STATUS_CODE,  \n          A_STATUS_MESSAGE,  \n          A_UPGRADE,  \n          A_SHOULD_KEEP_ALIVE,  \n          A_MAX  \n        };  \n\n        Local&lt;Value&gt; argv[A_MAX];  \n        Local&lt;Object&gt; obj = object();  \n        Local&lt;Value&gt; cb = obj-&gt;Get(env()-&gt;context(),  \n                                   kOnHeadersComplete).ToLocalChecked();  \n\n        Local&lt;Value&gt; undefined = Undefined(env()-&gt;isolate());  \n        for (size_t i = 0; i &lt; arraysize(argv); i++)  \n          argv[i] = undefined;  \n        // \u4e4b\u524dflush\u8fc7\uff0c\u5219\u7ee7\u7eedflush\u5230JS\u5c42\uff0c\u5426\u5219\u8fd4\u56de\u5168\u90e8\u5934\u7ed9js  \n        if (have_flushed_) {  \n          // Slow case, flush remaining headers.  \n          Flush();  \n        } else {  \n          // Fast case, pass headers and URL to JS land.  \n          argv[A_HEADERS] = CreateHeaders();  \n          if (parser_.type == HTTP_REQUEST)  \n            argv[A_URL] = url_.ToString(env());  \n        }  \n\n        num_fields_ = 0;  \n        num_values_ = 0;  \n\n        // METHOD  \n        if (parser_.type == HTTP_REQUEST) {  \n          argv[A_METHOD] =  \n              Uint32::NewFromUnsigned(env()-&gt;isolate(), parser_.method);  \n        }  \n\n        // STATUS  \n        if (parser_.type == HTTP_RESPONSE) {  \n          argv[A_STATUS_CODE] =  \n              Integer::New(env()-&gt;isolate(), parser_.status_code);  \n          argv[A_STATUS_MESSAGE] = status_message_.ToString(env());  \n        }  \n\n        // VERSION  \n        argv[A_VERSION_MAJOR] = Integer::New(env()-&gt;isolate(), parser_.http_major);  \n        argv[A_VERSION_MINOR] = Integer::New(env()-&gt;isolate(), parser_.http_minor);  \n\n        bool should_keep_alive;  \n        // \u662f\u5426\u5b9a\u4e49\u4e86keepalive\u5934  \n        should_keep_alive = llhttp_should_keep_alive(&amp;parser_);  \n\n        argv[A_SHOULD_KEEP_ALIVE] =  \n            Boolean::New(env()-&gt;isolate(), should_keep_alive);  \n        // \u662f\u5426\u662f\u5347\u7ea7\u534f\u8bae  \n        argv[A_UPGRADE] = Boolean::New(env()-&gt;isolate(), parser_.upgrade);  \n\n        MaybeLocal&lt;Value&gt; head_response;  \n        {  \n          InternalCallbackScope callback_scope(  \n              this, InternalCallbackScope::kSkipTaskQueues);  \n          head_response = cb.As&lt;Function&gt;()-&gt;Call(  \n              env()-&gt;context(), object(), arraysize(argv), argv);  \n        }  \n\n        int64_t val;  \n\n        if (head_response.IsEmpty() || !head_response.ToLocalChecked()  \n                                            -&gt;IntegerValue(env()-&gt;context())  \n                                            .To(&amp;val)) {  \n          got_exception_ = true;  \n          return -1;  \n        }  \n\n        return val;  \n      }  \n</code></pre> <p>on_headers_complete\u4f1a\u6267\u884cJS\u5c42\u7684kOnHeadersComplete\u94a9\u5b50\u3002</p> <p>7 \u89e3\u6790body\u65f6\u7684\u56de\u8c03</p> <pre><code>    int on_body(const char* at, size_t length) {  \n       EscapableHandleScope scope(env()-&gt;isolate());  \n\n       Local&lt;Object&gt; obj = object();  \n       Local&lt;Value&gt; cb = obj-&gt;Get(env()-&gt;context(), kOnBody).ToLocalChecked();  \n\n       // We came from consumed stream  \n       if (current_buffer_.IsEmpty()) {  \n         // Make sure Buffer will be in parent HandleScope  \n         current_buffer_ = scope.Escape(Buffer::Copy(  \n             env()-&gt;isolate(),  \n             current_buffer_data_,  \n             current_buffer_len_).ToLocalChecked());  \n       }  \n\n       Local&lt;Value&gt; argv[3] = {  \n         // \u5f53\u524d\u89e3\u6790\u4e2d\u7684\u6570\u636e  \n         current_buffer_,  \n         // body\u5f00\u59cb\u7684\u4f4d\u7f6e  \n         Integer::NewFromUnsigned(env()-&gt;isolate(), at - current_buffer_data_),  \n         // body\u5f53\u524d\u957f\u5ea6  \n         Integer::NewFromUnsigned(env()-&gt;isolate(), length)  \n       };  \n\n       MaybeLocal&lt;Value&gt; r = MakeCallback(cb.As&lt;Function&gt;(),  \n                                          arraysize(argv),  \n                                          argv);   \n\n       return 0;  \n     }  \n</code></pre> <p>Node.js\u4e2d\u5e76\u4e0d\u662f\u6bcf\u6b21\u89e3\u6790HTTP\u62a5\u6587\u7684\u65f6\u5019\u5c31\u65b0\u5efa\u4e00\u4e2aHTTP\u89e3\u6790\u5668\uff0cNode.js\u4f7f\u7528FreeList\u6570\u636e\u7ed3\u6784\u5bf9HTTP\u89e3\u6790\u5668\u5b9e\u4f8b\u8fdb\u884c\u4e86\u7ba1\u7406\u3002</p> <pre><code>    class FreeList {  \n      constructor(name, max, ctor) {  \n        this.name = name;  \n        // \u6784\u9020\u51fd\u6570  \n        this.ctor = ctor;  \n        // \u8282\u70b9\u7684\u6700\u5927\u503c  \n        this.max = max;  \n        // \u5b9e\u4f8b\u5217\u8868  \n        this.list = [];  \n      }  \n      // \u5206\u914d\u4e00\u4e2a\u5b9e\u4f8b  \n      alloc() {  \n        // \u6709\u7a7a\u95f2\u7684\u5219\u76f4\u63a5\u8fd4\u56de\uff0c\u5426\u5219\u65b0\u5efa\u4e00\u4e2a  \n        return this.list.length &gt; 0 ?  \n          this.list.pop() :  \n          ReflectApply(this.ctor, this, arguments);  \n      }  \n      // \u91ca\u653e\u5b9e\u4f8b  \n      free(obj) {  \n        // \u5c0f\u4e8e\u9608\u503c\u5219\u653e\u5230\u7a7a\u95f2\u5217\u8868\uff0c\u5426\u5219\u91ca\u653e\uff08\u8c03\u7528\u65b9\u8d1f\u8d23\u91ca\u653e\uff09  \n        if (this.list.length &lt; this.max) {  \n          this.list.push(obj);  \n          return true;  \n        }  \n        return false;  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u5728Node.js\u4e2d\u5bf9FreeList\u7684\u4f7f\u7528\u3002\u3002</p> <pre><code>    const parsers = new FreeList('parsers', 1000, function parsersCb() {  \n      const parser = new HTTPParser();  \n      // \u521d\u59cb\u5316\u5b57\u6bb5  \n      cleanParser(parser);  \n      // \u8bbe\u7f6e\u94a9\u5b50  \n      parser.onIncoming = null;  \n      parser[kOnHeaders] = parserOnHeaders;  \n      parser[kOnHeadersComplete] = parserOnHeadersComplete;  \n      parser[kOnBody] = parserOnBody;  \n      parser[kOnMessageComplete] = parserOnMessageComplete;  \n\n      return parser;  \n    });  \n</code></pre> <p>HTTP\u89e3\u6790\u5668\u7684\u4f7f\u7528</p> <pre><code>    var HTTPParser = process.binding('http_parser').HTTPParser;  \n    var parser = new HTTPParser(HTTPParser.REQUEST);  \n\n    const kOnHeaders = HTTPParser.kOnHeaders;  \n    const kOnHeadersComplete = HTTPParser.kOnHeadersComplete;  \n    const kOnBody = HTTPParser.kOnBody;  \n    const kOnMessageComplete = HTTPParser.kOnMessageComplete;  \n    const kOnExecute = HTTPParser.kOnExecute;  \n\n    parser[kOnHeaders] = function(headers, url) {  \n        console.log('kOnHeaders', headers.length, url);  \n    }  \n    parser[kOnHeadersComplete] = function(versionMajor, versionMinor, headers, method,  \n             url, statusCode, statusMessage, upgrade, shouldKeepAlive) {  \n        console.log('kOnHeadersComplete', headers);  \n    }  \n\n    parser[kOnBody] = function(b, start, len) {  \n        console.log('kOnBody', b.slice(start).toString('utf-8'));  \n    }  \n    parser[kOnMessageComplete] = function() {  \n        console.log('kOnMessageComplete');  \n    }  \n    parser[kOnExecute] = function() {  \n        console.log('kOnExecute');  \n    }  \n\n    parser.execute(Buffer.from(  \n        'GET / HTTP/1.1\\r\\n' +  \n        'Host: http://localhost\\r\\n\\r\\n'   \n    ));  \n</code></pre> <p>\u4ee5\u4e0a\u4ee3\u7801\u7684\u8f93\u51fa</p> <pre><code>    kOnHeadersComplete [ 'Host', 'http://localhost' ]  \n    kOnMessageComplete  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u53ea\u6267\u884c\u4e86kOnHeadersComplete\u548c kOnMessageComplete\u3002\u90a3\u5176\u5b83\u51e0\u4e2a\u56de\u8c03\u4ec0\u4e48\u65f6\u5019\u4f1a\u6267\u884c\u5462\uff1f\u6211\u4eec\u63a5\u7740\u770b\u3002\u6211\u4eec\u628a\u8f93\u5165\u6539\u4e00\u4e0b\u3002</p> <pre><code>    parser.execute(Buffer.from(  \n        'GET / HTTP/1.1\\r\\n' +  \n        'Host: http://localhost\\r\\n' +  \n        'content-length: 1\\r\\n\\r\\n'+  \n        '1'  \n    ));  \n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u7684\u8f93\u51fa</p> <pre><code>    kOnHeadersComplete [ 'Host', 'http://localhost', 'content-length', '1' ]  \n    kOnBody 1  \n    kOnMessageComplete  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u591a\u4e86\u4e00\u4e2a\u56de\u8c03kOnBody\uff0c\u56e0\u4e3a\u6211\u4eec\u52a0\u4e86\u4e00\u4e2aHTTP\u5934content-length\u6307\u793a\u6709body\uff0c\u6240\u4ee5HTTP\u89e3\u6790\u5668\u89e3\u6790\u5230body\u7684\u65f6\u5019\u5c31\u4f1a\u56de\u8c03kOnBody\u3002\u90a3kOnHeaders\u4ec0\u4e48\u65f6\u5019\u4f1a\u6267\u884c\u5462\uff1f\u6211\u4eec\u7ee7\u7eed\u4fee\u6539\u4ee3\u7801\u3002</p> <pre><code>    parser.execute(Buffer.from(  \n        'GET / HTTP/1.1\\r\\n' +  \n        'Host: http://localhost\\r\\n' +  \n        'a: b\\r\\n'+  \n         // \u5f88\u591a'a: b\\r\\n'+\n        'content-length: 1\\r\\n\\r\\n'+  \n        '1'  \n    ));  \n</code></pre> <p>\u4ee5\u4e0a\u4ee3\u7801\u7684\u8f93\u51fa</p> <pre><code>    kOnHeaders 62 /  \n    kOnHeaders 22  \n    kOnHeadersComplete undefined  \n    kOnBody 1  \n    kOnMessageComplete  \n</code></pre> <p>\u6211\u4eec\u770b\u5230kOnHeaders\u88ab\u6267\u884c\u4e86\uff0c\u5e76\u4e14\u6267\u884c\u4e86\u4e24\u6b21\u3002\u56e0\u4e3a\u5982\u679cHTTP\u5934\u7684\u4e2a\u6570\u8fbe\u5230\u9608\u503c\uff0c\u5728\u89e3\u6790HTTP\u5934\u90e8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c31\u5148flush\u5230JS\u5c42\uff08\u5982\u679c\u591a\u6b21\u8fbe\u5230\u9608\u503c\uff0c\u5219\u56de\u8c03\u591a\u6b21\uff09\uff0c\u5e76\u4e14\u5728\u89e3\u6790\u5b8c\u6240\u6709HTTP\u5934\u540e\uff0c\u4f1a\u5728kOnHeadersComplet\u56de\u8c03\u4e4b\u524d\u518d\u6b21\u56de\u8c03kOnHeaders\uff08\u5982\u679c\u8fd8\u6709\u7684\u8bdd\uff09\u3002\u6700\u540e\u6211\u4eec\u770b\u4e00\u4e0bkOnExecute\u5982\u4f55\u89e6\u53d1\u3002</p> <pre><code>    var HTTPParser = process.binding('http_parser').HTTPParser;  \n    var parser = new HTTPParser(HTTPParser.REQUEST);  \n    var net = require('net');  \n\n    const kOnHeaders = HTTPParser.kOnHeaders;  \n    const kOnHeadersComplete = HTTPParser.kOnHeadersComplete;  \n    const kOnBody = HTTPParser.kOnBody;  \n    const kOnMessageComplete = HTTPParser.kOnMessageComplete;  \n    const kOnExecute = HTTPParser.kOnExecute;  \n\n    parser[kOnHeaders] = function(headers, url) {  \n        console.log('kOnHeaders', headers.length, url);  \n    }  \n    parser[kOnHeadersComplete] = function(versionMajor, versionMinor, headers, method,  \n             url, statusCode, statusMessage, upgrade, shouldKeepAlive) {  \n        console.log('kOnHeadersComplete', headers);  \n    }  \n\n    parser[kOnBody] = function(b, start, len) {  \n        console.log('kOnBody', b.slice(start).toString('utf-8'));  \n    }  \n    parser[kOnMessageComplete] = function() {  \n        console.log('kOnMessageComplete');  \n    }  \n    parser[kOnExecute] = function(a,b) {  \n        console.log('kOnExecute,\u89e3\u6790\u7684\u5b57\u8282\u6570\uff1a',a);  \n    }  \n    // \u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668  \n    net.createServer((socket) =&gt; {  \n      parser.consume(socket._handle);  \n    }).listen(80);  \n\n    // \u542f\u52a8\u4e00\u4e2a\u5ba2\u6237\u7aef  \n    setTimeout(() =&gt; {  \n      var socket = net.connect({port: 80});  \n      socket.end('GET / HTTP/1.1\\r\\n' +  \n        'Host: http://localhost\\r\\n' +  \n        'content-length: 1\\r\\n\\r\\n'+  \n        '1');  \n    }, 1000);  \n</code></pre> <p>\u6211\u4eec\u9700\u8981\u8c03\u7528parser.consume\u65b9\u6cd5\u5e76\u4e14\u4f20\u5165\u4e00\u4e2aisStreamBase\u7684\u6d41\uff08stream_base.cc\u5b9a\u4e49\uff09\uff0c\u624d\u4f1a\u89e6\u53d1kOnExecute\u3002\u56e0\u4e3akOnExecute\u662f\u5728StreamBase\u6d41\u53ef\u8bfb\u65f6\u89e6\u53d1\u7684\u3002</p>"},{"location":"chapter18-HTTP/#182-http","title":"18.2 HTTP\u5ba2\u6237\u7aef","text":"<p>\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b\u4f7f\u7528Node.js\u4f5c\u4e3a\u5ba2\u6237\u7aef\u7684\u4f8b\u5b50\u3002</p> <pre><code>    const data = querystring.stringify({  \n      'msg': 'hi'  \n    });  \n\n    const options = {  \n      hostname: 'your domain',  \n      path: '/',  \n      method: 'POST',  \n      headers: {  \n        'Content-Type': 'application/x-www-form-urlencoded',  \n        'Content-Length': Buffer.byteLength(data)  \n      }  \n    };  \n\n    const req = http.request(options, (res) =&gt; {  \n      res.setEncoding('utf8');  \n      res.on('data', (chunk) =&gt; {  \n        console.log(`${chunk}`);  \n      });  \n      res.on('end', () =&gt; {  \n        console.log('end');  \n      });  \n    });  \n\n    req.on('error', (e) =&gt; {  \n      console.error(`${e.message}`);  \n    });  \n    // \u53d1\u9001\u8bf7\u6c42\u7684\u6570\u636e  \n    req.write(data);  \n    // \u8bbe\u7f6e\u8bf7\u6c42\u7ed3\u675f  \n    req.end();  \n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0bhttp.request\u7684\u5b9e\u73b0\u3002</p> <pre><code>    function request(url, options, cb) {  \n      return new ClientRequest(url, options, cb);  \n    }  \n</code></pre> <p>HTTP\u5ba2\u6237\u7aef\u901a\u8fc7_http_client.js\u7684ClientRequest\u5b9e\u73b0\uff0cClientRequest\u7684\u4ee3\u7801\u975e\u5e38\u591a\uff0c\u6211\u4eec\u53ea\u5206\u6790\u6838\u5fc3\u7684\u6d41\u7a0b\u3002\u6211\u4eec\u770b\u521d\u59cb\u5316\u4e00\u4e2a\u8bf7\u6c42\u7684\u903b\u8f91\u3002</p> <pre><code>    function ClientRequest(input, options, cb) {  \n      // \u7ee7\u627fOutgoingMessage  \n      OutgoingMessage.call(this);  \n      // \u662f\u5426\u4f7f\u7528agent  \n      let agent = options.agent;   \n      // \u5ffd\u7565agent\u7684\u5904\u7406\uff0c\u5177\u4f53\u53c2\u8003_http_agent.js\uff0c\u4e3b\u8981\u7528\u4e8e\u590d\u7528TCP\u8fde\u63a5  \n      this.agent = agent;  \n      // \u5efa\u7acb\u8fde\u63a5\u7684\u8d85\u65f6\u65f6\u95f4  \n      if (options.timeout !== undefined)  \n        this.timeout = getTimerDuration(options.timeout, 'timeout');  \n      // HTTP\u5934\u4e2a\u6570\u7684\u9608\u503c  \n      const maxHeaderSize = options.maxHeaderSize;  \n      this.maxHeaderSize = maxHeaderSize;  \n      // \u76d1\u542c\u54cd\u5e94\u4e8b\u4ef6  \n      if (cb) {  \n        this.once('response', cb);  \n      }  \n      // \u5ffd\u7565\u8bbe\u7f6ehttp\u534f\u8bae\u7684\u8bf7\u6c42\u884c\u6216\u8bf7\u6c42\u5934\u7684\u903b\u8f91\n      // \u5efa\u7acbTCP\u8fde\u63a5\u540e\u7684\u56de\u8c03  \n      const oncreate = (err, socket) =&gt; {  \n        if (called)  \n          return;  \n        called = true;  \n        if (err) {  \n          process.nextTick(() =&gt; this.emit('error', err));  \n          return;  \n        }  \n        // \u5efa\u7acb\u8fde\u63a5\u6210\u529f\uff0c\u6267\u884c\u56de\u8c03  \n        this.onSocket(socket);  \n        // \u8fde\u63a5\u6210\u529f\u540e\u53d1\u9001\u6570\u636e  \n        this._deferToConnect(null, null, () =&gt; this._flush());  \n      };  \n\n      // \u4f7f\u7528agent\u65f6\uff0csocket\u7531agent\u63d0\u4f9b\uff0c\u5426\u5219\u81ea\u5df1\u521b\u5efasocket  \n      if (this.agent) {  \n        this.agent.addRequest(this, options);  \n      } else {  \n        // \u4e0d\u4f7f\u7528agent\u5219\u6bcf\u6b21\u521b\u5efa\u4e00\u4e2asocket\uff0c\u9ed8\u8ba4\u4f7f\u7528net\u6a21\u5757\u7684\u63a5\u53e3\n        if (typeof options.createConnection === 'function') {  \n          const newSocket = options.createConnection(options, \n                                                          oncreate);  \n          if (newSocket &amp;&amp; !called) {  \n            called = true;  \n            this.onSocket(newSocket);  \n          } else {  \n            return;  \n          }  \n        } else {  \n          this.onSocket(net.createConnection(options));  \n        }  \n      }  \n      // \u8fde\u63a5\u6210\u529f\u540e\u53d1\u9001\u5f85\u7f13\u5b58\u7684\u6570\u636e  \n      this._deferToConnect(null, null, () =&gt; this._flush());  \n    }  \n</code></pre> <p>\u83b7\u53d6\u4e00\u4e2aClientRequest\u5b9e\u4f8b\u540e\uff0c\u4e0d\u7ba1\u662f\u901a\u8fc7agent\u8fd8\u662f\u81ea\u5df1\u521b\u5efa\u4e00\u4e2aTCP\u8fde\u63a5\uff0c\u5728\u8fde\u63a5\u6210\u529f\u540e\u90fd\u4f1a\u6267\u884conSocket\u3002</p> <pre><code>    // socket\u53ef\u7528\u65f6\u7684\u56de\u8c03  \n    ClientRequest.prototype.onSocket = function onSocket(socket) {  \n      process.nextTick(onSocketNT, this, socket);  \n    };  \n\n    function onSocketNT(req, socket) {  \n      // \u7533\u8bf7socket\u8fc7\u7a0b\u4e2d\uff0c\u8bf7\u6c42\u5df2\u7ecf\u7ec8\u6b62  \n      if (req.aborted) {\n        // \u4e0d\u4f7f\u7528agent\uff0c\u76f4\u63a5\u9500\u6bc1socekt  \n        if (!req.agent) {  \n          socket.destroy();  \n        } else {  \n          // \u4f7f\u7528agent\u89e6\u53d1free\u4e8b\u4ef6\uff0c\u7531agent\u5904\u7406socekt  \n          req.emit('close');  \n          socket.emit('free');  \n        }  \n      } else {  \n        // \u5904\u7406socket  \n        tickOnSocket(req, socket);  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u7ee7\u7eed\u770btickOnSocket</p> <pre><code>    // \u521d\u59cb\u5316HTTP\u89e3\u6790\u5668\u548c\u6ce8\u518cdata\u4e8b\u4ef6\u7b49\uff0c\u7b49\u5f85\u54cd\u5e94  \n    function tickOnSocket(req, socket) {  \n      // \u5206\u914d\u4e00\u4e2aHTTP\u89e3\u6790\u5668  \n      const parser = parsers.alloc();  \n      req.socket = socket;  \n      // \u521d\u59cb\u5316\uff0c\u5904\u7406\u54cd\u5e94\u62a5\u6587  \n      parser.initialize(HTTPParser.RESPONSE,  \n             new HTTPClientAsyncResource('HTTPINCOMINGMESSAGE', req),          req.maxHeaderSize || 0,  \n             req.insecureHTTPParser === undefined ?  \n            isLenient() : req.insecureHTTPParser);  \n      parser.socket = socket;  \n      parser.outgoing = req;  \n      req.parser = parser;  \n\n      socket.parser = parser;  \n      // socket\u6b63\u5904\u7406\u7684\u8bf7\u6c42  \n      socket._httpMessage = req;  \n\n      // Propagate headers limit from request object to parser  \n      if (typeof req.maxHeadersCount === 'number') {  \n        parser.maxHeaderPairs = req.maxHeadersCount &lt;&lt; 1;  \n      }  \n      // \u89e3\u6790\u5b8cHTTP\u5934\u90e8\u7684\u56de\u8c03  \n      parser.onIncoming = parserOnIncomingClient;  \n      socket.removeListener('error', freeSocketErrorListener);  \n      socket.on('error', socketErrorListener);  \n      socket.on('data', socketOnData);  \n      socket.on('end', socketOnEnd);  \n      socket.on('close', socketCloseListener);  \n      socket.on('drain', ondrain);  \n\n      if (  \n        req.timeout !== undefined ||  \n        (req.agent &amp;&amp; req.agent.options &amp;&amp; \n         req.agent.options.timeout)  \n      ) {  \n        // \u5904\u7406\u8d85\u65f6\u65f6\u95f4  \n        listenSocketTimeout(req);  \n      }  \n      req.emit('socket', socket);  \n    }  \n</code></pre> <p>\u62ff\u5230\u4e00\u4e2asocket\u540e\uff0c\u5c31\u5f00\u59cb\u76d1\u542csocket\u4e0ahttp\u62a5\u6587\u7684\u5230\u6765\u3002\u5e76\u4e14\u7533\u8bf7\u4e00\u4e2aHTTP\u89e3\u6790\u5668\u51c6\u5907\u89e3\u6790http\u62a5\u6587\uff0c\u6211\u4eec\u4e3b\u8981\u5206\u6790\u8d85\u65f6\u65f6\u95f4\u7684\u5904\u7406\u548cdata\u4e8b\u4ef6\u7684\u5904\u7406\u903b\u8f91\u3002 1 \u8d85\u65f6\u65f6\u95f4\u7684\u5904\u7406</p> <pre><code>    function listenSocketTimeout(req) {  \n      // \u8bbe\u7f6e\u8fc7\u4e86\u5219\u8fd4\u56de  \n      if (req.timeoutCb) {  \n        return;  \n      }  \n      // \u8d85\u65f6\u56de\u8c03  \n      req.timeoutCb = emitRequestTimeout;  \n      // Delegate socket timeout event.  \n      // \u8bbe\u7f6esocket\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u5373socket\u4e0a\u4e00\u5b9a\u65f6\u95f4\u540e\u6ca1\u6709\u54cd\u5e94\u5219\u89e6\u53d1\u8d85\u65f6  \n      if (req.socket) {  \n        req.socket.once('timeout', emitRequestTimeout);  \n      } else {  \n        req.on('socket', (socket) =&gt; {  \n          socket.once('timeout', emitRequestTimeout);  \n        });  \n      }  \n    }  \n\n    function emitRequestTimeout() {  \n      const req = this._httpMessage;  \n      if (req) {  \n        req.emit('timeout');  \n      }  \n    }  \n</code></pre> <p>2 \u5904\u7406\u54cd\u5e94\u6570\u636e</p> <pre><code>    function socketOnData(d) {  \n      const socket = this;  \n      const req = this._httpMessage;  \n      const parser = this.parser;  \n      // \u4ea4\u7ed9HTTP\u89e3\u6790\u5668\u5904\u7406  \n      const ret = parser.execute(d);  \n      // ...  \n    }  \n</code></pre> <p>\u5f53Node.js\u6536\u5230\u54cd\u5e94\u62a5\u6587\u65f6\uff0c\u4f1a\u628a\u6570\u636e\u4ea4\u7ed9HTTP\u89e3\u6790\u5668\u5904\u7406\u3002http\u89e3\u6790\u5728\u89e3\u6790\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u4e0d\u65ad\u89e6\u53d1\u94a9\u5b50\u51fd\u6570\u3002\u6211\u4eec\u770b\u4e00\u4e0bJS\u5c42\u5404\u4e2a\u94a9\u5b50\u51fd\u6570\u7684\u903b\u8f91\u3002 1 \u89e3\u6790\u5934\u90e8\u8fc7\u7a0b\u4e2d\u6267\u884c\u7684\u56de\u8c03</p> <pre><code>    function parserOnHeaders(headers, url) {  \n      // \u4fdd\u5b58\u5934\u548curl  \n      if (this.maxHeaderPairs &lt;= 0 ||  \n          this._headers.length &lt; this.maxHeaderPairs) {  \n        this._headers = this._headers.concat(headers);  \n      }  \n      this._url += url;\n    }  \n</code></pre> <p>2 \u89e3\u6790\u5b8c\u5934\u90e8\u7684\u56de\u8c03</p> <pre><code>    function parserOnHeadersComplete(versionMajor, \n                                        versionMinor, \n                                        headers, \n                                        method,  \n                                     url, \n                                        statusCode, \n                                        statusMessage, \n                                        upgrade,  \n                                     shouldKeepAlive) {  \n      const parser = this;  \n      const { socket } = parser;  \n      // \u5269\u4e0b\u7684HTTP\u5934  \n      if (headers === undefined) {  \n        headers = parser._headers;  \n        parser._headers = [];  \n      }  \n\n      if (url === undefined) {  \n        url = parser._url;  \n        parser._url = '';  \n      }  \n\n      // Parser is also used by http client  \n      // IncomingMessage  \n      const ParserIncomingMessage=(socket &amp;&amp; \n                                      socket.server &amp;&amp;  \n                                   socket.server[kIncomingMessage]\n                                      ) ||                                 \n                                      IncomingMessage;  \n      // \u65b0\u5efa\u4e00\u4e2aIncomingMessage\u5bf9\u8c61  \n      const incoming = parser.incoming = new ParserIncomingMessage(socket);  \n      incoming.httpVersionMajor = versionMajor;  \n      incoming.httpVersionMinor = versionMinor;  \n      incoming.httpVersion = `${versionMajor}.${versionMinor}`;  \n      incoming.url = url;  \n      incoming.upgrade = upgrade;  \n\n      let n = headers.length;  \n      // If parser.maxHeaderPairs &lt;= 0 assume that there's no limit.\n      if (parser.maxHeaderPairs &gt; 0)  \n        n = MathMin(n, parser.maxHeaderPairs);  \n      // \u66f4\u65b0\u5230\u4fdd\u5b58HTTP\u5934\u7684\u5bf9\u8c61   \n      incoming._addHeaderLines(headers, n);  \n      // \u8bf7\u6c42\u65b9\u6cd5\u6216\u54cd\u5e94\u884c\u4fe1\u606f  \n      if (typeof method === 'number') {  \n        // server only  \n        incoming.method = methods[method];  \n      } else {  \n        // client only  \n        incoming.statusCode = statusCode;  \n        incoming.statusMessage = statusMessage;  \n      }  \n      // \u6267\u884c\u56de\u8c03  \n      return parser.onIncoming(incoming, shouldKeepAlive);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u89e3\u6790\u5b8c\u5934\u90e8\u540e\u4f1a\u6267\u884c\u53e6\u4e00\u4e2a\u56de\u8c03onIncoming\uff0c\u5e76\u4f20\u5165IncomingMessage\u5b9e\u4f8b\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u5e73\u65f6\u4f7f\u7528\u7684res\u3002\u5728\u524d\u9762\u5206\u6790\u8fc7\uff0conIncoming\u8bbe\u7f6e\u7684\u503c\u662fparserOnIncomingClient\u3002</p> <pre><code>    function parserOnIncomingClient(res, shouldKeepAlive) {  \n      const socket = this.socket;  \n      // \u8bf7\u6c42\u5bf9\u8c61  \n      const req = socket._httpMessage;  \n      // \u670d\u52a1\u5668\u53d1\u9001\u4e86\u591a\u4e2a\u54cd\u5e94  \n      if (req.res) {  \n        socket.destroy();  \n        return 0;    \n      }  \n      req.res = res;  \n\n      if (statusIsInformational(res.statusCode)) {  \n        req.res = null;   \n        // \u8bf7\u6c42\u65f6\u8bbe\u7f6e\u4e86expect\u5934\uff0c\u5219\u54cd\u5e94\u7801\u4e3a100\uff0c\u53ef\u4ee5\u7ee7\u7eed\u53d1\u9001\u6570\u636e  \n        if (res.statusCode === 100) {  \n          req.emit('continue');  \n        }  \n        return 1;   \n      }  \n\n      req.res = res;  \n      res.req = req;  \n\n      // \u7b49\u5f85\u54cd\u5e94\u7ed3\u675f\uff0c\u54cd\u5e94\u7ed3\u675f\u540e\u4f1a\u6e05\u9664\u5b9a\u65f6\u5668  \n      res.on('end', responseOnEnd);  \n      // \u8bf7\u6c42\u7ec8\u6b62\u4e86\u6216\u89e6\u53d1response\u4e8b\u4ef6\uff0c\u8fd4\u56defalse\u8bf4\u660e\u6ca1\u6709\u76d1\u542cresponse\u4e8b\u4ef6\uff0c\u5219\u4e22\u5f03\u6570\u636e  \n      if (req.aborted || !req.emit('response', res))  \n        res._dump();  \n\n    }  \n</code></pre> <p>\u4ece\u6e90\u7801\u4e2d\u6211\u4eec\u770b\u51fa\u5728\u89e3\u6790\u5b8cHTTP\u54cd\u5e94\u5934\u65f6\uff0c\u5c31\u6267\u884c\u4e86http.request\u8bbe\u7f6e\u7684\u56de\u8c03\u51fd\u6570\u3002\u4f8b\u5982\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684\u56de\u8c03\u3002</p> <pre><code>    http. request('domain', { agent }, (res) =&gt; {  \n        // \u89e3\u6790body\n        res.on('data', (data) =&gt; {  \n          //   \n        });\n         // \u89e3\u6790body\u7ed3\u675f\uff0c\u54cd\u5e94\u7ed3\u675f\n         res.on('end', (data) =&gt; {  \n          //   \n        });  \n    });  \n    // ...\n</code></pre> <p>\u5728\u56de\u8c03\u91cc\u6211\u4eec\u53ef\u4ee5\u628ares\u4f5c\u4e3a\u4e00\u4e2a\u6d41\u4f7f\u7528\uff0c\u5728\u89e3\u6790\u5b8cHTTP\u5934\u540e\uff0cHTTP\u89e3\u6790\u5668\u4f1a\u7ee7\u7eed\u89e3\u6790HTTP body\u3002\u6211\u4eec\u770b\u4e00\u4e0bHTTP\u89e3\u6790\u5668\u5728\u89e3\u6790body\u8fc7\u7a0b\u4e2d\u6267\u884c\u7684\u56de\u8c03\u3002</p> <pre><code>    function parserOnBody(b, start, len) {  \n      const stream = this.incoming;  \n      if (len &gt; 0 &amp;&amp; !stream._dumped) {  \n        const slice = b.slice(start, start + len);  \n        // \u628a\u6570\u636epush\u5230\u6d41\u4e2d\uff0c\u6d41\u4f1a\u89e6\u53d1data\u4e8b\u4ef6  \n        const ret = stream.push(slice);  \n        // \u6570\u636e\u8fc7\u8f7d\uff0c\u6682\u505c\u63a5\u6536  \n        if (!ret)  \n          readStop(this.socket);  \n      }  \n    }  \n</code></pre> <p>\u6700\u540e\u6211\u4eec\u518d\u770b\u4e00\u4e0b\u89e3\u6790\u5b8cbody\u65f6HTTP\u89e3\u6790\u5668\u6267\u884c\u7684\u56de\u8c03\u3002</p> <pre><code>    function parserOnMessageComplete() {  \n      const parser = this;  \n      const stream = parser.incoming;  \n\n      if (stream !== null) {  \n        // body\u89e3\u6790\u5b8c\u4e86  \n        stream.complete = true;  \n        // \u5728body\u540e\u53ef\u80fd\u6709trailer\u5934\uff0c\u4fdd\u5b58\u4e0b\u6765  \n        const headers = parser._headers;  \n        if (headers.length) {  \n          stream._addHeaderLines(headers, headers.length);  \n          parser._headers = [];  \n          parser._url = '';  \n        }  \n        // \u6d41\u7ed3\u675f  \n        stream.push(null);  \n      }  \n\n      // \u8bfb\u53d6\u4e0b\u4e00\u4e2a\u54cd\u5e94\uff0c\u5982\u679c\u6709\u7684\u8bdd  \n      readStart(parser.socket);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u5728\u89e3\u6790body\u8fc7\u7a0b\u4e2d\u4f1a\u4e0d\u65ad\u5f80\u6d41\u4e2dpush\u6570\u636e\uff0c\u4ece\u800c\u4e0d\u65ad\u89e6\u53d1res\u7684data\u4e8b\u4ef6\uff0c\u6700\u540e\u89e3\u6790body\u7ed3\u675f\u540e\uff0c\u901a\u8fc7push(null)\u901a\u77e5\u6d41\u7ed3\u675f\uff0c\u4ece\u800c\u89e6\u53d1res.end\u4e8b\u4ef6\u3002\u6211\u4eec\u6cbf\u7740onSocket\u51fd\u6570\u5206\u6790\u5b8c\u5904\u7406\u54cd\u5e94\u540e\u6211\u4eec\u518d\u6765\u5206\u6790\u8bf7\u6c42\u7684\u8fc7\u7a0b\u3002\u6267\u884c\u5b8chttp.request\u540e\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u6807\u8bb0\u8bf7\u6c42\u7684\u5b9e\u4f8b\u3002\u7136\u540e\u6267\u884c\u5b83\u7684write\u65b9\u6cd5\u53d1\u9001\u6570\u636e\u3002</p> <pre><code>    OutgoingMessage.prototype.write = function write(chunk, encoding, callback) {  \n      const ret = write_(this, chunk, encoding, callback, false);  \n      // \u8fd4\u56defalse\u8bf4\u660e\u9700\u8981\u7b49\u5f85drain\u4e8b\u4ef6  \n      if (!ret)  \n        this[kNeedDrain] = true;  \n      return ret;  \n    };  \n\n    function write_(msg, chunk, encoding, callback, fromEnd) {  \n\n      // \u8fd8\u6ca1\u6709\u8bbe\u7f6ethis._header\u5b57\u6bb5\uff0c\u5219\u628a\u8bf7\u6c42\u884c\u548cHTTP\u5934\u62fc\u63a5\u5230this._header\u5b57\u6bb5  \n      if (!msg._header) {  \n        msg._implicitHeader();  \n      }  \n\n      let ret;  \n      // chunk\u6a21\u5f0f\u5219\u9700\u8981\u989d\u5916\u52a0\u4e00\u4e0b\u5b57\u6bb5\uff0c\u5426\u5219\u76f4\u63a5\u53d1\u9001  \n      if (msg.chunkedEncoding &amp;&amp; chunk.length !== 0) {  \n        let len;  \n        if (typeof chunk === 'string')  \n          len = Buffer.byteLength(chunk, encoding);  \n        else  \n          len = chunk.length;  \n        /* \n          chunk\u6a21\u5f0f\u65f6\uff0chttp\u62a5\u6587\u7684\u683c\u5f0f\u5982\u4e0b \n          chunk\u957f\u5ea6 \u56de\u8f66\u6362\u884c \n          \u6570\u636e \u56de\u8f66\u6362\u884c \n        */  \n        msg._send(len.toString(16), 'latin1', null);  \n        msg._send(crlf_buf, null, null);  \n        msg._send(chunk, encoding, null);  \n        ret = msg._send(crlf_buf, null, callback);  \n      } else {  \n        ret = msg._send(chunk, encoding, callback);  \n      }  \n\n      return ret;  \n    }  \n</code></pre> <p>\u6211\u4eec\u63a5\u7740\u770b_send\u51fd\u6570</p> <pre><code>    OutgoingMessage.prototype._send = function _send(data, encoding, callback) {  \n      // \u5934\u90e8\u8fd8\u6ca1\u6709\u53d1\u9001  \n      if (!this._headerSent) {  \n        // \u662f\u5b57\u7b26\u4e32\u5219\u8ffd\u52a0\u5230\u5934\u90e8\uff0cthis._header\u4fdd\u5b58\u4e86HTTP\u8bf7\u6c42\u884c\u548cHTTP\u5934  \n        if (typeof data === 'string' &amp;&amp;  \n            (encoding === 'utf8' || \n             encoding === 'latin1' || \n             !encoding)) {  \n          data = this._header + data;  \n        } else {  \n          // \u5426\u5219\u7f13\u5b58\u8d77\u6765  \n          const header = this._header;  \n          // HTTP\u5934\u9700\u8981\u653e\u5230\u6700\u524d\u9762  \n          if (this.outputData.length === 0) {  \n            this.outputData = [{  \n              data: header,  \n              encoding: 'latin1',  \n              callback: null  \n            }];  \n          } else {  \n            this.outputData.unshift({  \n              data: header,  \n              encoding: 'latin1',  \n              callback: null  \n            });  \n          }  \n          // \u66f4\u65b0\u7f13\u5b58\u5927\u5c0f  \n          this.outputSize += header.length;  \n          this._onPendingData(header.length);  \n        }  \n        // \u5df2\u7ecf\u5728\u6392\u961f\u7b49\u5f85\u53d1\u9001\u4e86\uff0c\u4e0d\u80fd\u4fee\u6539  \n        this._headerSent = true;  \n      }  \n      return this._writeRaw(data, encoding, callback);  \n    };  \n</code></pre> <p>\u6211\u4eec\u7ee7\u7eed\u770b_writeRaw</p> <pre><code>    OutgoingMessage.prototype._writeRaw = function _writeRaw(data, encoding, callback) {  \n\n      // \u53ef\u5199\u7684\u65f6\u5019\u76f4\u63a5\u53d1\u9001  \n      if (conn &amp;&amp; conn._httpMessage === this &amp;&amp; conn.writable) {  \n        // There might be pending data in the this.output buffer.  \n        // \u5982\u679c\u6709\u7f13\u5b58\u7684\u6570\u636e\u5219\u5148\u53d1\u9001\u7f13\u5b58\u7684\u6570\u636e  \n        if (this.outputData.length) {  \n          this._flushOutput(conn);  \n        }  \n        // \u63a5\u7740\u53d1\u9001\u5f53\u524d\u9700\u8981\u53d1\u9001\u7684  \n        return conn.write(data, encoding, callback);  \n      }  \n      // \u5426\u5148\u7f13\u5b58  \n      this.outputData.push({ data, encoding, callback });  \n      this.outputSize += data.length;  \n      this._onPendingData(data.length);  \n      return this.outputSize &lt; HIGH_WATER_MARK;  \n    }  \n\n    OutgoingMessage.prototype._flushOutput = function _flushOutput(socket) {  \n      // \u4e4b\u524d\u8bbe\u7f6e\u4e86\u52a0\u585e\uff0c\u5219\u64cd\u4f5csocket\u5148\u79ef\u6512\u6570\u636e  \n      while (this[kCorked]) {  \n        this[kCorked]--;  \n        socket.cork();  \n      }  \n\n      const outputLength = this.outputData.length;  \n      if (outputLength &lt;= 0)  \n        return undefined;  \n\n      const outputData = this.outputData;  \n      socket.cork();  \n      // \u628a\u7f13\u5b58\u7684\u6570\u636e\u5199\u5230socket  \n      let ret;  \n      for (let i = 0; i &lt; outputLength; i++) {  \n        const { data, encoding, callback } = outputData[i];  \n        ret = socket.write(data, encoding, callback);  \n      }  \n      socket.uncork();  \n\n      this.outputData = [];  \n      this._onPendingData(-this.outputSize);  \n      this.outputSize = 0;  \n\n      return ret;  \n    };  \n</code></pre> <p>\u5199\u5b8c\u6570\u636e\u540e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u6267\u884cend\u51fd\u6570\u6807\u8bb0HTTP\u8bf7\u6c42\u7684\u7ed3\u675f\u3002</p> <pre><code>    OutgoingMessage.prototype.end = function end(chunk, encoding, callback) {  \n      // \u8fd8\u6ca1\u7ed3\u675f  \n      // \u52a0\u585e  \n      if (this.socket) {  \n        this.socket.cork();  \n      }  \n\n      // \u6d41\u7ed3\u675f\u540e\u56de\u8c03  \n      if (typeof callback === 'function')  \n        this.once('finish', callback);  \n      // \u6570\u636e\u5199\u5165\u5e95\u5c42\u540e\u7684\u56de\u8c03  \n      const finish = onFinish.bind(undefined, this);  \n      // chunk\u6a21\u5f0f\u540e\u9762\u9700\u8981\u53d1\u9001\u4e00\u4e2a0\\r\\n\u7ed3\u675f\u6807\u8bb0\uff0c\u5426\u5219\u4e0d\u9700\u8981\u7ed3\u675f\u6807\u8bb0  \n      if (this._hasBody &amp;&amp; this.chunkedEncoding) {  \n        this._send('0\\r\\n' + \n                    this._trailer + '\\r\\n', 'latin1', finish);  \n      } else {  \n        this._send('', 'latin1', finish);  \n      }  \n      // uncork\u89e3\u9664\u585e\u5b50\uff0c\u53d1\u9001\u6570\u636e  \n      if (this.socket) {  \n        // Fully uncork connection on end().  \n        this.socket._writableState.corked = 1;  \n        this.socket.uncork();  \n      }  \n      this[kCorked] = 0;  \n      // \u6807\u8bb0\u6267\u884c\u4e86end  \n      this.finished = true;  \n      // \u6570\u636e\u53d1\u5b8c\u4e86  \n      if (this.outputData.length === 0 &amp;&amp;  \n          this.socket &amp;&amp;  \n          this.socket._httpMessage === this) {  \n        this._finish();  \n      }  \n\n      return this;  \n    };  \n</code></pre>"},{"location":"chapter18-HTTP/#183-http","title":"18.3 HTTP\u670d\u52a1\u5668","text":"<p>\u672c\u8282\u6211\u4eec\u6765\u5206\u6790\u4f7f\u7528Node.js\u4f5c\u4e3a\u670d\u52a1\u5668\u7684\u4f8b\u5b50\u3002</p> <pre><code>    const http = require('http');  \n    http.createServer((req, res) =&gt; {  \n      res.write('hello');  \n      res.end();  \n    })  \n    .listen(3000);  \n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u6cbf\u7740createServer\u5206\u6790Node.js\u4f5c\u4e3a\u670d\u52a1\u5668\u7684\u539f\u7406\u3002</p> <pre><code>    function createServer(opts, requestListener) {  \n      return new Server(opts, requestListener);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770bServer\u7684\u5b9e\u73b0</p> <pre><code>    function Server(options, requestListener) {  \n      // \u53ef\u4ee5\u81ea\u5b9a\u4e49\u8868\u793a\u8bf7\u6c42\u7684\u5bf9\u8c61\u548c\u54cd\u5e94\u7684\u5bf9\u8c61  \n      this[kIncomingMessage] = options.IncomingMessage || IncomingMessage;  \n      this[kServerResponse] = options.ServerResponse || ServerResponse;  \n      // HTTP\u5934\u4e2a\u6570\u7684\u9608\u503c  \n      const maxHeaderSize = options.maxHeaderSize;  \n      this.maxHeaderSize = maxHeaderSize;  \n      // \u5141\u8bb8\u534a\u5173\u95ed  \n      net.Server.call(this, { allowHalfOpen: true });  \n      // \u6709\u8bf7\u6c42\u65f6\u7684\u56de\u8c03  \n      if (requestListener) {  \n        this.on('request', requestListener);  \n      }  \n      // \u670d\u52a1\u5668socket\u8bfb\u7aef\u5173\u95ed\u65f6\u662f\u5426\u5141\u8bb8\u7ee7\u7eed\u5904\u7406\u961f\u5217\u91cc\u7684\u54cd\u5e94\uff08tcp\u4e0a\u6709\u591a\u4e2a\u8bf7\u6c42\uff0c\u7ba1\u9053\u5316\uff09  \n      this.httpAllowHalfOpen = false;  \n      // \u6709\u8fde\u63a5\u65f6\u7684\u56de\u8c03\uff0c\u7531net\u6a21\u5757\u89e6\u53d1  \n      this.on('connection', connectionListener);  \n      // \u670d\u52a1\u5668\u4e0b\u6240\u6709\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u8d85\u65f6\u65f6\u95f4  \n      this.timeout = 0;  \n      // \u540c\u4e00\u4e2aTCP\u8fde\u63a5\u4e0a\uff0c\u4e24\u4e2a\u8bf7\u6c42\u4e4b\u524d\u6700\u591a\u95f4\u9694\u7684\u65f6\u95f4   \n      this.keepAliveTimeout = 5000;  \n      this.maxHeadersCount = null;  \n      // \u89e3\u6790\u5934\u90e8\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u9632\u6b62ddos  \n      this.headersTimeout = 60 * 1000; // 60 seconds  \n    }  \n</code></pre> <p>\u63a5\u7740\u8c03\u7528listen\u51fd\u6570\uff0c\u56e0\u4e3aHTTP Server\u7ee7\u627f\u4e8enet.Server\uff0cnet.Server\u7684listen\u51fd\u6570\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u5c31\u4e0d\u518d\u5206\u6790\u3002\u5f53\u6709\u8bf7\u6c42\u5230\u6765\u65f6\uff0c\u4f1a\u89e6\u53d1connection\u4e8b\u4ef6\u3002\u4ece\u800c\u6267\u884cconnectionListener\u3002</p> <pre><code>    function connectionListener(socket) {  \n      defaultTriggerAsyncIdScope(  \n        getOrSetAsyncId(socket), connectionListenerInternal, this, socket  \n      );  \n    }  \n\n    // socket\u8868\u793a\u65b0\u8fde\u63a5  \n    function connectionListenerInternal(server, socket) {  \n      // socket\u6240\u5c5eserver  \n      socket.server = server;  \n      // \u8bbe\u7f6e\u8fde\u63a5\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u8d85\u65f6\u5904\u7406\u51fd\u6570\u4e3asocketOnTimeout  \n      if (server.timeout &amp;&amp; typeof socket.setTimeout === 'function')     socket.setTimeout(server.timeout);  \n      socket.on('timeout', socketOnTimeout);  \n      // \u5206\u914d\u4e00\u4e2aHTTP\u89e3\u6790\u5668  \n      const parser = parsers.alloc();  \n      // \u89e3\u6790\u8bf7\u6c42\u62a5\u6587  \n      parser.initialize(  \n        HTTPParser.REQUEST,  \n        new HTTPServerAsyncResource('HTTPINCOMINGMESSAGE', socket), \n        server.maxHeaderSize || 0,  \n        server.insecureHTTPParser === undefined ?  \n          isLenient() : server.insecureHTTPParser,  \n      );  \n      parser.socket = socket;  \n      // \u8bb0\u5f55\u5f00\u59cb\u89e3\u6790\u5934\u90e8\u7684\u5f00\u59cb\u65f6\u95f4  \n      parser.parsingHeadersStart = nowDate();  \n      socket.parser = parser;  \n      if (typeof server.maxHeadersCount === 'number') {  \n        parser.maxHeaderPairs = server.maxHeadersCount &lt;&lt; 1;  \n      }  \n\n      const state = {  \n        onData: null,  \n        onEnd: null,  \n        onClose: null,  \n        onDrain: null,  \n        // \u540c\u4e00TCP\u8fde\u63a5\u4e0a\uff0c\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u7684\u961f\u5217\uff0c\u7ebf\u5934\u963b\u585e\u7684\u539f\u7406  \n        outgoing: [],  \n        incoming: [],  \n        // \u5f85\u53d1\u9001\u7684\u5b57\u8282\u6570\uff0c\u5982\u679c\u8d85\u8fc7\u9608\u503c\uff0c\u5219\u5148\u6682\u505c\u63a5\u6536\u8bf7\u6c42\u7684\u6570\u636e  \n        outgoingData: 0,  \n        /*\n          \u662f\u5426\u91cd\u65b0\u8bbe\u7f6e\u4e86timeout\uff0c\u7528\u4e8e\u54cd\u5e94\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\n          \u6807\u8bb0\u662f\u5426\u91cd\u65b0\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u7684\u6807\u8bb0  \n        */\n        keepAliveTimeoutSet: false  \n      };  \n      // \u76d1\u542ctcp\u4e0a\u7684\u6570\u636e\uff0c\u5f00\u59cb\u89e3\u6790http\u62a5\u6587  \n      state.onData = socketOnData.bind(undefined, \n                                          server, \n                                          socket, \n                                          parser, \n                                          state);  \n      state.onEnd = socketOnEnd.bind(undefined,\n                                        server, \n                                        socket, \n                                        parser, \n                                        state);  \n      state.onClose = socketOnClose.bind(undefined, socket, state);  \n      state.onDrain = socketOnDrain.bind(undefined, socket, state);  \n      socket.on('data', state.onData);  \n      socket.on('error', socketOnError);  \n      socket.on('end', state.onEnd);  \n      socket.on('close', state.onClose);  \n      socket.on('drain', state.onDrain);  \n      // \u89e3\u6790HTTP\u5934\u90e8\u5b8c\u6210\u540e\u6267\u884c\u7684\u56de\u8c03  \n      parser.onIncoming = parserOnIncoming.bind(undefined, \n                                                    server, \n                                                    socket, \n                                                    state);  \n      socket.on('resume', onSocketResume);  \n      socket.on('pause', onSocketPause);  \n\n      /*\n        \u5982\u679chandle\u662f\u7ee7\u627fStreamBase\u7684\u6d41\u5219\u6267\u884cconsume\u6d88\u8d39http\n        \u8bf7\u6c42\u62a5\u6587\uff0c\u800c\u4e0d\u662f\u4e0a\u9762\u7684onData\uff0ctcp\u6a21\u5757\u7684isStreamBase\u4e3atrue \n      */\n      if (socket._handle &amp;&amp; socket._handle.isStreamBase &amp;&amp;  \n          !socket._handle._consumed) {  \n        parser._consumed = true;  \n        socket._handle._consumed = true;  \n        parser.consume(socket._handle);  \n      }  \n      parser[kOnExecute] =  \n        onParserExecute.bind(undefined, \n                               server, \n                               socket, \n                               parser, \n                               state);  \n\n      socket._paused = false;  \n    }  \n</code></pre> <p>\u6267\u884c\u5b8cconnectionListener\u540e\u5c31\u5f00\u59cb\u7b49\u5f85tcp\u4e0a\u6570\u636e\u7684\u5230\u6765\uff0c\u5373HTTP\u8bf7\u6c42\u62a5\u6587\u3002\u4e0a\u9762\u4ee3\u7801\u4e2dNode.js\u76d1\u542c\u4e86socket\u7684data\u4e8b\u4ef6\uff0c\u540c\u65f6\u6ce8\u518c\u4e86\u94a9\u5b50kOnExecute\u3002data\u4e8b\u4ef6\u6211\u4eec\u90fd\u77e5\u9053\u662f\u6d41\u4e0a\u6709\u6570\u636e\u5230\u6765\u65f6\u89e6\u53d1\u7684\u4e8b\u4ef6\u3002\u6211\u4eec\u770b\u4e00\u4e0bsocketOnData\u505a\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002</p> <pre><code>    function socketOnData(server, socket, parser, state, d) {  \n      // \u4ea4\u7ed9HTTP\u89e3\u6790\u5668\u5904\u7406\uff0c\u8fd4\u56de\u5df2\u7ecf\u89e3\u6790\u7684\u5b57\u8282\u6570  \n      const ret = parser.execute(d);  \n      onParserExecuteCommon(server, socket, parser, state, ret, d);  \n    }  \n</code></pre> <p>socketOnData\u7684\u5904\u7406\u903b\u8f91\u662f\u5f53socket\u4e0a\u6709\u6570\u636e\uff0c\u7136\u540e\u4ea4\u7ed9HTTP\u89e3\u6790\u5668\u5904\u7406\u3002\u8fd9\u770b\u8d77\u6765\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u90a3\u4e48kOnExecute\u662f\u505a\u4ec0\u4e48\u7684\u5462\uff1fkOnExecute\u94a9\u5b50\u51fd\u6570\u7684\u503c\u662fonParserExecute\uff0c\u8fd9\u4e2a\u770b\u8d77\u6765\u4e5f\u662f\u89e3\u6790tcp\u4e0a\u7684\u6570\u636e\u7684\uff0c\u770b\u8d77\u6765\u548conSocketData\u662f\u4e00\u6837\u7684\u4f5c\u7528\uff0c\u96be\u9053tcp\u4e0a\u7684\u6570\u636e\u6709\u4e24\u4e2a\u6d88\u8d39\u8005\uff1f\u6211\u4eec\u770b\u4e00\u4e0bkOnExecute\u4ec0\u4e48\u65f6\u5019\u88ab\u56de\u8c03\u7684\u3002</p> <pre><code>    void OnStreamRead(ssize_t nread, const uv_buf_t&amp; buf) override {  \n\n        Local&lt;Value&gt; ret = Execute(buf.base, nread);  \n        Local&lt;Value&gt; cb =  \n            object()-&gt;Get(env()-&gt;context(), kOnExecute).ToLocalChecked();  \n        MakeCallback(cb.As&lt;Function&gt;(), 1, &amp;ret);  \n      }  \n</code></pre> <p>OnStreamRead\u662fnode_http_parser.cc\u5b9e\u73b0\u7684\u51fd\u6570\uff0c\u6240\u4ee5kOnExecute\u5728node_http_parser.cc\u4e2d\u7684OnStreamRead\u4e2d\u88ab\u56de\u8c03\uff0c\u90a3\u4e48OnStreamRead\u53c8\u662f\u4ec0\u4e48\u65f6\u5019\u88ab\u56de\u8c03\u7684\u5462\uff1f\u5728C++\u5c42\u7ae0\u8282\u6211\u4eec\u5206\u6790\u8fc7\uff0cOnStreamRead\u662fNode.js\u4e2dC++\u5c42\u6d41\u64cd\u4f5c\u7684\u901a\u7528\u51fd\u6570\uff0c\u5f53\u6d41\u6709\u6570\u636e\u7684\u65f6\u5019\u5c31\u4f1a\u6267\u884c\u8be5\u56de\u8c03\u3002\u800c\u4e14OnStreamRead\u4e2d\u4e5f\u4f1a\u628a\u6570\u636e\u4ea4\u7ed9HTTP\u89e3\u6790\u5668\u89e3\u6790\u3002\u8fd9\u770b\u8d77\u6765\u771f\u7684\u6709\u4e24\u4e2a\u6d88\u8d39\u8005\uff1f\u8fd9\u5c31\u5f88\u5947\u602a\uff0c\u4e3a\u4ec0\u4e48\u4e00\u4efd\u6570\u636e\u4f1a\u4ea4\u7ed9HTTP\u89e3\u6790\u5668\u5904\u7406\u4e24\u6b21\uff1f </p> <pre><code>    if (socket._handle &amp;&amp; socket._handle.isStreamBase &amp;&amp; !socket._handle._consumed) {  \n      parser._consumed = true;  \n      socket._handle._consumed = true;  \n      parser.consume(socket._handle);  \n    }  \n</code></pre> <p>\u56e0\u4e3aTCP\u6d41\u662f\u7ee7\u627fStreamBase\u7c7b\u7684\uff0c\u6240\u4ee5if\u6210\u7acb\u3002\u6211\u4eec\u770b\u4e00\u4e0bconsume\u7684\u5b9e\u73b0\u3002</p> <pre><code>    static void Consume(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Parser* parser;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;parser, args.Holder());  \n      CHECK(args[0]-&gt;IsObject());  \n      StreamBase* stream = StreamBase::FromObjject(args[0].As&lt;Object&gt;());  \n      CHECK_NOT_NULL(stream);  \n      stream-&gt;PushStreamListener(parser);  \n    }  \n</code></pre> <p>HTTP\u89e3\u6790\u5668\u628a\u81ea\u5df1\u6ce8\u518c\u4e3aTCP stream\u7684\u4e00\u4e2alistener\u3002\u8fd9\u4f1a\u4f7f\u5f97TCP\u6d41\u4e0a\u7684\u6570\u636e\u7531node_http_parser.cc\u7684OnStreamRead\u76f4\u63a5\u6d88\u8d39\uff0c\u800c\u4e0d\u662f\u89e6\u53d1onData\u4e8b\u4ef6\u3002\u5728OnStreamRead\u4e2d\u4f1a\u6e90\u6e90\u4e0d\u65ad\u5730\u628a\u6570\u636e\u4ea4\u7ed9HTTP\u89e3\u6790\u5668\u5904\u7406\uff0c\u5728\u89e3\u6790\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u4e0d\u65ad\u89e6\u53d1\u5bf9\u5e94\u7684\u94a9\u5b50\u51fd\u6570\uff0c\u76f4\u5230\u89e3\u6790\u5b8cHTTP\u5934\u90e8\u540e\u6267\u884cparserOnIncoming\u3002</p> <pre><code>    function parserOnIncoming(server, socket, state, req, keepAlive) {  \n      // \u9700\u8981\u91cd\u7f6e\u5b9a\u65f6\u5668  \n      resetSocketTimeout(server, socket, state);  \n      // \u8bbe\u7f6e\u4e86keepAlive\u5219\u54cd\u5e94\u540e\u9700\u8981\u91cd\u7f6e\u4e00\u4e9b\u72b6\u6001  \n      if (server.keepAliveTimeout &gt; 0) {  \n        req.on('end', resetHeadersTimeoutOnReqEnd);  \n      }  \n\n      // \u6807\u8bb0\u5934\u90e8\u89e3\u6790\u5b8c\u6bd5  \n      socket.parser.parsingHeadersStart = 0;  \n\n      // \u8bf7\u6c42\u5165\u961f\uff08\u5f85\u5904\u7406\u7684\u8bf7\u6c42\u961f\u5217\uff09  \n      state.incoming.push(req);  \n\n      if (!socket._paused) {  \n        const ws = socket._writableState;  \n        // \u5f85\u53d1\u9001\u7684\u6570\u636e\u8fc7\u591a\uff0c\u5148\u6682\u505c\u63a5\u6536\u8bf7\u6c42\u6570\u636e  \n        if (ws.needDrain || \n            state.outgoingData &gt;= socket.writableHighWaterMark) {  \n          socket._paused = true;  \n          socket.pause();  \n        }  \n      }  \n      // \u65b0\u5efa\u4e00\u4e2a\u8868\u793a\u54cd\u5e94\u7684\u5bf9\u8c61  \n      const res = new server[kServerResponse](req);  \n      // \u8bbe\u7f6e\u6570\u636e\u5199\u5165\u5f85\u53d1\u9001\u961f\u5217\u65f6\u89e6\u53d1\u7684\u56de\u8c03\uff0c\u89c1OutgoingMessage  \n      res._onPendingData = updateOutgoingData.bind(undefined, \n                                                        socket, \n                                                        state);  \n      // \u6839\u636e\u8bf7\u6c42\u7684HTTP\u5934\u8bbe\u7f6e\u662f\u5426\u652f\u6301keepalive\uff08\u7ba1\u9053\u5316\uff09  \n      res.shouldKeepAlive = keepAlive;  \n      /*\n         socket\u5f53\u524d\u5df2\u7ecf\u5728\u5904\u7406\u5176\u5b83\u8bf7\u6c42\u7684\u54cd\u5e94\uff0c\u5219\u5148\u6392\u961f\uff0c\n         \u5426\u5219\u6302\u8f7d\u54cd\u5e94\u5bf9\u8c61\u5230socket\uff0c\u4f5c\u4e3a\u5f53\u524d\u5904\u7406\u7684\u54cd\u5e94  \n      */\n      if (socket._httpMessage) {  \n        state.outgoing.push(res);  \n      } else {  \n        res.assignSocket(socket);  \n      }  \n\n      // \u54cd\u5e94\u5904\u7406\u5b8c\u6bd5\u540e\uff0c\u9700\u8981\u505a\u4e00\u4e9b\u5904\u7406  \n      res.on('finish',  \n             resOnFinish.bind(undefined, \n                                req, \n                                res, \n                                socket, \n                                state, \n                                server));  \n      // \u6709expect\u8bf7\u6c42\u5934\uff0c\u5e76\u4e14\u662fhttp1.1  \n      if (req.headers.expect !== undefined &amp;&amp;  \n          (req.httpVersionMajor === 1 &amp;&amp; \n           req.httpVersionMinor === 1)\n         ) {  \n        // Expect\u5934\u7684\u503c\u662f\u5426\u662f100-continue  \n        if (continueExpression.test(req.headers.expect)) {  \n          res._expect_continue = true;  \n          /*\n            \u76d1\u542c\u4e86checkContinue\u4e8b\u4ef6\u5219\u89e6\u53d1\uff0c\n            \u5426\u5219\u76f4\u63a5\u8fd4\u56de\u5141\u8bb8\u7ee7\u7eed\u8bf7\u6c42\u5e76\u89e6\u53d1request\u4e8b\u4ef6\n           */  \n          if (server.listenerCount('checkContinue') &gt; 0) {  \n            server.emit('checkContinue', req, res);  \n          } else {  \n            res.writeContinue();  \n            server.emit('request', req, res);  \n          }  \n        } else if (server.listenerCount('checkExpectation') &gt; 0) {  \n          /*\n            \u503c\u5f02\u5e38\uff0c\u76d1\u542c\u4e86checkExpectation\u4e8b\u4ef6\uff0c\n            \u5219\u89e6\u53d1\uff0c\u5426\u5219\u8fd4\u56de417\u62d2\u7edd\u8bf7\u6c42 \n           */ \n          server.emit('checkExpectation', req, res);  \n        } else {  \n          res.writeHead(417);  \n          res.end();  \n        }  \n      } else {  \n        // \u89e6\u53d1request\u4e8b\u4ef6\u8bf4\u660e\u6709\u8bf7\u6c42\u5230\u6765  \n        server.emit('request', req, res);  \n      }  \n      return 0;  // No special treatment.  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u8fd9\u91cc\u4f1a\u89e6\u53d1request\u4e8b\u4ef6\u901a\u77e5\u7528\u6237\u6709\u65b0\u8bf7\u6c42\u5230\u6765\uff0c\u7528\u6237\u5c31\u53ef\u4ee5\u5904\u7406\u8bf7\u6c42\u4e86\u3002\u6211\u4eec\u770b\u5230Node.js\u89e3\u6790\u5934\u90e8\u7684\u65f6\u5019\u5c31\u4f1a\u6267\u884c\u4e0a\u5c42\u56de\u8c03\uff0c\u901a\u77e5\u6709\u65b0\u8bf7\u6c42\u5230\u6765\uff0c\u5e76\u4f20\u5165request\u548cresponse\u4f5c\u4e3a\u53c2\u6570\uff0c\u5206\u522b\u5bf9\u5e94\u7684\u662f\u8868\u793a\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u5bf9\u8c61\u3002\u53e6\u5916Node.js\u672c\u8eab\u662f\u4e0d\u4f1a\u89e3\u6790body\u90e8\u5206\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u83b7\u53d6body\u7684\u6570\u636e\u3002</p> <pre><code>    const server = http.createServer((request, response) =&gt; {  \n      request.on('data', (chunk) =&gt; {  \n       // \u5904\u7406body  \n      });  \n      request.on('end', () =&gt; {  \n       // body\u7ed3\u675f  \n      });  \n    })  \n</code></pre>"},{"location":"chapter18-HTTP/#1831-http","title":"18.3.1 HTTP\u7ba1\u9053\u5316\u7684\u539f\u7406\u548c\u5b9e\u73b0","text":"<p>HTTP1.0\u7684\u65f6\u5019\uff0c\u4e0d\u652f\u6301\u7ba1\u9053\u5316\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u9996\u5148\u5efa\u7acbTCP\u8fde\u63a5\uff0c\u7136\u540e\u670d\u52a1\u5668\u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\uff0c\u6700\u540e\u65ad\u5f00TCP\u8fde\u63a5\uff0c\u8fd9\u79cd\u662f\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u4f46\u662f\u6bcf\u6b21\u53d1\u9001\u8bf7\u6c42\u90fd\u9700\u8981\u8d70\u4e09\u6b21\u63e1\u624b\u663e\u7136\u4f1a\u5e26\u6765\u4e00\u5b9a\u7684\u65f6\u95f4\u635f\u8017\uff0c\u6240\u4ee5HTTP1.1\u7684\u65f6\u5019\uff0c\u652f\u6301\u4e86\u7ba1\u9053\u5316\u3002\u7ba1\u9053\u5316\u7684\u610f\u601d\u5c31\u662f\u53ef\u4ee5\u5728\u4e00\u4e2aTCP\u8fde\u63a5\u4e0a\u53d1\u9001\u591a\u4e2a\u8bf7\u6c42\uff0c\u8fd9\u6837\u670d\u52a1\u5668\u5c31\u53ef\u4ee5\u540c\u65f6\u5904\u7406\u591a\u4e2a\u8bf7\u6c42\uff0c\u4f46\u662f\u7531\u4e8eHTTP1.1\u7684\u9650\u5236\uff0c\u591a\u4e2a\u8bf7\u6c42\u7684\u54cd\u5e94\u9700\u8981\u6309\u5e8f\u8fd4\u56de\u3002\u56e0\u4e3a\u5728HTTP1.1\u4e2d\uff0c\u6ca1\u6709\u6807\u8bb0\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u6240\u4ee5HTTP\u5ba2\u6237\u7aef\u4f1a\u5047\u8bbe\u7b2c\u4e00\u4e2a\u8fd4\u56de\u7684\u54cd\u5e94\u662f\u5bf9\u5e94\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u7684\u3002\u5982\u679c\u4e71\u5e8f\u8fd4\u56de\uff0c\u5c31\u4f1a\u5bfc\u81f4\u95ee\u9898\uff0c\u5982\u56fe18-2\u6240\u793a\u3002  \u56fe18-2 \u800c\u5728HTTP 2.0\u4e2d\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u4f1a\u5206\u914d\u4e00\u4e2aid\uff0c\u54cd\u5e94\u4e2d\u4e5f\u4f1a\u8fd4\u56de\u5bf9\u5e94\u7684id\uff0c\u8fd9\u6837\u5c31\u7b97\u4e71\u5e8f\u8fd4\u56de\uff0cHTTP\u5ba2\u6237\u7aef\u4e5f\u53ef\u4ee5\u77e5\u9053\u54cd\u5e94\u6240\u5bf9\u5e94\u7684\u8bf7\u6c42\u3002\u5728HTTP 1.1\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cHTTP\u670d\u52a1\u5668\u7684\u5b9e\u73b0\u5c31\u4f1a\u53d8\u5f97\u590d\u6742\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u4ee5\u4e32\u884c\u7684\u65b9\u5f0f\u5904\u7406\u8bf7\u6c42\uff0c\u5f53\u524d\u9762\u8bf7\u6c42\u7684\u54cd\u5e94\u8fd4\u56de\u5230\u5ba2\u6237\u7aef\u540e\uff0c\u518d\u7ee7\u7eed\u5904\u7406\u4e0b\u4e00\u4e2a\u8bf7\u6c42\uff0c\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u662f\u76f8\u5bf9\u7b80\u5355\u7684\uff0c\u4f46\u662f\u5f88\u660e\u663e\uff0c\u8fd9\u79cd\u65b9\u5f0f\u76f8\u5bf9\u6765\u8bf4\u8fd8\u662f\u6bd4\u8f83\u4f4e\u6548\u7684\uff0c\u53e6\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u662f\u5e76\u884c\u5904\u7406\u8bf7\u6c42\uff0c\u4e32\u884c\u8fd4\u56de\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u8bf7\u6c42\u5f97\u5230\u5c3d\u5feb\u7684\u5904\u7406\uff0c\u6bd4\u5982\u4e24\u4e2a\u8bf7\u6c42\u90fd\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u90a3\u5e76\u884c\u5904\u7406\u4e24\u4e2a\u8bf7\u6c42\u5c31\u4f1a\u6bd4\u4e32\u884c\u5feb\u5f97\u591a\uff0c\u4f46\u662f\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u76f8\u5bf9\u6bd4\u8f83\u590d\u6742\uff0cNode.js\u5c31\u662f\u5c5e\u4e8e\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0bNode.js\u4e2d\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\u524d\u9762\u5206\u6790\u8fc7\uff0cNode.js\u5728\u89e3\u6790\u5b8cHTTP\u5934\u90e8\u7684\u65f6\u5019\u4f1a\u6267\u884cparserOnIncoming\u3002</p> <pre><code>    function parserOnIncoming(server, socket, state, req, keepAlive) {  \n      // \u6807\u8bb0\u5934\u90e8\u89e3\u6790\u5b8c\u6bd5  \n      socket.parser.parsingHeadersStart = 0;  \n      // \u8bf7\u6c42\u5165\u961f  \n      state.incoming.push(req);  \n      // \u65b0\u5efa\u4e00\u4e2a\u8868\u793a\u54cd\u5e94\u7684\u5bf9\u8c61\uff0c\u4e00\u822c\u662fServerResponse  \n      const res = new server[kServerResponse](req);  \n      /*\n        socket\u5f53\u524d\u5df2\u7ecf\u5728\u5904\u7406\u5176\u5b83\u8bf7\u6c42\u7684\u54cd\u5e94\uff0c\u5219\u5148\u6392\u961f\uff0c\n       \u5426\u5219\u6302\u8f7d\u54cd\u5e94\u5bf9\u8c61\u5230socket\uff0c\u4f5c\u4e3a\u5f53\u524d\u5904\u7406\u7684\u54cd\u5e94\n      */  \n      if (socket._httpMessage) {  \n        state.outgoing.push(res);  \n      } else {  \n        res.assignSocket(socket); // socket._httpMessage = res;  \n      }  \n      // \u54cd\u5e94\u5904\u7406\u5b8c\u6bd5\u540e\uff0c\u9700\u8981\u505a\u4e00\u4e9b\u5904\u7406  \n      res.on('finish', resOnFinish.bind(undefined, \n                                            req, \n                                            res, \n                                            socket, \n                                            state, \n                                            server));  \n      // \u89e6\u53d1request\u4e8b\u4ef6\u8bf4\u660e\u6709\u8bf7\u6c42\u5230\u6765  \n      server.emit('request', req, res);  \n      return 0;  \n    }  \n</code></pre> <p>\u5f53Node.js\u89e3\u6790HTTP\u8bf7\u6c42\u5934\u5b8c\u6210\u540e\uff0c\u5c31\u4f1a\u521b\u5efa\u4e00\u4e2aServerResponse\u5bf9\u8c61\u8868\u793a\u54cd\u5e94\u3002\u7136\u540e\u5224\u65ad\u5f53\u524d\u662f\u5426\u6709\u6b63\u5728\u5904\u7406\u7684\u54cd\u5e94\uff0c\u5982\u679c\u6709\u5219\u6392\u961f\u7b49\u5f85\u5904\u7406\uff0c\u5426\u5219\u628a\u65b0\u5efa\u7684ServerResponse\u5bf9\u8c61\u4f5c\u4e3a\u5f53\u524d\u9700\u8981\u5904\u7406\u7684\u54cd\u5e94\u3002\u6700\u540e\u89e6\u53d1request\u4e8b\u4ef6\u901a\u77e5\u7528\u6237\u5c42\u3002\u7528\u6237\u5c31\u53ef\u4ee5\u8fdb\u884c\u8bf7\u6c42\u7684\u5904\u7406\u4e86\u3002\u6211\u4eec\u770b\u5230Node.js\u7ef4\u62a4\u4e86\u4e24\u4e2a\u961f\u5217\uff0c\u5206\u522b\u662f\u8bf7\u6c42\u548c\u54cd\u5e94\u961f\u5217\uff0c\u5982\u56fe18-3\u6240\u793a\u3002  \u56fe18-3 \u5f53\u524d\u5904\u7406\u7684\u8bf7\u6c42\u5728\u8bf7\u6c42\u961f\u5217\u7684\u961f\u9996\uff0c\u8be5\u8bf7\u6c42\u5bf9\u5e94\u7684\u54cd\u5e94\u4f1a\u6302\u8f7d\u5230socket\u7684_httpMessage\u5c5e\u6027\u4e0a\u3002\u4f46\u662f\u6211\u4eec\u770b\u5230Node.js\u4f1a\u89e6\u53d1request\u4e8b\u4ef6\u901a\u77e5\u7528\u6237\u6709\u65b0\u8bf7\u6c42\u5230\u6765\uff0c\u6240\u6709\u5728\u7ba1\u9053\u5316\u7684\u60c5\u51b5\u4e0b\uff0cNode.js\u4f1a\u5e76\u884c\u5904\u7406\u591a\u4e2a\u8bf7\u6c42\uff08\u5982\u679c\u662fcpu\u5bc6\u96c6\u578b\u7684\u8bf7\u6c42\u5219\u5b9e\u9645\u4e0a\u8fd8\u662f\u4f1a\u53d8\u6210\u4e32\u884c\uff0c\u8fd9\u548cNode.js\u7684\u5355\u7ebf\u7a0b\u76f8\u5173\uff09\u3002\u90a3Node.js\u662f\u5982\u4f55\u63a7\u5236\u54cd\u5e94\u7684\u987a\u5e8f\u7684\u5462\uff1f\u6211\u4eec\u77e5\u9053\u6bcf\u6b21\u89e6\u53d1request\u4e8b\u4ef6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u90fd\u4f1a\u6267\u884c\u4e00\u4e2a\u51fd\u6570\u3002\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u3002</p> <pre><code>     http.createServer((req, res) =&gt; {  \n      // \u4e00\u4e9b\u7f51\u7edcIO  \n      res.writeHead(200, { 'Content-Type': 'text/plain' });  \n      res.end('okay');  \n    });  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u6bcf\u4e2a\u8bf7\u6c42\u7684\u5904\u7406\u662f\u72ec\u7acb\u7684\u3002\u5047\u8bbe\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u53bb\u64cd\u4f5c\u6570\u636e\u5e93\uff0c\u5982\u679c\u8bf7\u6c422\u6bd4\u8bf7\u6c421\u5148\u5b8c\u6210\u6570\u636e\u5e93\u7684\u64cd\u4f5c\uff0c\u4ece\u800c\u8bf7\u6c422\u5148\u6267\u884cres.write\u548cres.end\u3002\u90a3\u5c82\u4e0d\u662f\u8bf7\u6c422\u5148\u8fd4\u56de\uff1f\u6211\u4eec\u770b\u4e00\u4e0bServerResponse\u548cOutgoingMessage\u7684\u5b9e\u73b0\uff0c\u63ed\u5f00\u8ff7\u96fe\u3002ServerResponse\u662fOutgoingMessage\u7684\u5b50\u7c7b\u3002write\u51fd\u6570\u662f\u5728OutgoingMessage\u4e2d\u5b9e\u73b0\u7684\uff0cwrite\u7684\u8c03\u7528\u94fe\u8def\u5f88\u957f\uff0c\u6211\u4eec\u4e0d\u5c42\u5c42\u5206\u6790\uff0c\u76f4\u63a5\u770b\u6700\u540e\u7684\u8282\u70b9\u3002</p> <pre><code>    function _writeRaw(data, encoding, callback) {  \n      const conn = this.socket;  \n      // socket\u5bf9\u5e94\u7684\u54cd\u5e94\u662f\u81ea\u5df1\u5e76\u4e14\u53ef\u5199  \n      if (conn &amp;&amp; conn._httpMessage === this &amp;&amp; conn.writable) {  \n        // \u5982\u679c\u6709\u7f13\u5b58\u7684\u6570\u636e\u5219\u5148\u53d1\u9001\u7f13\u5b58\u7684\u6570\u636e  \n        if (this.outputData.length) {  \n          this._flushOutput(conn);  \n        }  \n        // \u63a5\u7740\u53d1\u9001\u5f53\u524d\u9700\u8981\u53d1\u9001\u7684  \n        return conn.write(data, encoding, callback);  \n      }  \n      // socket\u5f53\u524d\u5904\u7406\u7684\u54cd\u5e94\u5bf9\u8c61\u4e0d\u662f\u81ea\u5df1\uff0c\u5219\u5148\u7f13\u5b58\u6570\u636e\u3002  \n      this.outputData.push({ data, encoding, callback });  \n      this.outputSize += data.length;  \n      this._onPendingData(data.length);  \n      return this.outputSize &lt; HIGH_WATER_MARK;  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u6211\u4eec\u8c03\u7528res.write\u7684\u65f6\u5019\uff0cNode.js\u4f1a\u9996\u5148\u5224\u65ad\uff0cres\u662f\u4e0d\u662f\u5c5e\u4e8e\u5f53\u524d\u5904\u7406\u4e2d\u54cd\u5e94\uff0c\u5982\u679c\u662f\u624d\u4f1a\u771f\u6b63\u53d1\u9001\u6570\u636e\uff0c\u5426\u5219\u4f1a\u5148\u628a\u6570\u636e\u7f13\u5b58\u8d77\u6765\u3002\u5206\u6790\u5230\u8fd9\u91cc\uff0c\u76f8\u4fe1\u5927\u5bb6\u5df2\u7ecf\u5dee\u4e0d\u591a\u660e\u767dNode.js\u662f\u5982\u4f55\u63a7\u5236\u54cd\u5e94\u6309\u5e8f\u8fd4\u56de\u7684\u3002\u6700\u540e\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e9b\u7f13\u5b58\u7684\u6570\u636e\u4ec0\u4e48\u65f6\u5019\u4f1a\u88ab\u53d1\u9001\u51fa\u53bb\u3002\u524d\u9762\u4ee3\u7801\u5df2\u7ecf\u8d34\u8fc7\uff0c\u5f53\u4e00\u4e2a\u54cd\u5e94\u7ed3\u675f\u7684\u65f6\u5019\uff0cNode.js\u4f1a\u505a\u4e00\u4e9b\u5904\u7406\u3002</p> <pre><code>    res.on('finish', resOnFinish.bind(undefined, \n                                         req, \n                                         res, \n                                         socket, \n                                         state, \n                                         server));  \n</code></pre> <p>\u6211\u4eec\u770b\u770bresOnFinish</p> <pre><code>    function resOnFinish(req, res, socket, state, server) {  \n      // \u5220\u9664\u54cd\u5e94\u5bf9\u5e94\u7684\u8bf7\u6c42  \n      state.incoming.shift();  \n      clearIncoming(req);  \n      // \u89e3\u9664socket\u4e0a\u6302\u8f7d\u7684\u54cd\u5e94\u5bf9\u8c61  \n      res.detachSocket(socket);  \n      req.emit('close');  \n      process.nextTick(emitCloseNT, res);  \n      // \u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u54cd\u5e94  \n      if (res._last) {  \n        // \u662f\u5219\u9500\u6bc1socket  \n        if (typeof socket.destroySoon === 'function') {  \n          socket.destroySoon();  \n        } else {  \n          socket.end();  \n        }  \n      } else if (state.outgoing.length === 0) {  \n        /*\n          \u6ca1\u6709\u5f85\u5904\u7406\u7684\u54cd\u5e94\u4e86\uff0c\u5219\u91cd\u65b0\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\n          \u7b49\u5f85\u8bf7\u6c42\u7684\u5230\u6765\uff0c\u4e00\u5b9a\u65f6\u95f4\u5185\u6ca1\u6709\u8bf7\u6c42\u5219\u89e6\u53d1timeout\u4e8b\u4ef6\n        */  \n        if (server.keepAliveTimeout &amp;&amp; \n             typeof socket.setTimeout === 'function') {  \n          socket.setTimeout(server.keepAliveTimeout);  \n          state.keepAliveTimeoutSet = true;  \n        }  \n      } else {  \n        // \u83b7\u53d6\u4e0b\u4e00\u4e2a\u8981\u5904\u7406\u7684\u54cd\u5e94  \n        const m = state.outgoing.shift();  \n        // \u6302\u8f7d\u5230socket\u4f5c\u4e3a\u5f53\u524d\u5904\u7406\u7684\u54cd\u5e94  \n        if (m) {  \n          m.assignSocket(socket);  \n        }  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\uff0cNode.js\u5904\u7406\u5b8c\u4e00\u4e2a\u54cd\u5e94\u540e\uff0c\u4f1a\u505a\u4e00\u4e9b\u5224\u65ad\u3002\u5206\u522b\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5206\u5f00\u5206\u6790\u3002 1 \u662f\u5426\u662f\u6700\u540e\u4e00\u4e2a\u54cd\u5e94 \u4ec0\u4e48\u60c5\u51b5\u4e0b\uff0c\u4f1a\u88ab\u8ba4\u4e3a\u662f\u6700\u540e\u4e00\u4e2a\u54cd\u5e94\u7684\uff1f\u56e0\u4e3a\u54cd\u5e94\u548c\u8bf7\u6c42\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u6700\u540e\u4e00\u4e2a\u54cd\u5e94\u5c31\u610f\u5473\u7740\u6700\u540e\u4e00\u4e2a\u8bf7\u6c42\u4e86\uff0c\u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u88ab\u8ba4\u4e3a\u662f\u6700\u540e\u4e00\u4e2a\u8bf7\u6c42\u5462\uff1f\u5f53\u975e\u7ba1\u9053\u5316\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u8bf7\u6c42\u4e00\u4e2a\u54cd\u5e94\uff0c\u7136\u540e\u5173\u95edTCP\u8fde\u63a5\uff0c\u6240\u4ee5\u975e\u7ba1\u9053\u5316\u7684\u60c5\u51b5\u4e0b\uff0ctcp\u4e0a\u7684\u7b2c\u4e00\u4e2a\u4e5f\u662f\u552f\u4e00\u4e00\u4e2a\u8bf7\u6c42\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u8bf7\u6c42\u3002\u5728\u7ba1\u9053\u5316\u7684\u60c5\u51b5\u4e0b\uff0c\u7406\u8bba\u4e0a\u5c31\u6ca1\u6709\u6240\u8c13\u7684\u6700\u540e\u4e00\u4e2a\u54cd\u5e94\u3002\u4f46\u662f\u5b9e\u73b0\u4e0a\u4f1a\u505a\u4e00\u4e9b\u9650\u5236\u3002\u5728\u7ba1\u9053\u5316\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e00\u4e2a\u54cd\u5e94\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6eHTTP\u54cd\u5e94\u5934connection\u6765\u5b9a\u4e49\u662f\u5426\u53d1\u9001\u8be5\u54cd\u5e94\u540e\u5c31\u65ad\u5f00\u8fde\u63a5\uff0c\u6211\u4eec\u770b\u4e00\u4e0bNode.js\u7684\u5b9e\u73b0\u3002</p> <pre><code>    // \u662f\u5426\u663e\u793a\u5220\u9664\u8fc7connection\u5934\uff0c\u662f\u5219\u54cd\u5e94\u540e\u65ad\u5f00\u8fde\u63a5\uff0c\u5e76\u6807\u8bb0\u5f53\u524d\u54cd\u5e94\u662f\u6700\u540e\u4e00\u4e2a  \n     if (this._removedConnection) {  \n       this._last = true;  \n       this.shouldKeepAlive = false;  \n     } else if (!state.connection) {  \n       /* \n        \u6ca1\u6709\u663e\u793a\u8bbe\u7f6e\u4e86connection\u5934\uff0c\u5219\u53d6\u9ed8\u8ba4\u884c\u4e3a \n        1 Node.js\u7684shouldKeepAlive\u9ed8\u8ba4\u4e3atrue\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u8bf7\u6c42\u62a5\u6587\u91cc\n          \u7684connection\u5934\u5b9a\u4e49\n       2 \u8bbe\u7f6econtent-length\u6216\u4f7f\u7528chunk\u6a21\u5f0f\u624d\u80fd\u533a\u5206\u54cd\u5e94\u62a5\u6587\u7f16\u8fb9\u754c\uff0c\n          \u624d\u80fd\u652f\u6301keepalive \n       3 \u4f7f\u7528\u4e86\u4ee3\u7406\uff0c\u4ee3\u7406\u662f\u590d\u7528TCP\u8fde\u63a5\u7684\uff0c\u652f\u6301keepalive \n       */  \n       const shouldSendKeepAlive = this.shouldKeepAlive &amp;&amp;  \n           (state.contLen || \n             this.useChunkedEncodingByDefault || \n             this.agent);  \n       if (shouldSendKeepAlive) {  \n         header += 'Connection: keep-alive\\r\\n';  \n       } else {  \n         this._last = true;  \n         header += 'Connection: close\\r\\n';  \n       }  \n     }  \n</code></pre> <p>\u53e6\u5916\u5f53\u8bfb\u7aef\u5173\u95ed\u7684\u65f6\u5019\uff0c\u4e5f\u88ab\u8ba4\u4e3a\u662f\u6700\u540e\u4e00\u4e2a\u8bf7\u6c42\uff0c\u6bd5\u7adf\u4e0d\u4f1a\u518d\u53d1\u9001\u8bf7\u6c42\u4e86\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u8bfb\u7aef\u5173\u95ed\u7684\u903b\u8f91\u3002</p> <pre><code>    function socketOnEnd(server, socket, parser, state) {  \n      const ret = parser.finish();  \n\n      if (ret instanceof Error) {  \n        socketOnError.call(socket, ret);  \n        return;  \n      }  \n      // \u4e0d\u5141\u8bb8\u534a\u5f00\u5173\u5219\u7ec8\u6b62\u8bf7\u6c42\u7684\u5904\u7406\uff0c\u4e0d\u54cd\u5e94\uff0c\u5173\u95ed\u5199\u7aef  \n      if (!server.httpAllowHalfOpen) {  \n        abortIncoming(state.incoming);  \n        if (socket.writable) socket.end();  \n      } else if (state.outgoing.length) {  \n        /*\n          \u5141\u8bb8\u534a\u5f00\u5173\uff0c\u5e76\u4e14\u8fd8\u6709\u54cd\u5e94\u9700\u8981\u5904\u7406\uff0c\n          \u6807\u8bb0\u54cd\u5e94\u961f\u5217\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e3a\u6700\u540e\u7684\u54cd\u5e94\uff0c\n          \u5904\u7406\u5b8c\u5c31\u5173\u95edsocket\u5199\u7aef\n        */  \n        state.outgoing[state.outgoing.length - 1]._last = true;  \n      } else if (socket._httpMessage) {  \n        /*\n          \u6ca1\u6709\u7b49\u5f85\u5904\u7406\u7684\u54cd\u5e94\u4e86\uff0c\u4f46\u662f\u8fd8\u6709\u6b63\u5728\u5904\u7406\u7684\u54cd\u5e94\uff0c\n          \u5219\u6807\u8bb0\u4e3a\u6700\u540e\u4e00\u4e2a\u54cd\u5e94\n         */  \n        socket._httpMessage._last = true;  \n      } else if (socket.writable) {  \n        // \u5426\u5219\u5173\u95edsocket\u5199\u7aef  \n        socket.end();  \n      }  \n    }  \n</code></pre> <p>\u4ee5\u4e0a\u5c31\u662fNode.js\u4e2d\u5224\u65ad\u662f\u5426\u662f\u6700\u540e\u4e00\u4e2a\u54cd\u5e94\u7684\u60c5\u51b5\uff0c\u5982\u679c\u4e00\u4e2a\u54cd\u5e94\u88ab\u8ba4\u4e3a\u662f\u6700\u540e\u4e00\u4e2a\u54cd\u5e94\uff0c\u90a3\u4e48\u53d1\u9001\u54cd\u5e94\u540e\u5c31\u4f1a\u5173\u95ed\u8fde\u63a5\u3002 2 \u54cd\u5e94\u961f\u5217\u4e3a\u7a7a \u6211\u4eec\u7ee7\u7eed\u770b\u4e00\u4e0b\u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u54cd\u5e94\u7684\u65f6\u5019\uff0cNode.js\u53c8\u662f\u600e\u4e48\u5904\u7406\u7684\u3002\u5982\u679c\u5f53\u524d\u7684\u5f85\u5904\u7406\u54cd\u5e94\u961f\u5217\u4e3a\u7a7a\uff0c\u8bf4\u660e\u5f53\u524d\u5904\u7406\u7684\u54cd\u5e94\u662f\u76ee\u524d\u6700\u540e\u4e00\u4e2a\u9700\u8981\u5904\u7406\u7684\uff0c\u4f46\u662f\u4e0d\u662fTCP\u8fde\u63a5\u4e0a\u6700\u540e\u4e00\u4e2a\u54cd\u5e94\uff0c\u8fd9\u65f6\u5019\uff0cNode.js\u4f1a\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\u5982\u679c\u8d85\u65f6\u8fd8\u6ca1\u6709\u65b0\u7684\u8bf7\u6c42\uff0c\u5219Node.js\u4f1a\u5173\u95ed\u8fde\u63a5\u3002 3 \u54cd\u5e94\u961f\u5217\u975e\u7a7a \u5982\u679c\u5f53\u524d\u5f85\u5904\u7406\u961f\u5217\u975e\u7a7a\uff0c\u5904\u7406\u5b8c\u5f53\u524d\u8bf7\u6c42\u540e\u4f1a\u7ee7\u7eed\u5904\u7406\u4e0b\u4e00\u4e2a\u54cd\u5e94\u3002\u5e76\u4ece\u961f\u5217\u4e2d\u5220\u9664\u8be5\u54cd\u5e94\u3002\u6211\u4eec\u770b\u4e00\u4e0bNode.js\u662f\u5982\u4f55\u5904\u7406\u4e0b\u4e00\u4e2a\u54cd\u5e94\u7684\u3002 <pre><code>    // \u628a\u54cd\u5e94\u5bf9\u8c61\u6302\u8f7d\u5230socket\uff0c\u6807\u8bb0socket\u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u54cd\u5e94  \n    ServerResponse.prototype.assignSocket = function assignSocket(socket) {  \n      // \u6302\u8f7d\u5230socket\u4e0a\uff0c\u6807\u8bb0\u662f\u5f53\u524d\u5904\u7406\u7684\u54cd\u5e94  \n      socket._httpMessage = this;  \n      socket.on('close', onServerResponseClose);  \n      this.socket = socket;  \n      this.emit('socket', socket);  \n      this._flush();  \n    };  \n</code></pre></p> <p>\u6211\u4eec\u770b\u5230Node.js\u662f\u901a\u8fc7_httpMessage\u6807\u8bb0\u5f53\u524d\u5904\u7406\u7684\u54cd\u5e94\u7684\uff0c\u914d\u5408\u54cd\u5e94\u961f\u5217\u6765\u5b9e\u73b0\u54cd\u5e94\u7684\u6309\u5e8f\u8fd4\u56de\u3002\u6807\u8bb0\u5b8c\u540e\u6267\u884c_flush\u53d1\u9001\u54cd\u5e94\u7684\u6570\u636e\uff08\u5982\u679c\u8fd9\u65f6\u5019\u8bf7\u6c42\u5df2\u7ecf\u88ab\u5904\u7406\u5b8c\u6210\uff09</p> <pre><code>    OutgoingMessage.prototype._flush = function _flush() {  \n      const socket = this.socket;  \n      if (socket &amp;&amp; socket.writable) {  \n        const ret = this._flushOutput(socket);  \n    };  \n\n    OutgoingMessage.prototype._flushOutput = function _flushOutput(socket) {  \n      // \u4e4b\u524d\u8bbe\u7f6e\u4e86\u52a0\u585e\uff0c\u5219\u64cd\u4f5csocket\u5148\u79ef\u6512\u6570\u636e  \n      while (this[kCorked]) {  \n        this[kCorked]--;  \n        socket.cork();  \n      }  \n\n      const outputLength = this.outputData.length;  \n      // \u6ca1\u6709\u6570\u636e\u9700\u8981\u53d1\u9001  \n      if (outputLength &lt;= 0)  \n        return undefined;  \n\n      const outputData = this.outputData;  \n      // \u52a0\u585e\uff0c\u8ba9\u6570\u636e\u4e00\u8d77\u53d1\u9001\u51fa\u53bb  \n      socket.cork();  \n      // \u628a\u7f13\u5b58\u7684\u6570\u636e\u5199\u5230socket  \n      let ret;  \n      for (let i = 0; i &lt; outputLength; i++) {  \n        const { data, encoding, callback } = outputData[i];  \n        ret = socket.write(data, encoding, callback);  \n      }  \n      socket.uncork();  \n\n      this.outputData = [];  \n      this._onPendingData(-this.outputSize);  \n      this.outputSize = 0;  \n\n      return ret;  \n    }  \n</code></pre> <p>\u4ee5\u4e0a\u5c31\u662fNode.js\u4e2d\u5bf9\u4e8e\u7ba1\u9053\u5316\u7684\u5b9e\u73b0\u3002</p>"},{"location":"chapter18-HTTP/#1832-http-connect","title":"18.3.2 HTTP Connect\u65b9\u6cd5\u7684\u539f\u7406\u548c\u5b9e\u73b0","text":"<p>\u5206\u6790HTTP Connect\u5b9e\u73b0\u4e4b\u524d\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u9700\u8981HTTP Connect\u65b9\u6cd5\u6216\u8005\u8bf4\u5b83\u51fa\u73b0\u7684\u80cc\u666f\u3002Connect\u65b9\u6cd5\u4e3b\u8981\u7528\u4e8e\u4ee3\u7406\u670d\u52a1\u5668\u7684\u8bf7\u6c42\u8f6c\u53d1\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u4f20\u7edfHTTP\u670d\u52a1\u5668\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5982\u56fe18-4\u6240\u793a\u3002  \u56fe18-4 1 \u5ba2\u6237\u7aef\u548c\u4ee3\u7406\u670d\u52a1\u5668\u5efa\u7acbTCP\u8fde\u63a5 2 \u5ba2\u6237\u7aef\u53d1\u9001HTTP\u8bf7\u6c42\u7ed9\u4ee3\u7406\u670d\u52a1\u5668 3 \u4ee3\u7406\u670d\u52a1\u5668\u89e3\u6790HTTP\u534f\u8bae\uff0c\u6839\u636e\u914d\u7f6e\u62ff\u5230\u4e1a\u52a1\u670d\u52a1\u5668\u7684\u5730\u5740 4 \u4ee3\u7406\u670d\u52a1\u5668\u548c\u4e1a\u52a1\u670d\u52a1\u5668\u5efa\u7acbTCP\u8fde\u63a5\uff0c\u901a\u8fc7HTTP\u534f\u8bae\u6216\u8005\u5176\u5b83\u534f\u8bae\u8f6c\u53d1\u8bf7\u6c42 5 \u4e1a\u52a1\u670d\u52a1\u5668\u8fd4\u56de\u6570\u636e\uff0c\u4ee3\u7406\u670d\u52a1\u5668\u56de\u590dHTTP\u62a5\u6587\u7ed9\u5ba2\u6237\u7aef\u3002  </p> <p>\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0bHTTPS\u670d\u52a1\u5668\u7684\u539f\u7406\u3002 1 \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u5efa\u7acbTCP\u8fde\u63a5 2 \u670d\u52a1\u5668\u901a\u8fc7TLS\u62a5\u6587\u8fd4\u56de\u8bc1\u4e66\u4fe1\u606f\uff0c\u5e76\u548c\u5ba2\u6237\u7aef\u5b8c\u6210\u540e\u7eed\u7684TLS\u901a\u4fe1\u3002 3 \u5b8c\u6210TLS\u901a\u4fe1\u540e\uff0c\u540e\u7eed\u53d1\u9001\u7684HTTP\u62a5\u6587\u4f1a\u7ecf\u8fc7TLS\u5c42\u52a0\u5bc6\u89e3\u5bc6\u540e\u518d\u4f20\u8f93\u3002  </p> <p>\u90a3\u4e48\u5982\u679c\u6211\u4eec\u60f3\u5b9e\u73b0\u4e00\u4e2aHTTPS\u7684\u4ee3\u7406\u670d\u52a1\u5668\u600e\u4e48\u505a\u5462\uff1f\u56e0\u4e3a\u5ba2\u6237\u7aef\u53ea\u7ba1\u548c\u76f4\u63a5\u76f8\u8fde\u7684\u670d\u52a1\u5668\u8fdb\u884cHTTPS\u7684\u901a\u4fe1\uff0c\u5982\u679c\u6211\u4eec\u7684\u4e1a\u52a1\u670d\u52a1\u5668\u524d\u9762\u8fd8\u6709\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u4ee3\u7406\u670d\u52a1\u5668\u5c31\u5fc5\u987b\u8981\u6709\u8bc1\u4e66\u624d\u80fd\u548c\u5ba2\u6237\u7aef\u5b8c\u6210TLS\u63e1\u624b\uff0c\u4ece\u800c\u8fdb\u884cHTTPS\u901a\u4fe1\u3002\u4ee3\u7406\u670d\u52a1\u5668\u548c\u4e1a\u52a1\u670d\u52a1\u5668\u4f7f\u7528HTTP\u6216\u8005HTTPS\u8fd8\u662f\u5176\u5b83\u534f\u8bae\u90fd\u53ef\u4ee5\u3002\u8fd9\u6837\u5c31\u610f\u5473\u7740\u6211\u4eec\u6240\u6709\u7684\u670d\u52a1\u7684\u8bc1\u4e66\u90fd\u9700\u8981\u653e\u5230\u4ee3\u7406\u670d\u52a1\u5668\u4e0a\uff0c\u8fd9\u79cd\u573a\u666f\u7684\u9650\u5236\u662f\uff0c\u4ee3\u7406\u670d\u52a1\u5668\u548c\u4e1a\u52a1\u670d\u52a1\u5668\u90fd\u7531\u6211\u4eec\u81ea\u5df1\u7ba1\u7406\u6216\u8005\u516c\u53f8\u7edf\u4e00\u7ba1\u7406\u3002\u5982\u679c\u6211\u4eec\u60f3\u52a0\u4e00\u4e2a\u4ee3\u7406\u5bf9\u4e1a\u52a1\u670d\u52a1\u5668\u4e0d\u611f\u77e5\u90a3\u600e\u4e48\u529e\u5462\uff08\u6bd4\u5982\u5199\u4e00\u4e2a\u4ee3\u7406\u670d\u52a1\u5668\u7528\u4e8e\u5f00\u53d1\u8c03\u8bd5\uff09\uff1f\u6709\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u4e3a\u6211\u4eec\u7684\u4ee3\u7406\u670d\u52a1\u5668\u7533\u8bf7\u4e00\u4e2a\u8bc1\u4e66\uff0c\u8fd9\u6837\u5ba2\u6237\u7aef\u548c\u4ee3\u7406\u670d\u52a1\u5668\u5c31\u53ef\u4ee5\u5b8c\u6210\u6b63\u5e38\u7684HTTPS\u901a\u4fe1\u4e86\u3002\u4ece\u800c\u4e5f\u5c31\u53ef\u4ee5\u5b8c\u6210\u4ee3\u7406\u7684\u529f\u80fd\u3002\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\u5c31\u662fHTTP Connect\u65b9\u6cd5\u3002HTTP Connect\u65b9\u6cd5\u7684\u4f5c\u7528\u662f\u6307\u793a\u670d\u52a1\u5668\u5e2e\u5fd9\u5efa\u7acb\u4e00\u6761TCP\u8fde\u63a5\u5230\u771f\u6b63\u7684\u4e1a\u52a1\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u900f\u4f20\u540e\u7eed\u7684\u6570\u636e\uff0c\u8fd9\u6837\u4e0d\u7533\u8bf7\u8bc1\u4e66\u4e5f\u53ef\u4ee5\u5b8c\u6210\u4ee3\u7406\u7684\u529f\u80fd\uff0c\u5982\u56fe18-5\u6240\u793a\u3002  \u56fe18-5 \u8fd9\u65f6\u5019\u4ee3\u7406\u670d\u52a1\u5668\u53ea\u8d1f\u8d23\u900f\u4f20\u4e24\u7aef\u7684\u6570\u636e\uff0c\u4e0d\u50cf\u4f20\u7edf\u7684\u65b9\u5f0f\u4e00\u6837\u89e3\u6790\u8bf7\u6c42\u7136\u540e\u518d\u8f6c\u53d1\u3002\u8fd9\u6837\u5ba2\u6237\u7aef\u548c\u4e1a\u52a1\u670d\u52a1\u5668\u5c31\u53ef\u4ee5\u81ea\u5df1\u5b8c\u6210TLS\u63e1\u624b\u548cHTTPS\u901a\u4fe1\u3002\u4ee3\u7406\u670d\u52a1\u5668\u5c31\u50cf\u4e0d\u5b58\u5728\u4e00\u6837\u3002\u4e86\u89e3\u4e86Connect\u7684\u539f\u7406\u540e\u770b\u4e00\u4e0b\u6765\u81eaNode.js\u5b98\u65b9\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>    const http = require('http');  \n    const net = require('net');  \n    const { URL } = require('url');  \n    // \u521b\u5efa\u4e00\u4e2aHTTP\u670d\u52a1\u5668\u4f5c\u4e3a\u4ee3\u7406\u670d\u52a1\u5668  \n    const proxy = http.createServer((req, res) =&gt; {  \n      res.writeHead(200, { 'Content-Type': 'text/plain' });  \n      res.end('okay');  \n    });  \n    // \u76d1\u542cconnect\u4e8b\u4ef6\uff0c\u6709http connect\u8bf7\u6c42\u65f6\u89e6\u53d1  \n    proxy.on('connect', (req, clientSocket, head) =&gt; {  \n      // \u83b7\u53d6\u771f\u6b63\u8981\u8fde\u63a5\u7684\u670d\u52a1\u5668\u5730\u5740\u5e76\u53d1\u8d77\u8fde\u63a5  \n      const { port, hostname } = new URL(`http://${req.url}`);  \n      const serverSocket = net.connect(port || 80, hostname, () =&gt; {  \n        // \u8fde\u63a5\u6210\u529f\u544a\u8bc9\u5ba2\u6237\u7aef  \n        clientSocket.write('HTTP/1.1 200 Connection Established\\r\\n' +  \n                        'Proxy-agent: Node.js-Proxy\\r\\n' +  \n                        '\\r\\n');  \n        // \u900f\u4f20\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7684\u6570\u636e    \n        serverSocket.write(head);              \n        serverSocket.pipe(clientSocket);  \n        clientSocket.pipe(serverSocket);  \n      });  \n    });  \n\n    proxy.listen(1337, '127.0.0.1', () =&gt; {  \n\n      const options = {  \n        port: 1337,  \n        // \u8fde\u63a5\u7684\u4ee3\u7406\u670d\u52a1\u5668\u5730\u5740  \n        host: '127.0.0.1',  \n        method: 'CONNECT',  \n        // \u6211\u4eec\u9700\u8981\u771f\u6b63\u60f3\u8bbf\u95ee\u7684\u670d\u52a1\u5668\u5730\u5740  \n        path: 'www.baidu.com',  \n      };  \n      // \u53d1\u8d77http connect\u8bf7\u6c42  \n      const req = http.request(options);  \n      req.end();  \n      // connect\u8bf7\u6c42\u6210\u529f\u540e\u89e6\u53d1  \n      req.on('connect', (res, socket, head) =&gt; {  \n        // \u53d1\u9001\u771f\u6b63\u7684\u8bf7\u6c42  \n        socket.write('GET / HTTP/1.1\\r\\n' +  \n                     'Host: www.baidu.com\\r\\n' +  \n                     'Connection: close\\r\\n' +  \n                     '\\r\\n');  \n        socket.on('data', (chunk) =&gt; {  \n          console.log(chunk.toString());  \n        });  \n        socket.on('end', () =&gt; {  \n          proxy.close();  \n        });  \n      });  \n    });  \n</code></pre> <p>\u5b98\u7f51\u7684\u8fd9\u4e2a\u4f8b\u5b50\u5f88\u597d\u5730\u8bf4\u660e\u4e86Connect\u7684\u539f\u7406\uff0c\u5982\u56fe18-6\u6240\u793a\u3002  \u56fe18-6 \u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0bNode.js\u4e2dConnect\u7684\u5b9e\u73b0\u3002\u6211\u4eec\u4eceHTTP Connect\u8bf7\u6c42\u5f00\u59cb\u3002\u4e4b\u524d\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u5ba2\u6237\u7aef\u548cNode.js\u670d\u52a1\u5668\u5efa\u7acbTCP\u8fde\u63a5\u540e\uff0cNode.js\u6536\u5230\u6570\u636e\u7684\u65f6\u5019\u4f1a\u4ea4\u7ed9HTTP\u89e3\u6790\u5668\u5904\u7406\uff0c</p> <pre><code>    // \u8fde\u63a5\u4e0a\u6709\u6570\u636e\u5230\u6765  \n    function socketOnData(server, socket, parser, state, d) {  \n      // \u4ea4\u7ed9HTTP\u89e3\u6790\u5668\u5904\u7406\uff0c\u8fd4\u56de\u5df2\u7ecf\u89e3\u6790\u7684\u5b57\u8282\u6570  \n      const ret = parser.execute(d);  \n      onParserExecuteCommon(server, socket, parser, state, ret, d);  \n    }  \n</code></pre> <p>HTTP\u89e3\u6790\u6570\u636e\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u4e0d\u65ad\u56de\u8c03Node.js\u7684\u56de\u8c03\uff0c\u7136\u540e\u6267\u884conParserExecuteCommon\u3002\u6211\u4eec\u8fd9\u91cc\u53ea\u5173\u6ce8\u5f53Node.js\u89e3\u6790\u5b8c\u6240\u6709HTTP\u8bf7\u6c42\u5934\u540e\u6267\u884cparserOnHeadersComplete\u3002</p> <pre><code>    function parserOnHeadersComplete(versionMajor, versionMinor, headers, method,  \n                                     url, statusCode, statusMessage, upgrade,  \n                                     shouldKeepAlive) {  \n      const parser = this;  \n      const { socket } = parser;  \n\n      // IncomingMessage  \n      const ParserIncomingMessage = (socket &amp;&amp; socket.server &amp;&amp;  \n                                     socket.server[kIncomingMessage]) ||  \n                                     IncomingMessage;  \n      // \u65b0\u5efa\u4e00\u4e2aIncomingMessage\u5bf9\u8c61  \n      const incoming = parser.incoming = new ParserIncomingMessage(socket);  \n      incoming.httpVersionMajor = versionMajor;  \n      incoming.httpVersionMinor = versionMinor;  \n      incoming.httpVersion = `${versionMajor}.${versionMinor}`;  \n      incoming.url = url;  \n      // \u662f\u5426\u662fconnect\u8bf7\u6c42\u6216\u8005upgrade\u8bf7\u6c42  \n      incoming.upgrade = upgrade;  \n\n      // \u6267\u884c\u56de\u8c03  \n      return parser.onIncoming(incoming, shouldKeepAlive);  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u89e3\u6790\u5b8cHTTP\u5934\u540e\uff0cNode.js\u4f1a\u521b\u5efa\u4e00\u4e2a\u8868\u793a\u8bf7\u6c42\u7684\u5bf9\u8c61IncomingMessage\uff0c\u7136\u540e\u56de\u8c03onIncoming\u3002</p> <pre><code>    function parserOnIncoming(server, socket, state, req, keepAlive) {  \n      // \u8bf7\u6c42\u662f\u5426\u662fconnect\u6216\u8005upgrade  \n      if (req.upgrade) {  \n        req.upgrade = req.method === 'CONNECT' ||  \n                      server.listenerCount('upgrade') &gt; 0;  \n        if (req.upgrade)  \n          return 2;  \n      }  \n     // ...  \n    }  \n</code></pre> <p>Node.js\u89e3\u6790\u5b8c\u5934\u90e8\u5e76\u4e14\u6267\u884c\u4e86\u54cd\u5e94\u7684\u94a9\u5b50\u51fd\u6570\u540e\uff0c\u4f1a\u6267\u884conParserExecuteCommon\u3002</p> <pre><code>    function onParserExecuteCommon(server, socket, parser, state, ret, d) {  \n      if (ret instanceof Error) {  \n        prepareError(ret, parser, d);  \n        ret.rawPacket = d || parser.getCurrentBuffer();  \n        socketOnError.call(socket, ret);  \n      } else if (parser.incoming &amp;&amp; parser.incoming.upgrade) {  \n        // \u5904\u7406Upgrade\u6216\u8005CONNECT\u8bf7\u6c42  \n        const req = parser.incoming;  \n        const eventName = req.method === 'CONNECT' ? \n                           'connect' : 'upgrade';  \n        // \u76d1\u542c\u4e86\u5bf9\u5e94\u7684\u4e8b\u4ef6\u5219\u5904\u7406\uff0c\u5426\u5219\u5173\u95ed\u8fde\u63a5  \n        if (eventName === 'upgrade' || \n            server.listenerCount(eventName) &gt; 0) {  \n          // \u8fd8\u6ca1\u6709\u89e3\u6790\u7684\u6570\u636e  \n          const bodyHead = d.slice(ret, d.length);  \n          socket.readableFlowing = null;  \n          server.emit(eventName, req, socket, bodyHead);  \n        } else {  \n          socket.destroy();  \n        }  \n      }  \n    }  \n</code></pre> <p>\u8fd9\u65f6\u5019Node.js\u4f1a\u5224\u65ad\u8bf7\u6c42\u662f\u4e0d\u662fConnect\u6216\u8005\u534f\u8bae\u5347\u7ea7\u7684upgrade\u8bf7\u6c42\uff0c\u662f\u7684\u8bdd\u7ee7\u7eed\u5224\u65ad\u662f\u5426\u6709\u5904\u7406\u8be5\u4e8b\u4ef6\u7684\u51fd\u6570\uff0c\u6ca1\u6709\u5219\u5173\u95ed\u8fde\u63a5\uff0c\u5426\u5219\u89e6\u53d1\u5bf9\u5e94\u7684\u4e8b\u4ef6\u8fdb\u884c\u5904\u7406\u3002\u6240\u4ee5\u8fd9\u65f6\u5019Node.js\u4f1a\u89e6\u53d1Connect\u65b9\u6cd5\u3002Connect\u4e8b\u4ef6\u7684\u5904\u7406\u903b\u8f91\u6b63\u5982\u6211\u4eec\u5f00\u59cb\u7ed9\u51fa\u7684\u4f8b\u5b50\u4e2d\u90a3\u6837\u3002\u6211\u4eec\u9996\u5148\u548c\u771f\u6b63\u7684\u670d\u52a1\u5668\u5efa\u7acbTCP\u8fde\u63a5\uff0c\u7136\u540e\u8fd4\u56de\u54cd\u5e94\u5934\u7ed9\u5ba2\u6237\u7aef\uff0c\u540e\u7eed\u5ba2\u6237\u5c31\u53ef\u4ee5\u548c\u771f\u6b63\u7684\u670d\u52a1\u5668\u771f\u6b63\u8fdb\u884cTLS\u63e1\u624b\u548cHTTPS\u901a\u4fe1\u4e86\u3002\u8fd9\u5c31\u662fNode.js\u4e2dConnect\u7684\u539f\u7406\u548c\u5b9e\u73b0\u3002</p> <p>\u4e0d\u8fc7\u5728\u4ee3\u7801\u4e2d\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u597d\u73a9\u7684\u5730\u65b9\u3002\u90a3\u5c31\u662f\u5728\u89e6\u53d1connect\u4e8b\u4ef6\u7684\u65f6\u5019\uff0cNode.js\u7ed9\u56de\u8c03\u51fd\u6570\u4f20\u5165\u7684\u53c2\u6570\u3002</p> <pre><code>    server.emit('connect', req, socket, bodyHead);  \n</code></pre> <p>\u7b2c\u4e00\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6ca1\u4ec0\u4e48\u7279\u522b\u7684\uff0c\u4f46\u662f\u7b2c\u4e09\u4e2a\u53c2\u6570\u5c31\u6709\u610f\u601d\u4e86\uff0cbodyHead\u4ee3\u8868\u7684\u662fHTTP Connect\u8bf7\u6c42\u4e2d\u9664\u4e86\u8bf7\u6c42\u884c\u548cHTTP\u5934\u4e4b\u5916\u7684\u6570\u636e\u3002\u56e0\u4e3aNode.js\u89e3\u6790\u5b8cHTTP\u5934\u540e\u5c31\u4e0d\u7ee7\u7eed\u5904\u7406\u4e86\u3002\u628a\u5269\u4e0b\u7684\u6570\u636e\u4ea4\u7ed9\u4e86\u7528\u6237\u3002\u6211\u4eec\u6765\u505a\u4e00\u4e9b\u597d\u73a9\u7684\u4e8b\u60c5\u3002</p> <pre><code>    const http = require('http');  \n    const net = require('net');  \n    const { URL } = require('url');  \n\n    const proxy = http.createServer((req, res) =&gt; {  \n      res.writeHead(200, { 'Content-Type': 'text/plain' });  \n      res.end('okay');  \n    });  \n    proxy.on('connect', (req, clientSocket, head) =&gt; {  \n      const { port, hostname } = new URL(`http://${req.url}`);  \n      const serverSocket = net.connect(port || 80, hostname, () =&gt; {  \n        clientSocket.write('HTTP/1.1 200 Connection Established\\r\\n' +  \n                        'Proxy-agent: Node.js-Proxy\\r\\n' +  \n                        '\\r\\n');  \n        // \u628aconnect\u8bf7\u6c42\u5269\u4e0b\u7684\u6570\u636e\u8f6c\u53d1\u7ed9\u670d\u52a1\u5668                 \n        serverSocket.write(head);  \n        serverSocket.pipe(clientSocket);  \n        clientSocket.pipe(serverSocket);  \n      });  \n    });  \n\n    proxy.listen(1337, '127.0.0.1', () =&gt; {  \n      const net = require('net');  \n      const body = 'GET http://www.baidu.com:80 HTTP/1.1\\r\\n\\r\\n';  \n      const length = body.length;  \n      const socket = net.connect({host: '127.0.0.1', port: 1337});  \n      socket.write(`CONNECT www.baidu.com:80 HTTP/1.1\\r\\n\\r\\n${body}`);  \n      socket.setEncoding('utf-8');  \n      socket.on('data', (chunk) =&gt; {  \n       console.log(chunk)  \n      });  \n    });  \n</code></pre> <p>\u6211\u4eec\u65b0\u5efa\u4e00\u4e2asocket\uff0c\u7136\u540e\u81ea\u5df1\u6784\u9020HTTP Connect\u62a5\u6587\uff0c\u5e76\u4e14\u5728HTTP\u884c\u540e\u9762\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u4e24\u4e00\u4e2aHTTP\u8bf7\u6c42\u3002\u5f53Node.js\u670d\u52a1\u5668\u6536\u5230Connect\u8bf7\u6c42\u540e\uff0c\u6211\u4eec\u5728connect\u4e8b\u4ef6\u7684\u5904\u7406\u51fd\u6570\u4e2d\uff0c\u628aConnect\u8bf7\u6c42\u591a\u4f59\u7684\u90a3\u4e00\u90e8\u5206\u6570\u636e\u4f20\u7ed9\u771f\u6b63\u7684\u670d\u52a1\u5668\u3002\u8fd9\u6837\u5c31\u8282\u7701\u4e86\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u7684\u65f6\u95f4\u3002</p>"},{"location":"chapter18-HTTP/#1833","title":"18.3.3 \u8d85\u65f6\u7ba1\u7406","text":"<p>\u5728\u89e3\u6790HTTP\u534f\u8bae\u6216\u8005\u652f\u6301\u957f\u8fde\u63a5\u7684\u65f6\u5019\uff0cNode.js\u9700\u8981\u8bbe\u7f6e\u4e00\u4e9b\u8d85\u65f6\u7684\u673a\u5236\uff0c\u5426\u5219\u4f1a\u9020\u6210\u653b\u51fb\u6216\u8005\u8d44\u6e90\u6d6a\u8d39\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0bHTTP\u670d\u52a1\u5668\u4e2d\u6d89\u53ca\u5230\u8d85\u65f6\u7684\u4e00\u4e9b\u903b\u8f91\u3002 1 \u89e3\u6790HTTP\u5934\u90e8\u8d85\u65f6 \u5f53\u6536\u5230\u4e00\u4e2aHTTP\u8bf7\u6c42\u62a5\u6587\u65f6\uff0c\u4f1a\u4eceHTTP\u8bf7\u6c42\u884c\uff0cHTTP\u5934\uff0cHTTP body\u7684\u987a\u5e8f\u8fdb\u884c\u89e3\u6790\uff0c\u5982\u679c\u7528\u6237\u6784\u9020\u8bf7\u6c42\uff0c\u53ea\u53d1\u9001HTTP\u5934\u7684\u4e00\u90e8\u5206\u3002\u90a3\u4e48HTTP\u89e3\u6790\u5668\u5c31\u4f1a\u4e00\u76f4\u5728\u7b49\u5f85\u540e\u7eed\u6570\u636e\u7684\u5230\u6765\u3002\u8fd9\u4f1a\u5bfc\u81f4DDOS\u653b\u51fb\uff0c\u6240\u4ee5Node.js\u4e2d\u8bbe\u7f6e\u4e86\u89e3\u6790HTTP\u5934\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u9608\u503c\u662f60\u79d2\u3002\u5982\u679c60\u79d2\u5185\u6ca1\u6709\u89e3\u6790\u5b8cHTTP\u5934\u90e8\uff0c\u5219\u4f1a\u89e6\u53d1timeout\u4e8b\u4ef6\u3002\u5982\u679c\u7528\u6237\u4e0d\u5904\u7406\uff0c\u5219Node.js\u4f1a\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\u3002\u6211\u4eec\u770b\u4e00\u4e0bNode.js\u7684\u5b9e\u73b0\u3002Node.js\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u3002</p> <pre><code>    this.headersTimeout = 60 * 1000; // 60 seconds  \n    //  Node.js\u5728\u5efa\u7acbTCP\u8fde\u63a5\u6210\u529f\u540e\u521d\u59cb\u5316\u89e3\u6790HTTP\u5934\u7684\u5f00\u59cb\u65f6\u95f4\u3002\n    function connectionListenerInternal(server, socket) {  \n      parser.parsingHeadersStart = nowDate();  \n    }  \n</code></pre> <p>\u7136\u540e\u5728\u6bcf\u6b21\u6536\u5230\u6570\u636e\u7684\u65f6\u5019\u5224\u65adHTTP\u5934\u90e8\u662f\u5426\u89e3\u6790\u5b8c\u6210\uff0c\u5982\u679c\u6ca1\u6709\u89e3\u6790\u5b8c\u6210\u5e76\u4e14\u8d85\u65f6\u4e86\u5219\u4f1a\u89e6\u53d1timeout\u4e8b\u4ef6\u3002</p> <pre><code>    function onParserExecute(server, socket, parser, state, ret) {  \n      socket._unrefTimer();  \n      const start = parser.parsingHeadersStart;  \n      // start\u7b49\u4e8e0\uff0c\u8bf4\u660eHTTP\u5934\u5df2\u7ecf\u89e3\u6790\u5b8c\u6bd5\uff0c\u5426\u5219\u8bf4\u660e\u6b63\u5728\u89e3\u6790\u5934\uff0c\u7136\u540e\u518d\u5224\u65ad\u89e3\u6790\u65f6\u95f4\u662f\u5426\u8d85\u65f6\u4e86  \n      if (start !== 0 &amp;&amp; nowDate() - start &gt; server.headersTimeout) {  \n        // \u89e6\u53d1timeout\uff0c\u5982\u679c\u6ca1\u6709\u76d1\u542ctimeout\uff0c\u5219\u9ed8\u8ba4\u4f1a\u9500\u6bc1socket\uff0c\u5373\u5173\u95ed\u8fde\u63a5  \n        const serverTimeout = server.emit('timeout', socket);  \n\n        if (!serverTimeout)  \n          socket.destroy();  \n        return;  \n      }  \n\n      onParserExecuteCommon(server, socket, parser, state, ret, undefined);  \n    }  \n</code></pre> <p>\u5982\u679c\u5728\u8d85\u65f6\u4e4b\u524d\u89e3\u6790HTTP\u5934\u5b8c\u6210\uff0c\u5219\u628aparsingHeadersStart\u7f6e\u4e3a0\u8868\u793a\u89e3\u6790\u5b8c\u6210\u3002</p> <pre><code>    function parserOnIncoming(server, socket, state, req, keepAlive) {  \n      // \u8bbe\u7f6e\u4e86keepAlive\u5219\u54cd\u5e94\u540e\u9700\u8981\u91cd\u7f6e\u4e00\u4e9b\u72b6\u6001  \n      if (server.keepAliveTimeout &gt; 0) {  \n        req.on('end', resetHeadersTimeoutOnReqEnd);  \n      }  \n\n      // \u6807\u8bb0\u5934\u90e8\u89e3\u6790\u5b8c\u6bd5  \n      socket.parser.parsingHeadersStart = 0;  \n    }  \n\n    function resetHeadersTimeoutOnReqEnd() {  \n      if (parser) {  \n        parser.parsingHeadersStart = nowDate();  \n      }  \n    }  \n</code></pre> <p>\u53e6\u5916\u5982\u679c\u652f\u6301\u957f\u8fde\u63a5\uff0c\u5373\u4e00\u4e2aTCP\u8fde\u63a5\u4e0a\u53ef\u4ee5\u53d1\u9001\u591a\u4e2a\u8bf7\u6c42\u3002\u5219\u5728\u6bcf\u4e2a\u54cd\u5e94\u7ed3\u675f\u4e4b\u540e\uff0c\u9700\u8981\u91cd\u65b0\u521d\u59cb\u5316\u89e3\u6790HTTP\u5934\u7684\u5f00\u59cb\u65f6\u95f4\u3002\u5f53\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u6570\u636e\u5230\u6765\u65f6\u518d\u6b21\u5224\u65ad\u89e3\u6790HTTP\u5934\u90e8\u662f\u5426\u8d85\u65f6\u3002\u8fd9\u91cc\u662f\u54cd\u5e94\u7ed3\u675f\u540e\u5c31\u5f00\u59cb\u8ba1\u7b97\u3002\u800c\u4e0d\u662f\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u5230\u6765\u65f6\u3002 2 \u652f\u6301\u7ba1\u9053\u5316\u7684\u60c5\u51b5\u4e0b\uff0c\u591a\u4e2a\u8bf7\u6c42\u7684\u65f6\u95f4\u95f4\u9694 Node.js\u652f\u6301\u5728\u4e00\u4e2aTCP\u8fde\u63a5\u4e0a\u53d1\u9001\u591a\u4e2aHTTP\u8bf7\u6c42\uff0c\u6240\u4ee5\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u5982\u679c\u8d85\u65f6\u90fd\u6ca1\u6709\u65b0\u7684\u8bf7\u6c42\u5230\u6765\uff0c\u5219\u89e6\u53d1\u8d85\u65f6\u4e8b\u4ef6\u3002\u8fd9\u91cc\u6d89\u53ca\u5b9a\u65f6\u5668\u7684\u8bbe\u7f6e\u548c\u91cd\u7f6e\u3002</p> <pre><code>    // \u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u54cd\u5e94  \n      if (res._last) {  \n        // \u662f\u5219\u9500\u6bc1socket  \n        if (typeof socket.destroySoon === 'function') {  \n          socket.destroySoon();  \n        } else {  \n          socket.end();  \n        }  \n      } else if (state.outgoing.length === 0) {  \n        // \u6ca1\u6709\u5f85\u5904\u7406\u7684\u54cd\u5e94\u4e86\uff0c\u5219\u91cd\u65b0\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\u7b49\u5f85\u8bf7\u6c42\u7684\u5230\u6765\uff0c\u4e00\u5b9a\u65f6\u95f4\u5185\u6ca1\u6709\u8bf7\u6c42\u5219\u89e6\u53d1timeout\u4e8b\u4ef6  \n        if (server.keepAliveTimeout &amp;&amp; typeof socket.setTimeout === 'function') {  \n          socket.setTimeout(server.keepAliveTimeout);  \n          state.keepAliveTimeoutSet = true;  \n        }  \n      }  \n</code></pre> <p>\u6bcf\u6b21\u54cd\u5e94\u7ed3\u675f\u7684\u65f6\u5019\uff0cNode.js\u9996\u5148\u4f1a\u5224\u65ad\u5f53\u524d\u54cd\u5e94\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\uff0c\u4f8b\u5982\u8bfb\u7aef\u4e0d\u53ef\u8bfb\u4e86\uff0c\u8bf4\u660e\u4e0d\u4f1a\u53c8\u8bf7\u6c42\u5230\u6765\u4e86\uff0c\u4e5f\u4e0d\u4f1a\u6709\u54cd\u5e94\u4e86\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u4fdd\u6301\u8fd9\u4e2aTCP\u8fde\u63a5\u3002\u5982\u679c\u5f53\u524d\u54cd\u5e94\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\uff0c\u5219Node.js\u4f1a\u6839\u636ekeepAliveTimeout\u7684\u503c\u505a\u4e0b\u4e00\u6b65\u5224\u65ad\uff0c\u5982\u679ckeepAliveTimeout \u975e\u7a7a\uff0c\u5219\u8bbe\u7f6e\u5b9a\u65f6\u5668\uff0c\u5982\u679ckeepAliveTimeout \u65f6\u95f4\u5185\u90fd\u6ca1\u6709\u65b0\u7684\u8bf7\u6c42\u5219\u89e6\u53d1timeout\u4e8b\u4ef6\u3002\u90a3\u4e48\u5982\u679c\u6709\u65b0\u8bf7\u6c42\u5230\u6765\uff0c\u5219\u9700\u8981\u91cd\u7f6e\u8fd9\u4e2a\u5b9a\u65f6\u5668\u3002Node.js\u5728\u6536\u5230\u65b0\u8bf7\u6c42\u7684\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u5305\u4e2d\uff0c\u91cd\u7f6e\u8be5\u5b9a\u65f6\u5668\u3002</p> <pre><code>    function onParserExecuteCommon(server, socket, parser, state, ret, d) {  \n      resetSocketTimeout(server, socket, state);  \n    }  \n\n    function resetSocketTimeout(server, socket, state) {  \n      if (!state.keepAliveTimeoutSet)  \n        return;  \n\n      socket.setTimeout(server.timeout || 0);  \n      state.keepAliveTimeoutSet = false;  \n    }  \n</code></pre> <p>onParserExecuteCommon\u4f1a\u5728\u6bcf\u6b21\u6536\u5230\u6570\u636e\u65f6\u6267\u884c\uff0c\u7136\u540eNode.js\u4f1a\u91cd\u7f6e\u5b9a\u65f6\u5668\u4e3aserver.timeout\u7684\u503c\u3002</p>"},{"location":"chapter18-HTTP/#184-agent","title":"18.4 Agent","text":"<p>\u672c\u8282\u6211\u4eec\u5148\u5206\u6790Agent\u6a21\u5757\u7684\u5b9e\u73b0\uff0cAgent\u5bf9TCP\u8fde\u63a5\u8fdb\u884c\u4e86\u6c60\u5316\u7ba1\u7406\u3002\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2aHTTP\u8bf7\u6c42\u4e4b\u524d\uff0c\u9996\u5148\u5efa\u7acb\u4e00\u4e2aTCP\u8fde\u63a5\uff0c\u6536\u5230\u54cd\u5e94\u540e\u4f1a\u7acb\u523b\u5173\u95edTCP\u8fde\u63a5\u3002\u4f46\u662f\u6211\u4eec\u77e5\u9053TCP\u7684\u4e09\u6b21\u63e1\u624b\u662f\u6bd4\u8f83\u8017\u65f6\u7684\u3002\u6240\u4ee5\u5982\u679c\u6211\u4eec\u80fd\u590d\u7528TCP\u8fde\u63a5\uff0c\u5728\u4e00\u4e2aTCP\u8fde\u63a5\u4e0a\u53d1\u9001\u591a\u4e2aHTTP\u8bf7\u6c42\u548c\u63a5\u6536\u591a\u4e2aHTTP\u54cd\u5e94\uff0c\u90a3\u4e48\u5728\u6027\u80fd\u4e0a\u9762\u5c31\u4f1a\u5f97\u5230\u5f88\u5927\u7684\u63d0\u5347\u3002Agent\u7684\u4f5c\u7528\u5c31\u662f\u590d\u7528TCP\u8fde\u63a5\u3002\u4e0d\u8fc7Agent\u7684\u6a21\u5f0f\u662f\u5728\u4e00\u4e2aTCP\u8fde\u63a5\u4e0a\u4e32\u884c\u5730\u53d1\u9001\u8bf7\u6c42\u548c\u63a5\u6536\u54cd\u5e94\uff0c\u4e0d\u652f\u6301HTTP PipeLine\u6a21\u5f0f\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0bAgent\u6a21\u5757\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u770b\u5b83\u662f\u5982\u4f55\u5b9e\u73b0TCP\u8fde\u63a5\u590d\u7528\u7684\u3002</p> <pre><code>    function Agent(options) {  \n      if (!(this instanceof Agent))  \n        return new Agent(options);  \n      EventEmitter.call(this);  \n      this.defaultPort = 80;  \n      this.protocol = 'http:';  \n      this.options = { ...options };  \n      // path\u5b57\u6bb5\u8868\u793a\u662f\u672c\u673a\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65f6\u4f7f\u7528\u7684\u8def\u5f84\uff0c\u6bd4\u5982Unix\u57df\u8def\u5f84  \n      this.options.path = null;  \n      // socket\u4e2a\u6570\u8fbe\u5230\u9608\u503c\u540e\uff0c\u7b49\u5f85\u7a7a\u95f2socket\u7684\u8bf7\u6c42  \n      this.requests = {};  \n      // \u6b63\u5728\u4f7f\u7528\u7684socket  \n      this.sockets = {};  \n      // \u7a7a\u95f2socket  \n      this.freeSockets = {};  \n      // \u7a7a\u95f2socket\u7684\u5b58\u6d3b\u65f6\u95f4  \n      this.keepAliveMsecs = this.options.keepAliveMsecs || 1000;  \n      /* \n        \u7528\u5b8c\u7684socket\u662f\u5426\u653e\u5230\u7a7a\u95f2\u961f\u5217\uff0c \n          \u5f00\u542fkeepalive\u624d\u4f1a\u653e\u5230\u7a7a\u95f2\u961f\u5217\uff0c \n          \u4e0d\u5f00\u542fkeepalive \n            \u8fd8\u6709\u7b49\u5f85socket\u7684\u8bf7\u6c42\u5219\u590d\u7528socket \n            \u6ca1\u6709\u7b49\u5f85socket\u7684\u8bf7\u6c42\u5219\u76f4\u63a5\u9500\u6bc1socket \n      */  \n      this.keepAlive = this.options.keepAlive || false;  \n      // \u6700\u5927\u7684socket\u4e2a\u6570\uff0c\u5305\u62ec\u6b63\u5728\u4f7f\u7528\u7684\u548c\u7a7a\u95f2\u7684socket  \n      this.maxSockets = this.options.maxSockets \n                          || Agent.defaultMaxSockets;  \n      // \u6700\u5927\u7684\u7a7a\u95f2socket\u4e2a\u6570  \n      this.maxFreeSockets = this.options.maxFreeSockets || 256;  \n    }  \n</code></pre> <p>Agent\u7ef4\u62a4\u4e86\u51e0\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5206\u522b\u662f\u7b49\u5f85socket\u7684\u8bf7\u6c42\u3001\u6b63\u5728\u4f7f\u7528\u7684socket\u3001\u7a7a\u95f2socket\u3002\u6bcf\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5bf9\u8c61\u7684key\u662f\u6839\u636eHTTP\u8bf7\u6c42\u53c2\u6570\u8ba1\u7b97\u7684\u3002\u5bf9\u8c61\u7684\u503c\u662f\u4e00\u4e2a\u961f\u5217\u3002\u5177\u4f53\u7ed3\u6784\u5982\u56fe18-7\u6240\u793a\u3002  \u56fe18-7 \u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0bAgent\u6a21\u5757\u7684\u5177\u4f53\u5b9e\u73b0\u3002</p>"},{"location":"chapter18-HTTP/#1841-key","title":"18.4.1 key\u7684\u8ba1\u7b97","text":"<p>key\u7684\u8ba1\u7b97\u662f\u6c60\u5316\u7ba1\u7406\u7684\u6838\u5fc3\u3002\u6b63\u786e\u5730\u8bbe\u8ba1key\u7684\u8ba1\u7b97\u89c4\u5219\uff0c\u624d\u80fd\u66f4\u597d\u5730\u5229\u7528\u6c60\u5316\u5e26\u6765\u7684\u597d\u5904\u3002</p> <pre><code>    // \u4e00\u4e2a\u8bf7\u6c42\u5bf9\u5e94\u7684key  \n    Agent.prototype.getName = function getName(options) {  \n      let name = options.host || 'localhost'; \n      name += ':';  \n      if (options.port)  \n        name += options.port;  \n      name += ':';  \n      if (options.localAddress)  \n        name += options.localAddress;  \n      if (options.family === 4 || options.family === 6)  \n        name += `:${options.family}`;  \n      if (options.socketPath)  \n        name += `:${options.socketPath}`; \n      return name;  \n    };  \n</code></pre> <p>\u6211\u4eec\u770b\u5230key\u7531host\u3001port\u3001\u672c\u5730\u5730\u5740\u3001\u5730\u5740\u7c07\u7c7b\u578b\u3001unix\u8def\u5f84\u8ba1\u7b97\u800c\u6765\u3002\u6240\u4ee5\u4e0d\u540c\u7684\u8bf7\u6c42\u53ea\u6709\u8fd9\u4e9b\u56e0\u5b50\u90fd\u4e00\u6837\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u590d\u7528\u8fde\u63a5\u3002\u53e6\u5916\u6211\u4eec\u770b\u5230Agent\u652f\u6301Unix\u57df\u3002</p>"},{"location":"chapter18-HTTP/#1842-socket","title":"18.4.2 \u521b\u5efa\u4e00\u4e2asocket","text":"<pre><code>    function createSocket(req, options, cb) {  \n      options = { ...options, ...this.options };  \n      // \u8ba1\u7b97key\n      const name = this.getName(options);  \n      options._agentKey = name;  \n      options.encoding = null;  \n      let called = false;  \n      // \u521b\u5efasocket\u5b8c\u6bd5\u540e\u6267\u884c\u7684\u56de\u8c03\n      const oncreate = (err, s) =&gt; {  \n        if (called)  \n          return;  \n        called = true;  \n        if (err)  \n          return cb(err);  \n        if (!this.sockets[name]) {  \n          this.sockets[name] = [];  \n        }  \n        // \u63d2\u5165\u6b63\u5728\u4f7f\u7528\u7684socket\u961f\u5217  \n        this.sockets[name].push(s); \n         // \u76d1\u542csocket\u7684\u4e00\u4e9b\u4e8b\u4ef6\uff0c\u7528\u4e8e\u56de\u6536socket \n        installListeners(this, s, options); \n        // \u6709\u53ef\u7528socket\uff0c\u901a\u77e5\u8c03\u7528\u65b9 \n        cb(null, s);  \n      };  \n      // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684socket\uff0c\u4f7f\u7528net.createConnection  \n      const newSocket = this.createConnection(options, oncreate);  \n      if (newSocket)  \n        oncreate(null, newSocket);  \n    }  \n\n    function installListeners(agent, s, options) {  \n      /*\n        socket\u89e6\u53d1\u7a7a\u95f2\u4e8b\u4ef6\u7684\u5904\u7406\u51fd\u6570\uff0c\u544a\u8bc9agent\u8be5socket\u7a7a\u95f2\u4e86\uff0c\n        agent\u4f1a\u56de\u6536\u8be5socket\u5230\u7a7a\u95f2\u961f\u5217  \n      */\n      function onFree() {  \n        agent.emit('free', s, options);  \n      }  \n      /* \n        \u76d1\u542csocket\u7a7a\u95f2\u4e8b\u4ef6\uff0c\u8c03\u7528\u65b9\u4f7f\u7528\u5b8csocket\u540e\u89e6\u53d1\uff0c\n        \u901a\u77e5agent socket\u7528\u5b8c\u4e86 \n      */ \n      s.on('free', onFree);  \n\n      function onClose(err) {  \n        agent.removeSocket(s, options);  \n      }  \n      // socket\u5173\u95ed\u5219agent\u4f1a\u4ecesocket\u961f\u5217\u4e2d\u5220\u9664\u5b83  \n      s.on('close', onClose);  \n\n      function onRemove() {  \n        agent.removeSocket(s, options);  \n        s.removeListener('close', onClose);  \n        s.removeListener('free', onFree);  \n        s.removeListener('agentRemove', onRemove);  \n      }  \n      // agent\u88ab\u79fb\u9664  \n      s.on('agentRemove', onRemove);  \n\n    }  \n</code></pre> <p>\u521b\u5efasocket\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b 1 \u8c03\u7528net\u6a21\u5757\u521b\u5efa\u4e00\u4e2asocket\uff08TCP\u6216\u8005Unix\u57df\uff09\uff0c\u7136\u540e\u63d2\u5165\u4f7f\u7528\u4e2d\u7684socket\u961f\u5217\uff0c\u6700\u540e\u901a\u77e5\u8c03\u7528\u65b9socket\u521b\u5efa\u6210\u529f\u3002 2 \u76d1\u542csocket\u7684close\u3001free\u4e8b\u4ef6\u548cagentRemove\u4e8b\u4ef6\uff0c\u89e6\u53d1\u65f6\u4ece\u961f\u5217\u4e2d\u5220\u9664socket\u3002  </p>"},{"location":"chapter18-HTTP/#1843-socket","title":"18.4.3 \u5220\u9664socket","text":"<pre><code>    // \u628asocket\u4ece\u6b63\u5728\u4f7f\u7528\u961f\u5217\u6216\u8005\u7a7a\u95f2\u961f\u5217\u4e2d\u79fb\u51fa  \n    function removeSocket(s, options) {  \n      const name = this.getName(options);  \n      const sets = [this.sockets];  \n      /*\n        socket\u4e0d\u53ef\u5199\u4e86\uff0c\u5219\u6709\u53ef\u80fd\u662f\u5b58\u5728\u7a7a\u95f2\u7684\u961f\u5217\u4e2d\uff0c\n        \u6240\u4ee5\u9700\u8981\u904d\u5386\u7a7a\u95f2\u961f\u5217\uff0c\u56e0\u4e3aremoveSocket\u53ea\u4f1a\u5728\n        \u4f7f\u7528\u5b8csocket\u6216\u8005socket\u5173\u95ed\u7684\u65f6\u5019\u88ab\u8c03\u7528\uff0c\u524d\u8005\u53ea\u6709\u5728\n        \u53ef\u5199\u72b6\u6001\u65f6\u4f1a\u8c03\u7528\uff0c\u540e\u8005\u662f\u4e0d\u53ef\u5199\u7684\n      */\n      if (!s.writable)  \n        sets.push(this.freeSockets);  \n      // \u4ece\u961f\u5217\u4e2d\u5220\u9664\u5bf9\u5e94\u7684socket  \n      for (const sockets of sets) {  \n        if (sockets[name]) {  \n          const index = sockets[name].indexOf(s);  \n          if (index !== -1) {  \n            sockets[name].splice(index, 1);  \n            // Don't leak  \n            if (sockets[name].length === 0)  \n              delete sockets[name];  \n          }  \n        }  \n      }  \n      /* \n        \u5982\u679c\u8fd8\u6709\u5728\u7b49\u5f85socekt\u7684\u8bf7\u6c42\uff0c\u5219\u521b\u5efasocket\u53bb\u5904\u7406\u5b83\uff0c \n        \u56e0\u4e3asocket\u6570\u5df2\u7ecf\u51cf\u4e00\u4e86\uff0c\u8bf4\u660esocket\u4e2a\u6570\u8fd8\u6ca1\u6709\u8fbe\u5230\u9608\u503c\n        \u4f46\u662f\u8fd9\u91cc\u5e94\u8be5\u5148\u5224\u65ad\u662f\u5426\u8fd8\u6709\u7a7a\u95f2\u7684socket\uff0c\u6709\u5219\u53ef\u4ee5\u590d\u7528\uff0c\n        \u6ca1\u6709\u5219\u521b\u5efa\u65b0\u7684socket \n      */  \n      if (this.requests[name] &amp;&amp; this.requests[name].length) {  \n        const req = this.requests[name][0];  \n        const socketCreationHandler = handleSocketCreation(this, \n                                                                req,            \n                                                                false);  \n        this.createSocket(req, options, socketCreationHandler);  \n      }  \n    };  \n</code></pre> <p>\u524d\u9762\u5df2\u7ecf\u5206\u6790\u8fc7\uff0cAgent\u7ef4\u62a4\u4e86\u4e24\u4e2asocket\u961f\u5217\uff0c\u5220\u9664socket\u5c31\u662f\u4ece\u8fd9\u4e24\u4e2a\u961f\u5217\u4e2d\u627e\u5230\u5bf9\u5e94\u7684socket\uff0c\u7136\u540e\u79fb\u9664\u5b83\u3002\u79fb\u9664\u540e\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u8fd8\u6709\u7b49\u5f85socket\u7684\u8bf7\u6c42\u961f\u5217\uff0c\u6709\u7684\u8bdd\u5c31\u65b0\u5efa\u4e00\u4e2asocket\u53bb\u5904\u7406\u5b83\u3002\u56e0\u4e3a\u79fb\u9664\u4e86\u4e00\u4e2asocket\uff0c\u5c31\u8bf4\u660e\u53ef\u4ee5\u65b0\u589e\u4e00\u4e2asocket\u3002</p>"},{"location":"chapter18-HTTP/#1844-socket-keepalive","title":"18.4.4 \u8bbe\u7f6esocket keepalive","text":"<p>\u5f53socket\u88ab\u4f7f\u7528\u5b8c\u5e76\u4e14\u88ab\u63d2\u5165\u7a7a\u95f2\u961f\u5217\u540e\uff0c\u9700\u8981\u91cd\u65b0\u8bbe\u7f6esocket\u7684keepalive\u503c\u3002\u7b49\u5230\u8d85\u65f6\u4f1a\u81ea\u52a8\u5173\u95edsocket\u3002\u5728\u4e00\u4e2asocket\u4e0a\u8c03\u7528\u4e00\u6b21setKeepAlive\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u91cc\u53ef\u80fd\u4f1a\u5bfc\u81f4\u591a\u6b21\u8c03\u7528setKeepAlive\uff0c\u4e0d\u8fc7\u4e5f\u6ca1\u6709\u5f71\u54cd\u3002</p> <pre><code>    function keepSocketAlive(socket) {  \n      socket.setKeepAlive(true, this.keepAliveMsecs);  \n      socket.unref();  \n      return true;  \n    };  \n</code></pre> <p>\u53e6\u5916\u9700\u8981\u8bbe\u7f6eref\u6807\u8bb0\uff0c\u9632\u6b62\u8be5socket\u963b\u6b62\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa\uff0c\u56e0\u4e3a\u8be5socket\u662f\u7a7a\u95f2\u7684\uff0c\u4e0d\u5e94\u8be5\u5f71\u54cd\u4e8b\u4ef6\u5faa\u73af\u7684\u9000\u51fa\u3002</p>"},{"location":"chapter18-HTTP/#1845-socket","title":"18.4.5 \u590d\u7528socket","text":"<pre><code>    function reuseSocket(socket, req) {  \n      req.reusedSocket = true;  \n      socket.ref();  \n    };  \n</code></pre> <p>\u91cd\u65b0\u4f7f\u7528\u8be5socket\uff0c\u9700\u8981\u4fee\u6539ref\u6807\u8bb0\uff0c\u963b\u6b62\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa\uff0c\u5e76\u6807\u8bb0\u8bf7\u6c42\u4f7f\u7528\u7684\u662f\u590d\u7528socket\u3002</p>"},{"location":"chapter18-HTTP/#1846-agent","title":"18.4.6 \u9500\u6bc1Agent","text":"<pre><code>    function destroy() {  \n      for (const set of [this.freeSockets, this.sockets]) {  \n        for (const key of ObjectKeys(set)) {  \n          for (const setName of set[key]) {  \n            setName.destroy();  \n          }  \n        }  \n      }  \n    };  \n</code></pre> <p>\u56e0\u4e3aAgent\u672c\u8d28\u4e0a\u662f\u4e00\u4e2asocket\u6c60\uff0c\u9500\u6bc1Agent\u5373\u9500\u6bc1\u6c60\u91cc\u7ef4\u62a4\u7684\u6240\u6709socket\u3002</p>"},{"location":"chapter18-HTTP/#1847","title":"18.4.7 \u4f7f\u7528\u8fde\u63a5\u6c60","text":"<p>\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528Agent\u3002</p> <pre><code>    function addRequest(req, options, port, localAddress) {  \n      // \u53c2\u6570\u5904\u7406  \n      if (typeof options === 'string') {  \n        options = {  \n          host: options,  \n          port,  \n          localAddress  \n        };  \n      }  \n\n      options = { ...options, ...this.options };  \n      if (options.socketPath)  \n        options.path = options.socketPath;  \n\n      if (!options.servername &amp;&amp; options.servername !== '')  \n        options.servername = calculateServerName(options, req);  \n      // \u62ff\u5230\u8bf7\u6c42\u5bf9\u5e94\u7684key  \n      const name = this.getName(options);  \n      // \u8be5key\u8fd8\u6ca1\u6709\u5728\u4f7f\u7528\u7684socekt\u5219\u521d\u59cb\u5316\u6570\u636e\u7ed3\u6784  \n      if (!this.sockets[name]) {  \n        this.sockets[name] = [];  \n      }  \n      // \u8be5key\u5bf9\u5e94\u7684\u7a7a\u95f2socket\u5217\u8868  \n      const freeLen = this.freeSockets[name] ? \n                        this.freeSockets[name].length : 0;  \n      // \u8be5key\u5bf9\u5e94\u7684\u6240\u6709socket\u4e2a\u6570  \n      const sockLen = freeLen + this.sockets[name].length;  \n      // \u8be5key\u6709\u5bf9\u5e94\u7684\u7a7a\u95f2socekt  \n      if (freeLen) {    \n        // \u83b7\u53d6\u4e00\u4e2a\u8be5key\u5bf9\u5e94\u7684\u7a7a\u95f2socket  \n        const socket = this.freeSockets[name].shift();  \n        // \u53d6\u5b8c\u4e86\u5220\u9664\uff0c\u9632\u6b62\u5185\u5b58\u6cc4\u6f0f  \n        if (!this.freeSockets[name].length)  \n          delete this.freeSockets[name];  \n        // \u8bbe\u7f6eref\u6807\u8bb0\uff0c\u56e0\u4e3a\u6b63\u5728\u4f7f\u7528\u8be5socket  \n        this.reuseSocket(socket, req);  \n        // \u8bbe\u7f6e\u8bf7\u6c42\u5bf9\u5e94\u7684socket  \n        setRequestSocket(this, req, socket);  \n        // \u63d2\u5165\u6b63\u5728\u4f7f\u7528\u7684socket\u961f\u5217  \n        this.sockets[name].push(socket);  \n      } else if (sockLen &lt; this.maxSockets) {   \n        /* \n          \u5982\u679c\u8be5key\u6ca1\u6709\u5bf9\u5e94\u7684\u7a7a\u95f2socket\u5e76\u4e14\u4f7f\u7528\u7684 \n          socket\u4e2a\u6570\u8fd8\u6ca1\u6709\u5f97\u5230\u9608\u503c\uff0c\u5219\u7ee7\u7eed\u521b\u5efa \n        */  \n        this.createSocket(req,\n                            options, \n                            handleSocketCreation(this, req, true));  \n      } else {  \n        // \u7b49\u5f85\u8be5key\u4e0b\u6709\u7a7a\u95f2\u7684socket  \n        if (!this.requests[name]) {  \n          this.requests[name] = [];  \n        }  \n        this.requests[name].push(req);  \n      }  \n    }  \n</code></pre> <p>\u5f53\u6211\u4eec\u9700\u8981\u53d1\u9001\u4e00\u4e2aHTTP\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7Agent\u7684addRequest\u65b9\u6cd5\u628a\u8bf7\u6c42\u6258\u7ba1\u5230Agent\u4e2d\uff0c\u5f53\u6709\u53ef\u7528\u7684socket\u65f6\uff0cAgent\u4f1a\u901a\u77e5\u6211\u4eec\u3002addRequest\u7684\u4ee3\u7801\u5f88\u957f\uff0c\u4e3b\u8981\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\u3002 1 \u6709\u7a7a\u95f2socket\uff0c\u5219\u76f4\u63a5\u590d\u7528\uff0c\u5e76\u63d2\u5165\u6b63\u5728\u4f7f\u7528\u7684socket\u961f\u5217\u4e2d \u6211\u4eec\u4e3b\u8981\u770b\u4e00\u4e0bsetRequestSocket\u51fd\u6570</p> <pre><code>    function setRequestSocket(agent, req, socket) {  \n      // \u901a\u77e5\u8bf7\u6c42socket\u521b\u5efa\u6210\u529f  \n      req.onSocket(socket);  \n      const agentTimeout = agent.options.timeout || 0;  \n      if (req.timeout === undefined || req.timeout === agentTimeout) \n      {  \n        return;  \n      }  \n      // \u5f00\u542f\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u8fc7\u671f\u540e\u89e6\u53d1timeout\u4e8b\u4ef6  \n      socket.setTimeout(req.timeout);  \n      /*\n        \u76d1\u542c\u54cd\u5e94\u4e8b\u4ef6\uff0c\u54cd\u5e94\u7ed3\u675f\u540e\u9700\u8981\u91cd\u65b0\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\n        \u5f00\u542f\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u7684\u8d85\u65f6\u8ba1\u7b97\uff0c\u5426\u5219\u4f1a\u63d0\u524d\u8fc7\u671f \n      */ \n      req.once('response', (res) =&gt; {  \n        res.once('end', () =&gt; {  \n          if (socket.timeout !== agentTimeout) {  \n            socket.setTimeout(agentTimeout);  \n          }  \n        });  \n      });  \n    }  \n</code></pre> <p>setRequestSocket\u51fd\u6570\u901a\u8fc7req.onSocket(socket)\u901a\u77e5\u8c03\u7528\u65b9\u6709\u53ef\u7528socket\u3002\u7136\u540e\u5982\u679c\u8bf7\u6c42\u8bbe\u7f6e\u4e86\u8d85\u65f6\u65f6\u95f4\u5219\u8bbe\u7f6esocket\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u5373\u8bf7\u6c42\u7684\u8d85\u65f6\u65f6\u95f4\u3002\u6700\u540e\u76d1\u542c\u54cd\u5e94\u7ed3\u675f\u4e8b\u4ef6\uff0c\u91cd\u65b0\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u3002 2 \u6ca1\u6709\u7a7a\u95f2socket\uff0c\u4f46\u662f\u4f7f\u7528\u7684socket\u4e2a\u6570\u8fd8\u6ca1\u6709\u8fbe\u5230\u9608\u503c\uff0c\u5219\u521b\u5efa\u65b0\u7684socket\u3002 \u6211\u4eec\u4e3b\u8981\u5206\u6790\u521b\u5efasocket\u540e\u7684\u56de\u8c03handleSocketCreation\u3002</p> <pre><code>    function handleSocketCreation(agent, request, informRequest) {  \n      return function handleSocketCreation_Inner(err, socket) {  \n        if (err) {  \n          process.nextTick(emitErrorNT, request, err);  \n          return;  \n        }  \n        /* \n         \u662f\u5426\u9700\u8981\u76f4\u63a5\u901a\u77e5\u8bf7\u6c42\u65b9\uff0c\u8fd9\u65f6\u5019request\u4e0d\u662f\u6765\u81ea\u7b49\u5f85\n          socket\u7684requests\u961f\u5217\uff0c \u800c\u662f\u6765\u81ea\u8c03\u7528\u65b9\uff0c\u89c1addRequest \n        */  \n        if (informRequest)  \n          setRequestSocket(agent, request, socket);  \n        else  \n          /*\n            \u4e0d\u76f4\u63a5\u901a\u77e5\uff0c\u5148\u544a\u8bc9agent\u6709\u7a7a\u95f2\u7684socket\uff0c\n            agent\u4f1a\u5224\u65ad\u662f\u5426\u6709\u6b63\u5728\u7b49\u5f85socket\u7684\u8bf7\u6c42\uff0c\u6709\u5219\u5904\u7406  \n           */\n          socket.emit('free');  \n      };  \n    }  \n</code></pre> <p>3 \u4e0d\u6ee1\u8db31,2\uff0c\u5219\u628a\u8bf7\u6c42\u63d2\u5165\u7b49\u5f85socket\u961f\u5217\u3002 \u63d2\u5165\u7b49\u5f85socket\u961f\u5217\u540e\uff0c\u5f53\u6709socket\u7a7a\u95f2\u65f6\u4f1a\u89e6\u53d1free\u4e8b\u4ef6\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u903b\u8f91\u3002</p> <pre><code>    // \u76d1\u542csocket\u7a7a\u95f2\u4e8b\u4ef6  \n     this.on('free', (socket, options) =&gt; {  \n       const name = this.getName(options);\n       // socket\u8fd8\u53ef\u5199\u5e76\u4e14\u8fd8\u6709\u7b49\u5f85socket\u7684\u8bf7\u6c42\uff0c\u5219\u590d\u7528socket  \n       if (socket.writable &amp;&amp;  \n           this.requests[name] &amp;&amp; this.requests[name].length) {  \n         // \u62ff\u5230\u4e00\u4e2a\u7b49\u5f85socket\u7684\u8bf7\u6c42\uff0c\u7136\u540e\u901a\u77e5\u5b83\u6709socket\u53ef\u7528  \n         const req = this.requests[name].shift();  \n         setRequestSocket(this, req, socket);  \n         // \u6ca1\u6709\u7b49\u5f85socket\u7684\u8bf7\u6c42\u5219\u5220\u9664\uff0c\u9632\u6b62\u5185\u5b58\u6cc4\u6f0f  \n         if (this.requests[name].length === 0) {  \n           // don't leak  \n           delete this.requests[name];  \n         }  \n       } else {  \n         // socket\u4e0d\u53ef\u7528\u5199\u6216\u8005\u6ca1\u6709\u7b49\u5f85socket\u7684\u8bf7\u6c42\u4e86  \n         const req = socket._httpMessage;  \n         // socket\u53ef\u5199\u5e76\u4e14\u8bf7\u6c42\u8bbe\u7f6e\u4e86\u5141\u8bb8\u4f7f\u7528\u590d\u7528\u7684socket  \n         if (req &amp;&amp;  \n             req.shouldKeepAlive &amp;&amp;  \n             socket.writable &amp;&amp;  \n             this.keepAlive) {  \n           let freeSockets = this.freeSockets[name];  \n           // \u8be5key\u4e0b\u5f53\u524d\u7684\u7a7a\u95f2socket\u4e2a\u6570  \n           const freeLen = freeSockets ? freeSockets.length : 0;  \n           let count = freeLen;  \n           // \u6b63\u5728\u4f7f\u7528\u7684socket\u4e2a\u6570  \n           if (this.sockets[name])  \n             count += this.sockets[name].length;  \n           /*\n               \u8be5key\u4f7f\u7528\u7684socket\u4e2a\u6570\u8fbe\u5230\u9608\u503c\u6216\u8005\u7a7a\u95f2socket\u8fbe\u5230\u9608\u503c\uff0c\n               \u5219\u4e0d\u590d\u7528socket\uff0c\u76f4\u63a5\u9500\u6bc1socket  \n            */\n           if (count &gt; this.maxSockets || \n             freeLen &gt;= this.maxFreeSockets) {  \n             socket.destroy();  \n           } else if (this.keepSocketAlive(socket)) {   \n             /*\n                \u91cd\u65b0\u8bbe\u7f6esocket\u7684\u5b58\u6d3b\u65f6\u95f4\uff0c\u8bbe\u7f6e\u5931\u8d25\u8bf4\u660e\u65e0\u6cd5\u91cd\u65b0\u8bbe\u7f6e\u5b58\u6d3b\u65f6\n                \u95f4\uff0c\u5219\u8bf4\u660e\u53ef\u80fd\u4e0d\u652f\u6301\u590d\u7528  \n              */\n             freeSockets = freeSockets || [];  \n             this.freeSockets[name] = freeSockets;  \n             socket[async_id_symbol] = -1;  \n             socket._httpMessage = null;  \n             // \u628asocket\u4ece\u6b63\u5728\u4f7f\u7528\u961f\u5217\u4e2d\u79fb\u9664  \n             this.removeSocket(socket, options);  \n             // \u63d2\u5165socket\u7a7a\u95f2\u961f\u5217  \n             freeSockets.push(socket);  \n           } else {  \n             // \u4e0d\u590d\u7528\u5219\u76f4\u63a5\u9500\u6bc1  \n             socket.destroy();  \n           }  \n         } else {  \n           socket.destroy();  \n         }  \n       }  \n     });  \n</code></pre> <p>\u5f53\u6709socket\u7a7a\u95f2\u65f6\uff0c\u5206\u4e3a\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5 1 \u5982\u679c\u6709\u7b49\u5f85socket\u7684\u8bf7\u6c42\uff0c\u5219\u76f4\u63a5\u590d\u7528socket\u3002 2 \u5982\u679c\u6ca1\u6709\u7b49\u5f85socket\u7684\u8bf7\u6c42\uff0c\u5141\u8bb8\u590d\u7528\u5e76\u4e14socket\u4e2a\u6570\u6ca1\u6709\u8fbe\u5230\u9608\u503c\u5219\u63d2\u5165\u7a7a\u95f2\u961f\u5217\u3002 3 \u76f4\u63a5\u9500\u6bc1</p>"},{"location":"chapter18-HTTP/#1848","title":"18.4.8 \u6d4b\u8bd5\u4f8b\u5b50","text":"<p>\u5ba2\u6237\u7aef</p> <pre><code>    const http = require('http');  \n    const keepAliveAgent = new http.Agent({ keepAlive: true, maxSockets: 1 });  \n    const options = {port: 10000, method: 'GET',  host: '127.0.0.1',}  \n    options.agent = keepAliveAgent;  \n    http.get(options, () =&gt; {});  \n    http.get(options, () =&gt; {});  \n    console.log(options.agent.requests)  \n</code></pre> <p>\u670d\u52a1\u5668</p> <pre><code>    let i =0;  \n    const net = require('net');  \n    net.createServer((socket) =&gt; {  \n      console.log(++i);  \n    }).listen(10000);  \n</code></pre> <p>\u5728\u4f8b\u5b50\u4e2d\uff0c\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2atcp\u670d\u52a1\u5668\u3002\u7136\u540e\u5728\u5ba2\u6237\u7aef\u4f7f\u7528agent\u3002\u4f46\u662fmaxSocket\u7684\u503c\u4e3a1\uff0c\u4ee3\u8868\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2asocket\uff0c\u800c\u8fd9\u65f6\u5019\u5ba2\u6237\u7aef\u53d1\u9001\u4e24\u4e2a\u8bf7\u6c42\uff0c\u6240\u4ee5\u6709\u4e00\u4e2a\u8bf7\u6c42\u5c31\u4f1a\u5728\u6392\u961f\u3002\u670d\u52a1\u5668\u4e5f\u53ea\u6536\u5230\u4e86\u4e00\u4e2a\u8fde\u63a5\u3002</p>"},{"location":"chapter19-%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD/","title":"19-\u6a21\u5757\u52a0\u8f7d","text":"<p>Node.js\u7684\u6a21\u5757\u5206\u4e3a\u7528\u6237JS\u6a21\u5757\u3001Node.js\u539f\u751fJS\u6a21\u5757\u3001Node.js\u5185\u7f6eC++\u6a21\u5757\u3002\u672c\u7ae0\u4ecb\u7ecd\u8fd9\u4e9b\u6a21\u5757\u52a0\u8f7d\u7684\u539f\u7406\u4ee5\u53caNode.js\u4e2d\u6a21\u5757\u52a0\u8f7d\u5668\u7684\u7c7b\u578b\u548c\u539f\u7406\u3002 \u4e0b\u9762\u6211\u4eec\u4ee5\u4e00\u4e2a\u4f8b\u5b50\u4e3a\u5f00\u59cb\uff0c\u5206\u6790Node.js\u4e2d\u6a21\u5757\u52a0\u8f7d\u7684\u539f\u7406\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u6587\u4ef6demo.js\uff0c\u4ee3\u7801\u5982\u4e0b</p> <pre><code>    const myjs= require(\u2018myjs); \n    const net = require(\u2018net\u2019); \n</code></pre> <p>\u5176\u4e2dmyjs\u7684\u4ee3\u7801\u5982\u4e0b</p> <pre><code>    exports.hello = \u2018world\u2019;\n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u6267\u884cnode demo.js\u7684\u65f6\u5019\uff0c\u8fc7\u7a0b\u662f\u600e\u6837\u7684\u3002\u5728Node.js\u542f\u52a8\u7ae0\u8282\u6211\u4eec\u5206\u6790\u8fc7\uff0cNode.js\u542f\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u3002 require('internal/modules/cjs/loader').Module.runMain(process.argv[1])  \u5176\u4e2drunMain\u51fd\u6570\u5728pre_execution.js\u7684initializeCJSLoader\u4e2d\u6302\u8f7d</p> <pre><code>    function initializeCJSLoader() {  \n      const CJSLoader = require('internal/modules/cjs/loader');  \n      CJSLoader.Module._initPaths();  \n      CJSLoader.Module.runMain =  \n        require('internal/modules/run_main').executeUserEntryPoint;  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230runMain\u662frun_main.js\u5bfc\u51fa\u7684\u51fd\u6570\u3002\u7ee7\u7eed\u5f80\u4e0b\u770b</p> <pre><code>    const CJSLoader = require('internal/modules/cjs/loader');\n    const { Module } = CJSLoader;\n    function executeUserEntryPoint(main = process.argv[1]) {  \n      const resolvedMain = resolveMainPath(main);  \n      const useESMLoader = shouldUseESMLoader(resolvedMain);  \n      if (useESMLoader) {  \n        runMainESM(resolvedMain || main);  \n      } else {  \n        Module._load(main, null, true);  \n      }  \n    }  \n\n    module.exports = {  \n      executeUserEntryPoint  \n    };  \n</code></pre> <p>process.argv[1]\u5c31\u662f\u6211\u4eec\u8981\u6267\u884c\u7684JS\u6587\u4ef6\u3002\u6700\u540e\u901a\u8fc7cjs/loader.js\u7684Module._load\u52a0\u8f7d\u4e86\u6211\u4eec\u7684JS\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u5904\u7406\u903b\u8f91\u3002</p> <pre><code>    Module._load = function(request, parent, isMain) {  \n      const filename = Module._resolveFilename(request, parent, isMain);  \n\n      const cachedModule = Module._cache[filename];  \n      // \u6709\u7f13\u5b58\u5219\u76f4\u63a5\u8fd4\u56de  \n      if (cachedModule !== undefined) {  \n        updateChildren(parent, cachedModule, true);  \n        if (!cachedModule.loaded)  \n          return getExportsForCircularRequire(cachedModule);  \n        return cachedModule.exports;  \n      }  \n      // \u662f\u5426\u662f\u53ef\u8bbf\u95ee\u7684\u539f\u751fJS\u6a21\u5757\uff0c\u662f\u5219\u8fd4\u56de  \n      const mod = loadNativeModule(filename, request);  \n      if (mod &amp;&amp; mod.canBeRequiredByUsers) return mod.exports;  \n      // \u975e\u539f\u751fJS\u6a21\u5757\uff0c\u5219\u65b0\u5efa\u4e00\u4e2aModule\u8868\u793a\u52a0\u8f7d\u7684\u6a21\u5757  \n      const module = new Module(filename, parent);  \n      // \u7f13\u5b58  \n      Module._cache[filename] = module;  \n      // \u52a0\u8f7d\n      module.load(filename);  \n      // \u8c03\u7528\u65b9\u62ff\u5230\u7684\u662fmodule.exports\u7684\u503c\n      return module.exports;  \n    };  \n</code></pre> <p>_load\u51fd\u6570\u4e3b\u8981\u662f\u4e09\u4e2a\u903b\u8f91 1 \u5224\u65ad\u662f\u5426\u6709\u7f13\u5b58\uff0c\u6709\u5219\u8fd4\u56de\u3002 2 \u6ca1\u6709\u7f13\u5b58\uff0c\u5219\u5224\u65ad\u662f\u5426\u662f\u539f\u751fJS\u6a21\u5757\uff0c\u662f\u5219\u4ea4\u7ed9\u539f\u751f\u6a21\u5757\u5904\u7406\u3002 1   \u4e0d\u662f\u539f\u751f\u6a21\u5757\uff0c\u5219\u65b0\u5efa\u4e00\u4e2aModule\u8868\u793a\u7528\u6237\u7684JS\u6a21\u5757\uff0c\u7136\u540e\u6267\u884cload\u51fd\u6570\u52a0\u8f7d\u3002 \u8fd9\u91cc\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce83\u7684\u903b\u8f91\uff0c\u5728Node.js\u4e2d\uff0c\u7528\u6237\u5b9a\u4e49\u7684\u6a21\u5757\u4f7f\u7528Module\u8868\u793a\u3002</p> <pre><code>    function Module(id = '', parent) {  \n      // \u6a21\u5757\u5bf9\u5e94\u7684\u6587\u4ef6\u8def\u5f84  \n      this.id = id;  \n      this.path = path.dirname(id);  \n      // \u5728\u6a21\u5757\u91cc\u4f7f\u7528\u7684exports\u53d8\u91cf  \n      this.exports = {};  \n      this.parent = parent;  \n      // \u52a0\u5165\u7236\u6a21\u5757\u7684children\u961f\u5217  \n      updateChildren(parent, this, false);  \n      this.filename = null;  \n      // \u662f\u5426\u5df2\u7ecf\u52a0\u8f7d  \n      this.loaded = false;  \n      this.children = [];  \n    }  \n</code></pre> <p>\u63a5\u7740\u770b\u4e00\u4e0bload\u51fd\u6570\u7684\u903b\u8f91\u3002</p> <pre><code>    Module.prototype.load = function(filename) {  \n      this.filename = filename;  \n      // \u62d3\u5c55\u540d  \n      const extension = findLongestRegisteredExtension(filename);  \n      // \u6839\u636e\u62d3\u5c55\u540d\u4f7f\u7528\u4e0d\u540c\u7684\u52a0\u8f7d\u65b9\u5f0f  \n      Module._extensions[extension](this, filename);  \n      this.loaded = true;  \n    };  \n</code></pre> <p>Node.js\u4f1a\u6839\u636e\u4e0d\u540c\u7684\u6587\u4ef6\u62d3\u5c55\u540d\u4f7f\u7528\u4e0d\u540c\u7684\u51fd\u6570\u5904\u7406\u3002</p>"},{"location":"chapter19-%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD/#191","title":"19.1 \u52a0\u8f7d\u7528\u6237\u6a21\u5757","text":"<p>\u5728Node.js\u4e2d_extensions\u6709\u4e09\u79cd\uff0c\u5206\u522b\u662fjs\u3001json\u3001node\u3002</p>"},{"location":"chapter19-%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD/#1911-json","title":"19.1.1 \u52a0\u8f7dJSON\u6a21\u5757","text":"<p>\u52a0\u8f7dJSON\u6a21\u5757\u662f\u6bd4\u8f83\u7b80\u5355\u7684</p> <pre><code>    Module._extensions['.json'] = function(module, filename) {  \n      const content = fs.readFileSync(filename, 'utf8');  \n\n      try {  \n        module.exports = JSONParse(stripBOM(content));  \n      } catch (err) {  \n        err.message = filename + ': ' + err.message;  \n        throw err;  \n      }  \n    };  \n</code></pre> <p>\u76f4\u63a5\u8bfb\u53d6JSON\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u7136\u540e\u89e3\u6790\u6210\u5bf9\u8c61\u5c31\u884c\u3002</p>"},{"location":"chapter19-%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD/#1912-js","title":"19.1.2 \u52a0\u8f7dJS\u6a21\u5757","text":"<pre><code>    Module._extensions['.js'] = function(module, filename) {  \n      const content = fs.readFileSync(filename, 'utf8');  \n      module._compile(content, filename);  \n    };  \n</code></pre> <p>\u8bfb\u5b8c\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u7136\u540e\u6267\u884c_compile</p> <pre><code>    Module.prototype._compile = function(content, filename) {  \n      // \u751f\u6210\u4e00\u4e2a\u51fd\u6570  \n      const compiledWrapper = wrapSafe(filename, content, this);  \n      const dirname = path.dirname(filename);  \n      // require\u662f\u5bf9_load\u51fd\u6570\u7684\u5c01\u88c5 \n      const require = (path) =&gt; {\n          return this.require(path);\n        };\n      let result;  \n        // \u6211\u4eec\u5e73\u65f6\u4f7f\u7528\u7684exports\u53d8\u91cf\n      const exports = this.exports;  \n      const thisValue = exports; \n        // \u6211\u4eec\u5e73\u65f6\u4f7f\u7528\u7684module\u53d8\u91cf \n      const module = this;  \n      // \u6267\u884c\u51fd\u6570  \n      result = compiledWrapper.call(thisValue,\n                                        exports, \n                                        require, \n                                        module, \n                                        filename, \n                                        dirname);  \n      return result;  \n    }  \n</code></pre> <p>_compile\u91cc\u9762\u5305\u62ec\u4e86\u51e0\u4e2a\u91cd\u8981\u7684\u903b\u8f91 1 wrapSafe\uff1a\u5305\u88f9\u6211\u4eec\u7684\u4ee3\u7801\u5e76\u751f\u6210\u4e00\u4e2a\u51fd\u6570 2 require\uff1a\u652f\u6301\u5728\u6a21\u5757\u5185\u52a0\u8f7d\u5176\u4ed6\u6a21\u5757 3 \u6267\u884c\u6a21\u5757\u4ee3\u7801 \u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e09\u4e2a\u903b\u8f91\u3002 1 wrapSafe</p> <pre><code>    function wrapSafe(filename, content, cjsModuleInstance) {    \n        const wrapper = Module.wrap(content);    \n        return vm.runInThisContext(wrapper, {    \n          filename,    \n          lineOffset: 0,    \n          ...    \n        });    \n    }    \n\n    const wrapper = [    \n      '(function (exports, require, module, __filename, __dirname) { ',    \n      '\\n});'    \n    ];    \n\n    Module.wrap = function(script) {    \n      return Module.wrapper[0] + script + Module.wrapper[1];    \n    };  \n</code></pre> <p>vm.runInThisContext\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u201d(function() {})\u201d\u7684\u65f6\u5019\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\u3002\u6240\u4ee5\u6267\u884cModule.wrap\u540e\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5185\u5bb9\u5982\u4e0b</p> <pre><code>    (function (exports, require, module, __filename, __dirname) { \n      // \n    });   \n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0brequire\u51fd\u6570\uff0c\u5373\u6211\u4eec\u5e73\u65f6\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684require\u3002 2 require</p> <pre><code>    Module.prototype.require = function(id) {  \n      requireDepth++;  \n      try {  \n        return Module._load(id, this, /* isMain */ false);  \n      } finally {  \n        requireDepth--;  \n      }  \n    };  \n</code></pre> <p>require\u662f\u5bf9Module._load\u7684\u5c01\u88c5\uff0cModule._load\u4f1a\u628a\u6a21\u5757\u5bfc\u51fa\u7684\u53d8\u91cf\u901a\u8fc7module.exports\u5c5e\u6027\u8fd4\u56de\u7ed9require\u8c03\u7528\u65b9\u3002\u56e0\u4e3aModule._load\u53ea\u4f1a\u4ece\u539f\u751fJS\u6a21\u5757\u548c\u7528\u6237JS\u6a21\u5757\u4e2d\u67e5\u627e\u7528\u6237\u9700\u8981\u52a0\u8f7d\u7684\u6a21\u5757\uff0c\u6240\u4ee5\u662f\u65e0\u6cd5\u8bbf\u95eeC++\u6a21\u5757\u7684\uff0c\u8bbf\u95eeC++\u6a21\u5757\u53ef\u7528process.bindng\u6216internalBinding\u3002 3 \u6267\u884c\u4ee3\u7801 \u6211\u4eec\u56de\u5230_compile\u51fd\u6570\u3002\u770b\u4e00\u4e0b\u6267\u884cvm.runInThisContext\u8fd4\u56de\u7684\u51fd\u6570\u3002</p> <pre><code>compiledWrapper.call(exports,\n                     exports,\n                     require,\n                     module,\n                     filename,\n                     dirname);  \n</code></pre> <p>\u76f8\u5f53\u4e8e\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801</p> <pre><code>    (function (exports, require, module, __filename, __dirname) {  \n      const myjs= require(\u2018myjs);\n      const net = require(\u2018net\u2019);\n    });   \n</code></pre> <p>\u81f3\u6b64\uff0cNode.js\u5f00\u59cb\u6267\u884c\u7528\u6237\u7684JS\u4ee3\u7801\u3002\u521a\u624d\u6211\u4eec\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u8fc7require\u662f\u5bf9Module._load\u7684\u5c01\u88c5\uff0c\u5f53\u6267\u884crequire\u52a0\u8f7d\u7528\u6237\u6a21\u5757\u65f6\uff0c\u53c8\u56de\u5230\u4e86\u6211\u4eec\u6b63\u5728\u5206\u6790\u7684\u8fd9\u4e2a\u8fc7\u7a0b\u3002</p>"},{"location":"chapter19-%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD/#1913-node","title":"19.1.3 \u52a0\u8f7dnode\u6a21\u5757","text":"<p>Node\u62d3\u5c55\u7684\u6a21\u5757\u672c\u8d28\u4e0a\u662f\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u6211\u4eec\u770brequire\u4e00\u4e2a.node\u6a21\u5757\u7684\u65f6\u5019\u7684\u8fc7\u7a0b\u3002\u6211\u4eec\u4ece\u52a0\u8f7d.node\u6a21\u5757\u7684\u6e90\u7801\u5f00\u59cb\u3002</p> <pre><code>    Module._extensions['.node'] = function(module, filename) {  \n      // ...  \n      return process.dlopen(module, path.toNamespacedPath(filename)); \n    };  \n</code></pre> <p>\u76f4\u63a5\u8c03\u4e86process.dlopen\uff0c\u8be5\u51fd\u6570\u5728node.js\u91cc\u5b9a\u4e49\u3002  </p> <pre><code>    const rawMethods = internalBinding('process_methods');  \n    process.dlopen = rawMethods.dlopen;  \n</code></pre> <p>\u627e\u5230process_methods\u6a21\u5757\u5bf9\u5e94\u7684\u662fnode_process_methods.cc\u3002  </p> <pre><code>env-&gt;SetMethod(target, \"dlopen\", binding::DLOpen);  \n</code></pre> <p>\u4e4b\u524d\u8bf4\u8fc7\uff0cNode.js\u7684\u62d3\u5c55\u6a21\u5757\u5176\u5b9e\u662f\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u90a3\u4e48\u6211\u4eec\u5148\u770b\u770b\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u5e93\u6211\u4eec\u662f\u5982\u4f55\u4f7f\u7528\u7684\u3002\u4ee5\u4e0b\u662f\u793a\u4f8b\u4ee3\u7801\u3002  </p> <pre><code>    #include &lt;stdio.h&gt;  \n    #include &lt;stdlib.h&gt;  \n    #include &lt;dlfcn.h&gt;  \n    int main(){  \n        // \u6253\u5f00\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u62ff\u5230\u4e00\u4e2ahandler  \n        handler = dlopen('xxx.so',RTLD_LAZY);  \n        // \u53d6\u51fa\u52a8\u6001\u94fe\u63a5\u5e93\u91cc\u7684\u51fd\u6570add  \n        add = dlsym(handler,\"add\");  \n        // \u6267\u884c  \n        printf(\"%d\",add(1,1));  \n        dlclose(handler);  \n        return 0;  \n    }  \n</code></pre> <p>\u4e86\u89e3\u52a8\u6001\u94fe\u63a5\u5e93\u7684\u4f7f\u7528\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u521a\u624d\u770b\u5230\u7684DLOpen\u51fd\u6570\u3002  </p> <pre><code>    void DLOpen(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n\n      int32_t flags = DLib::kDefaultFlags;\n      node::Utf8Value filename(env-&gt;isolate(), args[1]);  // Cast  \n      env-&gt;TryLoadAddon(*filename, flags, [&amp;](DLib* dlib) {  \n        const bool is_opened = dlib-&gt;Open(); \n        node_module* mp = thread_local_modpending;  \n        thread_local_modpending = nullptr;  \n        // \u7701\u7565\u90e8\u5206\u4ee3\u7801  \n        if (mp-&gt;nm_context_register_func != nullptr) {  \n          mp-&gt;nm_context_register_func(exports, \n                                             module, \n                                             context, \n                                             mp-&gt;nm_priv);  \n        } else if (mp-&gt;nm_register_func != nullptr) {  \n          mp-&gt;nm_register_func(exports, module, mp-&gt;nm_priv);  \n        }   \n        return true;  \n      });  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u91cd\u70b9\u662fTryLoadAddon\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u7684\u903b\u8f91\u5c31\u662f\u6267\u884c\u5b83\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u3002\u6211\u4eec\u53d1\u73b0\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5165\u53c2\u662fDLib\u5bf9\u8c61\u3002\u6240\u4ee5\u6211\u4eec\u5148\u770b\u770b\u8fd9\u4e2a\u7c7b\u3002 </p> <pre><code>    class DLib {  \n     public:  \n      static const int kDefaultFlags = RTLD_LAZY;  \n      DLib(const char* filename, int flags);  \n\n      bool Open();  \n      void Close();  \n      const std::string filename_;  \n      const int flags_;  \n      std::string errmsg_;  \n      void* handle_;  \n      uv_lib_t lib_;  \n    };  \n</code></pre> <p>\u518d\u770b\u4e00\u4e0b\u5b9e\u73b0\u3002  </p> <pre><code>    bool DLib::Open() {  \n      handle_ = dlopen(filename_.c_str(), flags_);  \n      if (handle_ != nullptr) return true;  \n      errmsg_ = dlerror();  \n      return false;  \n    }  \n</code></pre> <p>DLib\u5c31\u662f\u5bf9\u52a8\u6001\u94fe\u63a5\u5e93\u7684\u4e00\u4e2a\u5c01\u88c5\uff0c\u5b83\u5c01\u88c5\u4e86\u52a8\u6001\u94fe\u63a5\u5e93\u7684\u6587\u4ef6\u540d\u548c\u64cd\u4f5c\u3002TryLoadAddon\u51fd\u6570\u9996\u5148\u6839\u636erequire\u4f20\u5165\u7684\u6587\u4ef6\u540d\uff0c\u6784\u9020\u4e00\u4e2aDLib\uff0c\u7136\u540e\u6267\u884c  </p> <pre><code>const bool is_opened = dlib-&gt;Open();  \n</code></pre> <p>Open\u51fd\u6570\u6253\u5f00\u4e86\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u8981\u5148\u4e86\u89e3\u4e00\u4e0b\u6253\u5f00\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u5e93\u7a76\u7adf\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u9996\u5148\u6211\u4eec\u4e00\u822cC++\u63d2\u4ef6\u6700\u540e\u4e00\u53e5\u4ee3\u7801\u7684\u5b9a\u4e49\u3002</p> <pre><code>NAPI_MODULE(NODE_GYP_MODULE_NAME, init)  \n</code></pre> <p>\u8fd9\u662f\u4e2a\u5b8f\u5b9a\u4e49\u3002 </p> <pre><code>    #define NAPI_MODULE(modname, regfunc) \\    \n      NAPI_MODULE_X(modname, regfunc, NULL, 0)    \n     #define NAPI_MODULE_X(modname, regfunc, priv, flags)                  \\    \n        static napi_module _module = \\    \n        {                  \\    \n          NAPI_MODULE_VERSION, \\    \n          flags,          \\    \n          __FILE__,        \\    \n          regfunc,        \\    \n          #modname,        \\    \n          priv,            \\    \n          {0},            \\    \n        };                \\    \n        static void _register_modname(void) __attribute__((constructor)); \\    \n          static void _register_modname(void)      {    \\    \n          napi_module_register(&amp;_module);  \\    \n        }      \n</code></pre> <p>\u6240\u4ee5\u4e00\u4e2anode\u6269\u5c55\u5c31\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2anapi_module\u6a21\u5757\u548c\u4e00\u4e2aregister_modname\uff08modname\u662f\u6211\u4eec\u5b9a\u4e49\u7684\uff09\u51fd\u6570\u3002__attribute((constructor))\u662f\u4ee3\u8868\u8be5\u51fd\u6570\u4f1a\u5148\u6267\u884c\u7684\u610f\u601d\uff0c\u5177\u4f53\u53ef\u4ee5\u67e5\u9605\u6587\u6863\u3002\u770b\u5230\u8fd9\u91cc\u6211\u4eec\u77e5\u9053\uff0c\u5f53\u6211\u4eec\u6253\u5f00\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u5e93\u7684\u65f6\u5019\uff0c\u4f1a\u6267\u884c_register_modname\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6267\u884c\u7684\u662f  </p> <pre><code>napi_module_register(&amp;_module);    \n</code></pre> <p>\u6211\u4eec\u7ee7\u7eed\u5c55\u5f00\u3002</p> <pre><code>    // Registers a NAPI module.  \n    void napi_module_register(napi_module* mod) {  \n      node::node_module* nm = new node::node_module {  \n        -1,  \n        mod-&gt;nm_flags | NM_F_DELETEME,  \n        nullptr,  \n        mod-&gt;nm_filename,  \n        nullptr,  \n        napi_module_register_cb,  \n        mod-&gt;nm_modname,  \n        mod,  // priv  \n        nullptr,  \n      };  \n      node::node_module_register(nm);  \n    }  \n</code></pre> <p>Node.js\u628anapi\u6a21\u5757\u8f6c\u6210node_module\u3002\u6700\u540e\u8c03\u7528node_module_register\u3002 </p> <pre><code>    extern \"C\" void node_module_register(void* m) {  \n      struct node_module* mp = reinterpret_cast&lt;struct node_module*&gt;(m);  \n\n      if (mp-&gt;nm_flags &amp; NM_F_INTERNAL) {  \n        mp-&gt;nm_link = modlist_internal;  \n        modlist_internal = mp;  \n      } else if (!node_is_initialized) {  \n        mp-&gt;nm_flags = NM_F_LINKED;  \n        mp-&gt;nm_link = modlist_linked;  \n        modlist_linked = mp;  \n      } else {  \n        thread_local_modpending = mp;  \n      }  \n    }  \n</code></pre> <p>napi\u6a21\u5757\u4e0d\u662fNM_F_INTERNAL\u6a21\u5757\uff0cnode_is_initialized\u662f\u5728Node.js\u521d\u59cb\u5316\u65f6\u8bbe\u7f6e\u7684\u53d8\u91cf\uff0c\u8fd9\u65f6\u5019\u5df2\u7ecf\u662ftrue\u3002\u6240\u4ee5\u6ce8\u518cnapi\u6a21\u5757\u65f6\uff0c\u4f1a\u6267\u884cthread_local_modpending = mp\u3002thread_local_modpending \u7c7b\u4f3c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u4fdd\u5b58\u5f53\u524d\u52a0\u8f7d\u7684\u6a21\u5757\u3002\u5206\u6790\u5230\u8fd9\uff0c\u6211\u4eec\u56de\u5230DLOpen\u51fd\u6570\u3002 </p> <pre><code>    node_module* mp = thread_local_modpending;  \n    thread_local_modpending = nullptr;  \n</code></pre> <p>\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u77e5\u9053\u521a\u624d\u90a3\u4e2a\u53d8\u91cfthread_local_modpending\u7684\u4f5c\u7528\u4e86\u3002node_module* mp = thread_local_modpending\u540e\u6211\u4eec\u62ff\u5230\u4e86\u6211\u4eec\u521a\u624d\u5b9a\u4e49\u7684napi\u6a21\u5757\u7684\u4fe1\u606f\u3002\u63a5\u7740\u6267\u884cnode_module\u7684\u51fd\u6570nm_register_func\u3002  </p> <pre><code>    if (mp-&gt;nm_context_register_func != nullptr) {  \n      mp-&gt;nm_context_register_func(exports, \n                                     module, \n                                     context, \n                                     mp-&gt;nm_priv);  \n     } else if (mp-&gt;nm_register_func != nullptr) {  \n       mp-&gt;nm_register_func(exports, module, mp-&gt;nm_priv);  \n     }  \n</code></pre> <p>\u4ece\u521a\u624d\u7684node_module\u5b9a\u4e49\u4e2d\u6211\u4eec\u770b\u5230\u51fd\u6570\u662fnapi_module_register_cb\u3002  </p> <pre><code>    static void napi_module_register_cb(v8::Local&lt;v8::Object&gt; exports,  \n                                      v8::Local&lt;v8::Value&gt; module,  \n                                      v8::Local&lt;v8::Context&gt; context,  \n                                      void* priv) {  \n      napi_module_register_by_symbol(exports, module, context,  \n          static_cast&lt;napi_module*&gt;(priv)-&gt;nm_register_func);  \n    }  \n</code></pre> <p>\u8be5\u51fd\u6570\u8c03\u7528napi_module_register_by_symbol\u51fd\u6570\uff0c\u5e76\u4f20\u5165napi_module\u7684nm_register_func\u51fd\u6570\u3002 </p> <pre><code>    void napi_module_register_by_symbol(v8::Local&lt;v8::Object&gt; exports,  \n                                      v8::Local&lt;v8::Value&gt; module,  \n                                      v8::Local&lt;v8::Context&gt; context,  \n                                      napi_addon_register_func init) {  \n\n      // Create a new napi_env for this specific module.  \n      napi_env env = v8impl::NewEnv(context);  \n\n      napi_value _exports;  \n      env-&gt;CallIntoModuleThrow([&amp;](napi_env env) {  \n        _exports = init(env, v8impl::JsValueFromV8LocalValue(exports));  \n      });  \n\n      if (_exports != nullptr &amp;&amp;  \n          _exports != v8impl::JsValueFromV8LocalValue(exports)) { \n        napi_value _module = v8impl::JsValueFromV8LocalValue(module);  \n        napi_set_named_property(env, _module, \"exports\", _exports);  \n      }  \n    }  \n</code></pre> <p>init\u5c31\u662f\u6211\u4eec\u5b9a\u4e49\u7684\u51fd\u6570\u3002\u5165\u53c2\u662fenv\u548cexports\uff0c\u53ef\u4ee5\u5bf9\u6bd4\u6211\u4eec\u5b9a\u4e49\u7684\u51fd\u6570\u7684\u5165\u53c2\u3002\u6700\u540e\u6211\u4eec\u4fee\u6539exports\u53d8\u91cf\u3002\u5373\u8bbe\u7f6e\u5bfc\u51fa\u7684\u5185\u5bb9\u3002\u6700\u540e\u5728JS\u91cc\uff0c\u6211\u4eec\u5c31\u62ff\u5230\u4e86C++\u5c42\u5b9a\u4e49\u7684\u5185\u5bb9\u3002  </p>"},{"location":"chapter19-%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD/#192-js","title":"19.2 \u52a0\u8f7d\u539f\u751fJS\u6a21\u5757","text":"<p>\u4e0a\u4e00\u8282\u6211\u4eec\u4e86\u89e3\u4e86Node.js\u6267\u884cnode demo.js\u7684\u8fc7\u7a0b\uff0c\u5176\u4e2d\u6211\u4eec\u5728demo.js\u4e2d\u4f7f\u7528require\u52a0\u8f7dnet\u6a21\u5757\u3002net\u662f\u539f\u751fJS\u6a21\u5757\u3002\u8fd9\u65f6\u5019\u5c31\u4f1a\u8fdb\u5165\u539f\u751f\u6a21\u5757\u7684\u5904\u7406\u903b\u8f91\u3002 \u539f\u751f\u6a21\u5757\u662fNode.js\u5185\u90e8\u5b9e\u73b0\u7684JS\u6a21\u5757\u3002\u4f7f\u7528NativeModule\u6765\u8868\u793a\u3002</p> <pre><code>    class NativeModule {  \n      // \u539f\u751fJS\u6a21\u5757\u7684map  \n      static map = new Map(moduleIds.map((id) =&gt; [id, new NativeModule(id)]));  \n\n      constructor(id) {  \n        this.filename = `${id}.js`;  \n        this.id = id;  \n        this.canBeRequiredByUsers = !id.startsWith('internal/');  \n        this.exports = {};  \n        this.loaded = false;  \n        this.loading = false;  \n        this.module = undefined;  \n        this.exportKeys = undefined;  \n      }  \n    } \n</code></pre> <p>\u5f53\u6211\u4eec\u6267\u884crequire(\u2018net\u2019)\u65f6\uff0c\u5c31\u4f1a\u8fdb\u5165_load\u51fd\u6570\u3002_load\u51fd\u6570\u5224\u65ad\u8981\u52a0\u8f7d\u7684\u6a21\u5757\u662f\u539f\u751fJS\u6a21\u5757\u540e\uff0c\u4f1a\u901a\u8fc7loadNativeModule\u51fd\u6570\u52a0\u8f7d\u539f\u751fJS\u6a21\u5757\u3002\u6211\u4eec\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9a\u4e49\u3002</p> <pre><code>    function loadNativeModule(filename, request) {  \n      const mod = NativeModule.map.get(filename);  \n      if (mod) {  \n        mod.compileForPublicLoader();  \n        return mod;  \n      }  \n    }  \n</code></pre> <p>\u5728Node.js\u542f\u52a8\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5206\u6790\u8fc7\uff0cmod\u662f\u4e00\u4e2aNativeModule\u5bf9\u8c61\uff0c\u63a5\u7740\u770bcompileForPublicLoader\u3002</p> <pre><code>    compileForPublicLoader() {  \n        this.compileForInternalLoader();  \n        return this.exports;  \n    }  \n\n    compileForInternalLoader() {  \n        if (this.loaded || this.loading) {  \n          return this.exports;  \n        }  \n        // id\u5c31\u662f\u6211\u4eec\u8981\u52a0\u8f7d\u7684\u6a21\u5757\uff0c\u6bd4\u5982net \n        const id = this.id;  \n        this.loading = true;  \n        try {  \n          const fn = compileFunction(id);  \n          fn(this.exports, \n                   // \u52a0\u8f7d\u539f\u751fJS\u6a21\u5757\u7684\u52a0\u8f7d\u5668\n                   nativeModuleRequire, \n                   this, \n                   process, \n                   // \u52a0\u8f7dC++\u6a21\u5757\u7684\u52a0\u8f7d\u5668\n                   internalBinding, \n                   primordials);  \n          this.loaded = true;  \n        } finally {  \n          this.loading = false;  \n        }  \n        return this.exports;  \n      }  \n</code></pre> <p>\u6211\u4eec\u91cd\u70b9\u770bcompileFunction\u8fd9\u91cc\u7684\u903b\u8f91\u3002\u8be5\u51fd\u6570\u662fnode_native_module_env.cc\u6a21\u5757\u5bfc\u51fa\u7684\u51fd\u6570\u3002\u5177\u4f53\u7684\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\uff0c\u901a\u8fc7\u5c42\u5c42\u67e5\u627e\uff0c\u6700\u540e\u5230node_native_module.cc \u7684NativeModuleLoader::CompileAsModule</p> <pre><code>    MaybeLocal&lt;Function&gt; NativeModuleLoader::CompileAsModule(  \n        Local&lt;Context&gt; context,  \n        const char* id,  \n        NativeModuleLoader::Result* result) {  \n\n      Isolate* isolate = context-&gt;GetIsolate();  \n      // \u51fd\u6570\u7684\u5f62\u53c2  \n      std::vector&lt;Local&lt;String&gt;&gt; parameters = {  \n          FIXED_ONE_BYTE_STRING(isolate, \"exports\"),  \n          FIXED_ONE_BYTE_STRING(isolate, \"require\"),  \n          FIXED_ONE_BYTE_STRING(isolate, \"module\"),  \n          FIXED_ONE_BYTE_STRING(isolate, \"process\"),  \n          FIXED_ONE_BYTE_STRING(isolate, \"internalBinding\"),  \n          FIXED_ONE_BYTE_STRING(isolate, \"primordials\")};  \n      // \u7f16\u8bd1\u51fa\u4e00\u4e2a\u51fd\u6570  \n      return LookupAndCompile(context, id, &amp;parameters, result);  \n    }  \n</code></pre> <p>\u6211\u4eec\u7ee7\u7eed\u770bLookupAndCompile\u3002</p> <pre><code>    MaybeLocal&lt;Function&gt; NativeModuleLoader::LookupAndCompile(  \n        Local&lt;Context&gt; context,  \n        const char* id,  \n        std::vector&lt;Local&lt;String&gt;&gt;* parameters,  \n        NativeModuleLoader::Result* result) {  \n\n      Isolate* isolate = context-&gt;GetIsolate();  \n      EscapableHandleScope scope(isolate);  \n\n      Local&lt;String&gt; source;  \n      // \u627e\u5230\u539f\u751fJS\u6a21\u5757\u5185\u5bb9\u6240\u5728\u7684\u5185\u5b58\u5730\u5740  \n      if (!LoadBuiltinModuleSource(isolate, id).ToLocal(&amp;source)) {  \n        return {};  \n      }  \n      // \u2018net\u2019 + \u2018.js\u2019\n      std::string filename_s = id + std::string(\".js\");  \n      Local&lt;String&gt; filename =  \n          OneByteString(isolate, \n                filename_s.c_str(), \n                filename_s.size());  \n      // \u7701\u7565\u4e00\u4e9b\u53c2\u6570\u5904\u7406  \n      // \u811a\u672c\u6e90\u7801  \n      ScriptCompiler::Source script_source(source, origin, cached_data);  \n      // \u7f16\u8bd1\u51fa\u4e00\u4e2a\u51fd\u6570  \n      MaybeLocal&lt;Function&gt; maybe_fun =  \n          ScriptCompiler::CompileFunctionInContext(context,  \n                                                      &amp;script_source,  \n                               parameters-&gt;size(),\n                               parameters-&gt;data(),\n                               0,  \n                               nullptr,  \n                               options);  \n      Local&lt;Function&gt; fun = maybe_fun.ToLocalChecked();  \n      return scope.Escape(fun);  \n    }  \n</code></pre> <p>LookupAndCompile\u51fd\u6570\u9996\u5148\u627e\u5230\u52a0\u8f7d\u6a21\u5757\u7684\u6e90\u7801\uff0c\u7136\u540e\u7f16\u8bd1\u51fa\u4e00\u4e2a\u51fd\u6570\u3002\u6211\u4eec\u770b\u4e00\u4e0bLoadBuiltinModuleSource\u5982\u4f55\u67e5\u627e\u6a21\u5757\u6e90\u7801\u7684\u3002</p> <pre><code>    MaybeLocal&lt;String&gt; NativeModuleLoader::LoadBuiltinModuleSource(Isolate* isolate, const char* id) {  \n      const auto source_it = source_.find(id);  \n      return source_it-&gt;second.ToStringChecked(isolate);  \n    }  \n</code></pre> <p>\u8fd9\u91cc\u662fid\u662fnet\uff0c\u901a\u8fc7\u8be5id\u4ece_source\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u6570\u636e\uff0c\u90a3\u4e48_source\u662f\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3aNode.js\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u628a\u539f\u751fJS\u6a21\u5757\u7684\u6e90\u7801\u5b57\u7b26\u4e32\u76f4\u63a5\u8f6c\u6210ASCII\u7801\u5b58\u5230\u5185\u5b58\u91cc\u3002\u8fd9\u6837\u52a0\u8f7d\u8fd9\u4e9b\u6a21\u5757\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u9700\u8981\u786c\u76d8IO\u4e86\u3002\u76f4\u63a5\u4ece\u5185\u5b58\u8bfb\u53d6\u5c31\u884c\u3002\u6211\u4eec\u770b\u4e00\u4e0b_source\u7684\u5b9a\u4e49\uff08\u5728\u7f16\u8bd1Node.js\u6e90\u7801\u6216\u8005\u6267\u884cjs2c.py\u751f\u6210\u7684node_javascript.cc\u4e2d\uff09\u3002</p> <pre><code>    source_.emplace(\"net\", UnionBytes{net_raw, 46682});  \n    source_.emplace(\"cyb\", UnionBytes{cyb_raw, 63});  \n    source_.emplace(\"os\", UnionBytes{os_raw, 7548});  \n</code></pre> <p>cyb\u662f\u6211\u589e\u52a0\u7684\u6d4b\u8bd5\u6a21\u5757\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e0b\u8be5\u6a21\u5757\u7684\u5185\u5bb9\u3002</p> <pre><code>    static const uint8_t cyb_raw[] = {  \n     99,111,110,115,116, 32, 99,121, 98, 32, 61, 32,105,110,116,101,114,110, 97,108, 66,105,110,100,105,110,103, 40, 39, 99,  \n    121, 98, 95,119,114, 97,112, 39, 41, 59, 32, 10,109,111,100,117,108,101, 46,101,120,112,111,114,116,115, 32, 61, 32, 99,  \n    121, 98, 59  \n    };  \n</code></pre> <p>\u6211\u4eec\u8f6c\u6210\u5b57\u7b26\u4e32\u770b\u4e00\u4e0b\u662f\u4ec0\u4e48</p> <pre><code>    Buffer.from([99,111,110,115,116, 32, 99,121, 98, 32, 61, 32,105,110,116,101,114,110, 97,108, 66,105,110,100,105,110,103, 40, 39, 99,\n    121, 98, 95,119,114, 97,112, 39, 41, 59, 32, 10,109,111,100,117,108,101, 46,101,120,112,111,114,116,115, 32, 61, 32, 99,    \n    121, 98, 59].join(',').split(',')).toString('utf-8')  \n</code></pre> <p>\u8f93\u51fa</p> <pre><code>    const cyb = internalBinding('cyb_wrap');   \n    module.exports = cyb;  \n</code></pre> <p>\u6240\u4ee5\u6211\u4eec\u6267\u884crequire('net')\u65f6\uff0c\u901a\u8fc7NativeModule\u7684compileForInternalLoader\uff0c\u6700\u7ec8\u4f1a\u5728_source\u4e2d\u627e\u5230net\u6a21\u5757\u5bf9\u5e94\u7684\u6e90\u7801\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u7f16\u8bd1\u6210\u4e00\u4e2a\u51fd\u6570\u3002</p> <pre><code>    const fn = compileFunction(id);  \n    fn(this.exports, \n       // \u52a0\u8f7d\u539f\u751fJS\u6a21\u5757\u7684\u52a0\u8f7d\u5668\n       nativeModuleRequire, \n       this, \n       process, \n       // \u52a0\u8f7dC++\u6a21\u5757\u7684\u52a0\u8f7d\u5668\n       internalBinding, \n       primordials);   \n</code></pre> <p>\u7531fn\u7684\u5165\u53c2\u53ef\u4ee5\u77e5\u9053\uff0c\u6211\u4eec\u5728net\uff08\u6216\u5176\u5b83\u539f\u751fJS\u6a21\u5757\u4e2d\uff09\u53ea\u80fd\u52a0\u8f7d\u539f\u751fJS\u6a21\u5757\u548c\u5185\u7f6e\u7684C++\u6a21\u5757\u3002\u5f53fn\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u539f\u751f\u6a21\u5757\u52a0\u8f7d\u5668\u5c31\u4f1a\u628amod.exports\u7684\u503c\u8fd4\u56de\u7ed9\u8c03\u7528\u65b9\u3002 19.3 \u52a0\u8f7d\u5185\u7f6eC++\u6a21\u5757 \u5728\u539f\u751fJS\u6a21\u5757\u4e2d\u6211\u4eec\u4e00\u822c\u4f1a\u52a0\u8f7d\u4e00\u4e9b\u5185\u7f6e\u7684C++\u6a21\u5757\uff0c\u8fd9\u662fNode.js\u62d3\u5c55JS\u529f\u80fd\u7684\u5173\u952e\u4e4b\u5904\u3002\u6bd4\u5982\u6211\u4eecrequire(\u2018net\u2019)\u7684\u65f6\u5019\uff0cnet\u6a21\u5757\u4f1a\u52a0\u8f7dtcp_wrap\u6a21\u5757\u3002</p> <pre><code>    const {  \n      TCP,  \n      TCPConnectWrap,  \n      constants: TCPConstants  \n    } = internalBinding('tcp_wrap')  \n</code></pre> <p>C++\u6a21\u5757\u52a0\u8f7d\u5668\u4e5f\u662f\u5728internal/bootstrap/loaders.js\u4e2d\u5b9a\u4e49\u7684\uff0c\u5206\u4e3a\u4e09\u79cd\u3002 1 internalBinding\uff1a\u4e0d\u66b4\u9732\u7ed9\u7528\u6237\u7684\u8bbf\u95ee\u7684\u63a5\u53e3\uff0c\u53ea\u80fd\u5728Node.js\u4ee3\u7801\u4e2d\u8bbf\u95ee\uff0c\u6bd4\u5982\u539f\u751fJS\u6a21\u5757\uff08flag\u4e3aNM_F_INTERNAL\uff09\u3002</p> <pre><code>    let internalBinding;  \n    {  \n      const bindingObj = ObjectCreate(null);   \n      internalBinding = function internalBinding(module) {  \n        let mod = bindingObj[module];  \n        if (typeof mod !== 'object') {  \n          mod = bindingObj[module] = getInternalBinding(module);  \n          moduleLoadList.push(`Internal Binding ${module}`);  \n        }  \n        return mod;  \n      };  \n    }  \n</code></pre> <p>internalBinding\u662f\u5728getInternalBinding\u51fd\u6570\u57fa\u7840\u4e0a\u52a0\u4e86\u7f13\u5b58\u529f\u80fd\u3002getInternalBinding\u662fC++\u5c42\u5b9a\u4e49\u7684\u51fd\u6570\u5bf9JS\u66b4\u9732\u7684\u63a5\u53e3\u540d\u3002\u5b83\u7684\u4f5c\u7528\u662f\u4eceC++\u6a21\u5757\u94fe\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u6a21\u5757\u3002 2 process.binding\uff1a\u66b4\u9732\u7ed9\u7528\u6237\u8c03\u7528C++\u6a21\u5757\u7684\u63a5\u53e3\uff0c\u4f46\u662f\u53ea\u80fd\u8bbf\u95ee\u90e8\u5206C++\u6a21\u5757\uff08flag\u4e3aNM_F_BUILTIN\u7684C++\u6a21\u5757\uff09\u3002</p> <pre><code>    process.binding = function binding(module) {  \n      module = String(module);  \n      if (internalBindingWhitelist.has(module)) {  \n        return internalBinding(module);  \n      }  \n      throw new Error(`No such module: ${module}`);  \n    };  \n</code></pre> <p>binding\u662f\u5728internalBinding\u7684\u57fa\u7840\u4e0a\u52a0\u4e86\u767d\u540d\u5355\u7684\u903b\u8f91\uff0c\u53ea\u5bf9\u5916\u66b4\u9732\u90e8\u5206\u6a21\u5757\u3002</p> <pre><code>    const internalBindingWhitelist = new SafeSet([  \n      'async_wrap',  \n      'buffer',  \n      'cares_wrap',  \n      'config',  \n      'constants',  \n      'contextify',  \n      'crypto',  \n      'fs',  \n      'fs_event_wrap',  \n      'http_parser',  \n      'icu',  \n      'inspector',  \n      'js_stream',  \n      'natives',  \n      'os',  \n      'pipe_wrap',  \n      'process_wrap',  \n      'signal_wrap',  \n      'spawn_sync',  \n      'stream_wrap',  \n      'tcp_wrap',  \n      'tls_wrap',  \n      'tty_wrap',  \n      'udp_wrap',  \n      'url',  \n      'util',  \n      'uv',  \n      'v8',  \n      'zlib'  \n    ]);  \n</code></pre> <p>3 process._linkedBinding: \u66b4\u9732\u7ed9\u7528\u6237\u8bbf\u95eeC++\u6a21\u5757\u7684\u63a5\u53e3\uff0c\u7528\u4e8e\u8bbf\u95ee\u7528\u6237\u81ea\u5df1\u6dfb\u52a0\u7684\u4f46\u662f\u6ca1\u6709\u52a0\u5230\u5185\u7f6e\u6a21\u5757\u7684C++\u6a21\u5757\uff08flag\u4e3aNM_F_LINKED\uff09\u3002</p> <pre><code>    const bindingObj = ObjectCreate(null);  \n    process._linkedBinding = function _linkedBinding(module) {  \n      module = String(module);  \n      let mod = bindingObj[module];  \n      if (typeof mod !== 'object')  \n        mod = bindingObj[module] = getLinkedBinding(module);  \n      return mod;  \n    };  \n</code></pre> <p>_linkedBinding\u662f\u5728getLinkedBinding\u51fd\u6570\u57fa\u7840\u4e0a\u52a0\u4e86\u7f13\u5b58\u529f\u80fd\uff0cgetLinkedBinding\u662fC++\u5c42\u5b9a\u4e49\u7684\u51fd\u6570\u5bf9\u5916\u66b4\u9732\u7684\u540d\u5b57\u3002getLinkedBinding\u4ece\u53e6\u4e00\u4e2aC++\u6a21\u5757\u94fe\u8868\u4e2d\u67e5\u627e\u5bf9\u5e94\u7684\u6a21\u5757\u3002 \u4e0a\u4e00\u8282\u5df2\u7ecf\u5206\u6790\u8fc7\uff0cinternalBinding\u662f\u52a0\u8f7d\u539f\u751fJS\u6a21\u5757\u65f6\u4f20\u5165\u7684\u5b9e\u53c2\u3002internalBinding\u662f\u5bf9getInternalBinding\u7684\u5c01\u88c5\u3002getInternalBinding\u5bf9\u5e94\u7684\u662fbinding::GetInternalBinding\uff08node_binding.cc\uff09\u3002</p> <pre><code>    // \u6839\u636e\u6a21\u5757\u540d\u67e5\u627e\u5bf9\u5e94\u7684\u6a21\u5757  \n    void GetInternalBinding(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      Environment* env = Environment::GetCurrent(args);  \n      // \u6a21\u5757\u540d  \n      Local&lt;String&gt; module = args[0].As&lt;String&gt;();  \n      node::Utf8Value module_v(env-&gt;isolate(), module);  \n      Local&lt;Object&gt; exports;  \n      // \u4eceC++\u5185\u90e8\u6a21\u5757\u627e  \n      node_module* mod = FindModule(modlist_internal, \n                                         *module_v, \n                                         NM_F_INTERNAL);  \n      // \u627e\u5230\u5219\u521d\u59cb\u5316  \n      if (mod != nullptr) {  \n        exports = InitModule(env, mod, module);  \n      } else {  \n         // \u7701\u7565  \n      }  \n\n      args.GetReturnValue().Set(exports);  \n    }  \n</code></pre> <p>modlist_internal\u662f\u4e00\u6761\u94fe\u8868\uff0c\u5728Node.js\u542f\u52a8\u8fc7\u7a0b\u7684\u65f6\u5019\uff0c\u7531\u5404\u4e2aC++\u6a21\u5757\u8fde\u6210\u7684\u94fe\u8868\u3002\u901a\u8fc7\u6a21\u5757\u540d\u627e\u5230\u5bf9\u5e94\u7684C++\u6a21\u5757\u540e\uff0c\u6267\u884cInitModule\u521d\u59cb\u5316\u6a21\u5757\u3002</p> <pre><code>    // \u521d\u59cb\u5316\u4e00\u4e2a\u6a21\u5757\uff0c\u5373\u6267\u884c\u5b83\u91cc\u9762\u7684\u6ce8\u518c\u51fd\u6570  \n    static Local&lt;Object&gt; InitModule(Environment* env,  \n                     node_module* mod,  \n                     Local&lt;String&gt; module) {  \n      Local&lt;Object&gt; exports = Object::New(env-&gt;isolate());  \n      Local&lt;Value&gt; unused = Undefined(env-&gt;isolate());  \n      mod-&gt;nm_context_register_func(exports, unused, env-&gt;context(), mod-&gt;nm_priv);  \n      return exports;  \n    }  \n</code></pre> <p>\u6267\u884cC++\u6a21\u5757\u7684nm_context_register_func\u6307\u5411\u7684\u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u5728C++\u6a21\u5757\u6700\u540e\u4e00\u884c\u5b9a\u4e49\u7684Initialize\u51fd\u6570\u3002Initialize\u4f1a\u8bbe\u7f6e\u5bfc\u51fa\u7684\u5bf9\u8c61\u3002\u6211\u4eec\u4eceJS\u53ef\u4ee5\u8bbf\u95eeInitialize\u5bfc\u51fa\u7684\u5bf9\u8c61\u3002V8\u4e2d\uff0cJS\u8c03\u7528C++\u51fd\u6570\u7684\u89c4\u5219\u662f\u51fd\u6570\u5165\u53c2const FunctionCallbackInfo&amp; args\uff08\u62ff\u5230JS\u4f20\u8fc7\u6765\u7684\u5185\u5bb9\uff09\u548c\u8bbe\u7f6e\u8fd4\u56de\u503cargs.GetReturnValue().Set(\u7ed9JS\u8fd4\u56de\u7684\u5185\u5bb9), GetInternalBinding\u51fd\u6570\u7684\u903b\u8f91\u5c31\u662f\u6267\u884c\u5bf9\u5e94\u6a21\u5757\u7684\u94a9\u5b50\u51fd\u6570\uff0c\u5e76\u4f20\u4e00\u4e2aexports\u53d8\u91cf\u8fdb\u53bb\uff0c\u7136\u540e\u94a9\u5b50\u51fd\u6570\u4f1a\u4fee\u6539exports\u7684\u503c\uff0c\u8be5exports\u7684\u503c\u5c31\u662fJS\u5c42\u80fd\u62ff\u5230\u7684\u503c\u3002"},{"location":"chapter20-%E6%8B%93%E5%B1%95Node.js/","title":"24-\u62d3\u5c55Node.js","text":"<p>\u62d3\u5c55Node.js\u4ece\u5b8f\u89c2\u6765\u8bf4\uff0c\u6709\u51e0\u79cd\u65b9\u5f0f\uff0c\u5305\u62ec\u76f4\u63a5\u4fee\u6539Node.js\u5185\u6838\u91cd\u65b0\u7f16\u8bd1\u5206\u53d1\u3001\u63d0\u4f9bnpm\u5305\u3002npm\u5305\u53c8\u53ef\u4ee5\u5206\u4e3aJS\u548cC++\u62d3\u5c55\u3002\u672c\u7ae0\u4e3b\u8981\u662f\u4ecb\u7ecd\u4fee\u6539Node.js\u5185\u6838\u548c\u5199C++\u63d2\u4ef6\u3002</p>"},{"location":"chapter20-%E6%8B%93%E5%B1%95Node.js/#201-nodejs","title":"20.1 \u4fee\u6539Node.js\u5185\u6838","text":"<p>\u4fee\u6539Node.js\u5185\u6838\u7684\u65b9\u5f0f\u4e5f\u6709\u5f88\u591a\u79cd\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539JS\u5c42\u3001C++\u3001C\u8bed\u8a00\u5c42\u7684\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5\u65b0\u589e\u4e00\u4e9b\u529f\u80fd\u6216\u6a21\u5757\u3002\u672c\u8282\u5206\u522b\u4ecb\u7ecd\u5982\u4f55\u65b0\u589e\u4e00\u4e2aNode.js\u7684C++\u6a21\u5757\u548c\u4fee\u6539Node.js\u5185\u6838\u3002\u76f8\u6bd4\u4fee\u6539Node.js\u5185\u6838\u4ee3\u7801\uff0c\u65b0\u589e\u4e00\u4e2aNode.js\u5185\u7f6e\u6a21\u5757\u9700\u8981\u4e86\u89e3\u66f4\u591a\u7684\u77e5\u8bc6\u3002</p>"},{"location":"chapter20-%E6%8B%93%E5%B1%95Node.js/#2011-c","title":"20.1.1 \u65b0\u589e\u4e00\u4e2a\u5185\u7f6eC++\u6a21\u5757","text":"<p>1.\u9996\u5148\u5728src\u6587\u4ef6\u5939\u4e0b\u65b0\u589e\u4e24\u4e2a\u6587\u4ef6\u3002 cyb.h</p> <pre><code>    #ifndef SRC_CYB_H_  \n    #define SRC_CYB_H_  \n    #include \"v8.h\"  \n\n    namespace node {  \n    class Environment; \n    class Cyb {  \n     public:  \n        static void Initialize(v8::Local&lt;v8::Object&gt; target,  \n                     v8::Local&lt;v8::Value&gt; unused,  \n                     v8::Local&lt;v8::Context&gt; context,  \n                     void* priv);  \n      private:  \n      static void Console(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n    };  \n    }  // namespace node  \n    #endif  \n</code></pre> <p>cyb.cc</p> <pre><code>    #include \"cyb.h\"  \n    #include \"env-inl.h\"  \n    #include \"util-inl.h\"  \n    #include \"node_internals.h\"  \n\n    namespace node {  \n    using v8::Context;  \n    using v8::Function;  \n    using v8::FunctionCallbackInfo;  \n    using v8::FunctionTemplate;  \n    using v8::Local;  \n    using v8::Object;  \n    using v8::String;  \n    using v8::Value;  \n\n    void Cyb::Initialize(Local&lt;Object&gt; target,  \n               Local&lt;Value&gt; unused,  \n               Local&lt;Context&gt; context,  \n               void* priv) {  \n      Environment* env = Environment::GetCurrent(context);  \n      // \u7533\u8bf7\u4e00\u4e2a\u51fd\u6570\u6a21\u5757\uff0c\u6a21\u677f\u51fd\u6570\u662fConsole  \n      Local&lt;FunctionTemplate&gt; t = env-&gt;NewFunctionTemplate(Console); \n      // \u7533\u8bf7\u4e00\u4e2a\u5b57\u7b26\u4e32  \n      Local&lt;String&gt; str = FIXED_ONE_BYTE_STRING(env-&gt;isolate(), \n                                                     \"console\");  \n      // \u8bbe\u7f6e\u51fd\u6570\u540d  \n      t-&gt;SetClassName(str);  \n      // \u5bfc\u51fa\u51fd\u6570\uff0ctarget\u5373exports  \n      target-&gt;Set(env-&gt;context(),  \n                  str,  \n                  t-&gt;GetFunction(env-&gt;context()).ToLocalChecke\n        d()).Check();  \n    }  \n\n    void Cyb::Console(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      v8::Isolate* isolate = args.GetIsolate();  \n      v8::Local&lt;String&gt; str = String::NewFromUtf8(isolate, \n                                                       \"hello world\");  \n      args.GetReturnValue().Set(str);  \n    }  \n\n    }  // namespace node  \n    // \u58f0\u660e\u8be5\u6a21\u5757  \n    NODE_MODULE_CONTEXT_AWARE_INTERNAL(cyb_wrap, node::Cyb::Initialize)  \n</code></pre> <p>\u6211\u4eec\u65b0\u5b9a\u4e49\u4e00\u4e2a\u6a21\u5757\uff0c\u662f\u4e0d\u80fd\u81ea\u52a8\u6dfb\u52a0\u5230Node.js\u5185\u6838\u7684\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u989d\u5916\u7684\u64cd\u4f5c\u3002 1 \u9996\u5148\u6211\u4eec\u9700\u8981\u4fee\u6539node.gyp\u6587\u4ef6\u3002\u628a\u6211\u4eec\u65b0\u589e\u7684\u6587\u4ef6\u52a0\u5230\u914d\u7f6e\u91cc\uff0c\u5426\u5219\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u7f16\u8bd1\u8fd9\u4e2a\u65b0\u589e\u7684\u6a21\u5757\u3002\u6211\u4eec\u53ef\u4ee5\u5728node.gyp\u6587\u4ef6\u4e2d\u627e\u5230src/tcp_wrap.cc,\u7136\u540e\u5728\u5b83\u540e\u9762\u52a0\u5165\u6211\u4eec\u7684\u6587\u4ef6\u5c31\u884c\u3002  </p> <pre><code>    src/cyb_wrap.cc  \n    src/cyb_wrap.h  \n</code></pre> <p>\u8fd9\u65f6\u5019Node.js\u4f1a\u7f16\u8bd1\u6211\u4eec\u7684\u4ee3\u7801\u4e86\u3002\u4f46\u662fNode.js\u7684\u5185\u7f6e\u6a21\u5757\u6709\u4e00\u5b9a\u7684\u673a\u5236\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u52a0\u5165\u4e86Node.js\u5185\u6838\uff0c\u4e0d\u4ee3\u8868\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\u3002Node.js\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u8c03\u7528RegisterBuiltinModules\u51fd\u6570\u6ce8\u518c\u6240\u6709\u7684\u5185\u7f6eC++\u6a21\u5757\u3002</p> <pre><code>    void RegisterBuiltinModules() {  \n    #define V(modname) _register_##modname();  \n      NODE_BUILTIN_MODULES(V)  \n    #undef V  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u8be5\u51fd\u6570\u53ea\u6709\u4e00\u4e2a\u5b8f\u3002\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\u5b8f\u3002</p> <pre><code>    void RegisterBuiltinModules() {  \n    #define V(modname) _register_##modname();  \n      NODE_BUILTIN_MODULES(V)  \n    #undef V  \n    }\n    #define NODE_BUILTIN_MODULES(V)  \\  \n      NODE_BUILTIN_STANDARD_MODULES(V)  \\  \n      NODE_BUILTIN_OPENSSL_MODULES(V)  \\  \n      NODE_BUILTIN_ICU_MODULES(V)   \\  \n      NODE_BUILTIN_REPORT_MODULES(V) \\  \n      NODE_BUILTIN_PROFILER_MODULES(V) \\  \n      NODE_BUILTIN_DTRACE_MODULES(V)     \n</code></pre> <p>\u5b8f\u91cc\u9762\u53c8\u662f\u4e00\u5806\u5b8f\u3002\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u4fee\u6539\u8fd9\u4e2a\u5b8f\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u81ea\u5b9a\u4e49\u7684\u5185\u7f6e\u6a21\u5757\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u589e\u52a0\u4e00\u4e2a\u5b8f\u3002</p> <p><pre><code>    #define NODE_BUILTIN_EXTEND_MODULES(V)  \\  \n      V(cyb_wrap)   \n</code></pre> \u7136\u540e\u628a\u8fd9\u4e2a\u5b8f\u8ffd\u52a0\u5230\u90a3\u4e00\u5806\u5b8f\u540e\u9762\u3002 <pre><code>    #define NODE_BUILTIN_MODULES(V)  \\  \n      NODE_BUILTIN_STANDARD_MODULES(V)  \\  \n      NODE_BUILTIN_OPENSSL_MODULES(V)  \\  \n      NODE_BUILTIN_ICU_MODULES(V)   \\  \n      NODE_BUILTIN_REPORT_MODULES(V) \\  \n      NODE_BUILTIN_PROFILER_MODULES(V)  \\  \n      NODE_BUILTIN_DTRACE_MODULES(V) \\  \n      NODE_BUILTIN_EXTEND_MODULES(V)  \n</code></pre></p> <p>\u8fd9\u65f6\u5019\uff0cNode.js\u4e0d\u4ec5\u53ef\u4ee5\u7f16\u8bd1\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u8fd8\u4f1a\u628a\u6211\u4eec\u4ee3\u7801\u4e2d\u5b9a\u4e49\u7684\u6a21\u5757\u6ce8\u518c\u5230\u5185\u7f6eC++\u6a21\u5757\u91cc\u4e86\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5982\u4f55\u4f7f\u7528C++\u6a21\u5757\u4e86\u3002 2 \u5728lib\u6587\u4ef6\u5939\u65b0\u5efa\u4e00\u4e2acyb.js\uff0c\u4f5c\u4e3aNode.js\u539f\u751f\u6a21\u5757  </p> <pre><code>    const cyb = internalBinding('cyb_wrap');   \n    module.exports = cyb;  \n</code></pre> <p>\u65b0\u589e\u539f\u751f\u6a21\u5757\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u4fee\u6539node.gyp\u6587\u4ef6\uff0c\u5426\u5219\u4ee3\u7801\u4e5f\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u8fdbnode\u5185\u6838\u3002\u6211\u4eec\u627e\u5230node.gyp\u6587\u4ef6\u7684lib/net.js\uff0c\u5728\u540e\u9762\u8ffd\u52a0lib/cyb.js\u3002\u8be5\u914d\u7f6e\u4e0b\u7684\u6587\u4ef6\u662f\u7ed9js2c.py\u4f7f\u7528\u7684\uff0c\u5982\u679c\u4e0d\u4fee\u6539\uff0c\u6211\u4eec\u5728require\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u627e\u4e0d\u5230\u8be5\u6a21\u5757\u3002\u6700\u540e\u6211\u4eec\u5728lib/internal/bootstrap/loader\u6587\u4ef6\u91cc\u627e\u5230internalBindingWhitelist\u53d8\u91cf\uff0c\u5728\u6570\u7ec4\u6700\u540e\u589e\u52a0cyb_wrap\uff0c\u8fd9\u4e2a\u914d\u7f6e\u662f\u7ed9process.binding\u51fd\u6570\u4f7f\u7528\u7684\uff0c\u5982\u679c\u4e0d\u4fee\u6539\u8fd9\u4e2a\u914d\u7f6e\uff0c\u901a\u8fc7process.binding\u5c31\u627e\u4e0d\u5230\u6211\u4eec\u7684\u6a21\u5757\u3002process.binding\u662f\u53ef\u4ee5\u5728\u7528\u6237JS\u91cc\u4f7f\u7528\u7684\u3002\u81f3\u6b64\uff0c\u6211\u4eec\u5b8c\u6210\u4e86\u6240\u6709\u7684\u4fee\u6539\u5de5\u4f5c\uff0c\u91cd\u65b0\u7f16\u8bd1Node.js\u3002\u7136\u540e\u7f16\u5199\u6d4b\u8bd5\u7a0b\u5e8f\u3002 3 \u65b0\u5efa\u4e00\u4e2a\u6d4b\u8bd5\u6587\u4ef6testcyb.js</p> <pre><code>    // const cyb = process.binding('cyb_wrap');  \n    const cyb = require('cyb');   \n    console.log(cyb.console())  \n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u4f1a\u8f93\u51fahello world\u3002</p>"},{"location":"chapter20-%E6%8B%93%E5%B1%95Node.js/#2012-nodejs","title":"20.1.2 \u4fee\u6539Node.js\u5185\u6838","text":"<p>\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u4fee\u6539Node.js\u5185\u6838\u3002\u4fee\u6539\u7684\u90e8\u5206\u4e3b\u8981\u662f\u4e3a\u4e86\u5b8c\u5584Node.js\u7684TCP keepalive\u529f\u80fd\u3002\u76ee\u524dNode.js\u7684keepalive\u53ea\u652f\u6301\u8bbe\u7f6e\u5f00\u5173\u4ee5\u53ca\u7a7a\u95f2\u591a\u4e45\u540e\u53d1\u9001\u63a2\u6d4b\u5305\u3002\u5728\u65b0\u7248Linux\u5185\u6838\u4e2d\uff0cTCP keepalive\u5305\u62ec\u4ee5\u4e0b\u914d\u7f6e\u3002</p> <pre><code>1 \u591a\u4e45\u6ca1\u6709\u901a\u4fe1\u6570\u636e\u5305\uff0c\u5219\u5f00\u59cb\u53d1\u9001\u63a2\u6d4b\u5305\u3002\n2 \u6bcf\u9694\u591a\u4e45\uff0c\u518d\u6b21\u53d1\u9001\u63a2\u6d4b\u5305\u3002\n3 \u53d1\u9001\u591a\u5c11\u4e2a\u63a2\u6d4b\u5305\u540e\uff0c\u5c31\u8ba4\u4e3a\u8fde\u63a5\u65ad\u5f00\u3002\n4 TCP_USER_TIMEOUT\uff0c\u53d1\u9001\u4e86\u6570\u636e\uff0c\u591a\u4e45\u6ca1\u6709\u6536\u5230ack\u540e\uff0c\u8ba4\u4e3a\u8fde\u63a5\u65ad\u5f00\u3002\n</code></pre> <p>Node.js\u53ea\u652f\u6301\u7b2c\u4e00\u6761\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u76ee\u7684\u662f\u652f\u63012,3,4\u3002\u56e0\u4e3a\u8fd9\u4e2a\u529f\u80fd\u662f\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\uff0c\u6240\u4ee5\u9996\u5148\u9700\u8981\u4fee\u6539Libuv\u7684\u4ee3\u7801\u3002 1 \u4fee\u6539src/unix/tcp.c \u5728tcp.c\u52a0\u5165\u4ee5\u4e0b\u4ee3\u7801</p> <pre><code>    int uv_tcp_keepalive_ex(uv_tcp_t* handle,  \n                            int on,  \n                            unsigned int delay,  \n                            unsigned int interval,  \n                            unsigned int count) {  \n      int err;  \n\n      if (uv__stream_fd(handle) != -1) {  \n        err =uv__tcp_keepalive_ex(uv__stream_fd(handle),  \n                                  on,  \n                                  delay,  \n                                  interval,  \n                                  count);  \n        if (err)  \n          return err;  \n      }  \n\n      if (on)  \n        handle-&gt;flags |= UV_HANDLE_TCP_KEEPALIVE;  \n      else  \n        handle-&gt;flags &amp;= ~UV_HANDLE_TCP_KEEPALIVE;  \n     return 0;  \n    }  \n\n    int uv_tcp_timeout(uv_tcp_t* handle, unsigned int timeout) {  \n      #ifdef TCP_USER_TIMEOUT  \n        int fd = uv__stream_fd(handle);  \n        if (fd != -1 &amp;&amp; setsockopt(fd,  \n                                   IPPROTO_TCP,  \n                                   TCP_USER_TIMEOUT,  \n                                   &amp;timeout,  \n                                   sizeof(timeout))) {  \n          return UV__ERR(errno);   \n        }  \n      #endif  \n        return 0;  \n    }   \n\n    int uv__tcp_keepalive_ex(int fd,  \n                             int on,   \n                             unsigned int delay,  \n                             unsigned int interval,  \n                             unsigned int count) {  \n      if (setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, &amp;on, sizeof(on)))  \n        return UV__ERR(errno);  \n\n    #ifdef TCP_KEEPIDLE  \n        if (on &amp;&amp; delay &amp;&amp;setsockopt(fd,  \n                                     IPPROTO_TCP,  \n                                     TCP_KEEPIDLE,  \n                                     &amp;delay,  \n                                     sizeof(delay)))  \n          return UV__ERR(errno);  \n    #endif  \n    #ifdef TCP_KEEPINTVL  \n        if (on &amp;&amp; interval &amp;&amp; setsockopt(fd,  \n                                         IPPROTO_TCP,  \n                                         TCP_KEEPINTVL,  \n                                         &amp;interval,  \n                                         sizeof(interval)))  \n          return UV__ERR(errno);  \n    #endif  \n    #ifdef TCP_KEEPCNT  \n        if (on &amp;&amp; count &amp;&amp; setsockopt(fd,  \n                                      IPPROTO_TCP,  \n                                      TCP_KEEPCNT,  \n                                      &amp;count,  \n                                      sizeof(count)))  \n          return UV__ERR(errno);  \n    #endif  \n      /* Solaris/SmartOS, if you don't support keep-alive, \n       * then don't advertise it in your system headers... \n       */  \n      /* FIXME(bnoordhuis) That's possibly because sizeof(delay) should be 1. */  \n    #if defined(TCP_KEEPALIVE) &amp;&amp; !defined(__sun)  \n      if (on &amp;&amp; setsockopt(fd, IPPROTO_TCP, TCP_KEEPALIVE, &amp;delay, sizeof(delay)))  \n        return UV__ERR(errno);  \n    #endif  \n\n      return 0;  \n    }  \n</code></pre> <p>2 \u4fee\u6539include/uv.h  \u628a\u5728tcp.c\u4e2d\u52a0\u5165\u7684\u63a5\u53e3\u66b4\u9732\u51fa\u6765\u3002</p> <pre><code>    UV_EXTERN int uv_tcp_keepalive_ex(uv_tcp_t* handle,  \n                                      int enable,  \n                                      unsigned int delay,  \n                                      unsigned int interval,  \n                                      unsigned int count);  \n    UV_EXTERN int uv_tcp_timeout(uv_tcp_t* handle, unsigned int timeout);  \n</code></pre> <p>\u81f3\u6b64\uff0c\u6211\u4eec\u5c31\u4fee\u6539\u5b8cLibuv\u7684\u4ee3\u7801\uff0c\u4e5f\u5bf9\u5916\u66b4\u9732\u4e86\u8bbe\u7f6e\u7684\u63a5\u53e3\uff0c\u63a5\u7740\u6211\u4eec\u4fee\u6539\u4e0a\u5c42\u7684C++\u548cJS\u4ee3\u7801\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5728JS\u5c42\u4f7f\u7528\u8be5\u529f\u80fd\u3002 3 \u4fee\u6539src/tcp_wrap.cc \u4fee\u6539TCPWrap::Initialize\u51fd\u6570\u7684\u4ee3\u7801\u3002</p> <pre><code>    env-&gt;SetProtoMethod(t, \"setKeepAliveEx\", SetKeepAliveEx);  \n    env-&gt;SetProtoMethod(t, \"setKeepAliveTimeout\", SetKeepAliveTimeout);  \n</code></pre> <p>\u9996\u5148\u5bf9JS\u5c42\u66b4\u9732\u4e24\u4e2a\u65b0\u7684API\u3002\u6211\u4eec\u770b\u770b\u8fd9\u4e24\u4e2aAPI\u7684\u5b9a\u4e49\u3002</p> <pre><code>    void TCPWrap::SetKeepAliveEx(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      TCPWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap,  \n                              args.Holder(),  \n                              args.GetReturnValue().Set(UV_EBADF));  \n      Environment* env = wrap-&gt;env();  \n      int enable;  \n      if (!args[0]-&gt;Int32Value(env-&gt;context()).To(&amp;enable)) return;  \n      unsigned int delay = static_cast&lt;unsigned int&gt;(args[1].As&lt;Uint32&gt;()-&gt;Value());  \n      unsigned int detal = static_cast&lt;unsigned int&gt;(args[2].As&lt;Uint32&gt;()-&gt;Value());  \n      unsigned int count = static_cast&lt;unsigned int&gt;(args[3].As&lt;Uint32&gt;()-&gt;Value());  \n      int err = uv_tcp_keepalive_ex(&amp;wrap-&gt;handle_, enable, delay, detal, count);  \n      args.GetReturnValue().Set(err);  \n    }  \n\n    void TCPWrap::SetKeepAliveTimeout(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {  \n      TCPWrap* wrap;  \n      ASSIGN_OR_RETURN_UNWRAP(&amp;wrap,  \n                              args.Holder(),  \n                              args.GetReturnValue().Set(UV_EBADF));  \n      unsigned int time = static_cast&lt;unsigned int&gt;(args[0].As&lt;Uint32&gt;()-&gt;Value());  \n      int err = uv_tcp_timeout(&amp;wrap-&gt;handle_, time);  \n      args.GetReturnValue().Set(err);  \n    }  \n</code></pre> <p>\u540c\u65f6\u8fd8\u9700\u8981\u5728src/tcp_wrap.h\u4e2d\u58f0\u660e\u8fd9\u4e24\u4e2a\u51fd\u6570\u3002</p> <pre><code>    static void SetKeepAliveEx(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n    static void SetKeepAliveTimeout(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);  \n</code></pre> <pre><code>// \u4fee\u6539lib/net.js\n    Socket.prototype.setKeepAliveEx = function(setting,  \n                                               secs,  \n                                               interval,  \n                                               count) {  \n      if (!this._handle) {  \n        this.once('connect', () =&gt; this.setKeepAliveEx(setting,  \n                                                       secs,  \n                                                       interval,  \n                                                       count));  \n        return this;  \n      }  \n\n      if (this._handle.setKeepAliveEx)  \n        this._handle.setKeepAliveEx(setting,  \n                                    ~~secs &gt; 0 ? ~~secs : 0,  \n                                    ~~interval &gt; 0 ? ~~interval : 0,  \n                                    ~~count &gt; 0 ? ~~count : 0);  \n\n      return this;  \n    };  \n\n    Socket.prototype.setKeepAliveTimeout = function(timeout) {  \n      if (!this._handle) {  \n        this.once('connect', () =&gt; this.setKeepAliveTimeout(timeout));  \n        return this;  \n      }  \n\n      if (this._handle.setKeepAliveTimeout)  \n        this._handle.setKeepAliveTimeout(~~timeout &gt; 0 ? ~~timeout : 0);  \n\n      return this;  \n    };  \n</code></pre> <p>\u91cd\u65b0\u7f16\u8bd1Node.js\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e24\u4e2a\u65b0\u7684API\u66f4\u7075\u6d3b\u5730\u63a7\u5236TCP\u7684keepalive\u4e86\u3002</p> <pre><code>    const net = require('net');  \n    net.createServer((socket) =&gt; {  \n      socket.setKeepAliveEx(true, 1,2,3);  \n      // socket.setKeepAliveTimeout(4);  \n    }).listen(1101);  \n</code></pre>"},{"location":"chapter20-%E6%8B%93%E5%B1%95Node.js/#202-n-apic","title":"20.2 \u4f7f\u7528N-API\u7f16\u5199C++\u63d2\u4ef6","text":"<p>\u672c\u5c0f\u8282\u4ecb\u7ecd\u4f7f\u7528N_API\u7f16\u5199C++\u63d2\u4ef6\u77e5\u8bc6\u3002Node.js C++\u63d2\u4ef6\u672c\u8d28\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u5199\u5b8c\u7f16\u8bd1\u540e\uff0c\u751f\u6210\u4e00\u4e2a.node\u6587\u4ef6\u3002\u6211\u4eec\u5728Node.js\u91cc\u76f4\u63a5require\u4f7f\u7528\uff0cNode.js\u4f1a\u4e3a\u6211\u4eec\u5904\u7406\u4e00\u5207\u3002 \u9996\u5148\u5efa\u7acb\u4e00\u4e2atest.cc\u6587\u4ef6</p> <pre><code>    // hello.cc using N-API  \n    #include &lt;node_api.h&gt;  \n\n    namespace demo {  \n\n    napi_value Method(napi_env env, napi_callback_info args) {  \n      napi_value greeting;  \n      napi_status status;  \n\n      status = napi_create_string_utf8(env, \"world\", NAPI_AUTO_LENGTH, &amp;greeting);  \n      if (status != napi_ok) return nullptr;  \n      return greeting;  \n    }  \n\n    napi_value init(napi_env env, napi_value exports) {  \n      napi_status status;  \n      napi_value fn;  \n\n      status = napi_create_function(env, nullptr, 0, Method, nullptr, &amp;fn);  \n      if (status != napi_ok) return nullptr;  \n\n      status = napi_set_named_property(env, exports, \"hello\", fn);  \n      if (status != napi_ok) return nullptr;  \n      return exports;  \n    }  \n\n    NAPI_MODULE(NODE_GYP_MODULE_NAME, init)  \n\n    }  // namespace demo  \n</code></pre> <p>\u6211\u4eec\u4e0d\u9700\u8981\u5177\u4f53\u4e86\u89e3\u4ee3\u7801\u7684\u610f\u601d\uff0c\u4f46\u662f\u4ece\u4ee3\u7801\u4e2d\u6211\u4eec\u5927\u81f4\u77e5\u9053\u5b83\u505a\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002\u5269\u4e0b\u7684\u5c31\u662f\u9605\u8bfbN-API\u7684API\u6587\u6863\u5c31\u53ef\u4ee5\u3002\u63a5\u7740\u6211\u4eec\u65b0\u5efa\u4e00\u4e2abinding.gyp\u6587\u4ef6\u3002gyp\u6587\u4ef6\u662fnode-gyp\u7684\u914d\u7f6e\u6587\u4ef6\u3002node-gyp\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u9488\u5bf9\u4e0d\u540c\u5e73\u53f0\u751f\u4ea7\u4e0d\u540c\u7684\u7f16\u8bd1\u914d\u7f6e\u6587\u4ef6\u3002\u6bd4\u5982Linux\u4e0b\u7684makefile\u3002</p> <pre><code>    {  \n      \"targets\": [  \n        {  \n          \"target_name\": \"test\",  \n          \"sources\": [ \"./test.cc\" ]  \n        }  \n      ]  \n    }  \n</code></pre> <p>\u8bed\u6cd5\u548cmakefile\u6709\u70b9\u50cf\uff0c\u5c31\u662f\u5b9a\u4e49\u6211\u4eec\u7f16\u8bd1\u540e\u7684\u76ee\u524d\u6587\u4ef6\u540d\uff0c\u4f9d\u8d56\u54ea\u4e9b\u6e90\u6587\u4ef6\u3002\u7136\u540e\u6211\u4eec\u5b89\u88c5node-gyp\u3002</p> <pre><code>npm install node-gyp -g  \n</code></pre> <p>Node.js\u6e90\u7801\u4e2d\u4e5f\u6709\u4e00\u4e2anode-gyp\uff0c\u5b83\u662f\u5e2e\u52a9npm\u5b89\u88c5\u62d3\u5c55\u6a21\u5757\u65f6\uff0c\u5c31\u5730\u7f16\u8bd1\u7528\u7684\u3002\u6211\u4eec\u5b89\u88c5\u7684node-gyp\u662f\u5e2e\u52a9\u6211\u4eec\u751f\u6210\u914d\u7f6e\u6587\u4ef6\u5e76\u7f16\u8bd1\u7528\u7684\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003Node.js\u6587\u6863\u3002\u4e00\u5207\u51c6\u5907\u5c31\u7eea\u3002\u6211\u4eec\u5f00\u59cb\u7f16\u8bd1\u3002\u76f4\u63a5\u6267\u884c</p> <pre><code>node-gyp configure\nnode-gyp build  \n</code></pre> <p>\u5728\u8def\u5f84./build/Release/\u4e0b\u751f\u6210\u4e86test.node\u6587\u4ef6\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u7684\u62d3\u5c55\u6a21\u5757\u3002\u6211\u4eec\u7f16\u5199\u6d4b\u8bd5\u7a0b\u5e8fapp.js\u3002</p> <pre><code>    var addon = require(\"./build/Release/test\");  \n    console.log(addon.hello());  \n</code></pre> <p>\u6267\u884c \u2003</p> <pre><code>node app.js  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u8f93\u51faworld\u3002\u6211\u4eec\u5df2\u7ecf\u5b66\u4f1a\u4e86\u5982\u4f55\u7f16\u5199\u4e00\u4e2aNode.js\u7684\u62d3\u5c55\u6a21\u5757\u3002\u5269\u4e0b\u7684\u5c31\u662f\u9605\u8bfbN-API\u6587\u6863\uff0c\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u7f16\u5199\u4e0d\u540c\u7684\u6a21\u5757\u3002</p>"},{"location":"chapter21-JS%20Stream/","title":"20-JS Stream","text":"<p>\u6d41\u662f\u5bf9\u751f\u4ea7\u6570\u636e\u548c\u6d88\u8d39\u6570\u636e\u8fc7\u7a0b\u7684\u62bd\u8c61\uff0c\u6d41\u672c\u8eab\u4e0d\u751f\u4ea7\u548c\u6d88\u8d39\u6570\u636e\uff0c\u5b83\u53ea\u662f\u5b9a\u4e49\u4e86\u6570\u636e\u5904\u7406\u7684\u6d41\u7a0b\u3002\u53ef\u8bfb\u6d41\u662f\u5bf9\u6570\u636e\u6e90\u6d41\u5411\u5176\u5b83\u5730\u65b9\u7684\u8fc7\u7a0b\u62bd\u8c61\uff0c\u5c5e\u4e8e\u751f\u4ea7\u8005\uff0c\u53ef\u8bfb\u6d41\u662f\u5bf9\u6570\u636e\u6d41\u5411\u67d0\u4e00\u76ee\u7684\u5730\u7684\u8fc7\u7a0b\u7684\u62bd\u8c61\u3002Node.js\u4e2d\u7684\u6d41\u5206\u4e3a\u53ef\u8bfb\u3001\u53ef\u5199\u3001\u53ef\u8bfb\u5199\u3001\u8f6c\u6362\u6d41\u3002\u4e0b\u9762\u6211\u5148\u770b\u4e00\u4e0b\u6d41\u7684\u57fa\u7c7b\u3002</p>"},{"location":"chapter21-JS%20Stream/#211","title":"21.1 \u6d41\u57fa\u7c7b\u548c\u6d41\u901a\u7528\u903b\u8f91","text":"<pre><code>    const EE = require('events');  \n    const util = require('util');  \n    // \u6d41\u7684\u57fa\u7c7b  \n    function Stream() {  \n      EE.call(this);  \n    }  \n    // \u7ee7\u627f\u4e8b\u4ef6\u8ba2\u9605\u5206\u53d1\u7684\u80fd\u529b  \n    util.inherits(Stream, EE);  \n</code></pre> <p>\u6d41\u7684\u57fa\u7c7b\u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u5c31\u662fpipe\u3002\u7528\u4e8e\u5b9e\u73b0\u7ba1\u9053\u5316\u3002\u7ba1\u9053\u5316\u662f\u5bf9\u6570\u636e\u4ece\u4e00\u4e2a\u5730\u65b9\u6d41\u5411\u53e6\u4e00\u4e2a\u5730\u65b9\u7684\u62bd\u8c61\u3002\u8fd9\u4e2a\u65b9\u6cd5\u4ee3\u7801\u6bd4\u8f83\u591a\uff0c\u5206\u5f00\u8bf4\u3002</p>"},{"location":"chapter21-JS%20Stream/#2111","title":"21.1.1\u5904\u7406\u6570\u636e\u4e8b\u4ef6","text":"<pre><code>    // \u6570\u636e\u6e90\u5bf9\u8c61  \n    var source = this;  \n\n    // \u76d1\u542cdata\u4e8b\u4ef6\uff0c\u53ef\u8bfb\u6d41\u6709\u6570\u636e\u7684\u65f6\u5019\uff0c\u4f1a\u89e6\u53d1data\u4e8b\u4ef6  \n    source.on('data', ondata);  \n    function ondata(chunk) {  \n      // \u6e90\u6d41\u6709\u6570\u636e\u5230\u8fbe\uff0c\u5e76\u4e14\u76ee\u7684\u6d41\u53ef\u5199  \n      if (dest.writable) {  \n         /* \n          \u76ee\u7684\u6d41\u8fc7\u8f7d\u5e76\u4e14\u6e90\u6d41\u5b9e\u73b0\u4e86pause\u65b9\u6cd5\uff0c\n          \u90a3\u5c31\u6682\u505c\u53ef\u8bfb\u6d41\u7684\u8bfb\u53d6\u64cd\u4f5c\uff0c\u7b49\u5f85\u76ee\u7684\u6d41\u89e6\u53d1drain\u4e8b\u4ef6\n        */  \n        if (false === dest.write(chunk) &amp;&amp; source.pause) {  \n          source.pause();  \n        }  \n      }  \n    }  \n\n    // \u76d1\u542cdrain\u4e8b\u4ef6\uff0c\u76ee\u7684\u6d41\u53ef\u4ee5\u6d88\u8d39\u6570\u636e\u4e86\u5c31\u4f1a\u89e6\u53d1\u8be5\u4e8b\u4ef6  \n    dest.on('drain', ondrain);  \n    function ondrain() {  \n      // \u76ee\u7684\u6d41\u53ef\u7ee7\u7eed\u5199\u4e86\uff0c\u5e76\u4e14\u53ef\u8bfb\u6d41\u53ef\u8bfb\uff0c\u5207\u6362\u6210\u81ea\u52a8\u8bfb\u53d6\u6a21\u5f0f  \n      if (source.readable &amp;&amp; source.resume) {  \n        source.resume();  \n      }  \n    }  \n</code></pre> <p>\u8fd9\u662f\u7ba1\u9053\u5316\u65f6\u6d41\u63a7\u5b9e\u73b0\u7684\u5730\u65b9\uff0c\u4e3b\u8981\u662f\u5229\u7528\u4e86write\u8fd4\u56de\u503c\u548cdrain\u4e8b\u4ef6\u3002  </p>"},{"location":"chapter21-JS%20Stream/#2112","title":"21.1.2\u6d41\u5173\u95ed/\u7ed3\u675f\u5904\u7406","text":"<pre><code>    /* \n      1 dest._isStdio\u662ftrue\u8868\u793a\u76ee\u7684\u6d41\u662f\u6807\u51c6\u8f93\u51fa\u6216\u6807\u51c6\u9519\u8bef\uff08\u89c1\n        process/stdio.js\uff09\uff0c \n      2 \u914d\u7f6e\u7684end\u5b57\u6bb5\u4ee3\u8868\u53ef\u8bfb\u6d41\u89e6\u53d1end\u6216close\u4e8b\u4ef6\u65f6\uff0c\u662f\u5426\u81ea\u52a8\u5173\u95ed\u53ef\u5199\n        \u6d41\uff0c\u9ed8\u8ba4\u662f\u81ea\u52a8\u5173\u95ed\u3002\u5982\u679c\u914d\u7f6e\u4e86end\u662ffalse\uff0c\u5219\u53ef\u8bfb\u6d41\u8fd9\u4e24\u4e2a\u4e8b\u4ef6\u89e6\u53d1\n        \u65f6\uff0c\u6211\u4eec\u9700\u8981\u81ea\u5df1\u5173\u95ed\u53ef\u5199\u6d41\u3002 \n      3 \u6211\u4eec\u770b\u5230\u53ef\u8bfb\u6d41\u7684error\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u53ef\u5199\u6d41\u662f\u4e0d\u4f1a\u88ab\u81ea\u52a8\u5173\u95ed\u7684\uff0c\u9700\u8981\u6211   \n        \u4eec\u81ea\u5df1\u76d1\u542c\u53ef\u8bfb\u6d41\u7684error\u4e8b\u4ef6\uff0c\u7136\u540e\u624b\u52a8\u5173\u95ed\u53ef\u5199\u6d41\u3002\u6240\u4ee5if\u7684\u5224\u65ad\u610f\u601d\n        \u662f\u4e0d\u662f\u6807\u51c6\u8f93\u51fa\u6216\u6807\u51c6\u9519\u8bef\u6d41\uff0c\u5e76\u4e14\u6ca1\u6709\u914d\u7f6eend\u662ffalse\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\n       \u5173\u95ed\u53ef\u5199\u6d41\u3002\u800c\u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u6d41\u662f\u5728\u8fdb\u7a0b\u9000\u51fa\u7684\u65f6\u5019\u624d\u88ab\u5173\u95ed\u7684\u3002 \n    */  \n    if (!dest._isStdio &amp;&amp; (!options || options.end !== false)) {  \n      // \u6e90\u6d41\u6ca1\u6709\u6570\u636e\u53ef\u8bfb\u4e86\uff0c\u6267\u884cend\u56de\u8c03  \n      source.on('end', onend);  \n      // \u6e90\u6d41\u5173\u95ed\u4e86\uff0c\u6267\u884cclose\u56de\u8c03  \n      source.on('close', onclose);  \n    }  \n\n    var didOnEnd = false;  \n    function onend() {  \n      if (didOnEnd) return;  \n      didOnEnd = true;  \n    // \u6267\u884c\u76ee\u7684\u6d41\u7684end\uff0c\u8bf4\u660e\u5199\u6570\u636e\u5b8c\u6bd5  \n      dest.end();  \n    }  \n\n    function onclose() {  \n      if (didOnEnd) return;  \n      didOnEnd = true;  \n      // \u9500\u6bc1\u76ee\u7684\u6d41  \n      if (typeof dest.destroy === 'function') dest.destroy();  \n    }  \n</code></pre> <p>\u4e0a\u9762\u662f\u53ef\u8bfb\u6e90\u6d41\u7ed3\u675f\u6216\u5173\u95ed\u540e\uff0c\u5982\u4f55\u5904\u7406\u53ef\u5199\u6d41\u7684\u903b\u8f91\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u76d1\u542c\u53ef\u8bfb\u6d41\u7684error\u4e8b\u4ef6\uff0c\u7136\u540e\u6267\u884c\u53ef\u5199\u6d41\u7684\u5173\u95ed\u64cd\u4f5c\u3002</p>"},{"location":"chapter21-JS%20Stream/#2113","title":"21.1.3 \u9519\u8bef\u5904\u7406","text":"<pre><code>    // \u53ef\u8bfb\u6d41\u6216\u8005\u53ef\u5199\u6d41\u51fa\u9519\u7684\u65f6\u5019\u90fd\u9700\u8981\u505c\u6b62\u6570\u636e\u7684\u5904\u7406  \n    source.on('error', onerror);  \n    dest.on('error', onerror);  \n    // \u53ef\u8bfb\u6d41\u6216\u8005\u53ef\u5199\u6d41\u89e6\u53d1error\u4e8b\u4ef6\u65f6\u7684\u5904\u7406\u903b\u8f91  \n    function onerror(er) {  \n      // \u51fa\u9519\u4e86\uff0c\u6e05\u9664\u6ce8\u518c\u7684\u4e8b\u4ef6\uff0c\u5305\u62ec\u6b63\u5728\u6267\u884c\u7684onerror\u51fd\u6570  \n      cleanup();  \n      /*\n        \u5982\u679c\u7528\u6237\u6ca1\u6709\u76d1\u542c\u6d41\u7684error\u4e8b\u4ef6\uff0c\u5219\u629b\u51fa\u9519\u8bef\uff0c\n       \u6240\u4ee5\u6211\u4eec\u4e1a\u52a1\u4ee3\u7801\u9700\u8981\u76d1\u542cerror\u4e8b\u4ef6  \n      */\n      if (EE.listenerCount(this, 'error') === 0) {  \n        throw er; // Unhandled stream error in pipe.  \n      }  \n    }  \n</code></pre> <p>\u5728error\u4e8b\u4ef6\u7684\u5904\u7406\u51fd\u6570\u4e2d\uff0c\u901a\u8fc7cleanup\u51fd\u6570\u6e05\u9664\u4e86Node.js\u672c\u8eab\u6ce8\u518c\u7684error\u4e8b\u4ef6\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019\u5982\u679c\u7528\u6237\u6ca1\u6709\u6ce8\u518cerror\u4e8b\u4ef6\uff0c\u5219error\u4e8b\u4ef6\u7684\u5904\u7406\u51fd\u6570\u4e2a\u6570\u4e3a0,\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6ce8\u518cerror\u4e8b\u4ef6\u3002\u4e0b\u9762\u6211\u4eec\u518d\u5206\u6790cleanup\u51fd\u6570\u7684\u903b\u8f91\u3002</p>"},{"location":"chapter21-JS%20Stream/#2114","title":"21.1.4 \u6e05\u9664\u6ce8\u518c\u7684\u4e8b\u4ef6","text":"<pre><code>    // \u4fdd\u8bc1\u6e90\u6d41\u5173\u95ed\u3001\u6570\u636e\u8bfb\u5b8c\u3001\u76ee\u7684\u6d41\u5173\u95ed\u65f6\u6e05\u9664\u6ce8\u518c\u7684\u4e8b\u4ef6  \n    source.on('end', cleanup);  \n    source.on('close', cleanup);  \n    dest.on('close', cleanup);   \n    // \u6e05\u9664\u6240\u6709\u53ef\u80fd\u4f1a\u7ed1\u5b9a\u7684\u4e8b\u4ef6\uff0c\u5982\u679c\u6ca1\u6709\u7ed1\u5b9a\uff0c\u6267\u884c\u6e05\u9664\u4e5f\u662f\u65e0\u5bb3\u7684\n    function cleanup() {  \n      source.removeListener('data', ondata);  \n      dest.removeListener('drain', ondrain);  \n\n      source.removeListener('end', onend);  \n      source.removeListener('close', onclose);  \n\n      source.removeListener('error', onerror);  \n      dest.removeListener('error', onerror);  \n\n      source.removeListener('end', cleanup);  \n      source.removeListener('close', cleanup);  \n\n      dest.removeListener('close', cleanup);  \n    }  \n\n    // \u89e6\u53d1\u76ee\u7684\u6d41\u7684pipe\u4e8b\u4ef6  \n    dest.emit('pipe', source); \n    // \u652f\u6301\u8fde\u7eed\u7684\u7ba1\u9053\u5316A.pipe(B).pipe(C)  \n    return dest;  \n</code></pre>"},{"location":"chapter21-JS%20Stream/#2115","title":"21.1.5 \u6d41\u7684\u9608\u503c","text":"<p>\u901a\u8fc7<code>getHighWaterMark\uff08lib\\internal\\streams\\state.js\uff09</code>\u51fd\u6570\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6d41\u7684\u9608\u503c\uff0c\u9608\u503c\u7528\u4e8e\u63a7\u5236\u7528\u6237\u8bfb\u5199\u6570\u636e\u7684\u901f\u5ea6\u3002\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\u3002</p> <pre><code>    function getHighWaterMark(state, options, duplexKey, isDuplex) {   // \u7528\u6237\u5b9a\u4e49\u7684\u9608\u503c  \n      let hwm = options.highWaterMark;  \n      // \u7528\u6237\u5b9a\u4e49\u4e86\uff0c\u5219\u6821\u9a8c\u662f\u5426\u5408\u6cd5  \n      if (hwm != null) {  \n        if (typeof hwm !== 'number' || !(hwm &gt;= 0))  \n          throw new errors.TypeError('ERR_INVALID_OPT_VALUE', \n                                       'highWaterMark', \n                                       hwm);  \n        return Math.floor(hwm);  \n      } else if (isDuplex) {\n        // \u7528\u6237\u6ca1\u6709\u5b9a\u4e49\u516c\u5171\u7684\u9608\u503c\uff0c\u5373\u8bfb\u5199\u6d41\u516c\u7528\u7684\u9608\u503c  \n        // \u7528\u6237\u662f\u5426\u5b9a\u4e49\u4e86\u6d41\u5355\u72ec\u7684\u9608\u503c\uff0c\u6bd4\u5982\u8bfb\u6d41\u7684\u9608\u503c\u6216\u8005\u5199\u6d41\u7684\u9608\u503c  \n        hwm = options[duplexKey];  \n        // \u7528\u6237\u6709\u5b9a\u4e49  \n        if (hwm != null) {  \n          if (typeof hwm !== 'number' || !(hwm &gt;= 0))  \n            throw new errors.TypeError('ERR_INVALID_OPT_VALUE', \n                                          duplexKey, \n                                          hwm);  \n          return Math.floor(hwm);  \n        }  \n      }  \n\n      // \u9ed8\u8ba4\u503c\uff0c\u5bf9\u8c61\u662f16\u4e2a\uff0cbuffer\u662f16KB  \n      return state.objectMode ? 16 : 16 * 1024;  \n    }  \n</code></pre> <p>getHighWaterMark\u51fd\u6570\u903b\u8f91\u5982\u4e0b 1 \u7528\u6237\u5b9a\u4e49\u4e86\u5408\u6cd5\u7684\u9608\u503c\uff0c\u5219\u53d6\u7528\u6237\u5b9a\u4e49\u7684\uff08\u53ef\u8bfb\u6d41\u3001\u53ef\u5199\u6d41\u3001\u53cc\u5411\u6d41\uff09\u3002 2 \u5982\u679c\u662f\u53cc\u5411\u6d41\uff0c\u5e76\u4e14\u7528\u6237\u6ca1\u6709\u53ef\u8bfb\u6d41\u53ef\u5199\u6d41\u5171\u4eab\u7684\u5b9a\u4e49\u9608\u503c\uff0c\u6839\u636e\u5f53\u524d\u662f\u53ef\u8bfb\u6d41\u8fd8\u662f\u53ef\u5199\u6d41\uff0c\u5224\u65ad\u7528\u6237\u662f\u5426\u8bbe\u7f6e\u5bf9\u5e94\u6d41\u7684\u9608\u503c\u3002\u6709\u5219\u53d6\u7528\u6237\u8bbe\u7f6e\u7684\u503c\u4f5c\u4e3a\u9608\u503c\u3002 3 \u5982\u679c\u4e0d\u6ee1\u8db31,2\uff0c\u5219\u8fd4\u56de\u9ed8\u8ba4\u503c\u3002  </p>"},{"location":"chapter21-JS%20Stream/#2116","title":"21.1.6 \u9500\u6bc1\u6d41","text":"<p>\u901a\u8fc7\u8c03\u7528destroy\u51fd\u6570\u53ef\u4ee5\u9500\u6bc1\u4e00\u4e2a\u6d41\uff0c\u5305\u62ec\u53ef\u8bfb\u6d41\u548c\u53ef\u5199\u6d41\u3002\u5e76\u4e14\u53ef\u4ee5\u5b9e\u73b0_ destroy\u51fd\u6570\u81ea\u5b9a\u4e49\u9500\u6bc1\u7684\u884c\u4e3a\u3002\u6211\u4eec\u770b\u770b\u53ef\u5199\u6d41\u7684destroy\u51fd\u6570\u5b9a\u4e49\u3002</p> <pre><code>    function destroy(err, cb) {  \n      // \u8bfb\u6d41\u3001\u5199\u6d41\u3001\u53cc\u5411\u6d41  \n      const readableDestroyed = this._readableState &amp;&amp;  \n        this._readableState.destroyed;  \n      const writableDestroyed = this._writableState &amp;&amp;  \n        this._writableState.destroyed;  \n      // \u6d41\u662f\u5426\u5df2\u7ecf\u9500\u6bc1\uff0c\u662f\u5219\u76f4\u63a5\u6267\u884c\u56de\u8c03  \n      if (readableDestroyed || writableDestroyed) {  \n        // \u4f20\u4e86cb\uff0c\u5219\u6267\u884c\uff0c\u53ef\u9009\u5730\u4f20\u5165err\uff0c\u7528\u6237\u5b9a\u4e49\u7684err  \n        if (cb) {  \n          cb(err);  \n        } else if (err &amp;&amp;  \n                   (!this._writableState || \n                     !this._writableState.errorEmitted)) {  \n          /*\n          \u4f20\u4e86err\uff0c\u662f\u8bfb\u6d41\u6216\u8005\u6ca1\u6709\u89e6\u53d1\u8fc7error\u4e8b\u4ef6\u7684\u5199\u6d41\uff0c\n             \u5219\u89e6\u53d1error\u4e8b\u4ef6\n           */  \n          process.nextTick(emitErrorNT, this, err);  \n        }  \n        return this;  \n      }  \n\n      // \u8fd8\u6ca1\u6709\u9500\u6bc1\u5219\u5f00\u59cb\u9500\u6bc1\u6d41\u7a0b  \n      if (this._readableState) {  \n        this._readableState.destroyed = true;  \n      }  \n\n      if (this._writableState) {  \n        this._writableState.destroyed = true;  \n      }  \n      // \u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49_destroy\u51fd\u6570  \n      this._destroy(err || null, (err) =&gt; {  \n        // \u6ca1\u6709cb\u4f46\u662f\u6709error\uff0c\u5219\u89e6\u53d1error\u4e8b\u4ef6  \n        if (!cb &amp;&amp; err) {  \n          process.nextTick(emitErrorNT, this, err);  \n          // \u53ef\u5199\u6d41\u5219\u6807\u8bb0\u5df2\u7ecf\u89e6\u53d1\u8fc7error\u4e8b\u4ef6  \n          if (this._writableState) {  \n            this._writableState.errorEmitted = true;  \n          }  \n        } else if (cb) { // \u6709cb\u6216\u8005\u6ca1\u6709err  \n          cb(err);  \n        }  \n      });  \n\n      return this;  \n    }  \n</code></pre> <p>destroy\u51fd\u6570\u9500\u6bc1\u6d41\u7684\u901a\u7528\u903b\u8f91\u3002\u5176\u4e2d_destroy\u51fd\u6570\u4e0d\u540c\u7684\u6d41\u4e0d\u4e00\u6837\uff0c\u4e0b\u9762\u5206\u522b\u662f\u53ef\u8bfb\u6d41\u548c\u53ef\u5199\u6d41\u7684\u5b9e\u73b0\u3002 1 \u53ef\u8bfb\u6d41</p> <pre><code>    Readable.prototype._destroy = function(err, cb) {  \n      this.push(null);  \n      cb(err);  \n    };  \n</code></pre> <p>2 \u53ef\u5199\u6d41</p> <pre><code>    Writable.prototype._destroy = function(err, cb) {  \n      this.end();  \n      cb(err);  \n    };  \n</code></pre>"},{"location":"chapter21-JS%20Stream/#212","title":"21.2 \u53ef\u8bfb\u6d41","text":"<p>Node.js\u4e2d\u53ef\u8bfb\u6d41\u6709\u4e24\u79cd\u5de5\u4f5c\u6a21\u5f0f\uff1a\u6d41\u5f0f\u548c\u6682\u505c\u5f0f\uff0c\u6d41\u5f0f\u5c31\u662f\u6709\u6570\u636e\u7684\u65f6\u5019\u5c31\u4f1a\u89e6\u53d1\u56de\u8c03\uff0c\u5e76\u4e14\u628a\u6570\u636e\u4f20\u7ed9\u56de\u8c03\uff0c\u6682\u505c\u5f0f\u5c31\u662f\u9700\u8981\u7528\u6237\u81ea\u5df1\u624b\u52a8\u6267\u884c\u8bfb\u53d6\u7684\u64cd\u4f5c\u3002\u6211\u4eec\u901a\u8fc7\u6e90\u7801\u53bb\u4e86\u89e3\u4e00\u4e0b\u53ef\u8bfb\u6d41\u5b9e\u73b0\u7684\u4e00\u4e9b\u903b\u8f91\u3002\u56e0\u4e3a\u5b9e\u73b0\u7684\u4ee3\u7801\u6bd4\u8f83\u591a\uff0c\u903b\u8f91\u4e5f\u6bd4\u8f83\u7ed5\uff0c\u672c\u6587\u53ea\u5206\u6790\u4e00\u4e9b\u4e3b\u8981\u7684\u903b\u8f91\u3002\u6211\u4eec\u5148\u770b\u4e00\u4e0bReadableState\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u662f\u8868\u793a\u53ef\u8bfb\u6d41\u7684\u4e00\u4e9b\u72b6\u6001\u548c\u5c5e\u6027\u7684\u3002</p> <pre><code>    function ReadableState(options, stream) {  \n      options = options || {};  \n      // \u662f\u5426\u662f\u53cc\u5411\u6d41  \n      var isDuplex = stream instanceof Stream.Duplex;  \n      // \u6570\u636e\u6a21\u5f0f  \n      this.objectMode = !!options.objectMode;  \n      // \u53cc\u5411\u6d41\u7684\u65f6\u5019\uff0c\u8bbe\u7f6e\u8bfb\u7aef\u7684\u6a21\u5f0f  \n      if (isDuplex)  \n        this.objectMode = this.objectMode || \n                                !!options.readableObjectMode;  \n      // \u8bfb\u5230highWaterMark\u4e2a\u5b57\u8282\u5219\u505c\u6b62\uff0c\u5bf9\u8c61\u6a21\u5f0f\u7684\u8bdd\u5219\u662f16\u4e2a\u5bf9\u8c61  \n      this.highWaterMark = getHighWaterMark(this, \n                           options,                                'readableHighWaterMark',  \n                          isDuplex);  \n      // \u5b58\u50a8\u6570\u636e\u7684\u7f13\u51b2\u533a  \n      this.buffer = new BufferList();  \n      // \u53ef\u8bfb\u6570\u636e\u7684\u957f\u5ea6  \n      this.length = 0;  \n      // \u7ba1\u9053\u7684\u76ee\u7684\u6e90\u548c\u4e2a\u6570  \n      this.pipes = null;  \n      this.pipesCount = 0;  \n      // \u5de5\u4f5c\u6a21\u5f0f  \n      this.flowing = null;  \n      // \u6d41\u662f\u5426\u5df2\u7ecf\u7ed3\u675f  \n      this.ended = false;  \n      // \u662f\u5426\u89e6\u53d1\u8fc7end\u4e8b\u4ef6\u4e86  \n      this.endEmitted = false;  \n      // \u662f\u5426\u6b63\u5728\u8bfb\u53d6\u6570\u636e  \n      this.reading = false; \n      // \u662f\u5426\u540c\u6b65\u6267\u884c\u4e8b\u4ef6  \n      this.sync = true;  \n      // \u662f\u5426\u9700\u8981\u89e6\u53d1readable\u4e8b\u4ef6  \n      this.needReadable = false;  \n      // \u662f\u5426\u89e6\u53d1\u4e86readable\u4e8b\u4ef6  \n      this.emittedReadable = false;  \n      // \u662f\u5426\u76d1\u542c\u4e86readable\u4e8b\u4ef6  \n      this.readableListening = false;  \n      // \u662f\u5426\u6b63\u5728\u6267\u884cresume\u7684\u8fc7\u7a0b  \n      this.resumeScheduled = false;\n      // \u6d41\u662f\u5426\u5df2\u9500\u6bc1  \n      this.destroyed = false;  \n      // \u6570\u636e\u7f16\u7801\u683c\u5f0f  \n      this.defaultEncoding = options.defaultEncoding || 'utf8'; \n      /*\n          \u5728\u7ba1\u9053\u5316\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u5199\u8005\u5df2\u7ecf\u8fbe\u5230\u9608\u503c\uff0c\n          \u9700\u8981\u7b49\u5f85\u89e6\u53d1drain\u4e8b\u4ef6,awaitDrain\u8bb0\u5f55\u8fbe\u5230\u9608\u503c\u7684\u5199\u8005\u4e2a\u6570\n        */  \n      this.awaitDrain = 0;  \n      // \u6267\u884cmaybeReadMore\u51fd\u6570\u7684\u65f6\u5019\uff0c\u8bbe\u7f6e\u4e3atrue  \n      this.readingMore = false; \n      this.decoder = null;  \n      this.encoding = null;  \n      // \u7f16\u7801\u89e3\u7801\u5668  \n      if (options.encoding) {  \n        if (!StringDecoder)  \n          StringDecoder = require('string_decoder').StringDecoder;\n        this.decoder = new StringDecoder(options.encoding);  \n        this.encoding = options.encoding;  \n      }  \n    }  \n</code></pre> <p>ReadableState\u91cc\u5305\u542b\u4e86\u4e00\u5927\u5806\u5b57\u6bb5\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u4e0d\u7ba1\u5b83\uff0c\u7b49\u5f85\u7528\u5230\u7684\u65f6\u5019\uff0c\u518d\u56de\u5934\u770b\u3002\u63a5\u7740\u6211\u4eec\u5f00\u59cb\u770b\u53ef\u8bfb\u6d41\u7684\u5b9e\u73b0\u3002  </p> <pre><code>    function Readable(options) {  \n      if (!(this instanceof Readable))  \n        return new Readable(options);  \n\n      this._readableState = new ReadableState(options, this);  \n      // \u53ef\u8bfb  \n      this.readable = true;  \n      // \u7528\u6237\u5b9e\u73b0\u7684\u4e24\u4e2a\u51fd\u6570  \n      if (options) {  \n        if (typeof options.read === 'function')  \n          this._read = options.read;  \n        if (typeof options.destroy === 'function')  \n          this._destroy = options.destroy;  \n      }  \n      // \u521d\u59cb\u5316\u7236\u7c7b  \n      Stream.call(this);  \n    }  \n</code></pre> <p>\u4e0a\u9762\u7684\u903b\u8f91\u4e0d\u591a\uff0c\u9700\u8981\u5173\u6ce8\u7684\u662fread\u548cdestroy\u8fd9\u4e24\u4e2a\u51fd\u6570\uff0c\u5982\u679c\u6211\u4eec\u662f\u76f4\u63a5\u4f7f\u7528Readable\u4f7f\u7528\u53ef\u8bfb\u6d41\uff0c\u90a3\u5728options\u91cc\u662f\u5fc5\u987b\u4f20read\u51fd\u6570\u7684\uff0cdestroy\u662f\u53ef\u9009\u7684\u3002\u5982\u679c\u6211\u4eec\u662f\u4ee5\u7ee7\u627f\u7684\u65b9\u5f0f\u4f7f\u7528Readable\uff0c\u90a3\u5fc5\u987b\u5b9e\u73b0_read\u51fd\u6570\u3002Node.js\u53ea\u662f\u62bd\u8c61\u4e86\u6d41\u7684\u903b\u8f91\uff0c\u5177\u4f53\u7684\u64cd\u4f5c\uff08\u6bd4\u5982\u53ef\u8bfb\u6d41\u5c31\u662f\u8bfb\u53d6\u6570\u636e\uff09\u662f\u7531\u7528\u6237\u81ea\u5df1\u5b9e\u73b0\u7684\uff0c\u56e0\u4e3a\u8bfb\u53d6\u64cd\u4f5c\u662f\u4e1a\u52a1\u76f8\u5173\u7684\u3002\u4e0b\u9762\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u53ef\u8bfb\u6d41\u7684\u64cd\u4f5c\u3002 </p>"},{"location":"chapter21-JS%20Stream/#2121","title":"21.2.1 \u53ef\u8bfb\u6d41\u4ece\u5e95\u5c42\u8d44\u6e90\u83b7\u53d6\u6570\u636e","text":"<p>\u5bf9\u7528\u6237\u6765\u8bf4\uff0c\u53ef\u8bfb\u6d41\u662f\u7528\u6237\u83b7\u53d6\u6570\u636e\u7684\u5730\u65b9\uff0c\u4f46\u662f\u5bf9\u53ef\u8bfb\u6d41\u6765\u8bf4\uff0c\u5b83\u63d0\u4f9b\u6570\u636e\u7ed9\u7528\u6237\u7684\u524d\u63d0\u662f\u5b83\u81ea\u5df1\u6709\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u8bfb\u6d41\u9996\u5148\u9700\u8981\u751f\u4ea7\u6570\u636e\u3002\u751f\u4ea7\u6570\u636e\u7684\u903b\u8f91\u7531_read\u51fd\u6570\u5b9e\u73b0\u3002_read\u51fd\u6570\u7684\u903b\u8f91\u5927\u6982\u662f  </p> <pre><code>    const data = getSomeData();  \n    readableStream.push(data);  \n</code></pre> <p>\u901a\u8fc7push\u51fd\u6570\uff0c\u5f80\u53ef\u8bfb\u6d41\u91cc\u5199\u5165\u6570\u636e\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4e3a\u7528\u6237\u63d0\u4f9b\u6570\u636e\uff0c\u6211\u4eec\u770b\u770bpush\u7684\u5b9e\u73b0\uff0c\u53ea\u5217\u51fa\u4e3b\u8981\u903b\u8f91\u3002     Read</p> <pre><code>able.prototype.push = function(chunk, encoding) {  \n      // \u7701\u7565\u4e86\u7f16\u7801\u5904\u7406\u7684\u4ee3\u7801  \n      return readableAddChunk(this, \n                                 chunk, \n                                 encoding, \n                                 false, \n                                 skipChunkCheck);  \n    };  \n\n    function readableAddChunk(stream, \n                               chunk, \n                               encoding, \n                               addToFront, \n                               skipChunkCheck) {  \n      var state = stream._readableState;  \n      // push null\u4ee3\u8868\u6d41\u7ed3\u675f  \n      if (chunk === null) {  \n        state.reading = false;  \n        onEofChunk(stream, state);  \n      } else {  \n        addChunk(stream, state, chunk, false);  \n      }  \n      // \u8fd4\u56de\u662f\u5426\u8fd8\u53ef\u4ee5\u8bfb\u53d6\u66f4\u591a\u6570\u636e  \n      return needMoreData(state);  \n    }  \n\n    function addChunk(stream, state, chunk, addToFront) {  \n      // \u662f\u6d41\u6a21\u5f0f\u5e76\u4e14\u6ca1\u6709\u7f13\u5b58\u7684\u6570\u636e\uff0c\u5219\u76f4\u63a5\u89e6\u53d1data\u4e8b\u4ef6  \n      if (state.flowing &amp;&amp; state.length === 0 &amp;&amp; !state.sync) { \n        stream.emit('data', chunk);  \n      } else {  \n        // \u5426\u5219\u5148\u628a\u6570\u636e\u7f13\u5b58\u8d77\u6765  \n        state.length += state.objectMode ? 1 : chunk.length;  \n        if (addToFront)  \n          state.buffer.unshift(chunk);  \n        else  \n          state.buffer.push(chunk);  \n        // \u76d1\u542c\u4e86readable\u4e8b\u4ef6\u5219\u89e6\u53d1readable\u4e8b\u4ef6\uff0c\u901a\u8fc7read\u4e3b\u52a8\u8bfb\u53d6  \n        if (state.needReadable)  \n          emitReadable(stream);  \n      }  \n      // \u7ee7\u7eed\u8bfb\u53d6\u6570\u636e\uff0c\u5982\u679c\u53ef\u4ee5\u7684\u8bdd  \n      maybeReadMore(stream, state);  \n    }  \n</code></pre> <p>\u603b\u7684\u6765\u8bf4\uff0c\u53ef\u8bfb\u6d41\u9996\u5148\u8981\u4ece\u67d0\u4e2a\u5730\u65b9\u83b7\u53d6\u6570\u636e\uff0c\u6839\u636e\u5f53\u524d\u7684\u5de5\u4f5c\u6a21\u5f0f\uff0c\u76f4\u63a5\u4ea4\u4ed8\u7ed9\u7528\u6237\uff0c\u6216\u8005\u5148\u7f13\u5b58\u8d77\u6765\u3002\u53ef\u4ee5\u7684\u60c5\u51b5\u4e0b\uff0c\u7ee7\u7eed\u83b7\u53d6\u6570\u636e\u3002</p>"},{"location":"chapter21-JS%20Stream/#2122","title":"21.2.2 \u7528\u6237\u4ece\u53ef\u8bfb\u6d41\u83b7\u53d6\u6570\u636e","text":"<p>\u7528\u6237\u53ef\u4ee5\u901a\u8fc7read\u51fd\u6570\u6216\u8005\u76d1\u542cdata\u4e8b\u4ef6\u6765\u4ece\u53ef\u8bfb\u6d41\u4e2d\u83b7\u53d6\u6570\u636e  </p> <pre><code>    Readable.prototype.read = function(n) {  \n      n = parseInt(n, 10);  \n      var state = this._readableState;  \n      // \u8ba1\u7b97\u53ef\u8bfb\u7684\u5927\u5c0f  \n      n = howMuchToRead(n, state);  \n      var ret;  \n      // \u9700\u8981\u8bfb\u53d6\u7684\u5927\u4e8e0\uff0c\u5219\u53d6\u8bfb\u53d6\u6570\u636e\u5230ret\u8fd4\u56de  \n      if (n &gt; 0)  \n        ret = fromList(n, state);  \n      else  \n        ret = null;  \n      // \u51cf\u53bb\u521a\u8bfb\u53d6\u7684\u957f\u5ea6  \n      state.length -= n;  \n      /*\n         \u5982\u679c\u7f13\u5b58\u91cc\u6ca1\u6709\u6570\u636e\u6216\u8005\u8bfb\u5b8c\u540e\u5c0f\u4e8e\u9608\u503c\u4e86\uff0c\n          \u5219\u53ef\u8bfb\u6d41\u53ef\u4ee5\u7ee7\u7eed\u4ece\u5e95\u5c42\u8d44\u6e90\u91cc\u83b7\u53d6\u6570\u636e  \n        */\n      if (state.length === 0 || \n             state.length - n &lt; state.highWaterMark) {  \n         this._read(state.highWaterMark);  \n      }  \n      // \u89e6\u53d1data\u4e8b\u4ef6  \n      if (ret !== null)  \n        this.emit('data', ret); \n      return ret;  \n    };  \n</code></pre> <p>\u8bfb\u53d6\u6570\u636e\u7684\u64cd\u4f5c\u5c31\u662f\u8ba1\u7b97\u7f13\u5b58\u91cc\u6709\u591a\u5c11\u6570\u636e\u53ef\u4ee5\u8bfb\uff0c\u548c\u7528\u6237\u9700\u8981\u7684\u6570\u636e\u5927\u5c0f\uff0c\u53d6\u5c0f\u7684\uff0c\u7136\u540e\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5e76\u89e6\u53d1data\u4e8b\u4ef6\u3002\u5982\u679c\u6570\u636e\u8fd8\u6ca1\u6709\u8fbe\u5230\u9608\u503c\uff0c\u5219\u89e6\u53d1\u53ef\u8bfb\u6d41\u4ece\u5e95\u5c42\u8d44\u6e90\u4e2d\u83b7\u53d6\u6570\u636e\u3002\u4ece\u800c\u6e90\u6e90\u4e0d\u65ad\u5730\u751f\u6210\u6570\u636e\u3002</p>"},{"location":"chapter21-JS%20Stream/#213","title":"21.3 \u53ef\u5199\u6d41","text":"<p>\u53ef\u5199\u6d41\u662f\u5bf9\u6570\u636e\u6d41\u5411\u7684\u62bd\u8c61\uff0c\u7528\u6237\u8c03\u7528\u53ef\u5199\u6d41\u7684\u63a5\u53e3\uff0c\u53ef\u5199\u6d41\u8d1f\u8d23\u63a7\u5236\u6570\u636e\u7684\u5199\u5165\u3002\u6d41\u7a0b\u5982\u56fe21-1\u6240\u793a\u3002  \u56fe21-1 \u4e0b\u9762\u662f\u53ef\u5199\u6d41\u7684\u4ee3\u7801\u903b\u8f91\u56fe\u5982\u56fe21-2\u6240\u793a\u3002  \u56fe21-2 \u6211\u4eec\u770b\u4e00\u4e0b\u53ef\u5199\u6d41\u7684\u5b9e\u73b0\u3002</p>"},{"location":"chapter21-JS%20Stream/#2131-writablestate","title":"21.3.1 WritableState","text":"<p>WritableState\u662f\u7ba1\u7406\u53ef\u5199\u6d41\u914d\u7f6e\u7684\u7c7b\u3002\u91cc\u9762\u5305\u542b\u4e86\u975e\u5e38\u7684\u5b57\u6bb5\uff0c\u5177\u4f53\u542b\u4e49\u6211\u4eec\u4f1a\u5728\u540e\u7eed\u5206\u6790\u7684\u65f6\u5019\u8bb2\u89e3\u3002</p> <pre><code>    function WritableState(options, stream) {  \n      options = options || {};  \n\n      // \u662f\u4e0d\u662f\u53cc\u5411\u6d41  \n      var isDuplex = stream instanceof Stream.Duplex;  \n\n      // \u6570\u636e\u6a21\u5f0f  \n      this.objectMode = !!options.objectMode;  \n      /*\n       \u53cc\u5411\u6d41\u7684\u6d41\u9ed8\u8ba4\u5171\u4eabobjectMode\u914d\u7f6e\uff0c\n       \u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u914d\u7f6e\u6210\u975e\u5171\u4eab\uff0c\u5373\u8bfb\u6d41\u548c\u5199\u6d41\u7684\u6570\u636e\u6a21\u5f0f\u72ec\u7acb\n      */  \n      if (isDuplex)  \n        this.objectMode = this.objectMode || \n                            !!options.writableObjectMode;  \n\n      /*  \n        \u9608\u503c\uff0c\u8d85\u8fc7\u540e\u8bf4\u660e\u9700\u8981\u6682\u505c\u8c03\u7528write\uff0c0\u4ee3\u8868\u6bcf\u6b21\u8c03\u7528write\n        \u7684\u65f6\u5019\u90fd\u8fd4\u56defalse\uff0c\u7528\u6237\u7b49\u5f85drain\u4e8b\u4ef6\u89e6\u53d1\u540e\u518d\u6267\u884cwrite \n      */  \n      this.highWaterMark = getHighWaterMark(this, \n                   options, 'writableHighWaterMark',isDuplex);  \n\n      // \u662f\u5426\u8c03\u7528\u4e86_final\u51fd\u6570  \n      this.finalCalled = false;  \n\n      // \u662f\u5426\u9700\u8981\u89e6\u53d1drain\u4e8b\u4ef6\uff0c\u91cd\u65b0\u9a71\u52a8\u751f\u4ea7\u8005  \n      this.needDrain = false;  \n\n      // \u6b63\u5728\u6267\u884cend\u6d41\u7a0b  \n      this.ending = false;  \n\n      // \u662f\u5426\u6267\u884c\u8fc7end\u51fd\u6570  \n      this.ended = false;  \n\n      // \u662f\u5426\u89e6\u53d1\u4e86finish\u4e8b\u4ef6  \n      this.finished = false;  \n\n      // \u6d41\u662f\u5426\u88ab\u9500\u6bc1\u4e86  \n      this.destroyed = false;  \n\n      var noDecode = options.decodeStrings === false;  \n      // \u662f\u5426\u9700\u8981decode\u6d41\u6570\u636e\u540e\u5728\u6267\u884c\u5199\uff08\u8c03\u7528\u7528\u6237\u5b9a\u4e49\u7684_write\uff09  \n      this.decodeStrings = !noDecode;  \n\n      // \u7f16\u7801\u7c7b\u578b  \n      this.defaultEncoding = options.defaultEncoding || 'utf8';  \n\n      // \u5f85\u5199\u5165\u7684\u6570\u636e\u957f\u5ea6\u6216\u5bf9\u8c61\u6570  \n      this.length = 0;  \n\n      // \u6b63\u5728\u5f80\u5e95\u5c42\u5199  \n      this.writing = false;  \n\n      // \u52a0\u585e\uff0c\u7f13\u5b58\u751f\u4ea7\u8005\u7684\u6570\u636e\uff0c\u505c\u6b62\u5f80\u5e95\u5c42\u5199\u5165  \n      this.corked = 0;  \n\n      // \u7528\u6237\u5b9a\u4e49\u7684_write\u6216\u8005_writev\u662f\u540c\u6b65\u8fd8\u662f\u5f02\u6b65\u8c03\u7528\u53ef\u5199\u6d41\u7684\u56de\u8c03\u51fd\u6570onwrite  \n      this.sync = true;  \n\n      // \u662f\u5426\u6b63\u5728\u5904\u7406\u7f13\u5b58\u7684\u6570\u636e  \n      this.bufferProcessing = false;  \n\n      // \u7528\u6237\u5b9e\u73b0\u7684\u94a9\u5b50_write\u51fd\u6570\u91cc\u9700\u8981\u6267\u884c\u7684\u56de\u8c03\uff0c\u544a\u8bc9\u5199\u6d41\u5199\u5b8c\u6210\u4e86  \n      this.onwrite = onwrite.bind(undefined, stream);  \n\n      // \u5f53\u524d\u5199\u64cd\u4f5c\u5bf9\u5e94\u7684\u56de\u8c03  \n      this.writecb = null;  \n\n      // \u5f53\u524d\u5199\u64cd\u4f5c\u7684\u6570\u636e\u957f\u5ea6\u6216\u5bf9\u8c61\u6570  \n      this.writelen = 0;  \n\n      // \u7f13\u5b58\u7684\u6570\u636e\u94fe\u8868\u5934\u6307\u9488  \n      this.bufferedRequest = null;  \n\n      // \u6307\u5411\u7f13\u5b58\u7684\u6570\u636e\u94fe\u8868\u6700\u540e\u4e00\u4e2a\u8282\u70b9  \n      this.lastBufferedRequest = null;  \n\n      // \u5f85\u6267\u884c\u7684\u56de\u8c03\u51fd\u6570\u4e2a\u6570  \n      this.pendingcb = 0;  \n\n      // \u662f\u5426\u5df2\u7ecf\u89e6\u53d1\u8fc7prefinished\u4e8b\u4ef6  \n      this.prefinished = false;  \n\n      // \u662f\u5426\u5df2\u7ecf\u89e6\u53d1\u8fc7error\u4e8b\u4ef6  \n      this.errorEmitted = false;  \n\n      // count buffered requests  \n      // \u7f13\u5b58\u7684buffer\u6570  \n      this.bufferedRequestCount = 0;  \n\n      /* \n        \u7a7a\u95f2\u7684\u8282\u70b9\u94fe\u8868\uff0c\u5f53\u628a\u7f13\u5b58\u6570\u636e\u5199\u5165\u5e95\u5c42\u65f6\uff0ccorkReq\u4fdd\u6570\u636e\u7684\u4e0a\u4e0b\u6587\uff08\u5982 \n        \u7528\u6237\u56de\u8c03\uff09\uff0c\u56e0\u4e3a\u8fd9\u65f6\u5019\uff0c\u7f13\u5b58\u94fe\u8868\u5df2\u7ecf\u88ab\u6e05\u7a7a\uff0c\n        this.corkedRequestsFree\u59cb\u7ec8\u7ef4\u62a4\u4e00\u4e2a\u7a7a\u95f2\u8282\u70b9\uff0c\u6700\u591a\u4e24\u4e2a \n      */  \n      var corkReq = { next: null, entry: null, finish: undefined };  \n      corkReq.finish = onCorkedFinish.bind(undefined, corkReq, this);  \n      this.corkedRequestsFree = corkReq;  \n    }  \n</code></pre>"},{"location":"chapter21-JS%20Stream/#2132-writable","title":"21.3.2 Writable","text":"<p>Writable\u662f\u53ef\u5199\u6d41\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528Writable\u4f5c\u4e3a\u53ef\u5199\u6d41\u6765\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u7ee7\u627fWritable\u5b9e\u73b0\u81ea\u5df1\u7684\u53ef\u5199\u6d41\u3002</p> <pre><code>    function Writable(options) {  \n      this._writableState = new WritableState(options, this);  \n      // \u53ef\u5199  \n      this.writable = true;  \n      // \u652f\u6301\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u94a9\u5b50  \n      if (options) {  \n        if (typeof options.write === 'function')  \n          this._write = options.write;  \n\n        if (typeof options.writev === 'function')  \n          this._writev = options.writev;  \n\n        if (typeof options.destroy === 'function')  \n          this._destroy = options.destroy;  \n\n        if (typeof options.final === 'function')  \n          this._final = options.final;  \n      }  \n\n      Stream.call(this);  \n    }  \n</code></pre> <p>\u53ef\u5199\u6d41\u7ee7\u627f\u4e8e\u6d41\u57fa\u7c7b\uff0c\u63d0\u4f9b\u51e0\u4e2a\u94a9\u5b50\u51fd\u6570\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49\u94a9\u5b50\u51fd\u6570\u5b9e\u73b0\u81ea\u5df1\u7684\u903b\u8f91\u3002\u5982\u679c\u7528\u6237\u662f\u76f4\u63a5\u4f7f\u7528Writable\u7c7b\u4f5c\u4e3a\u53ef\u5199\u6d41\uff0c\u5219options.write\u51fd\u6570\u662f\u5fc5\u987b\u4f20\u7684\uff0coptions.wirte\u51fd\u6570\u63a7\u5236\u6570\u636e\u5f80\u54ea\u91cc\u5199\uff0c\u5e76\u4e14\u901a\u77e5\u53ef\u5199\u6d41\u662f\u5426\u5199\u5b8c\u6210\u4e86\u3002\u5982\u679c\u7528\u6237\u662f\u4ee5\u7ee7\u627fWritable\u7c7b\u7684\u5f62\u5f0f\u4f7f\u7528\u53ef\u5199\u6d41\uff0c\u5219_write\u51fd\u6570\u662f\u5fc5\u987b\u5b9e\u73b0\u7684\uff0c_write\u51fd\u6570\u548coptions.write\u51fd\u6570\u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684\u3002</p>"},{"location":"chapter21-JS%20Stream/#2133","title":"21.3.3 \u6570\u636e\u5199\u5165","text":"<p>\u53ef\u5199\u6d41\u63d0\u4f9bwrite\u51fd\u6570\u7ed9\u7528\u6237\u5b9e\u73b0\u6570\u636e\u7684\u5199\u5165\uff0c\u5199\u5165\u6709\u4e24\u79cd\u65b9\u5f0f\u3002\u4e00\u4e2a\u662f\u9010\u4e2a\u5199\uff0c\u4e00\u4e2a\u662f\u6279\u91cf\u5199\uff0c\u6279\u91cf\u5199\u662f\u53ef\u9009\u7684\uff0c\u53d6\u51b3\u4e8e\u7528\u6237\u7684\u5b9e\u73b0\uff0c\u5982\u679c\u7528\u6237\u76f4\u63a5\u4f7f\u7528Writable\u5219\u9700\u8981\u4f20\u5165writev\uff0c\u5982\u679c\u662f\u7ee7\u627f\u65b9\u5f0f\u4f7f\u7528Writable\u5219\u5b9e\u73b0_writev\u51fd\u6570\u3002\u6211\u4eec\u5148\u770b\u4e00\u4e0bwrite\u51fd\u6570\u7684\u5b9e\u73b0</p> <pre><code>    Writable.prototype.write = function(chunk, encoding, cb) {  \n      var state = this._writableState;  \n      // \u544a\u8bc9\u7528\u6237\u662f\u5426\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u8c03\u7528write  \n      var ret = false;  \n      // \u6570\u636e\u683c\u5f0f  \n      var isBuf = !state.objectMode &amp;&amp; Stream._isUint8Array(chunk);  \n      // \u662f\u5426\u9700\u8981\u8f6c\u6210buffer\u683c\u5f0f  \n      if (isBuf &amp;&amp; Object.getPrototypeOf(chunk) !== Buffer.prototype) {  \n        chunk = Stream._uint8ArrayToBuffer(chunk);  \n      }  \n      // \u53c2\u6570\u5904\u7406\uff0c\u4f20\u4e86\u6570\u636e\u548c\u56de\u8c03\uff0c\u6ca1\u6709\u4f20\u7f16\u7801\u7c7b\u578b  \n      if (typeof encoding === 'function') {  \n        cb = encoding;  \n        encoding = null;  \n      }  \n      // \u662fbuffer\u7c7b\u578b\u5219\u8bbe\u7f6e\u6210buffer\uff0c\u5426\u5219\u5982\u679c\u6ca1\u4f20\u5219\u53d6\u9ed8\u8ba4\u7f16\u7801  \n      if (isBuf)  \n        encoding = 'buffer';  \n      else if (!encoding)  \n        encoding = state.defaultEncoding;  \n\n      if (typeof cb !== 'function')  \n        cb = nop;  \n      // \u6b63\u5728\u6267\u884cend\uff0c\u518d\u6267\u884cwrite\uff0c\u62a5\u9519  \n      if (state.ending)  \n        writeAfterEnd(this, cb);  \n      else if (isBuf || validChunk(this, state, chunk, cb)) {  \n        // \u5f85\u6267\u884c\u7684\u56de\u8c03\u6570\u52a0\u4e00\uff0c\u5373cb  \n        state.pendingcb++;  \n        // \u5199\u5165\u6216\u7f13\u5b58\uff0c\u89c1\u8be5\u51fd\u6570  \n        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);  \n      }  \n      /// \u8fd8\u80fd\u4e0d\u80fd\u7ee7\u7eed\u5199  \n      return ret;  \n    };  \n</code></pre> <p>write\u51fd\u6570\u9996\u5148\u505a\u4e86\u4e00\u4e9b\u53c2\u6570\u5904\u7406\u548c\u6570\u636e\u8f6c\u6362\uff0c\u7136\u540e\u5224\u65ad\u6d41\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u5982\u679c\u6d41\u7ed3\u675f\u518d\u6267\u884c\u5199\u5165\uff0c\u5219\u4f1a\u62a5\u9519\u3002\u5982\u679c\u6d41\u6ca1\u6709\u7ed3\u675f\u5219\u6267\u884c\u5199\u5165\u6216\u8005\u7f13\u5b58\u5904\u7406\u3002\u6700\u540e\u901a\u77e5\u7528\u6237\u662f\u5426\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u8c03\u7528write\u5199\u5165\u6570\u636e\uff08\u6211\u4eec\u770b\u5230\u5982\u679c\u5199\u5165\u7684\u6570\u636e\u6bd4\u9608\u503c\u5927\uff0c\u53ef\u5199\u6d41\u8fd8\u662f\u4f1a\u6267\u884c\u5199\u5165\u64cd\u4f5c\uff0c\u4f46\u662f\u4f1a\u8fd4\u56defalse\u544a\u8bc9\u7528\u6237\u4e9b\u4e0d\u8981\u5199\u5165\u4e86\uff0c\u5982\u679c\u8c03\u7528\u65b9\u7ee7\u7eed\u5199\u5165\u7684\u8bdd\uff0c\u4e5f\u662f\u6ca1\u4f1a\u7ee7\u7eed\u5199\u5165\u7684\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5199\u5165\u7aef\u538b\u529b\u8fc7\u5927\uff09\u3002\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0bwriteAfterEnd\u7684\u903b\u8f91\u3002\u7136\u540e\u518d\u770bwriteOrBuffer\u3002</p> <pre><code>    function writeAfterEnd(stream, cb) {  \n      var er = new errors.Error('ERR_STREAM_WRITE_AFTER_END');  \n      stream.emit('error', er);  \n      process.nextTick(cb, er);  \n    }  \n</code></pre> <p>writeAfterEnd\u51fd\u6570\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u9996\u5148\u89e6\u53d1\u53ef\u5199\u6d41\u7684error\u4e8b\u4ef6\uff0c\u7136\u540e\u4e0b\u4e00\u4e2atick\u7684\u65f6\u5019\u6267\u884c\u7528\u6237\u5728\u8c03\u7528write\u65f6\u4f20\u5165\u7684\u56de\u8c03\u3002\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0bwriteOrBuffer\u3002writeOrBuffer\u51fd\u6570\u4f1a\u5bf9\u6570\u636e\u8fdb\u884c\u7f13\u5b58\u6216\u8005\u76f4\u63a5\u5199\u5165\u76ee\u7684\u5730\uff08\u76ee\u7684\u5730\u53ef\u4ee5\u662f\u6587\u4ef6\u3001socket\u3001\u5185\u5b58\uff0c\u53d6\u51b3\u4e8e\u7528\u6237\u7684\u5b9e\u73b0\uff09\uff0c\u53d6\u51b3\u4e8e\u5f53\u524d\u53ef\u5199\u6d41\u7684\u72b6\u6001\u3002</p> <pre><code>    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {  \n      // \u6570\u636e\u5904\u7406  \n      if (!isBuf) {  \n        var newChunk = decodeChunk(state, chunk, encoding);  \n        if (chunk !== newChunk) {  \n          isBuf = true;  \n          encoding = 'buffer';  \n          chunk = newChunk;  \n        }  \n      }  \n      // \u5bf9\u8c61\u6a21\u5f0f\u7684\u7b97\u4e00\u4e2a  \n      var len = state.objectMode ? 1 : chunk.length;  \n      // \u66f4\u65b0\u5f85\u5199\u5165\u6570\u636e\u957f\u5ea6\u6216\u5bf9\u8c61\u4e2a\u6570  \n      state.length += len;  \n      // \u5f85\u5199\u5165\u7684\u957f\u5ea6\u662f\u5426\u8d85\u8fc7\u4e86\u9608\u503c  \n      var ret = state.length &lt; state.highWaterMark;  \n\n      /*\n        \u8d85\u8fc7\u4e86\u9608\u503c\uff0c\u5219\u8bbe\u7f6e\u9700\u8981\u7b49\u5f85drain\u4e8b\u4ef6\u6807\u8bb0\uff0c\n        \u8fd9\u65f6\u5019\u7528\u6237\u4e0d\u5e94\u8be5\u518d\u6267\u884cwrite\uff0c\u800c\u662f\u7b49\u5f85drain\u4e8b\u4ef6\u89e6\u53d1\n      */  \n      if (!ret)  \n        state.needDrain = true;  \n      // \u5982\u679c\u6b63\u5728\u5199\u6216\u8005\u8bbe\u7f6e\u4e86\u963b\u585e\u5219\u5148\u7f13\u5b58\u6570\u636e\uff0c\u5426\u5219\u76f4\u63a5\u5199\u5165  \n      if (state.writing || state.corked) {  \n        // \u6307\u5411\u5f53\u524d\u7684\u5c3e\u8282\u70b9  \n        var last = state.lastBufferedRequest;  \n        // \u63d2\u5165\u65b0\u7684\u5c3e\u7ed3\u70b9  \n        state.lastBufferedRequest = {  \n          chunk,  \n          encoding,  \n          isBuf,  \n          callback: cb,  \n          next: null  \n        };  \n        /*\n          \u4e4b\u524d\u8fd8\u6709\u8282\u70b9\u7684\u8bdd\uff0c\u65e7\u7684\u5c3e\u8282\u70b9\u7684next\u6307\u9488\u6307\u5411\u65b0\u7684\u5c3e\u8282\u70b9\uff0c\n          \u5f62\u6210\u94fe\u8868\n         */  \n        if (last) {  \n          last.next = state.lastBufferedRequest;  \n        } else {  \n          /*\n            \u6307\u5411buffer\u94fe\u8868\uff0cbufferedRequest\u76f8\u7b49\u4e8e\u5934\u6307\u9488\uff0c\n            \u63d2\u5165\u7b2c\u4e00\u4e2abuffer\u8282\u70b9\u7684\u65f6\u5019\u6267\u884c\u5230\u8fd9  \n           */\n          state.bufferedRequest = state.lastBufferedRequest;  \n        }  \n        // \u7f13\u5b58\u7684buffer\u4e2a\u6570\u52a0\u4e00  \n        state.bufferedRequestCount += 1;  \n      } else {  \n        // \u76f4\u63a5\u5199\u5165  \n        doWrite(stream, state, false, len, chunk, encoding, cb);  \n      }  \n      // \u8fd4\u56de\u662f\u5426\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u6267\u884cwirte\uff0c\u5982\u679c\u6ca1\u6709\u8fbe\u5230\u9608\u503c\u5219\u53ef\u4ee5\u7ee7\u7eed\u5199  \n      return ret;  \n    }  \n</code></pre> <p>writeOrBuffer\u51fd\u6570\u4e3b\u8981\u7684\u903b\u8f91\u5982\u4e0b 1 \u66f4\u65b0\u5f85\u5199\u5165\u6570\u636e\u7684\u957f\u5ea6\uff0c\u5224\u65ad\u662f\u5426\u8fbe\u5230\u9608\u503c\uff0c\u7136\u540e\u901a\u77e5\u7528\u6237\u662f\u5426\u8fd8\u53ef\u4ee5\u6267\u884cwrite\u7ee7\u7eed\u5199\u5165\u3002 2 \u5224\u65ad\u5f53\u524d\u662f\u5426\u6b63\u5728\u5199\u5165\u6216\u8005\u5904\u4e8ecork\u6a21\u5f0f\u3002\u662f\u7684\u8bdd\u628a\u6570\u636e\u7f13\u5b58\u8d77\u6765\uff0c\u5426\u5219\u6267\u884c\u5199\u64cd\u4f5c\u3002 \u6211\u4eec\u770b\u4e00\u4e0b\u7f13\u5b58\u7684\u903b\u8f91\u548c\u5f62\u6210\u7684\u6570\u636e\u7ed3\u6784\u3002 \u7f13\u5b58\u7b2c\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u5982\u56fe21-3\u6240\u793a\u3002  \u56fe21-3 \u7f13\u5b58\u7b2c\u4e8c\u4e2a\u8282\u70b9\u65f6\uff0c\u5982\u56fe21-4\u6240\u793a\u3002  \u56fe21-4 \u7f13\u5b58\u7b2c\u4e09\u4e2a\u8282\u70b9\u65f6\uff0c\u5982\u56fe21-5  \u56fe21-5 \u6211\u4eec\u770b\u5230\uff0c\u51fd\u6570\u7684\u6570\u636e\u662f\u4ee5\u94fe\u8868\u7684\u5f62\u5f0f\u7ba1\u7406\u7684\uff0c\u5176\u4e2dbufferedRequest\u662f\u94fe\u8868\u5934\u7ed3\u70b9\uff0clastBufferedRequest\u6307\u5411\u5c3e\u8282\u70b9\u3002\u5047\u8bbe\u5f53\u524d\u53ef\u5199\u6d41\u4e0d\u5904\u4e8e\u5199\u5165\u6216\u8005cork\u72b6\u6001\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5199\u5165\u7684\u903b\u8f91\u3002</p> <pre><code>    function doWrite(stream, state, writev, len, chunk, encoding, cb) {  \n      // \u672c\u6b21\u5199\u5165\u7684\u6570\u636e\u957f\u5ea6  \n      state.writelen = len;  \n      // \u672c\u6b21\u5199\u5b8c\u6210\u540e\u6267\u884c\u7684\u56de\u8c03  \n      state.writecb = cb;  \n      // \u6b63\u5728\u5199\u5165  \n      state.writing = true;  \n      // \u5047\u8bbe\u7528\u6237\u5b9a\u4e49\u7684_writev\u6216\u8005_write\u51fd\u6570\u662f\u540c\u6b65\u56de\u8c03onwrite  \n      state.sync = true;  \n      if (writev)  \n        // chunk\u4e3a\u7f13\u5b58\u5f85\u5199\u5165\u7684buffer\u8282\u70b9\u6570\u7ec4  \n        stream._writev(chunk, state.onwrite);  \n      else  \n        // \u6267\u884c\u7528\u6237\u5b9a\u4e49\u7684\u5199\u51fd\u6570\uff0conwrite\u662fNode.js\u5b9a\u4e49\u7684\uff0c\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u8bbe\u7f6e\u4e86\u8be5\u51fd\u6570  \n        stream._write(chunk, encoding, state.onwrite);  \n      /*\n        \u5982\u679c\u7528\u6237\u662f\u540c\u6b65\u56de\u8c03onwrite\uff0c\u5219\u8fd9\u53e5\u4ee3\u7801\u6ca1\u6709\u610f\u4e49\uff0c\n        \u5982\u679c\u662f\u5f02\u6b65\u56de\u8c03onwrite\uff0c\u8fd9\u53e5\u4ee3\u7801\u4f1a\u5728onwrite\u4e4b\u524d\u6267\u884c\uff0c\n        \u5b83\u6807\u8bb0\u7528\u6237\u662f\u5f02\u6b65\u56de\u8c03\u6a21\u5f0f\uff0c\u5728onwrite\u4e2d\u9700\u8981\u5224\u65ad\u56de\u8c03\u6a21\u5f0f\uff0c\u5373sync\u7684\u503c\n      */\n      state.sync = false;  \n    }  \n</code></pre> <p>doWrite\u51fd\u6570\u8bb0\u5f55\u4e86\u672c\u6b21\u5199\u5165\u7684\u4e0a\u4e0b\u6587\uff0c\u6bd4\u5982\u957f\u5ea6\uff0c\u56de\u8c03\uff0c\u7136\u540e\u8bbe\u7f6e\u6b63\u5728\u5199\u6807\u8bb0\u3002\u6700\u540e\u6267\u884c\u5199\u5165\u3002\u5982\u679c\u5f53\u524d\u5f85\u5199\u5165\u7684\u6570\u636e\u662f\u7f13\u5b58\u7684\u6570\u636e\u5e76\u4e14\u7528\u6237\u5b9e\u73b0\u4e86_writev\u51fd\u6570\uff0c\u5219\u8c03\u7528_writev\u3002\u5426\u5219\u8c03\u7528_write\u3002\u4e0b\u9762\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a\u53ef\u5199\u6d41\u7684\u4f8b\u5b50\uff0c\u628a\u8fd9\u91cc\u7684\u903b\u8f91\u4e32\u8d77\u6765\u3002</p> <pre><code>    const { Writable } = require('stream');  \n    class DemoWritable extends Writable {  \n        constructor() {  \n             super();\n            this.data = null;  \n        }  \n        _write(chunk, encoding, cb) {  \n            // \u4fdd\u5b58\u6570\u636e  \n            this.data = this.data ? Buffer.concat([this.data, chunk]) : chunk;  \n            // \u6267\u884c\u56de\u8c03\u544a\u8bc9\u53ef\u5199\u6d41\u5199\u5b8c\u6210\u4e86\uff0cfalse\u4ee3\u8868\u5199\u6210\u529f\uff0ctrue\u4ee3\u8868\u5199\u5931\u8d25  \n            cb(null);  \n        }  \n    }  \n</code></pre> <p>DemoWritable\u5b9a\u4e49\u4e86\u6570\u636e\u6d41\u5411\u7684\u76ee\u7684\u5730\uff0c\u5728\u7528\u6237\u8c03\u7528write\u7684\u65f6\u5019\uff0c\u53ef\u5199\u6d41\u4f1a\u6267\u884c\u7528\u6237\u5b9a\u4e49\u7684_write\uff0c_write\u4fdd\u5b58\u4e86\u6570\u636e\uff0c\u7136\u540e\u6267\u884c\u56de\u8c03\u5e76\u4f20\u5165\u53c2\u6570\uff0c\u901a\u77e5\u53ef\u5199\u6d41\u6570\u636e\u5199\u5b8c\u6210\u4e86\uff0c\u5e76\u901a\u8fc7\u53c2\u6570\u6807\u8bb0\u5199\u6210\u529f\u8fd8\u662f\u5931\u8d25\u3002\u8fd9\u65f6\u5019\u56de\u5230\u53ef\u5199\u6d41\u4fa7\u3002\u6211\u4eec\u770b\u5230\u53ef\u5199\u6d41\u8bbe\u7f6e\u7684\u56de\u8c03\u662fonwrite\uff0conwrite\u662f\u5728\u521d\u59cb\u5316\u53ef\u5199\u6d41\u7684\u65f6\u5019\u8bbe\u7f6e\u7684\u3002</p> <p><pre><code>    this.onwrite = onwrite.bind(undefined, stream);  \n</code></pre> \u6211\u4eec\u63a5\u7740\u770bonwrite\u7684\u5b9e\u73b0\u3002 <pre><code>    function onwrite(stream, er) {  \n      var state = stream._writableState;  \n      var sync = state.sync;  \n      // \u672c\u6b21\u5199\u5b8c\u65f6\u6267\u884c\u7684\u56de\u8c03  \n      var cb = state.writecb;  \n      // \u91cd\u7f6e\u5185\u90e8\u5b57\u6bb5\u7684\u503c  \n      // \u5199\u5b8c\u4e86\uff0c\u91cd\u7f6e\u56de\u8c03\uff0c\u8fd8\u6709\u591a\u5c11\u5355\u4f4d\u7684\u6570\u636e\u6ca1\u6709\u5199\u5165\uff0c\u6570\u636e\u5199\u5b8c\uff0c\u91cd\u7f6e\u672c\u6b21\u5f85\u5199\u5165\u7684\u6570\u636e\u6570\u4e3a0  \n      state.writing = false;  \n      state.writecb = null;  \n      state.length -= state.writelen;  \n      state.writelen = 0;  \n      // \u5199\u51fa\u9519  \n      if (er)  \n        onwriteError(stream, state, sync, er, cb);  \n      else {  \n        // Check if we're actually ready to finish, but don't emit yet  \n        // \u662f\u5426\u5df2\u7ecf\u6267\u884c\u4e86end\uff0c\u5e76\u4e14\u6570\u636e\u4e5f\u5199\u5b8c\u4e86\uff08\u63d0\u4ea4\u5199\u64cd\u4f5c\u548c\u6700\u540e\u771f\u6b63\u6267\u884c\u4e2d\u95f4\u53ef\u80fd\u6267\u884c\u4e86end\uff09  \n        var finished = needFinish(state);  \n        // \u8fd8\u6ca1\u7ed3\u675f\uff0c\u5e76\u4e14\u6ca1\u6709\u8bbe\u7f6e\u963b\u585e\u6807\u8bb0\uff0c\u4e5f\u4e0d\u5728\u5904\u7406buffer\uff0c\u5e76\u4e14\u6709\u5f85\u5904\u7406\u7684\u7f13\u5b58\u6570\u636e\uff0c\u5219\u8fdb\u884c\u5199\u5165  \n        if (!finished &amp;&amp;  \n            !state.corked &amp;&amp;  \n            !state.bufferProcessing &amp;&amp;  \n            state.bufferedRequest) {  \n          clearBuffer(stream, state);  \n        }  \n        // \u7528\u6237\u540c\u6b65\u56de\u8c03onwrite\u5219Node.js\u5f02\u6b65\u6267\u884c\u7528\u6237\u56de\u8c03  \n        if (sync) {  \n          process.nextTick(afterWrite, stream, state, finished, cb);  \n        } else {  \n          afterWrite(stream, state, finished, cb);  \n        }  \n      }  \n    }  \n</code></pre></p> <p>onwrite\u7684\u903b\u8f91\u5982\u4e0b 1 \u66f4\u65b0\u53ef\u5199\u6d41\u7684\u72b6\u6001\u548c\u6570\u636e 2 \u5199\u51fa\u9519\u5219\u89e6\u53d1error\u4e8b\u4ef6\u548c\u6267\u884c\u7528\u6237\u56de\u8c03\uff0c\u5199\u6210\u529f\u5219\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u7ee7\u7eed\u6267\u884c\u5199\u64cd\u4f5c\uff0c\u662f\u7684\u8bdd\u5219\u7ee7\u7eed\u5199\uff0c\u5426\u5219\u6267\u884c\u7528\u6237\u56de\u8c03\u3002 \u6211\u4eec\u770b\u4e00\u4e0bclearBuffer\u51fd\u6570\u7684\u903b\u8f91\uff0c\u8be5\u903b\u8f91\u4e3b\u8981\u662f\u628a\u7f13\u5b58\u7684\u6570\u636e\u5199\u5230\u76ee\u7684\u5730\u3002</p> <pre><code>    function clearBuffer(stream, state) {  \n      // \u6b63\u5728\u5904\u7406buffer  \n      state.bufferProcessing = true;  \n      // \u6307\u5411\u5934\u7ed3\u70b9  \n      var entry = state.bufferedRequest;  \n      // \u5b9e\u73b0\u4e86_writev\u5e76\u4e14\u6709\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6570\u636e\u5757\uff0c\u5219\u6279\u91cf\u5199\u5165\uff0c\u5373\u4e00\u6b21\u628a\u6240\u6709\u7f13\u5b58\u7684buffer\u90fd\u5199\u5165  \n      if (stream._writev &amp;&amp; entry &amp;&amp; entry.next) {  \n        // Fast case, write everything using _writev()  \n        var l = state.bufferedRequestCount;  \n        var buffer = new Array(l);  \n        var holder = state.corkedRequestsFree;  \n        // \u6307\u5411\u5f85\u5199\u5165\u6570\u636e\u7684\u94fe\u8868  \n        holder.entry = entry;  \n\n        var count = 0;  \n        // \u6570\u636e\u662f\u5426\u5168\u90e8\u90fd\u662fbuffer\u683c\u5f0f  \n        var allBuffers = true;  \n        // \u628a\u7f13\u5b58\u7684\u8282\u70b9\u653e\u5230buffer\u6570\u7ec4\u4e2d  \n        while (entry) {  \n          buffer[count] = entry;  \n          if (!entry.isBuf)  \n            allBuffers = false;  \n          entry = entry.next;  \n          count += 1;  \n        }  \n        buffer.allBuffers = allBuffers;  \n\n        doWrite(stream, state, true, state.length, buffer, '', holder.finish);  \n\n        // \u5f85\u6267\u884c\u7684cb\u52a0\u4e00\uff0c\u5373holder.finish  \n        state.pendingcb++;  \n        // \u6e05\u7a7a\u7f13\u5b58\u961f\u5217  \n        state.lastBufferedRequest = null;  \n        // \u8fd8\u6709\u4e0b\u4e00\u4e2a\u8282\u70b9\u5219\u66f4\u65b0\u6307\u9488,\u4e0b\u6b21\u4f7f\u7528  \n        if (holder.next) {  \n          state.corkedRequestsFree = holder.next;  \n          holder.next = null;  \n        } else {  \n          // \u6ca1\u6709\u4e0b\u4e00\u4e2a\u8282\u70b9\u5219\u6062\u590d\u503c\uff0c\u89c1\u521d\u59cb\u5316\u65f6\u7684\u8bbe\u7f6e  \n          var corkReq = { next: null, entry: null, finish: undefined };  \n          corkReq.finish = onCorkedFinish.bind(undefined, corkReq, state);  \n          state.corkedRequestsFree = corkReq;  \n        }  \n        state.bufferedRequestCount = 0;  \n      } else {  \n        // \u6162\u6162\u5199\uff0c\u5373\u4e00\u4e2a\u4e2abuffer\u5199\uff0c\u5199\u5b8c\u540e\u7b49\u9700\u8981\u6267\u884c\u7528\u6237\u7684cb\uff0c\u9a71\u52a8\u4e0b\u4e00\u4e2a\u5199  \n        // Slow case, write chunks one-by-one  \n        while (entry) {  \n          var chunk = entry.chunk;  \n          var encoding = entry.encoding;  \n          var cb = entry.callback;  \n          var len = state.objectMode ? 1 : chunk.length;  \n          // \u6267\u884c\u5199\u5165  \n          doWrite(stream, state, false, len, chunk, encoding, cb);  \n          entry = entry.next;  \n          // \u5904\u7406\u5b8c\u4e00\u4e2a\uff0c\u51cf\u4e00  \n          state.bufferedRequestCount--;  \n\n          /* \n            \u5728onwrite\u91cc\u6e05\u9664\u8fd9\u4e2a\u6807\u8bb0\uff0conwrite\u4f9d\u8d56\u4e8e\u7528\u6237\u6267\u884c\uff0c\u5982\u679c\u7528\u6237\u6ca1\u8c03\uff0c \n            \u6216\u8005\u4e0d\u662f\u540c\u6b65\u8c03\uff0c\u5219\u9000\u51fa\uff0c\u7b49\u5f85\u6267\u884conwrite\u7684\u65f6\u5019\u518d\u7ee7\u7eed\u5199 \n          */  \n          if (state.writing) {  \n            break;  \n          }  \n        }  \n        // \u5199\u5b8c\u4e86\u7f13\u5b58\u7684\u6570\u636e\uff0c\u5219\u66f4\u65b0\u6307\u9488  \n        if (entry === null)  \n          state.lastBufferedRequest = null;  \n      }  \n      /* \n        \u66f4\u65b0\u7f13\u5b58\u6570\u636e\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u6307\u5411\uff0c \n        1 \u5982\u679c\u662f\u6279\u91cf\u5199\u5219entry\u4e3anull \n        2 \u5982\u679c\u5355\u4e2a\u5199\uff0c\u5219\u53ef\u80fd\u8fd8\u6709\u503c\uff08\u5982\u679c\u7528\u6237\u662f\u5f02\u6b65\u8c03\u7528onwrite\u7684\u8bdd\uff09 \n      */  \n      state.bufferedRequest = entry;  \n      // \u672c\u8f6e\u5904\u7406\u5b8c\u6bd5\uff08\u5904\u7406\u5b8c\u4e00\u4e2a\u6216\u5168\u90e8\uff09  \n      state.bufferProcessing = false;  \n    }  \n</code></pre> <p>clearBuffer\u7684\u903b\u8f91\u770b\u8d77\u6765\u975e\u5e38\u591a\uff0c\u4f46\u662f\u903b\u8f91\u5e76\u4e0d\u7b97\u5f88\u590d\u6742\u3002\u4e3b\u8981\u5206\u4e3a\u4e24\u4e2a\u5206\u652f\u3002 1 \u7528\u6237\u5b9e\u73b0\u4e86\u6279\u91cf\u5199\u51fd\u6570\uff0c\u5219\u4e00\u6b21\u628a\u7f13\u5b58\u7684\u65f6\u5019\u5199\u5165\u76ee\u7684\u5730\u3002\u9996\u5148\u628a\u7f13\u5b58\u7684\u6570\u636e\uff08\u94fe\u8868\uff09\u5168\u90e8\u6536\u96c6\u8d77\u6765\uff0c\u7136\u540e\u6267\u884c\u6267\u884c\u5199\u5165\uff0c\u5e76\u8bbe\u7f6e\u56de\u8c03\u662ffinish\u51fd\u6570\u3002corkedRequestsFree\u5b57\u6bb5\u6307\u5411\u4e00\u4e2a\u8282\u70b9\u6570\u6700\u5c11\u4e3a\u4e00\uff0c\u6700\u591a\u4e3a\u4e8c\u7684\u94fe\u8868\uff0c\u7528\u4e8e\u4fdd\u5b58\u6279\u91cf\u5199\u7684\u6570\u636e\u7684\u4e0a\u4e0b\u6587\u3002\u6279\u91cf\u5199\u65f6\u7684\u6570\u636e\u7ed3\u6784\u56fe\u5982\u56fe21-6\u548c21-7\u6240\u793a\uff08\u4e24\u79cd\u573a\u666f\uff09\u3002  \u56fe21-6  \u56fe21-7 corkedRequestsFree\u4fdd\u8bc1\u6700\u5c11\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u7528\u4e8e\u4e00\u6b21\u6279\u91cf\u5199\uff0c\u5f53\u4f7f\u7528\u5b8c\u7684\u65f6\u5019\uff0c\u4f1a\u6700\u591a\u4fdd\u5b58\u4e24\u4e2a\u7a7a\u95f2\u8282\u70b9\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u6279\u91cf\u5199\u6210\u529f\u540e\uff0c\u56de\u8c03\u51fd\u6570onCorkedFinish\u7684\u903b\u8f91\u3002</p> <pre><code>    function onCorkedFinish(corkReq, state, err) {  \n      // corkReq.entry\u6307\u5411\u5f53\u524d\u5904\u7406\u7684buffer\u94fe\u8868\u5934\u7ed3\u70b9  \n      var entry = corkReq.entry;  \n      corkReq.entry = null;  \n      // \u904d\u5386\u6267\u884c\u7528\u6237\u4f20\u5165\u7684\u56de\u8c03\u56de\u8c03  \n      while (entry) {  \n        var cb = entry.callback;  \n        state.pendingcb--;  \n        cb(err);  \n        entry = entry.next;  \n      }  \n\n      // \u56de\u6536corkReq\uff0cstate.corkedRequestsFree\u8fd9\u65f6\u5019\u5df2\u7ecf\u7b49\u4e8e\u65b0\u7684corkReq\uff0c\u6307\u5411\u521a\u7528\u5b8c\u7684\u8fd9\u4e2acorkReq\uff0c\u5171\u4fdd\u5b58\u4e24\u4e2a  \n      state.corkedRequestsFree.next = corkReq;  \n    }  \n</code></pre> <p>onCorkedFinish\u9996\u5148\u4ece\u672c\u6b21\u6279\u91cf\u5199\u7684\u6570\u636e\u4e0a\u4e0b\u6587\u53d6\u51fa\u56de\u8c03\uff0c\u7136\u540e\u9010\u4e2a\u6267\u884c\u3002\u6700\u540e\u56de\u6536\u8282\u70b9\u3002corkedRequestsFree\u603b\u662f\u6307\u5411\u4e00\u4e2a\u7a7a\u95f2\u8282\u70b9\uff0c\u6240\u4ee5\u5982\u679c\u8282\u70b9\u8d85\u8fc7\u4e24\u4e2a\u65f6\uff0c\u6bcf\u6b21\u4f1a\u628a\u5c3e\u8282\u70b9\u4e22\u5f03\uff0c\u5982\u56fe21-8\u6240\u793a\u3002  \u56fe21-8  </p> <p>2 \u63a5\u7740\u6211\u4eec\u770b\u5355\u4e2a\u5199\u7684\u573a\u666f \u5355\u4e2a\u5199\u7684\u65f6\u5019\uff0c\u5c31\u662f\u901a\u8fc7doWrite\u628a\u6570\u636e\u9010\u4e2a\u5199\u5230\u76ee\u7684\u5730\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u5730\u65b9\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u7528\u6237\u662f\u5f02\u6b65\u6267\u884c\u53ef\u5199\u6d41\u7684\u56de\u8c03onwrite\uff08\u901a\u8fc7writing\u5b57\u6bb5\uff0c\u56e0\u4e3aonwrite\u4f1a\u7f6ewriting\u4e3atrue\uff0c\u5982\u679c\u6267\u884c\u5b8cdoWrite\uff0cwriting\u4e3afalse\u8bf4\u660e\u662f\u5f02\u6b65\u56de\u8c03\uff09\uff0c\u5219\u5199\u5165\u4e00\u4e2a\u6570\u636e\u540e\u5c31\u4e0d\u518d\u6267\u884cdoWrite\u8fdb\u884c\u5199\uff0c\u800c\u662f\u9700\u8981\u7b49\u5230onwrite\u56de\u8c03\u88ab\u5f02\u6b65\u6267\u884c\u65f6\uff0c\u518d\u6267\u884c\u4e0b\u4e00\u6b21\u5199\uff0c\u56e0\u4e3a\u53ef\u5199\u6d41\u662f\u4e32\u884c\u5730\u6267\u884c\u5199\u64cd\u4f5c\u3002 \u4e0b\u9762\u8bb2\u4e00\u4e0bsync\u5b57\u6bb5\u7684\u4f5c\u7528\u3002sync\u5b57\u6bb5\u662f\u7528\u4e8e\u6807\u8bb0\u6267\u884c\u7528\u6237\u81ea\u5b9a\u4e49\u7684write\u51fd\u6570\u65f6\uff0cwrite\u51fd\u6570\u662f\u540c\u6b65\u8fd8\u662f\u5f02\u6b65\u6267\u884c\u53ef\u5199\u6d41\u7684\u56de\u8c03onwrite\u3002\u4e3b\u8981\u7528\u4e8e\u63a7\u5236\u662f\u540c\u6b65\u8fd8\u662f\u5f02\u6b65\u6267\u884c\u7528\u6237\u7684\u56de\u8c03\u3002\u5e76\u4e14\u9700\u8981\u4fdd\u8bc1\u56de\u8c03\u8981\u6309\u7167\u5b9a\u4e49\u7684\u987a\u5e8f\u6267\u884c\u3002\u6709\u4e24\u4e2a\u5730\u65b9\u6d89\u53ca\u4e86\u8fd9\u4e2a\u903b\u8f91\uff0c\u7b2c\u4e00\u4e2a\u662fwirte\u7684\u65f6\u5019\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u51fd\u6570\u7684\u8c03\u7528\u5173\u7cfb\uff0c\u5982\u56fe21-9\u6240\u793a\u3002  \u56fe21-9  </p> <p>\u5982\u679c\u7528\u6237\u662f\u540c\u6b65\u6267\u884conwrite\uff0c\u5219\u6570\u636e\u4f1a\u88ab\u5b9e\u65f6\u5730\u6d88\u8d39\uff0c\u4e0d\u5b58\u5728\u7f13\u5b58\u6570\u636e\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019Node.js\u5f02\u6b65\u5e76\u4e14\u6709\u5e8f\u5730\u6267\u884c\u7528\u6237\u56de\u8c03\u3002\u5982\u679c\u7528\u6237\u8fde\u7eed\u4e24\u6b21\u8c03\u7528\u4e86write\u5199\u5165\u6570\u636e\uff0c\u5e76\u4e14\u662f\u4ee5\u5f02\u6b65\u6267\u884c\u56de\u8c03onwrite\uff0c\u5219\u7b2c\u4e00\u6b21\u6267\u884conwrite\u7684\u65f6\u5019\uff0c\u4f1a\u5b58\u5728\u7f13\u5b58\u7684\u6570\u636e\uff0c\u8fd9\u65f6\u5019\u8fd8\u6ca1\u6765\u5f97\u53ca\u6267\u884c\u7528\u6237\u56de\u8c03\uff0c\u5c31\u4f1a\u5148\u53d1\u751f\u7b2c\u4e8c\u6b21\u5199\u5165\u64cd\u4f5c\uff0c\u540c\u6837\uff0c\u7b2c\u4e8c\u6b21\u5199\u64cd\u4f5c\u4e5f\u662f\u5f02\u6b65\u56de\u8c03onwrite\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\u5c31\u4f1a\u540c\u6b65\u6267\u884c\u7684\u7528\u6237\u56de\u8c03\u3002\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u7528\u6237\u56de\u8c03\u7684\u987a\u5e8f\u6267\u884c\u3002\u7b2c\u4e8c\u79cd\u573a\u666f\u662funcork\u51fd\u6570\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u51fd\u6570\u5173\u7cfb\u56fe\uff0c\u5982\u56fe21-10\u6240\u793a\u3002  \u56fe21-10  </p> <p>\u5728uncork\u7684\u6267\u884c\u6d41\u7a0b\u4e2d\uff0c\u5982\u679conwrite\u662f\u88ab\u540c\u6b65\u56de\u8c03\uff0c\u5219\u5728onwrite\u4e2d\u4e0d\u4f1a\u518d\u6b21\u8c03\u7528clearBuffer\uff0c\u56e0\u4e3a\u8fd9\u65f6\u5019\u7684bufferProcessing\u4e3atrue\u3002\u8fd9\u65f6\u5019\u4f1a\u5148\u628a\u7528\u6237\u7684\u56de\u8c03\u5165\u961f\uff0c\u7136\u540e\u518d\u6b21\u6267\u884cdoWrite\u53d1\u8d77\u4e0b\u4e00\u6b21\u5199\u64cd\u4f5c\u3002\u5982\u679conwrite\u662f\u88ab\u5f02\u6b65\u6267\u884c\uff0c\u5728\u6267\u884cclearBuffer\u4e2d\uff0c\u7b2c\u4e00\u6b21\u6267\u884cdoWrite\u5b8c\u6bd5\u540e\uff0cclearBuffer\u5c31\u4f1a\u9000\u51fa\uff0c\u5e76\u4e14\u8fd9\u65f6\u5019bufferProcessing\u4e3afalse\u3002\u7b49\u5230onwrite\u88ab\u56de\u8c03\u7684\u65f6\u5019\uff0c\u518d\u6b21\u6267\u884cclearBuffer\uff0c\u540c\u6837\u6267\u884c\u5b8cdoWrite\u7684\u65f6\u5019\u9000\u51fa\uff0c\u7b49\u5f85\u5f02\u6b65\u56de\u8c03\uff0c\u8fd9\u65f6\u5019\u7528\u6237\u56de\u8c03\u88ab\u6267\u884c\u3002 \u6211\u4eec\u7ee7\u7eed\u5206\u6790onwrite\u7684\u4ee3\u7801\uff0conwrite\u6700\u540e\u4f1a\u8c03\u7528afterWrite\u51fd\u6570\u3002 <pre><code>    function afterWrite(stream, state, finished, cb) {  \n      // \u8fd8\u6ca1\u7ed3\u675f\uff0c\u770b\u662f\u5426\u9700\u8981\u89e6\u53d1drain\u4e8b\u4ef6  \n      if (!finished)  \n        onwriteDrain(stream, state);  \n      // \u51c6\u5907\u6267\u884c\u7528\u6237\u56de\u8c03\uff0c\u5f85\u6267\u884c\u7684\u56de\u8c03\u51cf\u4e00  \n      state.pendingcb--;  \n      cb();  \n      finishMaybe(stream, state);  \n    }  \n\n    function onwriteDrain(stream, state) {  \n      // \u6ca1\u6709\u6570\u636e\u9700\u8981\u5199\u4e86\uff0c\u5e76\u4e14\u6d41\u5728\u963b\u585e\u4e2d\u7b49\u5f85drain\u4e8b\u4ef6  \n      if (state.length === 0 &amp;&amp; state.needDrain) {  \n        // \u89e6\u53d1drain\u4e8b\u4ef6\u7136\u540e\u6e05\u7a7a\u6807\u8bb0  \n        state.needDrain = false;  \n        stream.emit('drain');  \n      }  \n    }  \n</code></pre></p> <p>afterWrite\u4e3b\u8981\u662f\u5224\u65ad\u662f\u5426\u9700\u8981\u89e6\u53d1drain\u4e8b\u4ef6\uff0c\u7136\u540e\u6267\u884c\u7528\u6237\u56de\u8c03\u3002\u6700\u540e\u5224\u65ad\u6d41\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\uff08\u5728\u5f02\u6b65\u56de\u8c03onwrite\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u8c03\u7528\u56de\u8c03\u4e4b\u524d\uff0c\u53ef\u80fd\u6267\u884c\u4e86end\uff09\u3002\u6d41\u7ed3\u675f\u7684\u903b\u8f91\u6211\u4eec\u540e\u9762\u7ae0\u8282\u5355\u72ec\u5206\u6790\u3002</p>"},{"location":"chapter21-JS%20Stream/#2134-corkuncork","title":"21.3.4 cork\u548cuncork","text":"<p>cork\u548cuncork\u7c7b\u4f3ctcp\u4e2d\u7684negal\u7b97\u6cd5\uff0c\u4e3b\u8981\u7528\u4e8e\u7d2f\u79ef\u6570\u636e\u540e\u4e00\u6b21\u6027\u5199\u5165\u76ee\u7684\u5730\u3002\u800c\u4e0d\u662f\u6709\u4e00\u5757\u5c31\u5b9e\u65f6\u5199\u5165\u3002\u6bd4\u5982\u5728tcp\u4e2d\uff0c\u6bcf\u6b21\u53d1\u9001\u4e00\u4e2a\u5b57\u8282\uff0c\u800c\u534f\u8bae\u5934\u8fdc\u8fdc\u5927\u4e8e\u4e00\u5b57\u8282\uff0c\u6709\u6548\u6570\u636e\u5360\u6bd4\u975e\u5e38\u4f4e\u3002\u4f7f\u7528cork\u7684\u65f6\u5019\u6700\u597d\u540c\u65f6\u63d0\u4f9bwritev\u5b9e\u73b0\uff0c\u5426\u5219\u6700\u540ecork\u5c31\u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u4e3a\u6700\u7ec8\u8fd8\u662f\u9700\u8981\u4e00\u5757\u5757\u7684\u6570\u636e\u8fdb\u884c\u5199\u5165\u3002\u6211\u4eec\u770b\u770bcork\u7684\u4ee3\u7801\u3002</p> <pre><code>    Writable.prototype.cork = function() {  \n      var state = this._writableState;  \n      state.corked++;  \n    };  \n</code></pre> <p>cork\u7684\u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e00\u4e2a\u6574\u6570\u800c\u4e0d\u662f\u6807\u8bb0\u4f4d\uff0c\u6240\u4ee5cork\u548cuncork\u9700\u8981\u914d\u5bf9\u4f7f\u7528\u3002\u6211\u4eec\u770b\u770buncork\u3002</p> <pre><code>Writable.prototype.uncork = function() {  \n      var state = this._writableState;  \n\n      if (state.corked) {  \n        state.corked--;  \n        /* \n          \u6ca1\u6709\u5728\u8fdb\u884c\u5199\u64cd\u4f5c\uff08\u5982\u679c\u8fdb\u884c\u5199\u64cd\u4f5c\u5219\u5728\u5199\u64cd\u4f5c\u5b8c\u6210\u7684\u56de\u8c03\u91cc\u4f1a\u6267\u884cclearBuffer\uff09\uff0c \n          corked=0\uff0c \n          \u6ca1\u6709\u5728\u5904\u7406\u7f13\u5b58\u6570\u636e\uff08writing\u4e3afalse\u5df2\u7ecf\u8bf4\u660e\uff09\uff0c \n          \u6709\u7f13\u5b58\u7684\u6570\u636e\u5f85\u5904\u7406 \n        */  \n        if (!state.writing &amp;&amp;  \n            !state.corked &amp;&amp;  \n            !state.bufferProcessing &amp;&amp;  \n            state.bufferedRequest)  \n          clearBuffer(this, state);  \n      }  \n    };  \n</code></pre>"},{"location":"chapter21-JS%20Stream/#2135","title":"21.3.5 \u6d41\u7ed3\u675f","text":"<p>\u6d41\u7ed3\u675f\u9996\u5148\u4f1a\u628a\u5f53\u524d\u7f13\u5b58\u7684\u6570\u636e\u5199\u5165\u76ee\u7684\u5730\uff0c\u5e76\u4e14\u5141\u8bb8\u518d\u6267\u884c\u989d\u5916\u7684\u4e00\u6b21\u5199\u64cd\u4f5c\uff0c\u7136\u540e\u628a\u53ef\u5199\u6d41\u7f6e\u4e3a\u4e0d\u53ef\u5199\u548c\u7ed3\u675f\u72b6\u6001\uff0c\u5e76\u4e14\u89e6\u53d1\u4e00\u7cfb\u5217\u4e8b\u4ef6\u3002\u4e0b\u9762\u662f\u7ed3\u675f\u4e00\u4e2a\u53ef\u5199\u6d41\u7684\u51fd\u6570\u5173\u7cfb\u56fe\u3002\u5982\u56fe21-11\u6240\u793a\u3002  \u56fe21-11 \u901a\u8fc7end\u51fd\u6570\u53ef\u4ee5\u7ed3\u675f\u53ef\u5199\u6d41\uff0c\u6211\u4eec\u770b\u770b\u8be5\u51fd\u6570\u7684\u903b\u8f91\u3002</p> <pre><code>    Writable.prototype.end = function(chunk, encoding, cb) {  \n      var state = this._writableState;  \n\n      if (typeof chunk === 'function') {  \n        cb = chunk;  \n        chunk = null;  \n        encoding = null;  \n      } else if (typeof encoding === 'function') {  \n        cb = encoding;  \n        encoding = null;  \n      }  \n      // \u6700\u540e\u4e00\u6b21\u5199\u5165\u7684\u673a\u4f1a\uff0c\u53ef\u80fd\u76f4\u63a5\u5199\u5165\uff0c\u4e5f\u53ef\u4ee5\u4f1a\u88ab\u7f13\u5b58\uff08\u6b63\u5728\u5199\u62a4\u7740\u5904\u4e8ecorked\u72b6\u6001\uff09  \n      if (chunk !== null &amp;&amp; chunk !== undefined)  \n        this.write(chunk, encoding);  \n\n      // \u5982\u679c\u5904\u4e8ecorked\u72b6\u6001\uff0c\u5219\u4e0a\u9762\u7684\u5199\u64cd\u4f5c\u4f1a\u88ab\u7f13\u5b58\uff0cuncork\u548cwrite\u4fdd\u5b58\u53ef\u4ee5\u5bf9\u5269\u4f59\u6570\u636e\u6267\u884c\u5199\u64cd\u4f5c  \n      if (state.corked) {  \n        // \u7f6e1\uff0c\u4e3a\u4e86uncork\u80fd\u6b63\u786e\u6267\u884c,\u53ef\u4ee5\u6709\u673a\u4f1a\u5199\u5165\u7f13\u5b58\u7684\u6570\u636e  \n        state.corked = 1;  \n        this.uncork();  \n      }  \n\n      if (!state.ending)  \n        endWritable(this, state, cb);  \n    };  \n</code></pre> <p>\u6211\u4eec\u63a5\u7740\u770bendWritable\u51fd\u6570</p> <pre><code>    function endWritable(stream, state, cb) {  \n      // \u6b63\u5728\u6267\u884cend\u51fd\u6570  \n      state.ending = true;  \n      // \u5224\u65ad\u6d41\u662f\u5426\u53ef\u4ee5\u7ed3\u675f\u4e86\n      finishMaybe(stream, state);  \n      if (cb) {  \n        // \u5df2\u7ecf\u89e6\u53d1\u4e86finish\u4e8b\u4ef6\u5219\u4e0b\u4e00\u4e2atick\u76f4\u63a5\u6267\u884ccb\uff0c\u5426\u5219\u7b49\u5f85finish\u4e8b\u4ef6  \n        if (state.finished)  \n          process.nextTick(cb);  \n        else  \n          stream.once('finish', cb);  \n      }  \n      // \u6d41\u7ed3\u675f\uff0c\u6d41\u4e0d\u53ef\u5199  \n      state.ended = true;  \n      stream.writable = false;  \n    }  \n</code></pre> <p>endWritable\u51fd\u6570\u6807\u8bb0\u6d41\u4e0d\u53ef\u5199\u5e76\u4e14\u5904\u4e8e\u7ed3\u675f\u72b6\u6001\u3002\u4f46\u662f\u53ea\u662f\u4ee3\u8868\u4e0d\u80fd\u518d\u8c03\u7528write\u5199\u6570\u636e\u4e86\uff0c\u4e4b\u524d\u7f13\u5b58\u7684\u6570\u636e\u9700\u8981\u88ab\u5199\u5b8c\u540e\u624d\u80fd\u771f\u6b63\u5730\u7ed3\u675f\u6d41\u3002\u6211\u4eec\u770bfinishMaybe\u51fd\u6570\u7684\u903b\u8f91\u3002\u8be5\u51fd\u6570\u7528\u4e8e\u5224\u65ad\u6d41\u662f\u5426\u53ef\u4ee5\u7ed3\u675f\u3002</p> <pre><code>    function needFinish(state) {  \n      /* \n        \u6267\u884c\u4e86end\u51fd\u6570\u5219\u8bbe\u7f6eending=true\uff0c \n        \u5f53\u524d\u6ca1\u6709\u6570\u636e\u9700\u8981\u5199\u5165\u4e86\uff0c \n        \u4e5f\u6ca1\u6709\u7f13\u5b58\u7684\u6570\u636e\uff0c \n        \u8fd8\u6ca1\u6709\u89e6\u53d1finish\u4e8b\u4ef6\uff0c \n        \u6ca1\u6709\u6b63\u5728\u8fdb\u884c\u5199\u5165 \n      */  \n      return (state.ending &amp;&amp;  \n              state.length === 0 &amp;&amp;  \n              state.bufferedRequest === null &amp;&amp;  \n              !state.finished &amp;&amp;  \n              !state.writing);  \n    }  \n\n    // \u6bcf\u6b21\u5199\u5b8c\u6210\u7684\u65f6\u5019\u4e5f\u4f1a\u8c03\u7528\u8be5\u51fd\u6570  \n    function finishMaybe(stream, state) {  \n      // \u6d41\u662f\u5426\u53ef\u4ee5\u7ed3\u675f  \n      var need = needFinish(state);  \n      // \u662f\u5219\u5148\u5904\u7406prefinish\u4e8b\u4ef6\uff0c\u5426\u5219\u5148\u4e0d\u7ba1\uff0c\u7b49\u5f85\u5199\u5b8c\u6210\u518d\u8c03\u7528\u8be5\u51fd\u6570  \n      if (need) {  \n        prefinish(stream, state);  \n        // \u5982\u679c\u6ca1\u6709\u5f85\u6267\u884c\u7684\u56de\u8c03\uff0c\u5219\u89e6\u53d1finish\u4e8b\u4ef6  \n        if (state.pendingcb === 0) {  \n          state.finished = true;  \n          stream.emit('finish');  \n        }  \n      }  \n      return need;  \n    }  \n</code></pre> <p>\u5f53\u53ef\u5199\u6d41\u4e2d\u6240\u6709\u6570\u636e\u548c\u56de\u8c03\u90fd\u6267\u884c\u4e86\u624d\u80fd\u7ed3\u675f\u6d41\uff0c\u5728\u7ed3\u675f\u6d41\u4e4b\u524d\u4f1a\u5148\u5904\u7406prefinish\u4e8b\u4ef6\u3002 1.</p> <pre><code>    function callFinal(stream, state) {  \n      // \u6267\u884c\u7528\u6237\u7684final\u51fd\u6570  \n      stream._final((err) =&gt; {  \n        // \u6267\u884c\u4e86callFinal\u51fd\u6570\uff0ccb\u51cf\u4e00  \n        state.pendingcb--;  \n        if (err) {  \n          stream.emit('error', err);  \n        }  \n        // \u6267\u884cprefinish  \n        state.prefinished = true;  \n        stream.emit('prefinish');  \n        // \u662f\u5426\u53ef\u4ee5\u89e6\u53d1finish\u4e8b\u4ef6  \n        finishMaybe(stream, state);  \n      });  \n    }  \n    function prefinish(stream, state) {  \n      // \u8fd8\u6ca1\u89e6\u53d1prefinish\u5e76\u4e14\u6ca1\u6709\u6267\u884cfinalcall  \n      if (!state.prefinished &amp;&amp; !state.finalCalled) {  \n        // \u7528\u6237\u4f20\u4e86final\u51fd\u6570\u5219\uff0c\u5f85\u6267\u884c\u56de\u8c03\u6570\u52a0\u4e00\uff0c\u5373callFinal\uff0c\u5426\u5219\u76f4\u63a5\u89e6\u53d1prefinish  \n        if (typeof stream._final === 'function') {  \n          state.pendingcb++;  \n          state.finalCalled = true;  \n          process.nextTick(callFinal, stream, state);  \n        } else {  \n          state.prefinished = true;  \n          stream.emit('prefinish');  \n        }  \n      }  \n    }  \n</code></pre> <p>\u5982\u679c\u7528\u6237\u5b9a\u4e49\u4e86_final\u51fd\u6570\uff0c\u5219\u5148\u6267\u884c\u8be5\u51fd\u6570\uff08\u8fd9\u65f6\u5019\u4f1a\u963b\u6b62finish\u4e8b\u4ef6\u7684\u89e6\u53d1\uff09\uff0c\u6267\u884c\u5b8c\u540e\u89e6\u53d1prefinish\uff0c\u518d\u89e6\u53d1finish\u3002\u5982\u679c\u6ca1\u6709\u5b9a\u4e49_final\uff0c\u5219\u76f4\u63a5\u89e6\u53d1prefinish\u4e8b\u4ef6\u3002\u6700\u540e\u89e6\u53d1finish\u4e8b\u4ef6\u3002</p>"},{"location":"chapter21-JS%20Stream/#214","title":"21.4 \u53cc\u5411\u6d41","text":"<p>\u53cc\u5411\u6d41\u662f\u7ee7\u627f\u53ef\u8bfb\u3001\u53ef\u5199\u7684\u6d41\u3002</p> <pre><code>    util.inherits(Duplex, Readable);  \n\n    {  \n      // \u628a\u53ef\u5199\u6d41\u4e2d\u5b58\u5728\uff0c\u5e76\u4e14\u5728\u53ef\u8bfb\u6d41\u548cDuplex\u91cc\u90fd\u4e0d\u5b58\u5728\u7684\u65b9\u6cd5\u52a0\u5165\u5230Duplex  \n      const keys = Object.keys(Writable.prototype);  \n      for (var v = 0; v &lt; keys.length; v++) {  \n        const method = keys[v];  \n        if (!Duplex.prototype[method])  \n          Duplex.prototype[method] = Writable.prototype[method];  \n      }  \n    }  \n</code></pre> <pre><code>    function Duplex(options) {  \n      if (!(this instanceof Duplex))  \n        return new Duplex(options);  \n\n      Readable.call(this, options);  \n      Writable.call(this, options);  \n      // \u53cc\u5411\u6d41\u9ed8\u8ba4\u53ef\u8bfb  \n      if (options &amp;&amp; options.readable === false)  \n        this.readable = false;  \n      // \u53cc\u5411\u6d41\u9ed8\u8ba4\u53ef\u5199  \n      if (options &amp;&amp; options.writable === false)  \n        this.writable = false;  \n      // \u9ed8\u8ba4\u5141\u8bb8\u534a\u5f00\u5173  \n      this.allowHalfOpen = true;  \n      if (options &amp;&amp; options.allowHalfOpen === false)  \n        this.allowHalfOpen = false;  \n\n      this.once('end', onend);  \n    }  \n</code></pre> <p>\u53cc\u5411\u6d41\u7ee7\u627f\u4e86\u53ef\u8bfb\u6d41\u548c\u53ef\u5199\u6d41\u7684\u80fd\u529b\u3002\u53cc\u5411\u6d41\u5b9e\u73b0\u4e86\u4ee5\u4e0b\u529f\u80fd</p>"},{"location":"chapter21-JS%20Stream/#2141","title":"21.4.1 \u9500\u6bc1","text":"<p>\u5982\u679c\u8bfb\u5199\u4e24\u7aef\u90fd\u9500\u6bc1\uff0c\u5219\u53cc\u5411\u6d41\u9500\u6bc1\u3002</p> <pre><code>    Object.defineProperty(Duplex.prototype, 'destroyed', {  \n      enumerable: false,  \n      get() {  \n        if (this._readableState === undefined ||  \n            this._writableState === undefined) {  \n          return false;  \n        }  \n        return this._readableState.destroyed &amp;&amp; this._writableState.destroyed;  \n      }  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5982\u4f55\u9500\u6bc1\u4e00\u4e2a\u53cc\u5411\u6d41\u3002</p> <pre><code>    Duplex.prototype._destroy = function(err, cb) {  \n      // \u5173\u95ed\u8bfb\u7aef  \n      this.push(null);  \n      // \u5173\u95ed\u5199\u7aef  \n      this.end();  \n      // \u6267\u884c\u56de\u8c03\n      process.nextTick(cb, err);  \n    };  \n</code></pre> <p>\u53cc\u5411\u6d41\u8fd8\u6709\u4e00\u4e2a\u7279\u6027\u662f\u662f\u5426\u5141\u8bb8\u534a\u5f00\u5173\uff0c\u5373\u53ef\u8bfb\u6216\u53ef\u5199\u3002onend\u662f\u8bfb\u7aef\u5173\u95ed\u65f6\u6267\u884c\u7684\u51fd\u6570\u3002\u6211\u4eec\u770b\u770b\u5b9e\u73b0\u3002</p> <pre><code>    // \u5173\u95ed\u5199\u6d41  \n    function onend() {  \n      // \u5141\u8bb8\u534a\u5f00\u5173\u6216\u5199\u6d41\u5df2\u7ecf\u7ed3\u675f\u5219\u8fd4\u56de  \n      if (this.allowHalfOpen || this._writableState.ended)  \n        return;  \n      // \u4e0b\u4e00\u4e2atick\u518d\u5173\u95ed\u5199\u6d41\uff0c\u6267\u884c\u5b8c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u5199  \n      process.nextTick(onEndNT, this);  \n    }  \n\n    function onEndNT(self) {  \n      // \u8c03\u7528\u5199\u7aef\u7684end\u51fd\u6570  \n      self.end();  \n    }  \n</code></pre> <p>\u5f53\u53cc\u5411\u6d41\u5141\u8bb8\u534a\u5f00\u5173\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u8bfb\u6d41\u5173\u95ed\u65f6\uff0c\u53ef\u5199\u6d41\u53ef\u4ee5\u4e0d\u5173\u95ed\u3002</p>"},{"location":"chapter22-events%E6%A8%A1%E5%9D%97/","title":"21-events\u6a21\u5757","text":"<p>events\u6a21\u5757\u662fNode.js\u4e2d\u6bd4\u8f83\u7b80\u5355\u4f46\u662f\u5374\u975e\u5e38\u6838\u5fc3\u7684\u6a21\u5757\uff0cNode.js\u4e2d\uff0c\u5f88\u591a\u6a21\u5757\u90fd\u7ee7\u627f\u4e8eevents\u6a21\u5757\uff0cevents\u6a21\u5757\u662f\u53d1\u5e03\u3001\u8ba2\u9605\u6a21\u5f0f\u7684\u5b9e\u73b0\u3002\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e2a\u5982\u679c\u4f7f\u7528events\u6a21\u5757\u3002</p> <pre><code>    const { EventEmitter } = require('events');  \n    class Events extends EventEmitter {}  \n    const events = new Events();  \n    events.on('demo', () =&gt; {  \n        console.log('emit demo event');  \n    });  \n    events.emit('demo');  \n</code></pre> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0bevents\u6a21\u5757\u7684\u5177\u4f53\u5b9e\u73b0\u3002</p>"},{"location":"chapter22-events%E6%A8%A1%E5%9D%97/#221","title":"22.1 \u521d\u59cb\u5316","text":"<p>\u5f53new\u4e00\u4e2aEventEmitter\u6216\u8005\u4ed6\u7684\u5b50\u7c7b\u65f6\uff0c\u5c31\u4f1a\u8fdb\u5165EventEmitter\u7684\u903b\u8f91\u3002</p> <pre><code>    function EventEmitter(opts) {  \n      EventEmitter.init.call(this, opts);  \n    }  \n\n    EventEmitter.init = function(opts) {  \n      // \u5982\u679c\u662f\u672a\u521d\u59cb\u5316\u6216\u8005\u6ca1\u6709\u81ea\u5b9a\u4e49_events\uff0c\u5219\u521d\u59cb\u5316  \n      if (this._events === undefined ||  \n          this._events === ObjectGetPrototypeOf(this)._events) {  \n        this._events = ObjectCreate(null);  \n        this._eventsCount = 0;  \n      }  \n      // \u521d\u59cb\u5316\u5904\u7406\u51fd\u6570\u4e2a\u6570\u7684\u9608\u503c  \n      this._maxListeners = this._maxListeners || undefined;  \n\n      // \u662f\u5426\u5f00\u542f\u6355\u83b7promise reject,\u9ed8\u8ba4false  \n      if (opts &amp;&amp; opts.captureRejections) {  \n        this[kCapture] = Boolean(opts.captureRejections);  \n      } else {  \n        this[kCapture] = EventEmitter.prototype[kCapture];  \n      }  \n    };  \n</code></pre> <p>EventEmitter\u7684\u521d\u59cb\u5316\u4e3b\u8981\u662f\u521d\u59cb\u5316\u4e86\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u548c\u5c5e\u6027\u3002\u552f\u4e00\u652f\u6301\u7684\u4e00\u4e2a\u53c2\u6570\u5c31\u662fcaptureRejections\uff0ccaptureRejections\u8868\u793a\u5f53\u89e6\u53d1\u4e8b\u4ef6\uff0c\u6267\u884c\u5904\u7406\u51fd\u6570\u65f6\uff0cEventEmitter\u662f\u5426\u6355\u83b7\u5904\u7406\u51fd\u6570\u4e2d\u7684\u5f02\u5e38\u3002\u540e\u9762\u6211\u4eec\u4f1a\u8be6\u7ec6\u8bb2\u89e3\u3002</p>"},{"location":"chapter22-events%E6%A8%A1%E5%9D%97/#222","title":"22.2 \u8ba2\u9605\u4e8b\u4ef6","text":"<p>\u521d\u59cb\u5316\u5b8cEventEmitter\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528\u8ba2\u9605\u3001\u53d1\u5e03\u7684\u529f\u80fd\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7addListener\u3001prependListener\u3001on\u3001once\u8ba2\u9605\u4e8b\u4ef6\u3002addListener\u548con\u662f\u7b49\u4ef7\u7684\uff0cprependListener\u7684\u533a\u522b\u5728\u4e8e\u5904\u7406\u51fd\u6570\u4f1a\u88ab\u63d2\u5165\u5230\u961f\u9996\uff0c\u800c\u9ed8\u8ba4\u662f\u8ffd\u52a0\u5230\u961f\u5c3e\u3002once\u6ce8\u518c\u7684\u5904\u7406\u51fd\u6570\uff0c\u6700\u591a\u88ab\u6267\u884c\u4e00\u6b21\u3002\u56db\u4e2aAPI\u90fd\u662f\u901a\u8fc7_addListener\u51fd\u6570\u5b9e\u73b0\u7684\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u5b9e\u73b0\u3002</p> <pre><code>    function _addListener(target, type, listener, prepend) {  \n      let m;  \n      let events;  \n      let existing;  \n      events = target._events;  \n      // \u8fd8\u6ca1\u6709\u521d\u59cb\u5316_events\u5219\u521d\u59cb\u5316  \n      if (events === undefined) {  \n        events = target._events = ObjectCreate(null);  \n        target._eventsCount = 0;  \n      } else {  \n        /* \n          \u662f\u5426\u5b9a\u4e49\u4e86newListener\u4e8b\u4ef6\uff0c\u662f\u7684\u8bdd\u5148\u89e6\u53d1,\u5982\u679c\u76d1\u542c\u4e86newListener\u4e8b\u4ef6\uff0c \n          \u6bcf\u6b21\u6ce8\u518c\u5176\u4ed6\u4e8b\u4ef6\u65f6\u90fd\u4f1a\u89e6\u53d1newListener\uff0c\u76f8\u5f53\u4e8e\u94a9\u5b50 \n        */  \n        if (events.newListener !== undefined) {  \n          target.emit('newListener', type,  \n                      listener.listener ? listener.listener : listener);  \n          // \u53ef\u80fd\u4f1a\u4fee\u6539_events\uff0c\u8fd9\u91cc\u91cd\u65b0\u8d4b\u503c  \n          events = target._events;  \n        }  \n        // \u5224\u65ad\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u5904\u7406\u51fd\u6570  \n        existing = events[type];  \n      }  \n      // \u4e0d\u5b58\u5728\u5219\u4ee5\u51fd\u6570\u7684\u5f62\u5f0f\u5b58\u50a8\uff0c\u5426\u5219\u662f\u6570\u7ec4  \n      if (existing === undefined) {  \n        events[type] = listener;  \n        ++target._eventsCount;  \n      } else {  \n        if (typeof existing === 'function') {  \n          existing = events[type] =  \n            prepend ? [listener, existing] : [existing, listener];  \n        } else if (prepend) {  \n          existing.unshift(listener);  \n        } else {  \n          existing.push(listener);  \n        }  \n\n        // \u5904\u7406\u544a\u8b66\uff0c\u5904\u7406\u51fd\u6570\u8fc7\u591a\u53ef\u80fd\u662f\u56e0\u4e3a\u4e4b\u524d\u7684\u6ca1\u6709\u5220\u9664\uff0c\u9020\u6210\u5185\u5b58\u6cc4\u6f0f  \n        m = _getMaxListeners(target);  \n        if (m &gt; 0 &amp;&amp; existing.length &gt; m &amp;&amp; !existing.warned) {  \n          existing.warned = true;  \n          const w = new Error('Possible EventEmitter memory leak detected. ' +  \n                              `${existing.length} ${String(type)} listeners ` +  \n                              `added to ${inspect(target, { depth: -1 })}. Use ` +  \n                              'emitter.setMaxListeners() to increase limit');  \n          w.name = 'MaxListenersExceededWarning';  \n          w.emitter = target;  \n          w.type = type;  \n          w.count = existing.length;  \n          process.emitWarning(w);  \n        }  \n      }  \n\n      return target;  \n    }  \n</code></pre> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0bonce\u7684\u5b9e\u73b0\uff0c\u5bf9\u6bd4\u5176\u4ed6\u51e0\u79cdapi\uff0conce\u7684\u5b9e\u73b0\u76f8\u5bf9\u6bd4\u8f83\u96be\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u63a7\u5236\u5904\u7406\u51fd\u6570\u6700\u591a\u6267\u884c\u4e00\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u575a\u6301\u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u4fdd\u8bc1\u5728\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0c\u6267\u884c\u7528\u6237\u5b9a\u4e49\u51fd\u6570\u7684\u540c\u65f6\uff0c\u8fd8\u9700\u8981\u5220\u9664\u6ce8\u518c\u7684\u4e8b\u4ef6\u3002</p> <pre><code>    EventEmitter.prototype.once = function once(type, listener) {  \n      this.on(type, _onceWrap(this, type, listener));  \n      return this;  \n    };  \n\n    function onceWrapper() {  \n      // \u8fd8\u6ca1\u6709\u89e6\u53d1\u8fc7  \n      if (!this.fired) {  \n        // \u5220\u9664\u4ed6  \n        this.target.removeListener(this.type, this.wrapFn);  \n        // \u89e6\u53d1\u4e86  \n        this.fired = true;  \n        // \u6267\u884c  \n        if (arguments.length === 0)  \n          return this.listener.call(this.target);  \n        return this.listener.apply(this.target, arguments);  \n      }  \n    }  \n    // \u652f\u6301once api  \n    function _onceWrap(target, type, listener) {  \n      // fired\u662f\u5426\u5df2\u6267\u884c\u5904\u7406\u51fd\u6570\uff0cwrapFn\u5305\u88f9listener\u7684\u51fd\u6570  \n      const state = { fired: false, wrapFn: undefined, target, type, listener };  \n      // \u751f\u6210\u4e00\u4e2a\u5305\u88f9listener\u7684\u51fd\u6570  \n      const wrapped = onceWrapper.bind(state);  \n      // \u628a\u539f\u51fd\u6570listener\u4e5f\u6302\u5230\u5305\u88f9\u51fd\u6570\u4e2d\uff0c\u7528\u4e8e\u4e8b\u4ef6\u6ca1\u6709\u89e6\u53d1\u524d\uff0c\u7528\u6237\u4e3b\u52a8\u5220\u9664\uff0c\u89c1removeListener  \n      wrapped.listener = listener;  \n      // \u4fdd\u5b58\u5305\u88f9\u51fd\u6570\uff0c\u7528\u4e8e\u6267\u884c\u5b8c\u540e\u5220\u9664\uff0c\u89c1onceWrapper  \n      state.wrapFn = wrapped;  \n      return wrapped;  \n    }  \n</code></pre>"},{"location":"chapter22-events%E6%A8%A1%E5%9D%97/#223","title":"22.3 \u89e6\u53d1\u4e8b\u4ef6","text":"<p>\u5206\u6790\u5b8c\u4e8b\u4ef6\u7684\u8ba2\u9605\uff0c\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e0b\u4e8b\u4ef6\u7684\u89e6\u53d1\u3002</p> <pre><code>    EventEmitter.prototype.emit = function emit(type, ...args) {  \n      // \u89e6\u53d1\u7684\u4e8b\u4ef6\u662f\u5426\u662ferror\uff0cerror\u4e8b\u4ef6\u9700\u8981\u7279\u6b8a\u5904\u7406  \n      let doError = (type === 'error');  \n\n      const events = this._events;  \n      // \u5b9a\u4e49\u4e86\u5904\u7406\u51fd\u6570\uff08\u4e0d\u4e00\u5b9a\u662ftype\u4e8b\u4ef6\u7684\u5904\u7406\u51fd\u6570\uff09  \n      if (events !== undefined) {  \n        // \u5982\u679c\u89e6\u53d1\u7684\u4e8b\u4ef6\u662ferror\uff0c\u5e76\u4e14\u76d1\u542c\u4e86kErrorMonitor\u4e8b\u4ef6\u5219\u89e6\u53d1kErrorMonitor\u4e8b\u4ef6  \n        if (doError &amp;&amp; events[kErrorMonitor] !== undefined)  \n          this.emit(kErrorMonitor, ...args);  \n        // \u89e6\u53d1\u7684\u662ferror\u4e8b\u4ef6\u4f46\u662f\u6ca1\u6709\u5b9a\u4e49\u5904\u7406\u51fd\u6570  \n        doError = (doError &amp;&amp; events.error === undefined);  \n      } else if (!doError) // \u6ca1\u6709\u5b9a\u4e49\u5904\u7406\u51fd\u6570\u5e76\u4e14\u89e6\u53d1\u7684\u4e0d\u662ferror\u4e8b\u4ef6\u5219\u4e0d\u9700\u8981\u5904\u7406\uff0c  \n        return false;  \n\n      // If there is no 'error' event listener then throw.  \n      // \u89e6\u53d1\u7684\u662ferror\u4e8b\u4ef6\uff0c\u4f46\u662f\u6ca1\u6709\u5b9a\u4e49\u5904\u7406error\u4e8b\u4ef6\u7684\u51fd\u6570\uff0c\u5219\u62a5\u9519  \n      if (doError) {  \n        let er;  \n        if (args.length &gt; 0)  \n          er = args[0];  \n        // \u7b2c\u4e00\u4e2a\u5165\u53c2\u662fError\u7684\u5b9e\u4f8b  \n        if (er instanceof Error) {  \n          try {  \n            const capture = {};  \n            /* \n              \u7ed9capture\u5bf9\u8c61\u6ce8\u5165stack\u5c5e\u6027\uff0cstack\u7684\u503c\u662f\u6267\u884cError.captureStackTrace \n              \u8bed\u53e5\u7684\u5f53\u524d\u6808\u4fe1\u606f\uff0c\u4f46\u662f\u4e0d\u5305\u62ecemit\u7684\u90e8\u5206 \n            */  \n            Error.captureStackTrace(capture, EventEmitter.prototype.emit);  \n            ObjectDefineProperty(er, kEnhanceStackBeforeInspector, {  \n              value: enhanceStackTrace.bind(this, er, capture),  \n              configurable: true  \n            });  \n          } catch {}  \n          throw er; // Unhandled 'error' event  \n        }  \n\n        let stringifiedEr;  \n        const { inspect } = require('internal/util/inspect');  \n        try {  \n          stringifiedEr = inspect(er);  \n        } catch {  \n          stringifiedEr = er;  \n        }  \n        const err = new ERR_UNHANDLED_ERROR(stringifiedEr);  \n        err.context = er;  \n        throw err; // Unhandled 'error' event  \n      }  \n      // \u83b7\u53d6type\u4e8b\u4ef6\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570  \n      const handler = events[type];  \n      // \u6ca1\u6709\u5219\u4e0d\u5904\u7406  \n      if (handler === undefined)  \n        return false;  \n      // \u7b49\u4e8e\u51fd\u6570\u8bf4\u660e\u53ea\u6709\u4e00\u4e2a  \n      if (typeof handler === 'function') {  \n        // \u76f4\u63a5\u6267\u884c  \n        const result = ReflectApply(handler, this, args);  \n        // \u975e\u7a7a\u5224\u65ad\u662f\u4e0d\u662fpromise\u5e76\u4e14\u662f\u5426\u9700\u8981\u5904\u7406\uff0c\u89c1addCatch  \n        if (result !== undefined &amp;&amp; result !== null) {  \n          addCatch(this, result, type, args);  \n        }  \n      } else {  \n        // \u591a\u4e2a\u5904\u7406\u51fd\u6570\uff0c\u540c\u4e0a  \n        const len = handler.length;  \n        const listeners = arrayClone(handler, len);  \n        for (let i = 0; i &lt; len; ++i) {  \n          const result = ReflectApply(listeners[i], this, args);  \n          if (result !== undefined &amp;&amp; result !== null) {  \n            addCatch(this, result, type, args);  \n          }  \n        }  \n      }  \n\n      return true;  \n    }  \n</code></pre> <p>\u6211\u4eec\u770b\u5230\u5728Node.js\u4e2d\uff0c\u5bf9\u4e8eerror\u4e8b\u4ef6\u662f\u7279\u6b8a\u5904\u7406\u7684\uff0c\u5982\u679c\u7528\u6237\u6ca1\u6709\u6ce8\u518cerror\u4e8b\u4ef6\u7684\u5904\u7406\u51fd\u6570\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u6302\u6389\uff0c\u53e6\u5916\u6211\u4eec\u770b\u5230\u6709\u4e00\u4e2aaddCatch\u7684\u903b\u8f91\uff0caddCatch\u662f\u4e3a\u4e86\u652f\u6301\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u4e3a\u5f02\u6b65\u6a21\u5f0f\u7684\u60c5\u51b5\uff0c\u6bd4\u5982async\u51fd\u6570\u6216\u8005\u8fd4\u56dePromise\u7684\u51fd\u6570\u3002</p> <pre><code>    function addCatch(that, promise, type, args) {  \n      // \u6ca1\u6709\u5f00\u542f\u6355\u83b7\u5219\u4e0d\u9700\u8981\u5904\u7406  \n      if (!that[kCapture]) {  \n        return;  \n      }  \n      // that throws on second use.  \n      try {  \n        const then = promise.then;  \n\n        if (typeof then === 'function') {  \n          // \u6ce8\u518creject\u7684\u5904\u7406\u51fd\u6570  \n          then.call(promise, undefined, function(err) {  \n            process.nextTick(emitUnhandledRejectionOrErr, that, err, type, args);  \n          });  \n        }  \n      } catch (err) {  \n        that.emit('error', err);  \n      }  \n    }  \n\n    function emitUnhandledRejectionOrErr(ee, err, type, args) {  \n      // \u7528\u6237\u5b9e\u73b0\u4e86kRejection\u5219\u6267\u884c  \n      if (typeof ee[kRejection] === 'function') {  \n        ee[kRejection](err, type, ...args);  \n      } else {  \n        // \u4fdd\u5b58\u5f53\u524d\u503c  \n        const prev = ee[kCapture];  \n        try {  \n          /* \n            \u5173\u95ed\u7136\u540e\u89e6\u53d1error\u4e8b\u4ef6\uff0c\u610f\u4e49 \n            1 \u9632\u6b62error\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u4e5f\u629b\u51faerror\uff0c\u5bfc\u81f4\u6b7b\u5faa\u73af \n            2 \u5982\u679c\u7528\u6237\u5904\u7406\u4e86error\uff0c\u5219\u8fdb\u7a0b\u4e0d\u4f1a\u9000\u51fa\uff0c\u6240\u4ee5\u9700\u8981\u6062\u590dkCapture\u7684\u503c \n              \u5982\u679c\u7528\u6237\u6ca1\u6709\u5904\u7406error\uff0c\u5219nodejs\u4f1a\u89e6\u53d1uncaughtException\uff0c\u5982\u679c\u7528\u6237 \n              \u5904\u7406\u4e86uncaughtException\u5219\u9700\u8981\u7070\u5ea6kCapture\u7684\u503c \n          */  \n          ee[kCapture] = false;  \n          ee.emit('error', err);  \n        } finally {  \n          ee[kCapture] = prev;  \n        }  \n      }  \n    }  \n</code></pre>"},{"location":"chapter22-events%E6%A8%A1%E5%9D%97/#224","title":"22.4 \u53d6\u6d88\u8ba2\u9605","text":"<p>\u6211\u4eec\u63a5\u7740\u770b\u4e00\u4e0b\u5220\u9664\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u7684\u903b\u8f91\u3002</p> <pre><code>    function removeAllListeners(type) {  \n          const events = this._events;  \n          if (events === undefined)  \n            return this;  \n\n          // \u6ca1\u6709\u6ce8\u518cremoveListener\u4e8b\u4ef6\uff0c\u5219\u53ea\u9700\u8981\u5220\u9664\u6570\u636e\uff0c\u5426\u5219\u8fd8\u9700\u8981\u89e6\u53d1removeListener\u4e8b\u4ef6  \n          if (events.removeListener === undefined) {  \n            // \u7b49\u4e8e0\u8bf4\u660e\u662f\u5220\u9664\u5168\u90e8  \n            if (arguments.length === 0) {  \n              this._events = ObjectCreate(null);  \n              this._eventsCount = 0;  \n            } else if (events[type] !== undefined) { // \u5426\u5219\u662f\u5220\u9664\u67d0\u4e2a\u7c7b\u578b\u7684\u4e8b\u4ef6\uff0c  \n              // \u662f\u552f\u4e00\u4e00\u4e2a\u5904\u7406\u51fd\u6570\uff0c\u5219\u91cd\u7f6e_events\uff0c\u5426\u5219\u5220\u9664\u5bf9\u5e94\u7684\u4e8b\u4ef6\u7c7b\u578b  \n              if (--this._eventsCount === 0)  \n                this._events = ObjectCreate(null);  \n              else  \n                delete events[type];  \n            }  \n            return this;  \n          }  \n\n          // \u8bf4\u660e\u6ce8\u518c\u4e86removeListener\u4e8b\u4ef6\uff0carguments.length === 0\u8bf4\u660e\u5220\u9664\u6240\u6709\u7c7b\u578b\u7684\u4e8b\u4ef6  \n          if (arguments.length === 0) {  \n            // \u9010\u4e2a\u5220\u9664\uff0c\u9664\u4e86removeListener\u4e8b\u4ef6\uff0c\u8fd9\u91cc\u5220\u9664\u4e86\u975eremoveListener\u4e8b\u4ef6  \n            for (const key of ObjectKeys(events)) {  \n              if (key === 'removeListener') continue;  \n              this.removeAllListeners(key);  \n            }  \n            // \u8fd9\u91cc\u5220\u9664removeListener\u4e8b\u4ef6\uff0c\u89c1\u4e0b\u9762\u7684\u903b\u8f91  \n            this.removeAllListeners('removeListener');  \n            // \u91cd\u7f6e\u6570\u636e\u7ed3\u6784  \n            this._events = ObjectCreate(null);  \n            this._eventsCount = 0;  \n            return this;  \n          }  \n          // \u5220\u9664\u67d0\u7c7b\u578b\u4e8b\u4ef6  \n          const listeners = events[type];  \n\n          if (typeof listeners === 'function') {  \n            this.removeListener(type, listeners);  \n          } else if (listeners !== undefined) {  \n            // LIFO order  \n            for (let i = listeners.length - 1; i &gt;= 0; i--) {  \n              this.removeListener(type, listeners[i]);  \n            }  \n          }  \n\n          return this;  \n        }  \n</code></pre> <p>removeAllListeners\u51fd\u6570\u4e3b\u8981\u7684\u903b\u8f91\u6709\u4e24\u70b9\uff0c\u7b2c\u4e00\u4e2a\u662fremoveListener\u4e8b\u4ef6\u9700\u8981\u7279\u6b8a\u5904\u7406\uff0c\u8fd9\u7c7b\u4f3c\u4e00\u4e2a\u94a9\u5b50\uff0c\u6bcf\u6b21\u7528\u6237\u5220\u9664\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u7684\u65f6\u5019\u90fd\u4f1a\u89e6\u53d1\u8be5\u4e8b\u4ef6\u3002\u7b2c\u4e8c\u662fremoveListener\u51fd\u6570\u3002removeListener\u662f\u771f\u6b63\u5220\u9664\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u7684\u5b9e\u73b0\u3002removeAllListeners\u662f\u5c01\u88c5\u4e86removeListener\u7684\u903b\u8f91\u3002</p> <pre><code>    function removeListener(type, listener) {  \n       let originalListener;  \n       const events = this._events;  \n       // \u6ca1\u6709\u4e1c\u897f\u53ef\u5220\u9664  \n       if (events === undefined)  \n         return this;  \n\n       const list = events[type];  \n       // \u540c\u4e0a  \n       if (list === undefined)  \n         return this;  \n       // list\u662f\u51fd\u6570\u8bf4\u660e\u53ea\u6709\u4e00\u4e2a\u5904\u7406\u51fd\u6570\uff0c\u5426\u5219\u662f\u6570\u7ec4,\u5982\u679clist.listener === listener\u8bf4\u660e\u662fonce\u6ce8\u518c\u7684  \n       if (list === listener || list.listener === listener) {  \n         // type\u7c7b\u578b\u7684\u5904\u7406\u51fd\u6570\u5c31\u4e00\u4e2a\uff0c\u5e76\u4e14\u4e5f\u6ca1\u6709\u6ce8\u518c\u5176\u4ed6\u7c7b\u578b\u7684\u4e8b\u4ef6\uff0c\u5219\u521d\u59cb\u5316_events  \n         if (--this._eventsCount === 0)  \n           this._events = ObjectCreate(null);  \n         else {  \n           // \u5c31\u4e00\u4e2a\u6267\u884c\u5b8c\u5220\u9664type\u5bf9\u5e94\u7684\u5c5e\u6027  \n           delete events[type];  \n           // \u6ce8\u518c\u4e86removeListener\u4e8b\u4ef6\uff0c\u5219\u5148\u6ce8\u518cremoveListener\u4e8b\u4ef6  \n           if (events.removeListener)  \n             this.emit('removeListener', type, list.listener || listener);  \n         }  \n       } else if (typeof list !== 'function') {  \n         // \u591a\u4e2a\u5904\u7406\u51fd\u6570  \n         let position = -1;  \n         // \u627e\u51fa\u9700\u8981\u5220\u9664\u7684\u51fd\u6570  \n         for (let i = list.length - 1; i &gt;= 0; i--) {  \n           if (list[i] === listener || list[i].listener === listener) {  \n             // \u4fdd\u5b58\u539f\u5904\u7406\u51fd\u6570\uff0c\u5982\u679c\u6709\u7684\u8bdd  \n             originalListener = list[i].listener;  \n             position = i;  \n             break;  \n           }  \n         }  \n\n         if (position &lt; 0)  \n           return this;  \n         // \u7b2c\u4e00\u4e2a\u5219\u51fa\u961f\uff0c\u5426\u5219\u5220\u9664\u4e00\u4e2a  \n         if (position === 0)  \n           list.shift();  \n         else {  \n           if (spliceOne === undefined)  \n             spliceOne = require('internal/util').spliceOne;  \n           spliceOne(list, position);  \n         }  \n         // \u5982\u679c\u53ea\u5269\u4e0b\u4e00\u4e2a\uff0c\u5219\u503c\u6539\u6210\u51fd\u6570\u7c7b\u578b  \n         if (list.length === 1)  \n           events[type] = list[0];  \n         // \u89e6\u53d1removeListener  \n         if (events.removeListener !== undefined)  \n           this.emit('removeListener', type, originalListener || listener);  \n       }  \n\n       return this;  \n     };  \n</code></pre> <p>\u4ee5\u4e0a\u5c31\u662fevents\u6a21\u5757\u7684\u6838\u5fc3\u903b\u8f91\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9b\u5de5\u5177\u51fd\u6570\u5c31\u4e0d\u4e00\u4e00\u5206\u6790\u3002</p>"},{"location":"chapter23-Async%20hooks/","title":"22-Async hooks","text":"<p>\u524d\u8a00\uff1a\u867d\u7136Async hooks\u81f3\u6b64\u8fd8\u662f\u5b9e\u9a8c\u6027API\uff0c\u4f46\u662f\u4ed6\u7684\u786e\u53ef\u4ee5\u89e3\u51b3\u5e94\u7528\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982\u65e5\u5fd7\u548c\u8c03\u7528\u6808\u8ddf\u8e2a\u3002\u672c\u6587\u4ece\u5e94\u7528\u548c\u539f\u7406\u65b9\u4fbf\u4ecb\u7ecd\u4e00\u4e0bNode.js\u7684Async hooks\u3002</p>"},{"location":"chapter23-Async%20hooks/#1-envasynchooks","title":"1 env\u4e2d\u7684AsyncHooks","text":"<p>\u5728Node.js\u7684env\u5bf9\u8c61\u4e2d\u6709\u4e00\u4e2aAsyncHooks\u5bf9\u8c61\uff0c\u8d1f\u8d23Node.js\u8fdb\u7a0b\u4e2dasync_hooks\u7684\u7ba1\u7406\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5b9a\u4e49\u3002</p>"},{"location":"chapter23-Async%20hooks/#11","title":"1.1 \u7c7b\u5b9a\u4e49","text":"<p><pre><code>class AsyncHooks : public MemoryRetainer {\n public:\n\n  enum Fields {\n    // \u4e94\u79cd\u94a9\u5b50\n    kInit,\n    kBefore,\n    kAfter,\n    kDestroy,\n    kPromiseResolve,\n    // \u94a9\u5b50\u603b\u6570\n    kTotals,\n    // async_hooks\u5f00\u542f\u7684\u4e2a\u6570\n    kCheck,\n    // \u8bb0\u5f55\u6808\u7684top\u6307\u9488\n    kStackLength,\n    // \u6570\u7ec4\u5927\u5c0f\n    kFieldsCount,\n  };\n\n  enum UidFields {\n    kExecutionAsyncId,\n    kTriggerAsyncId,\n    // \u5f53\u524dasync id\u7684\u503c\n    kAsyncIdCounter,\n    kDefaultTriggerAsyncId,\n    kUidFieldsCount,\n  };\n\n private:\n  inline AsyncHooks();\n  // \u5f02\u6b65\u8d44\u6e90\u7684\u7c7b\u578b\n  std::array&lt;v8::Eternal&lt;v8::String&gt;, AsyncWrap::PROVIDERS_LENGTH&gt; providers_;\n  // \u6808\n  AliasedFloat64Array async_ids_stack_;\n  // \u6574\u5f62\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u503c\u7684\u610f\u4e49\u548cFields\u5bf9\u5e94\n  AliasedUint32Array fields_;\n  // \u6574\u5f62\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u503c\u7684\u610f\u4e49\u548cUidFields\u5bf9\u5e94\n  AliasedFloat64Array async_id_fields_;\n};\n</code></pre> \u7ed3\u6784\u56fe\u5982\u4e0b  \u63a5\u4e0b\u6765\u770b\u4e00\u4e0benv\u7684AsyncHooks\u5bf9\u8c61\u63d0\u4f9b\u4e86\u54ea\u4e9bAPI\uff0c\u8fd9\u4e9bAPI\u662f\u4e0a\u5c42\u7684\u57fa\u7840\u3002</p>"},{"location":"chapter23-Async%20hooks/#12-api","title":"1.2 \u8bfbAPI","text":"<p>\u6211\u4eec\u770b\u4e00\u4e0benv\u5bf9\u8c61\u4e2d\u83b7\u53d6AsyncHooks\u5bf9\u8c61\u5bf9\u5e94\u5b57\u6bb5\u7684API\u3002 <pre><code>// \u83b7\u53d6\u5bf9\u5e94\u7684\u5b57\u6bb5\ninline AliasedUint32Array&amp; AsyncHooks::fields() {\n  return fields_;\n}\n\ninline AliasedFloat64Array&amp; AsyncHooks::async_id_fields() {\n  return async_id_fields_;\n}\n\ninline AliasedFloat64Array&amp; AsyncHooks::async_ids_stack() {\n  return async_ids_stack_;\n}\n\n// \u83b7\u53d6\u8d44\u6e90\u7c7b\u578b\ninline v8::Local&lt;v8::String&gt; AsyncHooks::provider_string(int idx) {\n  return providers_[idx].Get(env()-&gt;isolate());\n}\n\n// \u65b0\u5efa\u8d44\u6e90\u7684\u65f6\u5019\uff0c\u83b7\u53d6\u65b0\u7684async id\ninline double Environment::new_async_id() {\n  async_hooks()-&gt;async_id_fields()[AsyncHooks::kAsyncIdCounter] += 1;\n  return async_hooks()-&gt;async_id_fields()[AsyncHooks::kAsyncIdCounter];\n}\n\n// \u83b7\u53d6\u5f53\u524dasync id\ninline double Environment::execution_async_id() {\n  return async_hooks()-&gt;async_id_fields()[AsyncHooks::kExecutionAsyncId];\n}\n\n// \u83b7\u53d6\u5f53\u524dtrigger async id\ninline double Environment::trigger_async_id() {\n  return async_hooks()-&gt;async_id_fields()[AsyncHooks::kTriggerAsyncId];\n}\n\n// \u83b7\u53d6\u9ed8\u8ba4\u7684trigger async id\uff0c\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\uff0c\u5219\u83b7\u53d6\u5f53\u524d\u7684async id\ninline double Environment::get_default_trigger_async_id() {\n  double default_trigger_async_id = async_hooks()-&gt;async_id_fields()[AsyncHooks::kDefaultTriggerAsyncId];\n  // If defaultTriggerAsyncId isn't set, use the executionAsyncId\n  if (default_trigger_async_id &lt; 0)\n    default_trigger_async_id = execution_async_id();\n  return default_trigger_async_id;\n}\n</code></pre></p>"},{"location":"chapter23-Async%20hooks/#13-api","title":"1.3 \u5199API","text":"<pre><code>inline void AsyncHooks::push_async_ids(double async_id,\n                                       double trigger_async_id) {\n  // \u83b7\u53d6\u5f53\u524d\u6808\u9876\u6307\u9488\n  uint32_t offset = fields_[kStackLength];\n  // \u4e0d\u591f\u5219\u6269\u5bb9\n  if (offset * 2 &gt;= async_ids_stack_.Length())\n    grow_async_ids_stack();\n  // \u628a\u65e7\u7684\u4e0a\u4e0b\u6587\u538b\u6808  \n  async_ids_stack_[2 * offset] = async_id_fields_[kExecutionAsyncId];\n  async_ids_stack_[2 * offset + 1] = async_id_fields_[kTriggerAsyncId];\n  // \u6808\u6307\u9488\u52a0\u4e00\n  fields_[kStackLength] += 1;\n  // \u8bb0\u5f55\u5f53\u524d\u4e0a\u4e0b\u6587\n  async_id_fields_[kExecutionAsyncId] = async_id;\n  async_id_fields_[kTriggerAsyncId] = trigger_async_id;\n}\n// \u548c\u4e0a\u9762\u7684\u903b\u8f91\u76f8\u53cd\ninline bool AsyncHooks::pop_async_id(double async_id) {\n\n  if (fields_[kStackLength] == 0) return false;\n  uint32_t offset = fields_[kStackLength] - 1;\n  async_id_fields_[kExecutionAsyncId] = async_ids_stack_[2 * offset];\n  async_id_fields_[kTriggerAsyncId] = async_ids_stack_[2 * offset + 1];\n  fields_[kStackLength] = offset;\n\n  return fields_[kStackLength] &gt; 0;\n}\n</code></pre>"},{"location":"chapter23-Async%20hooks/#2-asyncwrap","title":"2 \u5e95\u5c42\u8d44\u6e90\u5c01\u88c5\u7c7b - AsyncWrap","text":"<p>\u63a5\u7740\u770b\u4e00\u4e0b\u5f02\u6b65\u8d44\u6e90\u7684\u57fa\u7c7bAsyncWrap\u3002\u6240\u6709\u4f9d\u8d56\u4e8eC\u3001C++\u5c42\u5b9e\u73b0\u7684\u8d44\u6e90\uff08\u6bd4\u5982TCP\u3001UDP\uff09\u90fd\u4f1a\u7ee7\u627fAsyncWrap\u3002\u770b\u770b\u8be5\u7c7b\u7684\u5b9a\u4e49\u3002 <pre><code>class AsyncWrap : public BaseObject {\n private:\n  ProviderType provider_type_ = PROVIDER_NONE;\n  double async_id_ = kInvalidAsyncId;\n  double trigger_async_id_;\n};\n</code></pre> \u6211\u4eec\u770b\u5230\u6bcf\u4e2aAsyncWrap\u5bf9\u8c61\u90fd\u6709async_id_\u3001trigger_async_id_\u548cprovider_type_\u5c5e\u6027\uff0c\u8fd9\u6b63\u662f\u5728init\u56de\u8c03\u91cc\u62ff\u5230\u7684\u6570\u636e\u3002\u6211\u4eec\u770b\u770bAsyncWrap\u7684\u6784\u9020\u51fd\u6570\u3002\u63a5\u4e0b\u6765\u770b\u4e00\u4e0b\u65b0\u5efa\u4e00\u4e2a\u8d44\u6e90\uff08AsyncWrap\uff09\u65f6\u7684\u903b\u8f91\u3002</p>"},{"location":"chapter23-Async%20hooks/#21","title":"2.1 \u8d44\u6e90\u521d\u59cb\u5316","text":"<p><pre><code>AsyncWrap::AsyncWrap(Environment* env,\n                     Local&lt;Object&gt; object,\n                     ProviderType provider,\n                     double execution_async_id,\n                     bool silent)\n    : AsyncWrap(env, object) {\n  // \u8d44\u6e90\u7c7b\u578b\n  provider_type_ = provider;\n  AsyncReset(execution_async_id, silent);\n}\n\nvoid AsyncWrap::AsyncReset(Local&lt;Object&gt; resource, double execution_async_id,\n                           bool silent) {\n  // \u83b7\u53d6\u4e00\u4e2a\u65b0\u7684async id\uff0cexecution_async_id\u9ed8\u8ba4\u662fkInvalidAsyncId\n  async_id_ = execution_async_id == kInvalidAsyncId ? env()-&gt;new_async_id()\n                                                     : execution_async_id;\n  // \u83b7\u53d6trigger async id                                                   \n  trigger_async_id_ = env()-&gt;get_default_trigger_async_id();\n  // \u6267\u884cinit\u94a9\u5b50\n  EmitAsyncInit(env(), resource,\n                env()-&gt;async_hooks()-&gt;provider_string(provider_type()),\n                async_id_, trigger_async_id_);\n}\n</code></pre> \u63a5\u7740\u770bEmitAsyncInit <pre><code>void AsyncWrap::EmitAsyncInit(Environment* env,\n                              Local&lt;Object&gt; object,\n                              Local&lt;String&gt; type,\n                              double async_id,\n                              double trigger_async_id) {\n  AsyncHooks* async_hooks = env-&gt;async_hooks();\n  HandleScope scope(env-&gt;isolate());\n  Local&lt;Function&gt; init_fn = env-&gt;async_hooks_init_function();\n\n  Local&lt;Value&gt; argv[] = {\n    Number::New(env-&gt;isolate(), async_id),\n    type,\n    Number::New(env-&gt;isolate(), trigger_async_id),\n    object,\n  };\n\n  TryCatchScope try_catch(env, TryCatchScope::CatchMode::kFatal);\n  // \u6267\u884cinit\u56de\u8c03\n  USE(init_fn-&gt;Call(env-&gt;context(), object, arraysize(argv), argv));\n}\n</code></pre> \u90a3\u4e48env-&gt;async_hooks_init_function()\u7684\u503c\u662f\u4ec0\u4e48\u5462\uff1f\u8fd9\u662f\u5728Node.js\u521d\u59cb\u5316\u65f6\u8bbe\u7f6e\u7684\u3002 <pre><code>const { nativeHooks } = require('internal/async_hooks');\ninternalBinding('async_wrap').setupHooks(nativeHooks);\n</code></pre> SetupHooks\u7684\u5b9e\u73b0\u5982\u4e0b <pre><code>static void SetupHooks(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Environment* env = Environment::GetCurrent(args);\n  Local&lt;Object&gt; fn_obj = args[0].As&lt;Object&gt;();\n\n#define SET_HOOK_FN(name)                                                      \\\n  do {                                                                         \\\n    Local&lt;Value&gt; v =                                                           \\\n        fn_obj-&gt;Get(env-&gt;context(),                                            \\\n                    FIXED_ONE_BYTE_STRING(env-&gt;isolate(), #name))              \\\n            .ToLocalChecked();                                                 \\\n    CHECK(v-&gt;IsFunction());                                                    \\\n    env-&gt;set_async_hooks_##name##_function(v.As&lt;Function&gt;());                  \\\n  } while (0)\n  // \u4fdd\u5b58\u5230env\u4e2d\n  SET_HOOK_FN(init);\n  SET_HOOK_FN(before);\n  SET_HOOK_FN(after);\n  SET_HOOK_FN(destroy);\n  SET_HOOK_FN(promise_resolve);\n#undef SET_HOOK_FN\n}\n</code></pre> nativeHooks\u7684\u5b9e\u73b0\u5982\u4e0b <pre><code>nativeHooks: {\n  init: emitInitNative,\n  before: emitBeforeNative,\n  after: emitAfterNative,\n  destroy: emitDestroyNative,\n  promise_resolve: emitPromiseResolveNative\n}\n</code></pre> \u8fd9\u4e9bHooks\u4f1a\u6267\u884c\u5bf9\u5e94\u7684\u56de\u8c03\uff0c\u6bd4\u5982emitInitNative <pre><code>function emitInitNative(asyncId, type, triggerAsyncId, resource) {\n  for (var i = 0; i &lt; active_hooks.array.length; i++) {\n      if (typeof active_hooks.array[i][init_symbol] === 'function') {\n        active_hooks.array[i][init_symbol](\n          asyncId, type, triggerAsyncId,\n          resource\n        );\n      }\n  }\n}\n</code></pre> active_hooks.array\u7684\u503c\u5c31\u662f\u6211\u4eec\u5728\u4e1a\u52a1\u4ee3\u7801\u91cc\u8bbe\u7f6e\u7684\u94a9\u5b50\uff0c\u6bcf\u6b21\u8c03\u7814createHooks\u7684\u65f6\u5019\u5c31\u5bf9\u5e94\u6570\u7ec4\u7684\u4e00\u4e2a\u5143\u7d20\u3002</p>"},{"location":"chapter23-Async%20hooks/#22","title":"2.2 \u6267\u884c\u8d44\u6e90\u56de\u8c03","text":"<p>\u5f53\u4e1a\u52a1\u4ee3\u7801\u5f02\u6b65\u8bf7\u6c42\u5e95\u5c42API\uff0c\u5e76\u4e14\u5e95\u5c42\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u5c31\u4f1a\u6267\u884c\u4e0a\u5c42\u7684\u56de\u8c03\uff0c\u6bd4\u5982\u76d1\u542c\u4e00\u4e2asocket\u65f6\uff0c\u6709\u8fde\u63a5\u5230\u6765\u3002Node.js\u5c31\u4f1a\u8c03\u7528MakeCallback\u51fd\u6570\u6267\u884c\u56de\u8c03\u3002 <pre><code>MaybeLocal&lt;Value&gt; AsyncWrap::MakeCallback(const Local&lt;Function&gt; cb,\n                                          int argc,\n                                          Local&lt;Value&gt;* argv) {\n  // \u5f53\u524dAsyncWrap\u5bf9\u8c61\u5bf9\u5e94\u7684\u6267\u884c\u4e0a\u4e0b\u6587                             \n  ProviderType provider = provider_type();\n  async_context context { get_async_id(), get_trigger_async_id() };\n  MaybeLocal&lt;Value&gt; ret = InternalMakeCallback(env(), object(), cb, argc, argv, context);\n\n  return ret;\n}\n</code></pre> MakeCallback\u4e2d\u4f1a\u8c03\u7528InternalMakeCallback\u3002 <pre><code>MaybeLocal&lt;Value&gt; InternalMakeCallback(Environment* env,\n                                       Local&lt;Object&gt; recv,\n                                       const Local&lt;Function&gt; callback,\n                                       int argc,\n                                       Local&lt;Value&gt; argv[],\n                                       async_context asyncContext) {\n  // \u65b0\u5efa\u4e00\u4e2ascope                                     \n  InternalCallbackScope scope(env, recv, asyncContext);\n  // \u6267\u884c\u56de\u8c03\n  callback-&gt;Call(env-&gt;context(), recv, argc, argv);\n  // \u5173\u95edscope\n  scope.Close();\n}\n</code></pre> \u6211\u4eec\u770b\u770b\u65b0\u5efa\u548c\u5173\u95edscope\u90fd\u505a\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002 <pre><code>InternalCallbackScope::InternalCallbackScope(Environment* env,\n                                             Local&lt;Object&gt; object,\n                                             const async_context&amp; asyncContext,\n                                             int flags)\n  : env_(env),\n    async_context_(asyncContext),\n    object_(object),\n    skip_hooks_(flags &amp; kSkipAsyncHooks),\n    skip_task_queues_(flags &amp; kSkipTaskQueues) {\n  // v14\u7248\u672c\u4e2d\uff0c\u662f\u5148\u89e6\u53d1before\u518dpush\u4e0a\u4e0b\u6587\uff0c\u987a\u5e8f\u662f\u4e0d\u5bf9\u7684\uff0cv16\u5df2\u7ecf\u6539\u8fc7\u6765\u3002\n  // \u5f53\u524d\u6267\u884c\u4e0a\u4e0b\u6587\u5165\u6808\n  env-&gt;async_hooks()-&gt;push_async_ids(async_context_.async_id,\n                               async_context_.trigger_async_id);\n  // \u89e6\u53d1before\u94a9\u5b50\n  if (asyncContext.async_id != 0 &amp;&amp; !skip_hooks_) {\n    AsyncWrap::EmitBefore(env, asyncContext.async_id);\n  }\n\n  pushed_ids_ = true;\n}   \n</code></pre> \u5728scope\u91cc\u4f1a\u628a\u5f53\u524dAsyncWrap\u5bf9\u8c61\u7684\u6267\u884c\u4e0a\u4e0b\u6587\u4f5c\u4e3a\u5f53\u524d\u6267\u884c\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u89e6\u53d1before\u94a9\u5b50\uff0c\u7136\u540e\u6267\u884c\u4e1a\u52a1\u56de\u8c03\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u56de\u8c03\u91cc\u83b7\u53d6\u5f53\u524d\u6267\u884c\u4e0a\u4e0b\u6587\u65f6\u5c31\u62ff\u5230\u4e86AsyncWrap\u5bf9\u5e94\u7684\u503c\uff08 \u8c03\u7528executionAsyncId\uff09\uff0c\u63a5\u7740\u770bClose <pre><code>void InternalCallbackScope::Close() {\n  // \u6267\u884c\n  if (pushed_ids_)\n    env_-&gt;async_hooks()-&gt;pop_async_id(async_context_.async_id);\n\n  if (async_context_.async_id != 0 &amp;&amp; !skip_hooks_) {\n    AsyncWrap::EmitAfter(env_, async_context_.async_id);\n  }\n}\n</code></pre> Close\u5728\u6267\u884c\u56de\u8c03\u540e\u88ab\u8c03\u7528\uff0c\u4e3b\u8981\u662f\u6062\u590d\u5f53\u524d\u6267\u884c\u4e0a\u4e0b\u6587\u5e76\u4e14\u89e6\u53d1after\u94a9\u5b50\u3002</p>"},{"location":"chapter23-Async%20hooks/#3-timeouttickobjecd","title":"3 \u4e0a\u5c42\u8d44\u6e90\u7684\u5c01\u88c5 - Timeout\u3001TickObjecd\u7b49","text":"<p>\u5e76\u4e0d\u662f\u6240\u6709\u7684\u5f02\u6b65\u8d44\u6e90\u90fd\u662f\u5e95\u5c42\u5b9e\u73b0\u7684\uff0c\u6bd4\u5982\u5b9a\u65f6\u5668\uff0ctick\u4e5f\u88ab\u5b9a\u4e49\u4e3a\u5f02\u6b65\u8d44\u6e90\uff0c\u56e0\u4e3a\u4ed6\u4eec\u90fd\u662f\u548c\u56de\u8c03\u76f8\u5173\u3002\u8fd9\u79cd\u5f02\u6b65\u8d44\u6e90\u662f\u5728JS\u5c42\u5b9e\u73b0\u7684\uff0c\u8fd9\u91cc\u53ea\u5206\u6790Timeout\u3002</p>"},{"location":"chapter23-Async%20hooks/#31","title":"3.1 \u521b\u5efa\u8d44\u6e90","text":"<p>\u6211\u4eec\u770b\u4e00\u4e0b\u6267\u884csetTimeout\u65f6\u7684\u6838\u5fc3\u903b\u8f91\u3002 <pre><code>function setTimeout(callback, after, arg1, arg2, arg3) {\n  const timeout = new Timeout(callback, after, args, false, true);\n  return timeout;\n}\n\nfunction Timeout(callback, after, args, isRepeat, isRefed) {\n  initAsyncResource(this, 'Timeout');\n}\n\nfunction initAsyncResource(resource, type) {\n  // \u83b7\u53d6\u65b0\u7684async id\n  const asyncId = resource[async_id_symbol] = newAsyncId();\n  const triggerAsyncId = resource[trigger_async_id_symbol] = getDefaultTriggerAsyncId();\n  // \u662f\u5426\u8bbe\u7f6e\u4e86init\u94a9\u5b50\uff0c\u662f\u5219\u89e6\u53d1\u56de\u8c03\n  if (initHooksExist())\n    emitInit(asyncId, type, triggerAsyncId, resource);\n}\n</code></pre> \u6267\u884csetTimeout\u65f6\uff0cNode.js\u4f1a\u521b\u5efa\u4e00\u4e2aTimeout\u5bf9\u8c61\uff0c\u8bbe\u7f6easync_hooks\u76f8\u5173\u7684\u4e0a\u4e0b\u6587\u5e76\u8bb0\u5f55\u5230Timeout\u5bf9\u8c61\u4e2d\u3002\u7136\u540e\u89e6\u53d1init\u94a9\u5b50\u3002 <pre><code>function emitInitScript(asyncId, type, triggerAsyncId, resource) {\n  emitInitNative(asyncId, type, triggerAsyncId, resource);\n}\n</code></pre> \u4ee5\u4e0a\u4ee3\u7801\u4f1a\u6267\u884c\u6bcf\u4e2aasync_hooks\u5bf9\u8c61\u7684init\u56de\u8c03(\u901a\u5e38\u6211\u4eec\u53ea\u6709\u4e00\u4e2aasync_hooks\u5bf9\u8c61)\u3002</p>"},{"location":"chapter23-Async%20hooks/#31_1","title":"3.1 \u6267\u884c\u56de\u8c03","text":"<p>\u5f53\u5b9a\u65f6\u5668\u5230\u671f\u65f6\uff0c\u4f1a\u6267\u884c\u56de\u8c03\uff0c\u6211\u4eec\u770b\u770b\u76f8\u5173\u7684\u903b\u8f91\u3002 <pre><code>// \u89e6\u53d1before\u94a9\u5b50\nemitBefore(asyncId, timer[trigger_async_id_symbol]);\n// \u6267\u884c\u56de\u8c03\ntimer._onTimeout();\n// \u89e6\u53d1after\u56de\u8c03\nemitAfter(asyncId);\n</code></pre> \u6211\u4eec\u770b\u5230\u6267\u884c\u8d85\u65f6\u56de\u8c03\u7684\u524d\u540e\u4f1a\u89e6\u53d1\u5bf9\u5e94\u7684\u94a9\u5b50\u3002 <pre><code>function emitBeforeScript(asyncId, triggerAsyncId) {\n  // \u548c\u5e95\u5c42\u7684push_async_ids\u903b\u8f91\u4e00\u6837\n  pushAsyncIds(asyncId, triggerAsyncId);\n  // \u5982\u679c\u6709\u56de\u8c03\u5219\u6267\u884c\n  if (async_hook_fields[kBefore] &gt; 0)\n    emitBeforeNative(asyncId);\n}\n\nfunction emitAfterScript(asyncId) {\n  // \u8bbe\u7f6e\u4e86after\u56de\u8c03\u5219emit\n  if (async_hook_fields[kAfter] &gt; 0)\n    emitAfterNative(asyncId);\n  // \u548c\u5e95\u5c42\u7684pop_async_ids\u903b\u8f91\u4e00\u6837\n  popAsyncIds(asyncId);\n}\n</code></pre> JS\u5c42\u7684\u5b9e\u73b0\u548c\u5e95\u5c42\u662f\u4fdd\u6301\u4e00\u81f4\u7684\u3002\u5982\u679c\u6211\u4eec\u5728setTimeout\u56de\u8c03\u91cc\u65b0\u5efa\u4e00\u4e2a\u8d44\u6e90\uff0c\u6bd4\u5982\u518d\u6b21\u6267\u884csetTimeout\uff0c\u8fd9\u65f6\u5019trigger async id\u5c31\u662f\u7b2c\u4e00\u4e2asetTimeout\u5bf9\u5e94\u7684async id\uff0c\u6240\u4ee5\u5c31\u8fde\u8d77\u6765\u4e86\uff0c\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u5177\u4f53\u7684\u4f8b\u5b50\u3002</p>"},{"location":"chapter23-Async%20hooks/#4-defaulttriggerasyncidscope","title":"4 DefaultTriggerAsyncIdScope","text":"<p>Node.js\u4e3a\u4e86\u907f\u514d\u8fc7\u591a\u901a\u8fc7\u53c2\u6570\u4f20\u9012\u7684\u65b9\u5f0f\u4f20\u9012async id\uff0c\u5c31\u8bbe\u8ba1\u4e86DefaultTriggerAsyncIdScope\u3002DefaultTriggerAsyncIdScope\u7684\u4f5c\u7528\u7c7b\u4f3c\u5728\u591a\u4e2a\u51fd\u6570\u5916\u7ef4\u62a4\u4e00\u4e2a\u53d8\u91cf\uff0c\u591a\u4e2a\u51fd\u6570\u90fd\u53ef\u4ee5\u901a\u8fc7DefaultTriggerAsyncIdScope\u83b7\u5f97trigger async id\uff0c\u800c\u4e0d\u9700\u8981\u901a\u8fc7\u5c42\u5c42\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u4ed6\u7684\u5b9e\u73b0\u975e\u5e38\u7b80\u5355\u3002 <pre><code>class DefaultTriggerAsyncIdScope {\n   private:\n    AsyncHooks* async_hooks_;\n    double old_default_trigger_async_id_;\n};\n\ninline AsyncHooks::DefaultTriggerAsyncIdScope ::DefaultTriggerAsyncIdScope(\n    Environment* env, double default_trigger_async_id)\n    : async_hooks_(env-&gt;async_hooks()) {\n  // \u8bb0\u5f55\u65e7\u7684id\uff0c\u8bbe\u7f6e\u65b0\u7684id\n  old_default_trigger_async_id_ =\n    async_hooks_-&gt;async_id_fields()[AsyncHooks::kDefaultTriggerAsyncId];\n  async_hooks_-&gt;async_id_fields()[AsyncHooks::kDefaultTriggerAsyncId] =\n    default_trigger_async_id;\n}\n// \u6062\u590d\ninline AsyncHooks::DefaultTriggerAsyncIdScope ::~DefaultTriggerAsyncIdScope() {\n  async_hooks_-&gt;async_id_fields()[AsyncHooks::kDefaultTriggerAsyncId] =\n    old_default_trigger_async_id_;\n}\n</code></pre> DefaultTriggerAsyncIdScope\u4e3b\u8981\u662f\u8bb0\u5f55\u65e7\u7684id\uff0c\u7136\u540e\u628a\u65b0\u7684id\u8bbe\u7f6e\u5230env\u4e2d\uff0c\u5f53\u5176\u4ed6\u51fd\u6570\u8c03\u7528get_default_trigger_async_id\u65f6\u5c31\u53ef\u4ee5\u83b7\u53d6\u8bbe\u7f6e\u7684async id\u3002\u540c\u6837JS\u5c42\u4e5f\u5b9e\u73b0\u4e86\u7c7b\u4f3c\u7684API\u3002 <pre><code>function defaultTriggerAsyncIdScope(triggerAsyncId, block, ...args) {\n  const oldDefaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\n  async_id_fields[kDefaultTriggerAsyncId] = triggerAsyncId;\n\n  try {\n    return block(...args);\n  } finally {\n    async_id_fields[kDefaultTriggerAsyncId] = oldDefaultTriggerAsyncId;\n  }\n}\n</code></pre> \u5728\u6267\u884cblock\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u83b7\u53d6\u5230\u8bbe\u7f6e\u7684\u503c\uff0c\u800c\u4e0d\u9700\u8981\u4f20\u9012\uff0c\u6267\u884c\u5b8cblock\u540e\u6062\u590d\u3002\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u3002\u4e0b\u9762\u6458\u81eanet\u6a21\u5757\u7684\u4ee3\u7801\u3002 <pre><code>// \u83b7\u53d6handle\u91cc\u7684async id\nthis[async_id_symbol] = getNewAsyncId(this._handle);\ndefaultTriggerAsyncIdScope(this[async_id_symbol],\n                             process.nextTick,\n                             emitListeningNT,\n                             this);\n</code></pre> \u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u91cc\u5177\u4f53\u7684\u60c5\u51b5\u3002\u5728defaultTriggerAsyncIdScope\u4e2d\u4f1a\u4ee5emitListeningNT\u4e3a\u5165\u53c2\u6267\u884cprocess.nextTick\u3002\u6211\u4eec\u770b\u770bnextTick\u7684\u5b9e\u73b0\u3002 <pre><code>function nextTick(callback) {\n  // \u83b7\u53d6\u65b0\u7684async id\n  const asyncId = newAsyncId();\n  // \u83b7\u53d6\u9ed8\u8ba4\u7684trigger async id\uff0c\u5373\u521a\u624d\u8bbe\u7f6e\u7684\n  const triggerAsyncId = getDefaultTriggerAsyncId();\n  const tickObject = {\n    [async_id_symbol]: asyncId,\n    [trigger_async_id_symbol]: triggerAsyncId,\n    callback,\n    args\n  };\n  if (initHooksExist())\n    // \u521b\u5efa\u4e86\u65b0\u7684\u8d44\u6e90\uff0c\u89e6\u53d1init\u94a9\u5b50\n    emitInit(asyncId, 'TickObject', triggerAsyncId, tickObject);\n  queue.push(tickObject);\n}\n</code></pre> \u6211\u4eec\u770b\u5230\u5728nextTick\u4e2d\u901a\u8fc7getDefaultTriggerAsyncId\u62ff\u5230\u4e86trigger async id\u3002 <pre><code>function getDefaultTriggerAsyncId() {\n  const defaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\n  if (defaultTriggerAsyncId &lt; 0)\n    return async_id_fields[kExecutionAsyncId];\n  return defaultTriggerAsyncId;\n}\n</code></pre> getDefaultTriggerAsyncId\u8fd4\u56de\u7684\u5c31\u662f\u521a\u624d\u901a\u8fc7defaultTriggerAsyncIdScope\u8bbe\u7f6e\u7684async id\u3002\u6240\u4ee5\u5728\u89e6\u53d1TickObject\u7684init\u94a9\u5b50\u65f6\u7528\u6237\u5c31\u53ef\u4ee5\u62ff\u5230\u5bf9\u5e94\u7684id\u3002\u4e0d\u8fc7\u66f4\u91cd\u8981\u7684\u65f6\uff0c\u5728\u5f02\u6b65\u6267\u884cnextTick\u7684\u4efb\u52a1\u65f6\uff0c\u8fd8\u53ef\u4ee5\u62ff\u5230\u539f\u59cb\u7684trigger async id\u3002\u56e0\u4e3a\u8be5id\u8bb0\u5f55\u5728tickObject\u4e2d\u3002\u6211\u4eec\u770b\u770b\u6267\u884ctick\u4efb\u52a1\u65f6\u7684\u903b\u8f91\u3002 <pre><code>function processTicksAndRejections() {\n  let tock;\n  do {\n    while (tock = queue.shift()) {\n      // \u62ff\u5230\u5bf9\u5e94\u7684async \u4e0a\u4e0b\u6587\n      const asyncId = tock[async_id_symbol];\n      emitBefore(asyncId, tock[trigger_async_id_symbol]);\n      try {\n        const callback = tock.callback;\n        callback();\n      } finally {\n        if (destroyHooksExist())\n          emitDestroy(asyncId);\n      }\n      emitAfter(asyncId);\n    }\n  } while (!queue.isEmpty() || processPromiseRejections());\n}\n</code></pre></p>"},{"location":"chapter23-Async%20hooks/#5","title":"5 \u8d44\u6e90\u9500\u6bc1","text":"<p>\u8d44\u6e90\u9500\u6bc1\u7684\u65f6\u5019\u4e5f\u4f1a\u89e6\u53d1\u5bf9\u5e94\u7684\u94a9\u5b50\uff0c\u4e0d\u8fc7\u4e0d\u540c\u7684\u662f\u8fd9\u4e2a\u94a9\u5b50\u662f\u5f02\u6b65\u89e6\u53d1\u7684\u3002\u65e0\u8bba\u662fJS\u8fd8\u662f\u597dC++\u5c42\u89e6\u53d1\u9500\u6bc1\u94a9\u5b50\u7684\u65f6\u5019\uff0c\u903b\u8f91\u90fd\u662f\u4e00\u81f4\u7684\u3002 <pre><code>void AsyncWrap::EmitDestroy(Environment* env, double async_id) {\n  // \b\u4e4b\u524d\u4e3a\u7a7a\u5219\u8bbe\u7f6e\u56de\u8c03\n  if (env-&gt;destroy_async_id_list()-&gt;empty()) {\n    env-&gt;SetUnrefImmediate(&amp;DestroyAsyncIdsCallback);\n  }\n  // async id\u5165\u961f\n  env-&gt;destroy_async_id_list()-&gt;push_back(async_id);\n}\n\ntemplate &lt;typename Fn&gt;\nvoid Environment::SetUnrefImmediate(Fn&amp;&amp; cb) {\n  CreateImmediate(std::move(cb), false);\n}\n\ntemplate &lt;typename Fn&gt;\nvoid Environment::CreateImmediate(Fn&amp;&amp; cb, bool ref) {\n  auto callback = std::make_unique&lt;NativeImmediateCallbackImpl&lt;Fn&gt;&gt;(\n      std::move(cb), ref);\n  // \u52a0\u5165\u4efb\u52a1\u961f\u5217    \n  native_immediates_.Push(std::move(callback));\n}\n</code></pre> \u5728\u4e8b\u4ef6\u5faa\u73af\u7684check\u9636\u6bb5\u5c31\u4f1a\u6267\u884c\u91cc\u9762\u7684\u4efb\u52a1\uff0c\u4ece\u800c\u6267\u884c\u56de\u8c03DestroyAsyncIdsCallback\u3002 <pre><code>void AsyncWrap::DestroyAsyncIdsCallback(Environment* env) {\n  Local&lt;Function&gt; fn = env-&gt;async_hooks_destroy_function();\n  do {\n    std::vector&lt;double&gt; destroy_async_id_list;\n    destroy_async_id_list.swap(*env-&gt;destroy_async_id_list());\n    // \u904d\u5386\u9500\u6bc1\u7684async id\n    for (auto async_id : destroy_async_id_list) {\n      HandleScope scope(env-&gt;isolate());\n      Local&lt;Value&gt; async_id_value = Number::New(env-&gt;isolate(), async_id);\n      // \u6267\u884cJS\u5c42\u56de\u8c03\n      MaybeLocal&lt;Value&gt; ret = fn-&gt;Call(env-&gt;context(), Undefined(env-&gt;isolate()), 1, &amp;async_id_value);\n    }\n  } while (!env-&gt;destroy_async_id_list()-&gt;empty());\n}\n</code></pre></p>"},{"location":"chapter23-Async%20hooks/#6-async-hooks","title":"6 Async hooks\u7684\u4f7f\u7528","text":"<p>\u6211\u4eec\u901a\u5e38\u4ee5\u4ee5\u4e0b\u65b9\u5f0f\u4f7f\u7528Async hooks <pre><code>const async_hooks = require('async_hooks');\nasync_hooks.createHook({\n  init(asyncId, type, triggerAsyncId) {},\n  before(asyncId) {},\n  after(asyncId) {},\n  destroy(asyncId) {},\n  promiseResolve(asyncId),\n})\n.enable();\n</code></pre> async_hooks\u662f\u5bf9\u8d44\u6e90\u751f\u547d\u5468\u671f\u7684\u62bd\u8c61\uff0c\u8d44\u6e90\u5c31\u662f\u64cd\u4f5c\u5bf9\u8c61\u548c\u56de\u8c03\u7684\u62bd\u8c61\u3002async_hooks\u5b9a\u4e49\u4e86\u4e94\u4e2a\u751f\u547d\u5468\u671f\u94a9\u5b50\uff0c\u5f53\u8d44\u6e90\u7684\u72b6\u6001\u5230\u8fbe\u67d0\u4e2a\u5468\u671f\u8282\u70b9\u65f6\uff0casync_hooks\u5c31\u4f1a\u89e6\u53d1\u5bf9\u5e94\u7684\u94a9\u5b50\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0bcreateHook\u3002 <pre><code>function createHook(fns) {\n  return new AsyncHook(fns);\n}\n</code></pre> createHook\u662f\u5bf9AsyncHook\u7684\u5c01\u88c5 <pre><code>class AsyncHook {\n  constructor({ init, before, after, destroy, promiseResolve }) {\n    // \u8bb0\u5f55\u56de\u8c03\n    this[init_symbol] = init;\n    this[before_symbol] = before;\n    this[after_symbol] = after;\n    this[destroy_symbol] = destroy;\n    this[promise_resolve_symbol] = promiseResolve;\n  }\n}\n</code></pre> AsyncHook\u7684\u521d\u59cb\u5316\u5f88\u7b80\u5355\uff0c\u521b\u5efa\u4e00\u4e2aAsyncHook\u5bf9\u8c61\u8bb0\u5f55\u56de\u8c03\u51fd\u6570\u3002\u521b\u5efa\u4e86AsyncHook\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u8c03\u7528AsyncHook\u7684enable\u51fd\u6570\u624b\u52a8\u5f00\u542f\u3002 <pre><code>class AsyncHook {\n  enable() {\n    // \u83b7\u53d6\u4e00\u4e2aAsyncHook\u5bf9\u8c61\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u5f62\u6570\u7ec4\n    const [hooks_array, hook_fields] = getHookArrays();\n    // \u6267\u884c\u8fc7enable\u4e86\u5219\u4e0d\u9700\u8981\u518d\u6267\u884c\n    if (hooks_array.includes(this))\n      return this;\n    // \u505a\u4e9b\u7edf\u8ba1\n    const prev_kTotals = hook_fields[kTotals];\n    hook_fields[kTotals] = hook_fields[kInit] += +!!this[init_symbol];\n    hook_fields[kTotals] += hook_fields[kBefore] += +!!this[before_symbol];\n    hook_fields[kTotals] += hook_fields[kAfter] += +!!this[after_symbol];\n    hook_fields[kTotals] += hook_fields[kDestroy] += +!!this[destroy_symbol];\n    hook_fields[kTotals] +=\n        hook_fields[kPromiseResolve] += +!!this[promise_resolve_symbol];\n    // \u5f53\u524d\u5bf9\u8c61\u63d2\u5165\u6570\u7ec4\u4e2d\n    hooks_array.push(this);\n    // \u5982\u679c\u4e4b\u524d\u7684\u6570\u91cf\u662f0\uff0c\u672c\u6b21\u64cd\u4f5c\u540e\u5927\u4e8e0\u5219\u5f00\u542f\u5e95\u5c42\u7684\u903b\u8f91\n    if (prev_kTotals === 0 &amp;&amp; hook_fields[kTotals] &gt; 0) {\n      enableHooks();\n    }\n\n    return this;\n  }\n}\n</code></pre> 1 hooks_array\uff1a\u662f\u4e00\u4e2aAsyncHook\u5bf9\u8c61\u6570\u7ec4\uff0c\u4e3b\u8981\u7528\u4e8e\u8bb0\u5f55\u7528\u6237\u521b\u5efa\u4e86\u54ea\u4e9bAsyncHook\u5bf9\u8c61\uff0c\u7136\u540e\u54ea\u4e9bAsyncHook\u5bf9\u8c61\u91cc\u90fd\u8bbe\u7f6e\u4e86\u54ea\u4e9b\u94a9\u5b50\uff0c\u5728\u56de\u8c03\u7684\u65f6\u5019\u5c31\u4f1a\u904d\u5386\u8fd9\u4e2a\u5bf9\u8c61\u6570\u7ec4\uff0c\u6267\u884c\u91cc\u9762\u7684\u56de\u8c03\u3002 2 hook_fields\uff1a\u5bf9\u5e94\u5e95\u5c42\u7684async_hook_fields\u3002 3 enableHooks\uff1a  <pre><code>function enableHooks() {\n  // \u8bb0\u5f55async_hooks\u7684\u5f00\u542f\u4e2a\u6570\n  async_hook_fields[kCheck] += 1;\n}\n</code></pre> \u81f3\u6b64\uff0casync_hooks\u7684\u521d\u59cb\u5316\u5c31\u5b8c\u6210\u4e86\uff0c\u6211\u4eec\u53d1\u73b0\u903b\u8f91\u975e\u5e38\u7b80\u5355\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u4ed6\u662f\u5982\u4f55\u4e32\u8d77\u6765\u7684\u3002\u4e0b\u9762\u6211\u4eec\u4ee5TCP\u6a21\u5757\u4e3a\u4f8b\u3002 <pre><code>const { createHook, executionAsyncId } = require('async_hooks');\nconst fs = require('fs');\nconst net = require('net');\n\ncreateHook({\n  init(asyncId, type, triggerAsyncId) {\n    fs.writeSync(\n      1,\n      `${type}(${asyncId}): trigger: ${triggerAsyncId} execution: ${executionAsyncId()}\\n`);\n  }\n}).enable();\nnet.createServer((conn) =&gt; {}).listen(8080);\n</code></pre> \u4ee5\u4e0a\u4ee3\u7801\u8f93\u51fa <pre><code>init: type: TCPSERVERWRAP asyncId: 2 trigger id: 1 executionAsyncId(): 1 triggerAsyncId(): 0\ninit: type: TickObject asyncId: 3 trigger id: 2 executionAsyncId(): 1 triggerAsyncId(): 0\nbefore: asyncId: 3 executionAsyncId(): 3 triggerAsyncId(): 2\nafter: asyncId: 3 executionAsyncId(): 3 triggerAsyncId(): 2\n</code></pre> \u4e0b\u9762\u6211\u4eec\u6765\u5206\u6790\u5177\u4f53\u8fc7\u7a0b\u3002\u6211\u4eec\u77e5\u9053\u521b\u5efa\u8d44\u6e90\u7684\u65f6\u5019\u4f1a\u6267\u884cinit\u56de\u8c03\uff0c\u5177\u4f53\u903b\u8f91\u5728listen\u51fd\u6570\u4e2d\uff0c\u5728listen\u51fd\u6570\u4e2d\uff0c\u901a\u8fc7\u5c42\u5c42\u8c03\u7528\u4f1a\u6267\u884cnew TCP\u65b0\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8868\u793a\u670d\u52a1\u5668\u3002TCP\u662fC++\u5c42\u5bfc\u51fa\u7684\u7c7b\uff0c\u521a\u624d\u6211\u4eec\u8bf4\u8fc7\uff0cTCP\u4f1a\u7ee7\u627fAsyncWrap\uff0c\u65b0\u5efaAsyncWrap\u5bf9\u8c61\u7684\u65f6\u5019\u4f1a\u89e6\u53d1init\u94a9\u5b50\uff0c\u7ed3\u6784\u56fe\u5982\u4e0b\u3002  \u5bf9\u5e94\u8f93\u51fa</p> <p><pre><code>init: type: TCPSERVERWRAP asyncId: 2 trigger id: 1 executionAsyncId(): 1 triggerAsyncId(): 0\n</code></pre> \u90a3TickObject\u662f\u600e\u4e48\u6765\u7684\u5462\uff1f\u6211\u4eec\u63a5\u7740\u770blisten\u91cc\u7684\u53e6\u4e00\u6bb5\u903b\u8f91\u3002 <pre><code>this[async_id_symbol] = getNewAsyncId(this._handle);\ndefaultTriggerAsyncIdScope(this[async_id_symbol],\n                           process.nextTick,\n                           emitListeningNT,\n                           this);\n</code></pre> \u4e0a\u9762\u7684\u4ee3\u7801\u6211\u4eec\u521a\u624d\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u5728\u6267\u884cprocess.nextTick\u7684\u65f6\u5019\u4f1a\u521b\u5efa\u4e00\u4e2aTickObject\u5bf9\u8c61\u5c01\u88c5\u6267\u884c\u4e0a\u4e0b\u6587\u548c\u56de\u8c03\u3002 <pre><code>const asyncId = newAsyncId();\nconst triggerAsyncId = getDefaultTriggerAsyncId();\nconst tickObject = {\n  [async_id_symbol]: asyncId,\n  [trigger_async_id_symbol]: triggerAsyncId,\n  callback,\n  args\n};\nemitInit(asyncId, 'TickObject', triggerAsyncId, tickObject);\n</code></pre> \u8fd9\u6b21\u518d\u6b21\u89e6\u53d1\u4e86init\u94a9\u5b50\uff0c\u7ed3\u6784\u5982\u4e0b\uff08nextTick\u901a\u8fc7getDefaultTriggerAsyncId\u83b7\u53d6\u7684id\u662fdefaultTriggerAsyncIdScope\u8bbe\u7f6e\u7684id\uff09\u3002  \u5bf9\u5e94\u8f93\u51fa <pre><code>init: type: TickObject asyncId: 3 trigger id: 2 executionAsyncId(): 1 triggerAsyncId(): 0\n</code></pre> \u63a5\u7740\u6267\u884ctick\u4efb\u52a1\u3002</p> <p><pre><code>const asyncId = tock[async_id_symbol];\nemitBefore(asyncId, tock[trigger_async_id_symbol]);\ntry {\n  tock.callback();\n} finally {\n  if (destroyHooksExist())\n    emitDestroy(asyncId);\n}\nemitAfter(asyncId);\n</code></pre> emitBefore\u65f6\uff0c\u7ed3\u6784\u56fe\u5982\u4e0b\u3002  \u5bf9\u5e94\u8f93\u51fa <pre><code>before: asyncId: 3 executionAsyncId(): 3 triggerAsyncId(): 2\nafter: asyncId: 3 executionAsyncId(): 3 triggerAsyncId(): 2\n</code></pre> \u6267\u884c\u5b8c\u6211\u4eec\u7684JS\u4ee3\u7801\u540e\uff0c\u6240\u6709\u5165\u6808\u7684\u4e0a\u4e0b\u6587\u90fd\u4f1a\u88ab\u6e05\u7a7a\uff0c\u7ed3\u6784\u56fe\u5982\u4e0b\u3002  \u5982\u679c\u8fd9\u65f6\u5019\u6709\u4e00\u4e2a\u8fde\u63a5\u5efa\u7acb\u4f1a\u8f93\u51fa\u4ec0\u4e48\u5462\uff1f\u5f53\u6709\u8fde\u63a5\u5efa\u7acb\u65f6\uff0c\u4f1a\u6267\u884cC++\u5c42\u7684OnConnection\u3002 OnConnection\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684TCP\u5bf9\u8c61\u8868\u793a\u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u7684\u5bf9\u8c61\u3002 <pre><code>MaybeLocal&lt;Object&gt; TCPWrap::Instantiate(Environment* env,\n                                        AsyncWrap* parent,\n                                        TCPWrap::SocketType type) {\n  EscapableHandleScope handle_scope(env-&gt;isolate());\n  AsyncHooks::DefaultTriggerAsyncIdScope trigger_scope(parent); \n  return handle_scope.EscapeMaybe(\n      constructor-&gt;NewInstance(env-&gt;context(), 1, &amp;type_value));\n}\n</code></pre> \u9996\u5148\u5b9a\u4e49\u4e86\u4e00\u4e2aAsyncHooks::DefaultTriggerAsyncIdScope\u3002DefaultTriggerAsyncIdScope\u7528\u4e8e\u8bbe\u7f6e\u9ed8\u8ba4default_trigger_async_id\u4e3aparent\u7684async id\uff08\u503c\u662f2\uff09\uff0c\u6267\u884cInstantiate\u65f6\u4f1a\u6267\u884c\u6790\u6784\u51fd\u6570\u6062\u590d\u539f\u6765\u72b6\u6001\u3002\u63a5\u7740NewInstance\u7684\u65f6\u5019\u5c31\u4f1a\u65b0\u5efa\u4e00\u4e2aTCPWrap\u5bf9\u8c61\uff0c\u4ece\u800c\u521b\u5efa\u4e00\u4e2aAsyncWrap\u5bf9\u8c61\u3002\u7136\u540e\u89e6\u53d1init\u94a9\u5b50\uff0c\u7ed3\u6784\u56fe\u5982\u4e0b\u3002  \u5bf9\u5e94\u8f93\u51fa <pre><code>init: type: TCPWRAP asyncId: 4 trigger id: 2 executionAsyncId(): 0 triggerAsyncId(): 0\n</code></pre> \u521b\u5efa\u5b8c\u5bf9\u8c61\u540e\uff0c\u901a\u8fc7AsyncWrap::MakeCallback\u56de\u8c03JS\u5c42\uff0c\u521a\u624d\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u8fc7AsyncWrap::MakeCallback\u4f1a\u89e6\u53d1before\u548cafter\u94a9\u5b50\uff0c\u89e6\u53d1before\u94a9\u5b50\u65f6\uff0c\u7ed3\u6784\u56fe\u5982\u4e0b\u3002  \u5bf9\u5e94\u8f93\u51fa <pre><code>before: asyncId: 2 executionAsyncId(): 2 triggerAsyncId(): 1\n</code></pre> \u540c\u6837\uff0c\u5728\u56de\u8c03\u51fd\u6570\u91cc\u6267\u884cexecutionAsyncId\u548ctriggerAsyncId\u62ff\u5230\u7684\u5185\u5bb9\u662f\u4e00\u6837\u7684\u3002\u89e6\u53d1after\u540e\u518d\u6062\u590d\u4e0a\u4e0b\u6587\uff0c\u6240\u4ee5\u8f93\u51fa\u4e5f\u662f\u4e00\u6837\u7684\u3002 <pre><code>after: asyncId: 2 executionAsyncId(): 2 triggerAsyncId(): 1\n</code></pre></p>"},{"location":"chapter23-Async%20hooks/#7-asyncresource","title":"7 AsyncResource","text":"<p>\u5f02\u6b65\u8d44\u6e90\u5e76\u4e0d\u662fNode.js\u5185\u7f6e\u7684\uff0cNode.js\u53ea\u662f\u63d0\u4f9b\u4e86\u4e00\u5957\u673a\u5236\uff0c\u4e1a\u52a1\u5c42\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002Node.js\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\u7ed9\u4e1a\u52a1\u4f7f\u7528\uff0c\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\u3002 <pre><code>class AsyncResource {\n  constructor(type, opts = {}) {\n    let triggerAsyncId = opts;\n    let requireManualDestroy = false;\n    if (typeof opts !== 'number') {\n      triggerAsyncId = opts.triggerAsyncId === undefined ?\n        getDefaultTriggerAsyncId() : opts.triggerAsyncId;\n      requireManualDestroy = !!opts.requireManualDestroy;\n    }\n    const asyncId = newAsyncId();\n    this[async_id_symbol] = asyncId;\n    this[trigger_async_id_symbol] = triggerAsyncId;\n\n    if (initHooksExist()) {\n      emitInit(asyncId, type, triggerAsyncId, this);\n    }\n  }\n\n  runInAsyncScope(fn, thisArg, ...args) {\n    const asyncId = this[async_id_symbol];\n    emitBefore(asyncId, this[trigger_async_id_symbol]);\n\n    const ret = thisArg === undefined ?\n      fn(...args) :\n      ReflectApply(fn, thisArg, args);\n\n    emitAfter(asyncId);\n    return ret;\n  }\n\n  emitDestroy() {\n    if (this[destroyedSymbol] !== undefined) {\n      this[destroyedSymbol].destroyed = true;\n    }\n    emitDestroy(this[async_id_symbol]);\n    return this;\n  }\n\n  asyncId() {\n    return this[async_id_symbol];\n  }\n\n  triggerAsyncId() {\n    return this[trigger_async_id_symbol];\n  }\n}\n</code></pre> \u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\u3002 <pre><code>const { AsyncResource, executionAsyncId,triggerAsyncId } = require('async_hooks');\nconst asyncResource = new AsyncResource('Demo');\nasyncResource.runInAsyncScope(() =&gt; {\n  console.log(executionAsyncId(), triggerAsyncId())\n});\n</code></pre> runInAsyncScope\u4e2d\u4f1a\u628aasyncResource\u7684\u6267\u884c\u4e0a\u4e0b\u6587\u8bbe\u7f6e\u4e3a\u5f53\u524d\u6267\u884c\u4e0a\u4e0b\u6587\uff0casync id\u662f2\uff0ctrigger async id\u662f1\uff0c\u6240\u4ee5\u5728\u56de\u8c03\u91cc\u6267\u884cexecutionAsyncId\u8f93\u51fa\u7684\u662f2\uff0ctriggerAsyncId\u8f93\u51fa\u7684\u662f1\u3002</p>"},{"location":"chapter23-Async%20hooks/#8-asynclocalstorage","title":"8 AsyncLocalStorage","text":"<p>AsyncLocalStorage\u662f\u57fa\u4e8eAsyncResource\u5b9e\u73b0\u7684\u4e00\u4e2a\u7ef4\u62a4\u5f02\u6b65\u903b\u8f91\u4e2d\u516c\u5171\u4e0a\u4e0b\u6587\u7684\u7c7b\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u4ed6\u7406\u89e3\u4e3aRedis\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u600e\u4e48\u4f7f\u7528\u3002</p>"},{"location":"chapter23-Async%20hooks/#81","title":"8.1 \u4f7f\u7528","text":"<p><pre><code>const { AsyncLocalStorage } = require('async_hooks');\n\nconst asyncLocalStorage = new AsyncLocalStorage();\nfunction logWithId(msg) {\n  const id = asyncLocalStorage.getStore();\n  console.log(`${id !== undefined ? id : '-'}:`, msg);\n}\n\nasyncLocalStorage.run(1, () =&gt; {\n    logWithId('start');\n    setImmediate(() =&gt; {\n      logWithId('finish');\n    });\n });\n</code></pre> \u6267\u884c\u4e0a\u9762\u4ee3\u7801\u4f1a\u8f93\u51fa</p> <p><pre><code>1: start\n1: finish\n</code></pre> run\u7684\u65f6\u5019\u521d\u59cb\u5316\u516c\u5171\u7684\u4e0a\u4e0b\u6587\uff0c\u7136\u540e\u5728run\u91cc\u6267\u884c\u7684\u5f02\u6b65\u4ee3\u7801\u4e5f\u53ef\u4ee5\u62ff\u5f97\u5230\u8fd9\u4e2a\u516c\u5171\u4e0a\u4e0b\u6587\uff0c\u8fd9\u4e2a\u5728\u8bb0\u5f55\u65e5\u5fd7traceId\u65f6\u5c31\u4f1a\u5f88\u6709\u7528\uff0c\u5426\u5219\u6211\u4eec\u5c31\u9700\u8981\u628atraceId\u4f20\u904d\u4ee3\u7801\u6bcf\u4e2a\u9700\u8981\u7684\u5730\u65b9\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u5b9e\u73b0\u3002</p>"},{"location":"chapter23-Async%20hooks/#82","title":"8.2 \u5b9e\u73b0","text":"<p>\u6211\u4eec\u5148\u770b\u4e00\u4e0b\u521b\u5efaAsyncLocalStorage\u7684\u903b\u8f91 <pre><code>class AsyncLocalStorage {\n  constructor() {\n    this.kResourceStore = Symbol('kResourceStore');\n    this.enabled = false;\n  }\n}\n</code></pre> \u521b\u5efaAsyncLocalStorage\u7684\u65f6\u5019\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u662f\u7f6e\u72b6\u6001\u4e3afalse\uff0c\u5e76\u4e14\u8bbe\u7f6ekResourceStore\u7684\u503c\u4e3aSymbol('kResourceStore')\u3002\u8bbe\u7f6e\u4e3aSymbol('kResourceStore')\u800c\u4e0d\u662f\u2018kResourceStore\u2018\u5f88\u91cd\u8981\uff0c\u6211\u4eec\u540e\u9762\u4f1a\u770b\u5230\u3002\u7ee7\u7eed\u770b\u4e00\u4e0b\u6267\u884cAsyncLocalStorage.run\u7684\u903b\u8f91\u3002 <pre><code> run(store, callback, ...args) {\n    // \u65b0\u5efa\u4e00\u4e2aAsyncResource\n    const resource = new AsyncResource('AsyncLocalStorage', defaultAlsResourceOpts);\n    // \u901a\u8fc7runInAsyncScope\u628aresource\u7684\u6267\u884c\u4e0a\u4e0b\u6587\u8bbe\u7f6e\u5b8c\u5f53\u524d\u7684\u6267\u884c\u4e0a\u4e0b\u6587\n    return resource.emitDestroy().runInAsyncScope(() =&gt; {\n      this.enterWith(store);\n      return ReflectApply(callback, null, args);\n    });\n  }\n</code></pre> \u8bbe\u7f6e\u5b8c\u4e0a\u4e0b\u6587\u4e4b\u540e\u6267\u884crunInAsyncScope\u7684\u56de\u8c03\uff0c\u56de\u8c03\u91cc\u9996\u5148\u6267\u884c\u91ccenterWith\u3002 <pre><code>enterWith(store) {\n    // \u4fee\u6539AsyncLocalStorage\u72b6\u6001\n   this._enable();\n   // \u83b7\u5f97\u5f53\u524d\u6267\u884c\u4e0a\u4e0b\u6587\u5bf9\u4e8e\u591a\u8d44\u6e90\uff0c\u4e5f\u5c31\u662frun\u91cc\u521b\u5efa\u7684resource\n   const resource = executionAsyncResource();\n   // \u628a\u516c\u5171\u4e0a\u4e0b\u6587\u6302\u8f7d\u5230\u5bf9\u8c61\u4e0a\n   resource[this.kResourceStore] = store;\n}\n\n_enable() {\n   if (!this.enabled) {\n     this.enabled = true;\n     ArrayPrototypePush(storageList, this);\n     storageHook.enable();\n   }\n}\n</code></pre> \u6302\u8f7d\u5b8c\u516c\u5171\u4e0a\u4e0b\u6587\u540e\uff0c\u5c31\u6267\u884c\u4e1a\u52a1\u56de\u8c03\u3002\u56de\u8c03\u91cc\u53ef\u4ee5\u901a\u8fc7asyncLocalStorage.getStore()\u83b7\u5f97\u8bbe\u7f6e\u7684\u516c\u5171\u4e0a\u4e0b\u6587\u3002 <pre><code>getStore() {\n  if(this.enabled) {\n    const resource = executionAsyncResource();\n    return resource[this.kResourceStore];\n  }\n}\n</code></pre> getStore\u7684\u539f\u7406\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u9996\u5148\u62ff\u5230\u5f53\u524d\u6267\u884c\u4e0a\u4e0b\u6587\u5bf9\u5e94\u7684\u8d44\u6e90\uff0c\u7136\u540e\u6839\u636eAsyncLocalStorage\u7684kResourceStore\u7684\u503c\u4eceresource\u4e2d\u62ff\u5230\u516c\u5171\u4e0a\u4e0b\u6587\u3002\u5982\u679c\u662f\u540c\u6b65\u6267\u884cgetStore\uff0c\u90a3\u4e48executionAsyncResource\u8fd4\u56de\u7684\u5c31\u662f\u6211\u4eec\u5728run\u7684\u65f6\u5019\u521b\u5efa\u7684AsyncResource\uff0c\u4f46\u662f\u5982\u679c\u662f\u5f02\u6b65getStore\u90a3\u4e48\u600e\u4e48\u529e\u5462\uff1f\u56e0\u4e3a\u8fd9\u65f6\u5019executionAsyncResource\u8fd4\u56de\u7684\u4e0d\u518d\u662f\u6211\u4eec\u521b\u5efa\u7684AsyncResource\uff0c\u4e5f\u5c31\u62ff\u4e0d\u5230\u4ed6\u6302\u8f7d\u7684\u516c\u5171\u4e0a\u4e0b\u6587\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cNode.js\u5bf9\u516c\u5171\u4e0a\u4e0b\u6587\u8fdb\u884c\u4e86\u4f20\u9012\u3002 <pre><code>const storageList = []; // AsyncLocalStorage\u5bf9\u8c61\u6570\u7ec4\nconst storageHook = createHook({\n  init(asyncId, type, triggerAsyncId, resource) {\n    const currentResource = executionAsyncResource();\n    for (let i = 0; i &lt; storageList.length; ++i) {\n      storageList[i]._propagate(resource, currentResource);\n    }\n  }\n});\n\n _propagate(resource, triggerResource) {\n    const store = triggerResource[this.kResourceStore];\n    if (this.enabled) {\n      resource[this.kResourceStore] = store;\n    }\n  }\n</code></pre> \u6211\u4eec\u770b\u5230Node.js\u5185\u90e8\u521b\u5efa\u4e86\u4e00\u4e2aHooks\uff0c\u5728\u6bcf\u6b21\u8d44\u6e90\u521b\u5efa\u7684\u65f6\u5019\uff0cNode.js\u4f1a\u628a\u5f53\u524d\u6267\u884c\u4e0a\u4e0b\u6587\u5bf9\u5e94\u7684\u8d44\u6e90\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2akey\uff08\u6839\u636estorageList\u91cc\u5bf9\u8c61\u7684this.kResourceStore\u5b57\u6bb5\uff09\u5bf9\u5e94\u7684\u503c\u6302\u8f7d\u5230\u65b0\u521b\u5efa\u7684\u8d44\u6e90\u4e2d\u3002\u6240\u4ee5\u5728asyncLocalStorage.getStore()\u65f6\u5373\u4f7f\u4e0d\u662f\u6211\u4eec\u5728\u6267\u884crun\u65f6\u521b\u5efa\u7684\u8d44\u6e90\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u83b7\u5f97\u5177\u4f53asyncLocalStorage\u5bf9\u8c61\u6240\u8bbe\u7f6e\u7684\u8d44\u6e90\uff0c\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\u3002 <pre><code>const { AsyncLocalStorage } = require('async_hooks');\n\nconst asyncLocalStorage = new AsyncLocalStorage();\nconst asyncLocalStorage2 = new AsyncLocalStorage();\nfunction logWithId(msg) {\n  console.log(asyncLocalStorage2.getStore());\n  const id = asyncLocalStorage.getStore();\n  console.log(`${id !== undefined ? id : '-'}:`, msg);\n}\nasyncLocalStorage.run(0, () =&gt; {\n    asyncLocalStorage2.enterWith({hello: \"world\"});\n    logWithId('start');\n    setImmediate(() =&gt; {\n       logWithId('finish');\n    });\n});\n</code></pre> \u9664\u4e86\u901a\u8fc7asyncLocalStorage.run\u8bbe\u7f6e\u4e0a\u4e0b\u6587\uff0c\u6211\u4eec\u901a\u8fc7asyncLocalStorage2.enterWith\u4e5f\u7ed9\u5bf9\u8c61\u4e0a\u4e0b\u6587\u7684\u8d44\u6e90\u5bf9\u8c61\u6302\u8f7d\u4e00\u4e2a\u65b0\u5c5e\u6027\uff0ckey\u662fSymbol('kResourceStore')\uff0c\u503c\u662f{hello: \"world\"}\uff0c\u7136\u540e\u5728logWithId\u4e2d\u8f93\u51faasyncLocalStorage2.getStore()\u3002\u4ece\u8f93\u51fa\u4e2d\u53ef\u4ee5\u770b\u5230\u6210\u529f\u4ece\u8d44\u6e90\u4e2d\u83b7\u5f97\u6302\u8f7d\u7684\u6240\u6709\u4e0a\u4e0b\u6587\u3002 <pre><code>{ hello: 'world' }\n0: start\n{ hello: 'world' }\n0: finish\n</code></pre> \u6211\u4eec\u4e5f\u53ef\u4ee5\u4fee\u6539\u6e90\u7801\u9a8c\u8bc1 <pre><code>Immediate {\n  _idleNext: null,\n  _idlePrev: null,\n  _onImmediate: [Function (anonymous)],\n  _argv: undefined,\n  _destroyed: true,\n  [Symbol(refed)]: null,\n  [Symbol(asyncId)]: 6,\n  [Symbol(triggerId)]: 2,\n  [Symbol(kResourceStore)]: 0,\n  [Symbol(kResourceStore)]: { hello: 'world' }\n}\n</code></pre> \u53ef\u4ee5\u770b\u5230\u8d44\u6e90\u5bf9\u8c61\u6302\u8f7d\u91cc\u4e24\u4e2akey\u4e3aSymbol(kResourceStore)\u7684\u5c5e\u6027\u3002</p>"},{"location":"chapter23-Async%20hooks/#9-async-hooks","title":"9 \u521d\u59cb\u5316\u65f6\u7684Async hooks","text":"<p><pre><code>const async_hooks = require('async_hooks');\nconst eid = async_hooks.executionAsyncId();\nconst tid = async_hooks.triggerAsyncId();\nconsole.log(eid, tid);\n</code></pre> \u4ee5\u4e0a\u4ee3\u7801\u4e2d,\u8f93\u51fa1\u548c0\u3002\u5bf9\u5e94\u7684API\u5b9e\u73b0\u5982\u4e0b\u3002 <pre><code>// \u83b7\u53d6\u5f53\u524d\u7684async id\nfunction executionAsyncId() {\n  return async_id_fields[kExecutionAsyncId];\n}\n// \u83b7\u53d6\u5f53\u524d\u7684trigger async id\uff0c\u5373\u89e6\u53d1\u5f53\u524d\u4ee3\u7801\u7684async id\nfunction triggerAsyncId() {\n  return async_id_fields[kTriggerAsyncId];\n}\n</code></pre> \u90a3\u4e48async_id_fields\u7684\u521d\u59cb\u5316\u662f\u4ec0\u4e48\u5462\uff1f\u4eceenv.h\u5b9a\u4e49\u4e2d\u53ef\u4ee5\u770b\u5230async_id_fields_\uff08async_id_fields\u662f\u4e0a\u5c42\u4f7f\u7528\u7684\u540d\u79f0\uff0c\u5bf9\u5e94\u5e95\u5c42\u7684async_id_fields_\uff09\u662fAliasedFloat64Array\u7c7b\u578b\u3002 <pre><code>AliasedFloat64Array async_id_fields_;\n</code></pre> AliasedFloat64Array\u662f\u4e2a\u7c7b\u578b\u522b\u540d\u3002 <pre><code>typedef AliasedBufferBase&lt;double, v8::Float64Array&gt; AliasedFloat64Array;\n</code></pre> AliasedBufferBase\u7684\u6784\u9020\u51fd\u6570\u5982\u4e0b <pre><code>  AliasedBufferBase(v8::Isolate* isolate, const size_t count)\n      : isolate_(isolate), count_(count), byte_offset_(0) {\n\n    const v8::HandleScope handle_scope(isolate_);\n    const size_t size_in_bytes = MultiplyWithOverflowCheck(sizeof(NativeT), count);\n    v8::Local&lt;v8::ArrayBuffer&gt; ab = v8::ArrayBuffer::New(isolate_, size_in_bytes);\n    // ...\n  }\n</code></pre> \u5e95\u5c42\u662f\u4e00\u4e2aArrayBuffer\u3002 <pre><code>Local&lt;ArrayBuffer&gt; v8::ArrayBuffer::New(Isolate* isolate, size_t byte_length) {\n  i::Isolate* i_isolate = reinterpret_cast&lt;i::Isolate*&gt;(isolate);\n  LOG_API(i_isolate, ArrayBuffer, New);\n  ENTER_V8_NO_SCRIPT_NO_EXCEPTION(i_isolate);\n  i::MaybeHandle&lt;i::JSArrayBuffer&gt; result =\n      i_isolate-&gt;factory()-&gt;NewJSArrayBufferAndBackingStore(\n          byte_length, i::InitializedFlag::kZeroInitialized);\n  // ...\n}\n</code></pre> ArrayBuffer::New\u5728\u7533\u8bf7\u5185\u5b58\u65f6\u4f20\u5165\u4e86i::InitializedFlag::kZeroInitialized\u3002\u4eceV8\u5b9a\u4e49\u4e2d\u53ef\u4ee5\u770b\u5230\u4f1a\u521d\u59cb\u5316\u5185\u5b58\u7684\u5185\u5bb9\u4e3a0\u3002 <pre><code>// Whether the backing store memory is initialied to zero or not.\nenum class InitializedFlag : uint8_t { kUninitialized, kZeroInitialized };\n</code></pre> \u56de\u5230\u4f8b\u5b50\u4e2d\uff0c\u4e3a\u4ec0\u4e48\u8f93\u51fa\u4f1a\u662f1\u548c0\u800c\u4e0d\u662f0\u548c0\u5462\uff1f\u7b54\u6848\u5728Node.js\u542f\u52a8\u65f6\u7684\u8fd9\u6bb5\u4ee3\u7801\u3002 <pre><code>{\n      InternalCallbackScope callback_scope(\n          env.get(),\n          Local&lt;Object&gt;(),\n          // async id\u548ctrigger async id\n          { 1, 0 },\n          InternalCallbackScope::kAllowEmptyResource |\n              InternalCallbackScope::kSkipAsyncHooks);\n      // \u6267\u884c\u6211\u4eec\u7684js        \n      LoadEnvironment(env.get());\n}\n</code></pre> InternalCallbackScope\u521a\u624d\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u4ed6\u4f1a\u628a1\u548c0\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7684\u6267\u884c\u4e0a\u4e0b\u6587\u3002\u7136\u540e\u5728LoadEnvironment\u91cc\u6267\u884c\u6211\u7684JS\u4ee3\u7801\u65f6\u83b7\u53d6\u5230\u7684\u503c\u5c31\u662f1\u548c0\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u6539\u6210\u4ee5\u4e0b\u4ee3\u7801\u4f1a\u8f93\u51fa\u4ec0\u4e48\u5462\uff1f <pre><code>const async_hooks = require('async_hooks');\nPromise.resolve().then(() =&gt; {\n  const eid = async_hooks.executionAsyncId();\n  const tid = async_hooks.triggerAsyncId();\n  console.log(eid, tid);\n})\n</code></pre> \u4ee5\u4e0a\u4ee3\u7801\u4f1a\u8f93\u51fa0\u548c\u3002\u56e0\u4e3a\u6267\u884c\u5b8c\u6211\u4eec\u7684JS\u4ee3\u7801\u540e\uff0cInternalCallbackScope\u5c31\u88ab\u6790\u6784\u4e86\uff0c\u4ece\u800c\u6062\u590d\u4e3a0\u548c0\u3002</p>"},{"location":"chapter24-Inspector/","title":"23-Inspector","text":"<p>\u524d\u8a00\uff1aNode.js\u63d0\u4f9b\u7684Inspector\u4e0d\u4ec5\u53ef\u4ee5\u7528\u6765\u8c03\u8bd5Node.js\u4ee3\u7801\uff0c\u8fd8\u53ef\u4ee5\u5b9e\u65f6\u6536\u96c6Node.js\u8fdb\u7a0b\u7684\u5185\u5b58\uff0cCPU\u7b49\u6570\u636e\uff0c\u540c\u65f6\u652f\u6301\u9759\u6001\u3001\u52a8\u6001\u5f00\u542f\uff0c\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u672c\u6587\u4ece\u4f7f\u7528\u548c\u539f\u7406\u8be6\u7ec6\u8bb2\u89e3Inspector</p> <p>Node.js\u7684\u6587\u6863\u4e2d\u5bf9inspector\u7684\u63cf\u8ff0\u5f88\u5c11\uff0c\u4f46\u662f\u5982\u679c\u6df1\u5165\u63a2\u7d22\uff0c\u5176\u5b9e\u91cc\u9762\u7684\u5185\u5bb9\u8fd8\u662f\u633a\u591a\u7684\u3002\u6211\u4eec\u5148\u770b\u4e00\u4e0bInspector\u7684\u4f7f\u7528\u3002</p>"},{"location":"chapter24-Inspector/#1-inspector","title":"1 Inspector\u7684\u4f7f\u7528","text":""},{"location":"chapter24-Inspector/#11","title":"1.1 \u672c\u5730\u8c03\u8bd5","text":"<p>\u6211\u4eec\u5148\u4ece\u4e00\u4e2a\u4f8b\u5b50\u5f00\u59cb\u3002\u4e0b\u9762\u662f\u4e00\u4e2ahttp\u670d\u52a1\u5668\u3002 <pre><code>const http = require('http');\nhttp.createServer((req, res) =&gt; {\n    res.end('ok');\n}).listen(80);\n</code></pre> \u7136\u540e\u6211\u4eec\u4ee5node --inspect httpServer.js\u7684\u65b9\u5f0f\u542f\u52a8\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u8f93\u51fa\u3002 <pre><code>Debugger listening on ws://127.0.0.1:9229/fbbd9d8f-e088-48cc-b1e0-e16bfe58db44\nFor help, see: https://nodejs.org/en/docs/inspector\n</code></pre> 9229\u7aef\u53e3\u662fNode.js\u9ed8\u8ba4\u9009\u62e9\u7684\u7aef\u53e3\uff0c\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\uff0c\u5177\u4f53\u53ef\u53c2\u8003\u6587\u6863\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53bb\u6d4f\u89c8\u5668\u6253\u5f00\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u83dc\u5355\u680f\u591a\u4e86\u4e00\u4e2a\u8c03\u8bd5Node.js\u7684\u6309\u94ae\u3002  \u70b9\u51fb\u8fd9\u4e2a\u6309\u94ae\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u754c\u9762\u3002  \u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u67d0\u4e00\u884c\u4ee3\u7801\u6253\u65ad\u70b9\uff0c\u6bd4\u5982\u6211\u5728\u7b2c\u4e09\u884c\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u8bbf\u95ee80\u7aef\u53e3\uff0c\u5f00\u53d1\u8005\u5de5\u5177\u5c31\u4f1a\u505c\u7559\u5728\u65ad\u70b9\u5904\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u6267\u884c\u4e0a\u4e0b\u6587\u3002 </p>"},{"location":"chapter24-Inspector/#12","title":"1.2 \u8fdc\u7a0b\u8c03\u8bd5","text":"<p>\u4f46\u5f88\u591a\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u9700\u8981\u8fdc\u7a0b\u8c03\u8bd5\u3002\u6bd4\u5982\u6211\u5728\u4e00\u53f0\u4e91\u670d\u52a1\u5668\u4e0a\u90e8\u7f72\u4ee5\u4e0a\u670d\u52a1\u5668\u4ee3\u7801\u3002\u7136\u540e\u6267\u884c <pre><code>node --inspect=0.0.0.0:8888 httpServer.js \n</code></pre> \u4e0d\u8fc7\u8fd9\u65f6\u5019\u6211\u4eec\u6253\u5f00\u5f00\u53d1\u8005\u5de5\u5177\u5c31\u4f1a\u53d1\u73b0\u6309\u94ae\u7f6e\u7070\u6216\u8005\u627e\u4e0d\u5230\u6211\u4eec\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u4fe1\u606f\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u7528\u53e6\u4e00\u79cd\u65b9\u5f0f\u3002\u901a\u8fc7\u5728\u6d4f\u89c8\u5668url\u8f93\u5165\u6846\u8f93\u5165devtools://devtools/bundled/js_app.html?experiments=true&amp;v8only=true&amp;ws={host}:{port}/{path}\u7684\u65b9\u5f0f\uff08\u66ff\u6362{}\u91cc\u9762\u7684\u5185\u5bb9\u4e3a\u4f60\u6267\u884cNode.js\u65f6\u8f93\u51fa\u7684\u4fe1\u606f\uff09\uff0c\u6d4f\u89c8\u5668\u5c31\u4f1a\u53bb\u8fde\u63a5\u4f60\u8f93\u5165\u7684\u5730\u5740\uff0c\u6bd4\u59821.1.1.1:9229/abc\u3002\u8fd9\u79cd\u6bd4\u8f83\u9002\u5408\u4e8e\u5bf9\u4e8e\u901a\u7528\u7684\u573a\u666f\u3002</p>"},{"location":"chapter24-Inspector/#13","title":"1.3 \u81ea\u52a8\u63a2\u6d4b","text":"<p>\u5982\u679c\u662f\u6211\u4eec\u81ea\u5df1\u8c03\u8bd5\u7684\u8bdd\uff0c\u8fd9\u79cd\u65b9\u5f0f\u770b\u8d77\u6765\u5c31\u6709\u70b9\u9ebb\u70e6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6d4f\u89c8\u5668\u63d0\u4f9b\u7684\u81ea\u52a8\u63a2\u6d4b\u529f\u80fd\u3002 1 url\u8f93\u5165\u6846\u8f93\u5165chrome://inspect/#devices\u6211\u4eec\u4f1a\u770b\u5230\u4ee5\u4e0b\u754c\u9762  2 \u70b9\u51fbconfigure\u6309\u94ae\uff0c\u5728\u5f39\u51fa\u7684\u5f39\u6846\u91cc\u8f93\u5165\u4f60\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u5730\u5740  3 \u914d\u7f6e\u5b8c\u6bd5\u540e\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u754c\u9762\u53d8\u6210\u8fd9\u6837\u4e86\uff0c\u6216\u8005\u6253\u5f00\u65b0\u7684tab\uff0c\u6211\u4eec\u770b\u5230\u5f00\u53d1\u8005\u5de5\u5177\u7684\u8c03\u8bd5\u6309\u94ae\u4e5f\u53d8\u4eae\u4e86\u3002  4 \u8fd9\u65f6\u5019\u6211\u4eec\u70b9\u51fbinspect\u6309\u94ae\u3001Open dedicated DevTools for Node\u6309\u94ae\u6216\u8005\u6253\u5f00\u65b0tab\u7684\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u8c03\u8bd5\u3002\u800c\u4e14\u8fd8\u53ef\u4ee5\u8c03\u8bd5Node.js\u7684\u539f\u751fjs\u6a21\u5757\u3002 </p>"},{"location":"chapter24-Inspector/#2-inspector","title":"2 Inspector\u8c03\u8bd5\u7684\u539f\u7406","text":"<p>\u4e0b\u9762\u4ee5\u901a\u8fc7url\u7684\u65b9\u5f0f\u8c03\u8bd5\uff08\u53ef\u4ee5\u770b\u5230network\uff09\uff0c\u6765\u770b\u770b\u8c03\u8bd5\u7684\u65f6\u5019\u90fd\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u6d4f\u89c8\u5668\u548c\u8fdc\u7a0b\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u540e\uff0c\u662f\u901a\u8fc7websocket\u534f\u8bae\u901a\u4fe1\u7684\u3002  \u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u547d\u4ee4\u662f\u4ec0\u4e48\u610f\u601d\uff0c\u9996\u5148\u770bDebugger.scriptParsed\u3002</p> <p>Debugger.scriptParsed # Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.</p> <p>\u4ece\u8bf4\u660e\u4e2d\u6211\u4eec\u770b\u5230\uff0c\u5f53V8\u89e3\u6790\u811a\u672c\u7684\u65f6\u5019\u5c31\u4f1a\u89e6\u53d1\u8fd9\u4e2a\u4e8b\u4ef6\uff0c\u90a3\u5c31\u4f1a\u544a\u8bc9\u6d4f\u89c8\u5668\u8fd9\u4e2a\u4fe1\u606f\u3002  \u6211\u4eec\u53d1\u73b0\u8fd4\u56de\u7684\u90fd\u662f\u4e00\u4e9b\u5143\u6570\u636e\uff0c\u6ca1\u6709\u811a\u672c\u7684\u5177\u4f53\u4ee3\u7801\u5185\u5bb9\uff0c\u8fd9\u65f6\u5019\u6d4f\u89c8\u5668\u4f1a\u518d\u6b21\u53d1\u8d77\u8bf7\u6c42\uff0c  \u6211\u4eec\u770b\u5230\u8fd9\u4e2a\u811a\u672c\u7684scriptId\u662f103\u3002\u6240\u4ee5\u8bf7\u6c42\u91cc\u5e26\u4e86\u8fd9\u4e2ascriptId\u3002\u5bf9\u5e94\u7684\u8bf7\u6c42id\u662f11\u3002\u63a5\u7740\u770b\u4e00\u4e0b\u54cd\u5e94\u3002  \u81f3\u6b64\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u83b7\u53d6\u811a\u672c\u5185\u5bb9\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u6211\u4eec\u770b\u770b\u8c03\u8bd5\u7684\u65f6\u5019\u662f\u600e\u6837\u7684\u8fc7\u7a0b\u3002\u5f53\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e0a\u70b9\u51fb\u67d0\u4e00\u884c\u8bbe\u7f6e\u65ad\u70b9\u7684\u65f6\u5019\uff0c\u6d4f\u89c8\u5668\u5c31\u4f1a\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u3002  \u8fd9\u4e2a\u547d\u4ee4\u7684\u610f\u4e49\u987e\u540d\u601d\u4e49\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u5177\u4f53\u5b9a\u4e49\u3002</p> <p>Debugger.setBreakpointByUrl # Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in locations property. Further matching script parsing will result in subsequent breakpointResolved events issued. This logical breakpoint will survive page reloads.</p> <p>\u63a5\u7740\u670d\u52a1\u8fd4\u56de\u54cd\u5e94\u3002  \u8fd9\u65f6\u5019\u6211\u4eec\u4ece\u53e6\u5916\u4e00\u4e2atab\u8bbf\u95ee80\u7aef\u53e3\u3002\u670d\u52a1\u5668\u5c31\u4f1a\u5728\u6211\u4eec\u8bbe\u7f6e\u7684\u65ad\u70b9\u5904\u505c\u7559\uff0c\u5e76\u4e14\u901a\u77e5\u6d4f\u89c8\u5668\u3002  \u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e2a\u547d\u4ee4\u7684\u610f\u601d\u3002  \u8fd9\u4e2a\u547d\u4ee4\u5c31\u662f\u5f53\u670d\u52a1\u5668\u6267\u884c\u5230\u65ad\u70b9\u65f6\u901a\u77e5\u6d4f\u89c8\u5668\uff0c\u5e76\u4e14\u8fd4\u56de\u6267\u884c\u7684\u4e00\u4e9b\u4e0a\u4e0b\u6587\uff0c\u6bd4\u5982\u662f\u54ea\u4e2a\u6267\u884c\u5230\u54ea\u4e2a\u65ad\u70b9\u505c\u7559\u4e86\u3002\u8fd9\u65f6\u5019\u6d4f\u89c8\u5668\u4fa7\u4e5f\u4f1a\u505c\u7559\u5728\u5bf9\u5e94\u7684\u5730\u65b9\uff0c\u5f53\u6211\u4eechover\u67d0\u4e2a\u53d8\u91cf\u65f6\uff0c\u5c31\u4f1a\u770b\u5230\u5bf9\u5e94\u7684\u4e0a\u4e0b\u6587\u3002\u8fd9\u4e9b\u90fd\u662f\u901a\u8fc7\u5177\u4f53\u7684\u547d\u4ee4\u83b7\u53d6\u7684\u6570\u636e\u3002\u5c31\u4e0d\u4e00\u4e00\u5206\u6790\u4e86\uff0c\u53ef\u4ee5\u53c2\u8003\u5177\u4f53\u6587\u6863\u3002 </p>"},{"location":"chapter24-Inspector/#3-inspector","title":"3 Inspector\u7684\u5b9e\u73b0","text":"<p>\u5927\u81f4\u4e86\u89e3\u4e86\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u7684\u4ea4\u4e92\u8fc7\u7a0b\u548c\u534f\u8bae\u540e\uff0c\u6211\u4eec\u518d\u6765\u6df1\u5165\u4e86\u89e3\u4e00\u4e0b\u5173\u4e8einspector\u7684\u4e00\u4e9b\u5b9e\u73b0\u3002\u5f53\u7136\u8fd9\u91cc\u4e0d\u662f\u5206\u6790V8\u4e2dInspector\u7684\u5b9e\u73b0\uff0c\u800c\u662f\u5206\u6790\u5982\u4f55\u4f7f\u7528V8\u7684Inspector\u4ee5\u53caNode.js\u4e2d\u5173\u4e8eInspector\u7684\u5b9e\u73b0\u90e8\u5206\u3002</p>"},{"location":"chapter24-Inspector/#31","title":"3.1 \u5f00\u6e90\u5b9e\u73b0","text":"<p>\u56e0\u4e3aNode.js\u7684\u5b9e\u73b0\u6bd4\u8f83\u590d\u6742\uff0c\u8fd9\u91cc\u5148\u4ee5\u4e00\u4e2a\u7b80\u5355\u7248\u7684\u8c03\u8bd5\u5de5\u5177\u6e90\u7801\u6765\u5206\u6790inspector\u7684\u539f\u7406\u3002\u6211\u4eec\u5148\u770b\u4e00\u4e0b\u521d\u59cb\u5316\u4ee3\u7801\u3002 <pre><code>inspector = std::unique_ptr&lt;Inspector&gt;(new Inspector(v8Platform, context, port));\ninspector-&gt;startAgent();\n</code></pre> \u9996\u5148\u65b0\u5efa\u4e00\u4e2aInspector\u3002\u7136\u540e\u542f\u52a8\u5b83\u3002\u63a5\u4e0b\u6765\u770b\u770bInspector\u91cc\u7684\u903b\u8f91\u3002 <pre><code>Inspector::Inspector(\n        const std::unique_ptr&lt;v8::Platform&gt; &amp;platform,\n        const v8::Local&lt;v8::Context&gt; &amp;context,\n        const int webSocketPort) {\n\n    context_ = context;\n    // \u65b0\u5efa\u4e00\u4e2awebsocket server\u7528\u4e8e\u548c\u5ba2\u6237\u7aef\u901a\u4fe1\n    websocket_server_ = std::unique_ptr&lt;WebSocketServer&gt;(\n            new WebSocketServer(\n                    webSocketPort,\n                    // \u6536\u5230\u5ba2\u6237\u7684\u7684\u6d88\u606f\u540e\u6267\u884conMessage\u56de\u8c03\n                    std::bind(&amp;Inspector::onMessage, this, std::placeholders::_1)\n                )\n            );\n    // \u65b0\u5efa\u4e00\u4e2ainspector client\u548cV8\u901a\u4fe1\n    inspector_client_ = std::unique_ptr&lt;V8InspectorClientImpl&gt;(\n            new V8InspectorClientImpl(\n                    platform,\n                    context_,\n                    // \u6536\u5230V8\u7684\u6d88\u606f\u540e\u8c03\u7528sendMessage\u56de\u590d\u7ed9\u5ba2\u6237\u7684\n                    std::bind(&amp;Inspector::sendMessage, this, std::placeholders::_1),\n                    std::bind(&amp;Inspector::waitForFrontendMessage, this)\n                )\n            );\n}\n</code></pre> \u4ee3\u7801\u770b\u8d77\u6765\u5f88\u590d\u6742\uff0c\u4e0d\u8fc7\u6211\u4eec\u4e0d\u9700\u8981\u6df1\u7a76\u3002\u4e3b\u8981\u662f\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u4e2a\u662f\u65b0\u5efa\u4e00\u4e2awebsocket\u670d\u52a1\u5668\uff0c\u4e00\u4e2a\u662f\u65b0\u5efa\u4e00\u4e2ainspector\u5ba2\u6237\u7aef\uff08\u7528\u4e8e\u548cV8 Inspector\u901a\u4fe1\uff09\uff0c\u6574\u4f53\u67b6\u6784\u5982\u4e0b\u3002  \u63a5\u4e0b\u6765\u5206\u522b\u770b\u4e00\u4e0bwebsocket\u670d\u52a1\u5668\u548cinspector\u5ba2\u6237\u7aef\u7684\u5b9e\u73b0\u3002\u9996\u5148\u770b\u4e00\u4e0bwebsocket\u670d\u52a1\u5668\u7684\u6784\u9020\u51fd\u6570\u3002 <pre><code>WebSocketServer::WebSocketServer(int port, std::function&lt;void(std::string)&gt; onMessage)\n{\n    port_ = port;\n    onMessage_ = std::move(onMessage);\n}\n</code></pre> WebSocketServer\u6784\u9020\u51fd\u6570\u7684\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u53ea\u662f\u521d\u59cb\u5316\u4e00\u4e9b\u5b57\u6bb5\u3002\u63a5\u7740\u770binspector\u5ba2\u6237\u7aef\u7684\u5b9e\u73b0\u3002 <pre><code>V8InspectorClientImpl:: V8InspectorClientImpl(const std::unique_ptr&lt;v8::Platform&gt; &amp;platform, const v8::Local&lt;v8::Context&gt; &amp;context, const std::function&lt;void(std::string)&gt; &amp;onResponse, const std::function&lt;int(void)&gt; &amp;onWaitFrontendMessageOnPause) {\n\n    platform_ = platform.get();\n    context_ = context;\n    onWaitFrontendMessageOnPause_ = onWaitFrontendMessageOnPause;\n    isolate_ = context_-&gt;GetIsolate();\n    // \u521b\u5efa\u4e00\u4e2achannel\u548cinspector\u901a\u4fe1\uff0c\u6536\u5230V8\u6d88\u606f\u65f6\u4f1a\u6267\u884conResponse\n    channel_.reset(new V8InspectorChannelImp(isolate_, onResponse));\n    // \u65b0\u5efa\u4e00\u4e2aV8\u63d0\u4f9b\u7684inspector\n    inspector_ = v8_inspector::V8Inspector::create(isolate_, this);\n    // \u521b\u5efa\u4e00\u4e2a\u548cinspector\u901a\u4fe1\u7684session\u3002\n    session_ = inspector_-&gt;connect(kContextGroupId, channel_.get(), v8_inspector::StringView());\n    context_-&gt;SetAlignedPointerInEmbedderData(1, this);\n    v8_inspector::StringView contextName = convertToStringView(\"inspector\");\n    inspector_-&gt;contextCreated(v8_inspector::V8ContextInfo(context, kContextGroupId, contextName));\n    terminated_ = true;\n    run_nested_loop_ = false;\n}\n</code></pre> \u4e0a\u9762\u4ee3\u7801\u5f88\u591a\uff0c\u4e3b\u8981\u662f\u6839\u636eV8\u63d0\u4f9b\u7684API\u6765\u5c31\u884c\u3002\u8fd9\u91cc\u4e3b\u8981\u6709\u4e09\u4e2a\u6982\u5ff5 1 V8Inspector\u662fV8\u63d0\u4f9b\u7684\u7c7b\u3002 2 session\u8868\u793a\u548cV8 inspector\u901a\u4fe1\u7684\u4f1a\u8bdd\u3002 3 channel\u7528\u4e8e\u548cV8 inspector\u901a\u4fe1\uff0c\u4eceAPI\u6765\u770b\uff0cchannel\u53ea\u80fd\u4eceV8\u83b7\u53d6\u6570\u636e\uff0c\u5199\u5165\u6570\u636e\u662f\u53e6\u5916\u7684API\u3002 \u8fd9\u65f6\u5019\u7684\u67b6\u6784\u5982\u4e0b  \u81f3\u6b64\uff0cwebsocket\u670d\u52a1\u5668\u548cinspector\u5ba2\u6237\u7aef\u5c31\u5206\u6790\u5b8c\u6bd5\u4e86\uff0c\u56de\u5230\u6700\u5f00\u59cb\u7684\u4ee3\u7801\uff0c\u521d\u59cb\u5316\u5b8c\u6bd5\u540e\u4f1a\u6267\u884cstartAgent\u3002 <pre><code>void Inspector::startAgent() {\n    websocket_server_-&gt;run();\n}\n// \u542f\u52a8websocket\u670d\u52a1\u5668\nvoid WebSocketServer::run() {\n    auto const address = net::ip::make_address(\"127.0.0.1\");\n    net::io_context ioc{1};\n    tcp::acceptor acceptor{ioc, {address, static_cast&lt;unsigned short&gt;(port_)}};\n    tcp::socket socket{ioc};\n    acceptor.accept(socket);\n    ws_ = std::unique_ptr&lt;websocket::stream&lt;tcp::socket&gt;&gt;(new websocket::stream&lt;tcp::socket&gt;(std::move(socket)));\n    startListening();\n}\n// \u7b49\u5f85\u8fde\u63a5\nvoid WebSocketServer::startListening()\n{\n   ws_-&gt;accept();\n   while (true) {\n       waitFrontendMessage();\n   }\n}\n// \u8bfb\u53d6\u8fde\u63a5\u4e2d\u7684\u6d88\u606f\nvoid WebSocketServer::waitFrontendMessage()\n{\n    beast::flat_buffer buffer;\n    ws_-&gt;read(buffer);\n    std::string message = boost::beast::buffers_to_string(buffer.data());\n    onMessage_(std::move(message));\n}\n</code></pre> startAgent\u7684\u903b\u8f91\u5c31\u662f\u542f\u52a8websocket\u670d\u52a1\u5668\u3002\u542f\u52a8\u5b8c\u6bd5\u540e\u5c31\u7b49\u5f85\u5ba2\u6237\u7684\u8fde\u63a5\u3002\u8fde\u63a5\u6210\u529f\u540e\u6267\u884conMessage_\u3002\u6211\u4eec\u770b\u4e00\u4e0bonMessage\u7684\u5b9e\u73b0\u3002 <pre><code>void Inspector::onMessage(const std::string&amp; message) {\n    std::cout &lt;&lt; \"CDT message: \" &lt;&lt; message &lt;&lt; std::endl;\n    // StringView\u662fV8\u8981\u6c42\u7684\u683c\u5f0f\n    v8_inspector::StringView protocolMessage = convertToStringView(message);\n    // \u901a\u77e5V8 Inspector\n    inspector_client_-&gt;dispatchProtocolMessage(protocolMessage);\n}\n</code></pre> onMessage\u901a\u8fc7Inspector\u5ba2\u6237\u7aef\u628a\u6d88\u606f\u4ea4\u7ed9V8 Inspector\u5904\u7406\u3002V8 Inspector\u5904\u7406\u5b8c\u540e\uff0c\u901a\u8fc7channel\u901a\u77e5Inspector\u5ba2\u6237\u7aef\uff0c\u5bf9\u5e94\u7684\u51fd\u6570\u662fsendResponse\u3002V8InspectorChannelImp\u662f\u7ee7\u627fV8\u63d0\u4f9b\u7684Channel\uff0csendResponse\u662f\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\uff0c\u7531V8InspectorChannelImp\u5b9e\u73b0\u3002 <pre><code>void V8InspectorChannelImp::sendResponse(int callId, std::unique_ptr&lt;v8_inspector::StringBuffer&gt; message) {\n    const std::string response = convertToString(isolate_, message-&gt;string());\n    onResponse_(response);\n}\n</code></pre> onResponse_\u662f\u5728Chnnel\u521d\u59cb\u5316\u65f6\u8bbe\u7f6e\u7684\uff0c\u5bf9\u5e94\u51fd\u6570\u662finspector\u5ba2\u6237\u7aef\u7684sendMessage\u3002 <pre><code>void Inspector::sendMessage(const std::string&amp; message) {\n    websocket_server_-&gt;sendMessage(message);\n}\n</code></pre> sendMessage\u901a\u8fc7websocket\u670d\u52a1\u5668\u628aV8 Inspector\u8fd4\u56de\u7684\u6d88\u606f\u8fd4\u56de\u7ed9\u5ba2\u6237\u7684\u3002\u81f3\u6b64\uff0c\u6574\u4e2a\u901a\u4fe1\u6d41\u7a0b\u5c31\u5b8c\u6210\u4e86\u3002</p>"},{"location":"chapter24-Inspector/#32-nodejsv14","title":"3.2 Node.js\u7684\u5b9e\u73b0(v14)","text":"<p>Node.js\u7684\u5b9e\u73b0\u975e\u5e38\u590d\u6742\u5e76\u4e14\u5f88\u7ed5\uff0c\u4e5f\u65e0\u6cd5\u901a\u4fd7\u6613\u61c2\u5730\u4ecb\u7ecd\u548c\u5206\u6790\uff0c\u53ea\u80fd\u6309\u7167\u6211\u81ea\u5df1\u7684\u601d\u8def\u5927\u81f4\u8bb2\u89e3\u4e00\u4e0b\u6d41\u7a0b\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u9605\u8bfb\u6e90\u7801\u3002\u5f53\u6211\u4eec\u4ee5\u4ee5\u4e0b\u65b9\u5f0f\u6267\u884c\u6211\u4eec\u7684\u5e94\u7528\u65f6 <pre><code>node --inspect app.js\n</code></pre></p>"},{"location":"chapter24-Inspector/#321","title":"3.2.1 \u521d\u59cb\u5316","text":"<p>Node.js\u5728\u542f\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c31\u4f1a\u521d\u59cb\u5316Inspector\u76f8\u5173\u7684\u903b\u8f91\u3002 <pre><code>inspector_agent_ = std::make_unique&lt;inspector::Agent&gt;(this);\n</code></pre> Agent\u662f\u8d1f\u8d23\u548cV8 Inspector\u901a\u4fe1\u7684\u5bf9\u8c61\u3002\u521b\u5efa\u5b8c\u540e\u63a5\u7740\u6267\u884cenv-&gt;InitializeInspector({})\u542f\u52a8Agent\u3002 <pre><code>inspector_agent_-&gt;Start(...);\n</code></pre> Start\u7ee7\u7eed\u6267\u884cAgent::StartIoThread\u3002 <pre><code>bool Agent::StartIoThread() {\n  io_ = InspectorIo::Start(client_-&gt;getThreadHandle(), ...);\n  return true;\n}\n</code></pre> StartIoThread\u4e2d\u7684client_-&gt;getThreadHandle()\u662f\u91cd\u8981\u7684\u903b\u8f91\uff0c\u6211\u4eec\u5148\u6765\u5206\u6790\u8be5\u51fd\u6570\u3002 <pre><code>  std::shared_ptr&lt;MainThreadHandle&gt; getThreadHandle() {\n    if (!interface_) {\n      interface_ = std::make_shared&lt;MainThreadInterface&gt;(env_-&gt;inspector_agent(), ...);\n    }\n    return interface_-&gt;GetHandle();\n  }\n</code></pre> getThreadHandle\u9996\u5148\u521b\u5efa\u6765\u4e00\u4e2aMainThreadInterface\u5bf9\u8c61\uff0c\u63a5\u7740\u53c8\u8c03\u7528\u4e86\u4ed6\u7684GetHandle\u65b9\u6cd5\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u8be5\u65b9\u6cd5\u7684\u903b\u8f91\u3002 <pre><code>std::shared_ptr&lt;MainThreadHandle&gt; MainThreadInterface::GetHandle() {\n  if (handle_ == nullptr)\n    handle_ = std::make_shared&lt;MainThreadHandle&gt;(this);\n  return handle_;\n}\n</code></pre> GetHandlei\u4e86\u521b\u5efa\u4e86\u4e00\u4e2aMainThreadHandle\u5bf9\u8c61\uff0c\u6700\u7ec8\u7ed3\u6784\u5982\u4e0b\u6240\u793a\u3002  \u5206\u6790\u5b8c\u540e\u6211\u4eec\u7ee7\u7eed\u770bAgent::StartIoThread\u4e2dInspectorIo::Start\u7684\u903b\u8f91\u3002</p> <p><pre><code>std::unique_ptr&lt;InspectorIo&gt; InspectorIo::Start(std::shared_ptr&lt;MainThreadHandle&gt; main_thread, ...) {\n  auto io = std::unique_ptr&lt;InspectorIo&gt;(new InspectorIo(main_thread, ...));\n  return io;\n}\n</code></pre> InspectorIo::Star\u91cc\u65b0\u5efa\u4e86\u4e00\u4e2aInspectorIo\u5bf9\u8c61\uff0c\u6211\u4eec\u770b\u770bInspectorIo\u6784\u9020\u51fd\u6570\u7684\u903b\u8f91\u3002</p> <p><pre><code>InspectorIo::InspectorIo(std::shared_ptr&lt;MainThreadHandle&gt; main_thread, ...)\n    : \n    // \u521d\u59cb\u5316main_thread_\n    main_thread_(main_thread)) {\n  // \u65b0\u5efa\u4e00\u4e2a\u5b50\u7ebf\u7a0b\uff0c\u5b50\u7ebf\u7a0b\u4e2d\u6267\u884cInspectorIo::ThreadMain\n  uv_thread_create(&amp;thread_, InspectorIo::ThreadMain, this);\n}\n</code></pre> \u8fd9\u65f6\u5019\u7ed3\u6784\u5982\u4e0b\u3002  Inspector\u5728\u5b50\u7ebf\u7a0b\u91cc\u542f\u52a8\u7684\u539f\u56e0\u4e3b\u8981\u6709\u4e24\u4e2a\u3002 1 \u5982\u679c\u5728\u4e3b\u7ebf\u7a0b\u91cc\u8fd0\u884c\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u65ad\u70b9\u8c03\u8bd5\u7684\u65f6\u5019\uff0cNode.js\u4e3b\u7ebf\u7a0b\u5c31\u4f1a\u88ab\u505c\u4f4f\uff0c\u4e5f\u5c31\u65e0\u6cd5\u5904\u7406\u5ba2\u6237\u7aef\u53d1\u8fc7\u6765\u7684\u8c03\u8bd5\u6307\u4ee4\u3002 2 \u5982\u679c\u4e3b\u7ebf\u7a0b\u9677\u5165\u6b7b\u5faa\u73af\uff0c\u6211\u4eec\u5c31\u65e0\u6cd5\u5b9e\u65f6\u6293\u53d6\u8fdb\u7a0b\u7684profile\u6570\u636e\u6765\u5206\u6790\u539f\u56e0\u3002 \u63a5\u7740\u7ee7\u7eed\u770b\u4e00\u4e0b\u5b50\u7ebf\u7a0b\u91cc\u6267\u884cInspectorIo::ThreadMain\u7684\u903b\u8f91\u3002</p> <p><pre><code>void InspectorIo::ThreadMain(void* io) {\n  static_cast&lt;InspectorIo*&gt;(io)-&gt;ThreadMain();\n}\n\nvoid InspectorIo::ThreadMain() {\n  uv_loop_t loop;\n  loop.data = nullptr;\n  // \u5728\u5b50\u7ebf\u7a0b\u5f00\u542f\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\n  int err = uv_loop_init(&amp;loop);\n  std::shared_ptr&lt;RequestQueueData&gt; queue(new RequestQueueData(&amp;loop), ...);\n  // \u65b0\u5efa\u4e00\u4e2adelegate\uff0c\u7528\u4e8e\u5904\u7406\u8bf7\u6c42\n  std::unique_ptr&lt;InspectorIoDelegate&gt; delegate(\n    new InspectorIoDelegate(queue, main_thread_, ...)\n  );\n  InspectorSocketServer server(std::move(delegate), ...);\n  server.Start()\n  uv_run(&amp;loop, UV_RUN_DEFAULT);\n}\n</code></pre> ThreadMain\u91cc\u4e3b\u8981\u4e09\u4e2a\u903b\u8f91 1 \u521b\u5efa\u4e00\u4e2adelegate\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u662f\u6838\u5fc3\u7684\u5bf9\u8c61\uff0c\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u6709\u4ec0\u4e48\u4f5c\u7528\u3002 2 \u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5668\u5e76\u542f\u52a8\u3002 3 \u5f00\u542f\u4e8b\u4ef6\u5faa\u73af\u3002 \u63a5\u4e0b\u6765\u770b\u4e00\u4e0b\u670d\u52a1\u5668\u7684\u903b\u8f91\uff0c\u9996\u5148\u770b\u4e00\u4e0b\u521b\u5efa\u670d\u52a1\u5668\u7684\u903b\u8f91\u3002 <pre><code>InspectorSocketServer::InspectorSocketServer(std::unique_ptr&lt;SocketServerDelegate&gt; delegate, ...)\n    : \n      // \u4fdd\u5b58delegate\n      delegate_(std::move(delegate)),\n      // \u521d\u59cb\u5316sessionId\n      next_session_id_(0) {\n  // \u8bbe\u7f6edelegate\u7684server\u4e3a\u5f53\u524d\u670d\u52a1\u5668\n  delegate_-&gt;AssignServer(this);\n}\n</code></pre> \u6267\u884c\u5b8c\u540e\u5f62\u6210\u4ee5\u4e0b\u7ed3\u6784\u3002  \u63a5\u7740\u6211\u4eec\u770b\u542f\u52a8\u670d\u52a1\u5668\u7684\u903b\u8f91\u3002 <pre><code>bool InspectorSocketServer::Start() {\n  // DNS\u89e3\u6790,\u6bd4\u5982\u8f93\u5165\u7684\u662flocalhost\n  struct addrinfo hints;\n  memset(&amp;hints, 0, sizeof(hints));\n  hints.ai_flags = AI_NUMERICSERV;\n  hints.ai_socktype = SOCK_STREAM;\n  uv_getaddrinfo_t req;\n  const std::string port_string = std::to_string(port_);\n  uv_getaddrinfo(loop_, &amp;req, nullptr, host_.c_str(),\n                           port_string.c_str(), &amp;hints);\n  // \u76d1\u542c\u89e3\u6790\u5230\u7684ip\u5217\u8868                 \n  for (addrinfo* address = req.addrinfo; \n       address != nullptr;\n       address = address-&gt;ai_next) {\n\n    auto server_socket = ServerSocketPtr(new ServerSocket(this));\n    err = server_socket-&gt;Listen(address-&gt;ai_addr, loop_);\n    if (err == 0)\n      server_sockets_.push_back(std::move(server_socket));\n\n  }\n\n  return true;\n}\n</code></pre> \u9996\u5148\u6839\u636e\u53c2\u6570\u505a\u4e00\u4e2aDNS\u89e3\u6790\uff0c\u7136\u540e\u6839\u636e\u62ff\u5230\u7684ip\u5217\u8868\uff08\u901a\u5e38\u662f\u4e00\u4e2a\uff09\uff0c\u521b\u5efa\u5bf9\u5e94\u4e2a\u6570\u7684ServerSocket\u5bf9\u8c61\uff0c\u5e76\u6267\u884c\u4ed6\u7684Listen\u65b9\u6cd5\u3002ServerSocket\u8868\u793a\u4e00\u4e2a\u76d1\u542csocket\u3002\u770b\u4e00\u4e0bServerSocket\u7684\u6784\u9020\u51fd\u6570\u3002 <pre><code>ServerSocket(InspectorSocketServer* server)\n            : tcp_socket_(uv_tcp_t()), server_(server) {}\n</code></pre> \u6267\u884c\u5b8c\u540e\u7ed3\u6784\u5982\u4e0b\u3002  \u63a5\u7740\u770b\u4e00\u4e0bServerSocket\u7684Listen\u65b9\u6cd5\u3002</p> <p><pre><code>int ServerSocket::Listen(sockaddr* addr, uv_loop_t* loop) {\n  uv_tcp_t* server = &amp;tcp_socket_;\n  uv_tcp_init(loop, server)\n  uv_tcp_bind(server, addr, 0);\n  uv_listen(reinterpret_cast&lt;uv_stream_t*&gt;(server), \n                    511,\n                    ServerSocket::SocketConnectedCallback);\n}\n</code></pre> Listen\u8c03\u7528Libuv\u7684\u63a5\u53e3\u5b8c\u6210\u670d\u52a1\u5668\u7684\u542f\u52a8\u3002\u81f3\u6b64\uff0cInspector\u63d0\u4f9b\u7684Weboscket\u670d\u52a1\u5668\u542f\u52a8\u4e86\u3002</p>"},{"location":"chapter24-Inspector/#322","title":"3.2.2 \u5904\u7406\u8fde\u63a5","text":"<p>\u4ece\u521a\u624d\u5206\u6790\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u6709\u8fde\u63a5\u5230\u6765\u65f6\u6267\u884c\u56de\u8c03ServerSocket::SocketConnectedCallback\u3002 <pre><code>void ServerSocket::SocketConnectedCallback(uv_stream_t* tcp_socket,\n                                           int status) {\n  if (status == 0) {\n    // \u6839\u636eLibuv handle\u627e\u5230\u5bf9\u5e94\u7684ServerSocket\u5bf9\u8c61\n    ServerSocket* server_socket = ServerSocket::FromTcpSocket(tcp_socket);\n    // Socket\u5bf9\u8c61\u7684server_\u5b57\u6bb5\u4fdd\u5b58\u4e86\u6240\u5728\u7684InspectorSocketServer\n    server_socket-&gt;server_-&gt;Accept(server_socket-&gt;port_, tcp_socket);\n  }\n}\n</code></pre> \u63a5\u7740\u770bInspectorSocketServer\u7684Accept\u662f\u5982\u4f55\u5904\u7406\u8fde\u63a5\u7684\u3002 <pre><code>void InspectorSocketServer::Accept(int server_port,\n                                   uv_stream_t* server_socket) {\n\n  std::unique_ptr&lt;SocketSession&gt; session(\n      new SocketSession(this, next_session_id_++, server_port)\n  );\n\n  InspectorSocket::DelegatePointer delegate =\n      InspectorSocket::DelegatePointer(\n          new SocketSession::Delegate(this, session-&gt;id())\n      );\n\n  InspectorSocket::Pointer inspector =\n      InspectorSocket::Accept(server_socket, std::move(delegate));\n\n  if (inspector) {\n    session-&gt;Own(std::move(inspector));\n    connected_sessions_[session-&gt;id()].second = std::move(session);\n  }\n}\n</code></pre> Accept\u7684\u9996\u5148\u521b\u5efa\u91cc\u4e00\u4e2aSocketSession\u548cSocketSession::Delegate\u5bf9\u8c61\u3002\u7136\u540e\u8c03\u7528InspectorSocket::Accept\uff0c\u4ece\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u5230InspectorSocket::Accept\u4f1a\u8fd4\u56de\u4e00\u4e2aInspectorSocket\u5bf9\u8c61\u3002InspectorSocket\u662f\u5bf9\u901a\u4fe1socket\u7684\u5c01\u88c5\uff08\u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u7684socket\uff0c\u533a\u522b\u4e8e\u670d\u52a1\u5668\u7684\u76d1\u542csocket\uff09\u3002\u7136\u540e\u8bb0\u5f55session\u5bf9\u8c61\u5bf9\u5e94\u7684InspectorSocket\u5bf9\u8c61\uff0c\u540c\u65f6\u8bb0\u5f55sessionId\u548csession\u7684\u6620\u5c04\u5173\u7cfb\u3002\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002  \u63a5\u7740\u770b\u4e00\u4e0bInspectorSocket::Accept\u8fd4\u56deInspectorSocket\u7684\u903b\u8f91\u3002 <pre><code>InspectorSocket::Pointer InspectorSocket::Accept(uv_stream_t* server,\n                                                 DelegatePointer delegate) {\n  auto tcp = TcpHolder::Accept(server, std::move(delegate));\n  InspectorSocket* inspector = new InspectorSocket();\n  inspector-&gt;SwitchProtocol(new HttpHandler(inspector, std::move(tcp)));\n  return InspectorSocket::Pointer(inspector);\n}\n</code></pre> InspectorSocket::Accept\u7684\u4ee3\u7801\u4e0d\u591a\uff0c\u4f46\u662f\u903b\u8f91\u8fd8\u662f\u633a\u591a\u7684\u3002 1 InspectorSocket::Accept\u518d\u6b21\u8c03\u7528TcpHolder::Accept\u83b7\u5f97\u4e00\u4e2aTcpHolder\u5bf9\u8c61\u3002 <pre><code>TcpHolder::Pointer TcpHolder::Accept(\n    uv_stream_t* server,\n    InspectorSocket::DelegatePointer delegate) {\n  // \u65b0\u5efa\u4e00\u4e2aTcpHolder\u5bf9\u8c61\uff0cTcpHolder\u662f\u5bf9uv_tcp_t\u548cdelegate\u7684\u5c01\u88c5\n  TcpHolder* result = new TcpHolder(std::move(delegate));\n  // \u62ff\u5230TcpHolder\u5bf9\u8c61\u7684uv_tcp_t\u7ed3\u6784\u4f53\n  uv_stream_t* tcp = reinterpret_cast&lt;uv_stream_t*&gt;(&amp;result-&gt;tcp_);\n  // \u521d\u59cb\u5316\n  int err = uv_tcp_init(server-&gt;loop, &amp;result-&gt;tcp_);\n  // \u6458\u53d6\u4e00\u4e2aTCP\u8fde\u63a5\u5bf9\u5e94\u7684fd\u4fdd\u5b58\u5230TcpHolder\u7684uv_tcp_t\u7ed3\u6784\u4f53\u4e2d\uff08\u5373\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684tcp\u5b57\u6bb5\uff09\n  uv_accept(server, tcp);\n  // \u6ce8\u518c\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6\uff0c\u6709\u6570\u636e\u65f6\u6267\u884cOnDataReceivedCb\u56de\u8c03\n  uv_read_start(tcp, allocate_buffer, OnDataReceivedCb);\n  return TcpHolder::Pointer(result);\n}\n</code></pre> 2  \u65b0\u5efa\u4e00\u4e2aHttpHandler\u5bf9\u8c61\u3002 <pre><code>explicit HttpHandler(InspectorSocket* inspector, TcpHolder::Pointer tcp)\n                     : ProtocolHandler(inspector, std::move(tcp)){\n\n  llhttp_init(&amp;parser_, HTTP_REQUEST, &amp;parser_settings);\n  llhttp_settings_init(&amp;parser_settings);\n  parser_settings.on_header_field = OnHeaderField;\n  parser_settings.on_header_value = OnHeaderValue;\n  parser_settings.on_message_complete = OnMessageComplete;\n  parser_settings.on_url = OnPath;\n}\nProtocolHandler::ProtocolHandler(InspectorSocket* inspector,\n                                 TcpHolder::Pointer tcp)\n                                 : inspector_(inspector), tcp_(std::move(tcp)) {\n  // \u8bbe\u7f6eTCP\u6570\u636e\u7684handler\uff0cTCP\u662f\u53ea\u8d1f\u8d23\u4f20\u8f93\uff0c\u6570\u636e\u7684\u89e3\u6790\u4ea4\u7ed9handler\u5904\u7406                               \n  tcp_-&gt;SetHandler(this);\n}\n</code></pre> HttpHandler\u662f\u5bf9uv_tcp_t\u7684\u5c01\u88c5\uff0c\u4e3b\u8981\u901a\u8fc7HTTP\u89e3\u6790\u5668llhttp\u5bf9HTTP\u534f\u8bae\u8fdb\u884c\u89e3\u6790\u3002 3 \u8c03\u7528inspector-&gt;SwitchProtocol()\u5207\u6362\u5f53\u524d\u534f\u8bae\u4e3aHTTP\uff0c\u5efa\u7acbTCP\u8fde\u63a5\u540e\uff0c\u9996\u5148\u8981\u7ecf\u8fc7\u4e00\u4e2aHTTP\u8bf7\u6c42\u4eceHTTP\u534f\u8bae\u5347\u7ea7\u5230WebSocket\u534f\u8bae\uff0c\u5347\u7ea7\u6210\u529f\u540e\u5c31\u4f7f\u7528Websocket\u534f\u8bae\u8fdb\u884c\u901a\u4fe1\u3002 \u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u65f6\u5019\u7684\u7ed3\u6784\u56fe\u3002  \u81f3\u6b64\uff0c\u5c31\u5b8c\u6210\u4e86\u8fde\u63a5\u5904\u7406\u7684\u5206\u6790\u3002</p>"},{"location":"chapter24-Inspector/#323","title":"3.2.3 \u534f\u8bae\u5347\u7ea7","text":"<p>\u5b8c\u6210\u4e86TCP\u8fde\u63a5\u7684\u5904\u7406\u540e\uff0c\u63a5\u4e0b\u6765\u8981\u5b8c\u6210\u534f\u8bae\u5347\u7ea7\uff0c\u56e0\u4e3aInspector\u662f\u901a\u8fc7WebSocket\u534f\u8bae\u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u7684\uff0c\u6240\u4ee5\u9700\u8981\u901a\u8fc7\u4e00\u4e2aHTTP\u8bf7\u6c42\u6765\u5b8c\u6210HTTP\u5230WebSocekt\u534f\u8bae\u7684\u5347\u7ea7\u3002\u4ece\u521a\u624d\u7684\u5206\u6790\u4e2d\u770b\u5f53\u6709\u6570\u636e\u5230\u6765\u65f6\u4f1a\u6267\u884cOnDataReceivedCb\u56de\u8c03\u3002 <pre><code>void TcpHolder::OnDataReceivedCb(uv_stream_t* tcp, ssize_t nread,\n                                 const uv_buf_t* buf) {\n  TcpHolder* holder = From(tcp);\n  holder-&gt;ReclaimUvBuf(buf, nread);\n  // \u8c03\u7528handler\u7684onData\uff0c\u76ee\u524dhandler\u662fHTTP\u534f\u8bae\n  holder-&gt;handler_-&gt;OnData(&amp;holder-&gt;buffer);\n}\n</code></pre> TCP\u5c42\u6536\u5230\u6570\u636e\u540e\u4ea4\u7ed9\u5e94\u7528\u5c42\u89e3\u6790\uff0c\u76f4\u63a5\u8c03\u7528\u4e0a\u5c42\u7684OnData\u56de\u8c03\u3002</p> <p><pre><code>void OnData(std::vector&lt;char&gt;* data) override {\n    // \u89e3\u6790HTTP\u534f\u8bae\n    llhttp_execute(&amp;parser_, data-&gt;data(), data-&gt;size());\n    // \u89e3\u6790\u5b8c\u5e76\u4e14\u662f\u5347\u7ea7\u534f\u8bae\u7684\u8bf7\u6c42\u5219\u8c03\u7528delegate\u7684\u56de\u8c03OnSocketUpgrade\n    delegate()-&gt;OnSocketUpgrade(event.host, event.path, event.ws_key);\n}\n</code></pre> OnData\u53ef\u80fd\u4f1a\u88ab\u591a\u6b21\u56de\u8c03\uff0c\u5e76\u901a\u8fc7llhttp_execute\u89e3\u6790\u6536\u5230\u7684HTTP\u62a5\u6587\uff0c\u5f53\u53d1\u73b0\u662f\u4e00\u4e2a\u534f\u8bae\u5347\u7ea7\u7684\u8bf7\u6c42\u540e\uff0c\u5c31\u8c03\u7528OnSocketUpgrade\u56de\u8c03\u3002delegate\u662fTCP\u5c42\u4fdd\u5b58\u7684SocketSession::Delegate\u5bf9\u8c61\u3002\u6765\u770b\u4e00\u4e0b\u8be5\u5bf9\u8c61\u7684OnSocketUpgrade\u65b9\u6cd5\u3002</p> <p><pre><code>void SocketSession::Delegate::OnSocketUpgrade(const std::string&amp; host,\n                                              const std::string&amp; path,\n                                              const std::string&amp; ws_key) {\n  std::string id = path.empty() ? path : path.substr(1);\n  server_-&gt;SessionStarted(session_id_, id, ws_key);\n}\n</code></pre> OnSocketUpgrade\u53c8\u8c03\u7528\u6765server_\uff08InspectorSocketServer\u5bf9\u8c61\uff09\u7684SessionStarted\u3002 <pre><code>void InspectorSocketServer::SessionStarted(int session_id,\n                                           const std::string&amp; id,\n                                           const std::string&amp; ws_key) {\n  // \u627e\u5230\u5bf9\u5e94\u7684session\u5bf9\u8c61                                           \n  SocketSession* session = Session(session_id);\n  connected_sessions_[session_id].first = id;\n  session-&gt;Accept(ws_key);\n  delegate_-&gt;StartSession(session_id, id);\n}\n</code></pre> \u9996\u5148\u901a\u8fc7session_id\u627e\u5230\u5efa\u7acbTCP\u8fde\u63a5\u65f6\u5206\u914d\u7684SocketSession\u5bf9\u8c61\u3002 1 \u6267\u884csession-&gt;Accept(ws_key);\u56de\u590d\u5ba2\u6237\u7aef\u540c\u610f\u534f\u8bae\u5347\u7ea7\u3002 <pre><code>void Accept(const std::string&amp; ws_key) {\n  ws_socket_-&gt;AcceptUpgrade(ws_key);\n}\n</code></pre> \u4ece\u7ed3\u6784\u56fe\u6211\u4eec\u53ef\u4ee5\u770b\u5230ws_socket_\u662f\u4e00\u4e2aInspectorSocket\u5bf9\u8c61\u3002 <pre><code>void AcceptUpgrade(const std::string&amp; accept_key) override {\n    char accept_string[ACCEPT_KEY_LENGTH];\n    generate_accept_string(accept_key, &amp;accept_string);\n    const char accept_ws_prefix[] = \"HTTP/1.1 101 Switching Protocols\\r\\n\"\n                                    \"Upgrade: websocket\\r\\n\"\n                                    \"Connection: Upgrade\\r\\n\"\n                                    \"Sec-WebSocket-Accept: \";\n    const char accept_ws_suffix[] = \"\\r\\n\\r\\n\";\n    std::vector&lt;char&gt; reply(accept_ws_prefix,\n                            accept_ws_prefix + sizeof(accept_ws_prefix) - 1);\n    reply.insert(reply.end(), accept_string,\n                 accept_string + sizeof(accept_string));\n    reply.insert(reply.end(), accept_ws_suffix,\n                 accept_ws_suffix + sizeof(accept_ws_suffix) - 1);\n    // \u56de\u590d101\u7ed9\u5ba2\u6237\u7aef             \n    WriteRaw(reply, WriteRequest::Cleanup);\n    // \u5207\u6362handler\u4e3aWebSocket handler\n    inspector_-&gt;SwitchProtocol(new WsHandler(inspector_, std::move(tcp_)));\n}\n</code></pre> AcceptUpgradeh\u9996\u5148\u56de\u590d\u5ba2\u6237\u7aef101\u8868\u793a\u540c\u610f\u5347\u7ea7\u9053WebSocket\u534f\u8bae\uff0c\u7136\u540e\u5207\u6362\u6570\u636e\u5904\u7406\u5668\u4e3aWsHandler\uff0c\u5373\u540e\u7eed\u7684\u6570\u636e\u6309\u7167WebSocket\u534f\u8bae\u5904\u7406\u3002 2 \u6267\u884cdelegate_-&gt;StartSession(session_id, id)\u5efa\u7acb\u548cV8 Inspector\u7684\u4f1a\u8bdd\u3002delegate_\u662fInspectorIoDelegate\u5bf9\u8c61\u3002 <pre><code>void InspectorIoDelegate::StartSession(int session_id,\n                                       const std::string&amp; target_id) {\n  auto session = main_thread_-&gt;Connect(\n      std::unique_ptr&lt;InspectorSessionDelegate&gt;(\n          new IoSessionDelegate(request_queue_-&gt;handle(), session_id)\n      ), \n      true);\n  if (session) {\n    sessions_[session_id] = std::move(session);\n    fprintf(stderr, \"Debugger attached.\\n\");\n  }\n}\n</code></pre> \u9996\u5148\u901a\u8fc7main_thread_-&gt;Connect\u62ff\u5230\u4e00\u4e2asession\uff0c\u5e76\u5728InspectorIoDelegate\u4e2d\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u3002\u7ed3\u6784\u56fe\u5982\u4e0b\u3002  \u63a5\u4e0b\u6765\u770b\u4e00\u4e0bmain_thread_-&gt;Connect\u7684\u903b\u8f91\uff08main_thread_\u662fMainThreadHandle\u5bf9\u8c61\uff09\u3002 <pre><code>std::unique_ptr&lt;InspectorSession&gt; MainThreadHandle::Connect(\n    std::unique_ptr&lt;InspectorSessionDelegate&gt; delegate,\n    bool prevent_shutdown) {\n\n  return std::unique_ptr&lt;InspectorSession&gt;(\n      new CrossThreadInspectorSession(++next_session_id_,\n                                      shared_from_this(),\n                                      std::move(delegate),\n                                      prevent_shutdown));\n}\n</code></pre> Connect\u51fd\u6570\u65b0\u5efa\u4e86\u4e00\u4e2aCrossThreadInspectorSession\u5bf9\u8c61\u3002 <pre><code> CrossThreadInspectorSession(\n      int id,\n      std::shared_ptr&lt;MainThreadHandle&gt; thread,\n      std::unique_ptr&lt;InspectorSessionDelegate&gt; delegate,\n      bool prevent_shutdown)\n      // \u521b\u5efa\u4e00\u4e2aMainThreadSessionState\u5bf9\u8c61\n      : state_(thread, std::bind(MainThreadSessionState::Create,\n                                 std::placeholders::_1,\n                                 prevent_shutdown)) {\n    // \u6267\u884cMainThreadSessionState::Connect                             \n    state_.Call(&amp;MainThreadSessionState::Connect, std::move(delegate));\n  }\n</code></pre> \u7ee7\u7eed\u770bMainThreadSessionState::Connect\u3002 <pre><code>void Connect(std::unique_ptr&lt;InspectorSessionDelegate&gt; delegate) {\n    Agent* agent = thread_-&gt;inspector_agent();\n    session_ = agent-&gt;Connect(std::move(delegate), prevent_shutdown_);\n}\n</code></pre> \u7ee7\u7eed\u8c03agent-&gt;Connect\u3002 <pre><code>std::unique_ptr&lt;InspectorSession&gt; Agent::Connect(\n    std::unique_ptr&lt;InspectorSessionDelegate&gt; delegate,\n    bool prevent_shutdown) {\n\n  int session_id = client_-&gt;connectFrontend(std::move(delegate),\n                                            prevent_shutdown);\n  return std::unique_ptr&lt;InspectorSession&gt;(\n      new SameThreadInspectorSession(session_id, client_));\n}\n</code></pre> \u7ee7\u7eed\u8c03connectFrontend <pre><code>  int connectFrontend(std::unique_ptr&lt;InspectorSessionDelegate&gt; delegate,\n                      bool prevent_shutdown) {\n    int session_id = next_session_id_++;\n    channels_[session_id] = std::make_unique&lt;ChannelImpl&gt;(env_,\n                                                          client_,\n                                                          getWorkerManager(),\n                                                          std::move(delegate),\n                                                          getThreadHandle(),\n                                                          prevent_shutdown);\n    return session_id;\n  }\n</code></pre> connectFrontend\u521b\u5efa\u4e86\u4e00\u4e2aChannelImpl\u5e76\u4e14\u5728channels_\u4e2d\u4fdd\u5b58\u4e86\u6620\u5c04\u5173\u7cfb\u3002\u770b\u770bChannelImpl\u7684\u6784\u9020\u51fd\u6570\u3002 <pre><code>explicit ChannelImpl(Environment* env,\n                     const std::unique_ptr&lt;V8Inspector&gt;&amp; inspector,\n                     std::unique_ptr&lt;InspectorSessionDelegate&gt; delegate, ...)\n      : delegate_(std::move(delegate)) {\n\n    session_ = inspector-&gt;connect(CONTEXT_GROUP_ID, this, StringView());\n}\n</code></pre> ChannelImpl\u8c03\u7528inspector-&gt;connect\u5efa\u7acb\u4e86\u4e00\u4e2a\u548cV8 Inspector\u7684\u4f1a\u8bdd\u3002\u7ed3\u6784\u56fe\u5927\u81f4\u5982\u4e0b\u3002 </p>"},{"location":"chapter24-Inspector/#324-v8-inspector","title":"3.2.4 \u5ba2\u6237\u7aef\u5230V8 Inspector\u7684\u6570\u636e\u5904\u7406","text":"<p>TCP\u8fde\u63a5\u5efa\u7acb\u4e86\uff0c\u534f\u8bae\u5347\u7ea7\u4e5f\u5b8c\u6210\u4e86\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u5f00\u59cb\u5904\u7406\u4e1a\u52a1\u6570\u636e\u3002\u4ece\u524d\u9762\u7684\u5206\u6790\u4e2d\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u6570\u636e\u5230\u6765\u65f6\u4f1a\u6267\u884cTcpHoldler\u7684handler_-&gt;OnData\u56de\u8c03\u3002\u56e0\u4e3a\u5df2\u7ecf\u5b8c\u6210\u4e86\u534f\u8bae\u5347\u7ea7\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019\u7684handler\u53d8\u6210\u4e86WeSocket handler\u3002 <pre><code>  void OnData(std::vector&lt;char&gt;* data) override {\n    // 1. Parse.\n    int processed = 0;\n    do {\n      processed = ParseWsFrames(*data);\n      // 2. Fix the data size &amp; length\n      if (processed &gt; 0) {\n        remove_from_beginning(data, processed);\n      }\n    } while (processed &gt; 0 &amp;&amp; !data-&gt;empty());\n  }\n</code></pre> OnData\u901a\u8fc7ParseWsFrames\u89e3\u6790WebSocket\u534f\u8bae\u3002 <pre><code>int ParseWsFrames(const std::vector&lt;char&gt;&amp; buffer) {\n    int bytes_consumed = 0;\n    std::vector&lt;char&gt; output;\n    bool compressed = false;\n    // \u89e3\u6790WebSocket\u534f\u8bae\n    ws_decode_result r =  decode_frame_hybi17(buffer,\n                                              true /* client_frame */,\n                                              &amp;bytes_consumed, &amp;output,\n                                              &amp;compressed);\n    // \u6267\u884cdelegate\u7684\u56de\u8c03                                        \n    delegate()-&gt;OnWsFrame(output);\n    return bytes_consumed;\n  }\n</code></pre> \u524d\u9762\u5df2\u7ecf\u5206\u6790\u8fc7delegate\u662fTcpHoldler\u7684delegate\uff0c\u5373SocketSession::Delegate\u5bf9\u8c61\u3002 <pre><code>void SocketSession::Delegate::OnWsFrame(const std::vector&lt;char&gt;&amp; data) {\n  server_-&gt;MessageReceived(session_id_,\n                           std::string(data.data(), \n                           data.size()));\n}\n</code></pre> \u7ee7\u7eed\u56de\u8c03server_-&gt;MessageReceived\u3002\u4ece\u7ed3\u6784\u56fe\u53ef\u4ee5\u770b\u5230server_\u662fInspectorSocketServer\u5bf9\u8c61\u3002 <pre><code>void MessageReceived(int session_id, const std::string&amp; message) {\n  delegate_-&gt;MessageReceived(session_id, message);\n}\n</code></pre> \u7ee7\u7eed\u56de\u8c03delegate_-&gt;MessageReceived\u3002InspectorSocketServer\u7684delegate_\u662fInspectorIoDelegate\u5bf9\u8c61\u3002 <pre><code>void InspectorIoDelegate::MessageReceived(int session_id,\n                                          const std::string&amp; message) {\n  auto session = sessions_.find(session_id);\n  if (session != sessions_.end())\n    session-&gt;second-&gt;Dispatch(Utf8ToStringView(message)-&gt;string());\n}\n</code></pre> \u9996\u5148\u901a\u8fc7session_id\u627e\u5230\u5bf9\u5e94\u7684session\u3002session\u662f\u4e00\u4e2aCrossThreadInspectorSession\u5bf9\u8c61\u3002\u770b\u770b\u4ed6\u7684Dispatch\u65b9\u6cd5\u3002 <pre><code> void Dispatch(const StringView&amp; message) override {\n    state_.Call(&amp;MainThreadSessionState::Dispatch,\n                StringBuffer::create(message));\n  }\n</code></pre> \u6267\u884cMainThreadSessionState::Dispatch\u3002 <pre><code>void Dispatch(std::unique_ptr&lt;StringBuffer&gt; message) {\n  session_-&gt;Dispatch(message-&gt;string());\n}\n</code></pre> session_\u662fSameThreadInspectorSession\u5bf9\u8c61\u3002 <pre><code>void SameThreadInspectorSession::Dispatch(\n    const v8_inspector::StringView&amp; message) {\n  auto client = client_.lock();\n  if (client)\n    client-&gt;dispatchMessageFromFrontend(session_id_, message);\n}\n</code></pre> \u7ee7\u7eed\u8c03client-&gt;dispatchMessageFromFrontend\u3002</p> <p><pre><code> void dispatchMessageFromFrontend(int session_id, const StringView&amp; message) {\n   channels_[session_id]-&gt;dispatchProtocolMessage(message);\n }\n</code></pre> \u901a\u8fc7session_id\u627e\u5230\u5bf9\u5e94\u7684ChannelImpl\uff0c\u7ee7\u7eed\u8c03ChannelImpl\u7684dispatchProtocolMessage\u3002</p> <p><pre><code> voiddispatchProtocolMessage(const StringView&amp; message) {\n   session_-&gt;dispatchProtocolMessage(message);\n }\n</code></pre> \u6700\u7ec8\u8c03\u7528\u548cV8 Inspector\u7684\u4f1a\u8bdd\u5bf9\u8c61\u628a\u6570\u636e\u53d1\u9001\u7ed9V8\u3002\u81f3\u6b64\u5ba2\u6237\u7aef\u5230V8 Inspector\u7684\u901a\u4fe1\u8fc7\u7a0b\u5c31\u5b8c\u6210\u4e86\u3002</p>"},{"location":"chapter24-Inspector/#325-v8-inspector","title":"3.2.5 V8 Inspector\u5230\u5ba2\u6237\u7aef\u7684\u6570\u636e\u5904\u7406","text":"<p>\u63a5\u7740\u770b\u4eceV8 inspector\u5230\u5ba2\u6237\u7aef\u7684\u6570\u636e\u4f20\u9012\u903b\u8f91\u3002V8 inspector\u662f\u901a\u8fc7channel\u7684sendResponse\u51fd\u6570\u4f20\u9012\u7ed9\u5ba2\u6237\u7aef\u7684\u3002 <pre><code> void sendResponse(\n      int callId,\n      std::unique_ptr&lt;v8_inspector::StringBuffer&gt; message) override {\n\n    sendMessageToFrontend(message-&gt;string());\n  }\n\n void sendMessageToFrontend(const StringView&amp; message) {\n    delegate_-&gt;SendMessageToFrontend(message);\n }\n</code></pre> delegate_\u662fIoSessionDelegate\u5bf9\u8c61\u3002 <pre><code>void SendMessageToFrontend(const v8_inspector::StringView&amp; message) override {\n    request_queue_-&gt;Post(id_, TransportAction::kSendMessage,\n                         StringBuffer::create(message));\n  }\n</code></pre> request_queue_\u662fRequestQueueData\u5bf9\u8c61\u3002 <pre><code> void Post(int session_id,\n            TransportAction action,\n            std::unique_ptr&lt;StringBuffer&gt; message) {\n\n    Mutex::ScopedLock scoped_lock(state_lock_);\n    bool notify = messages_.empty();\n    messages_.emplace_back(action, session_id, std::move(message));\n    if (notify) {\n      CHECK_EQ(0, uv_async_send(&amp;async_));\n      incoming_message_cond_.Broadcast(scoped_lock);\n    }\n  }\n</code></pre> Post\u9996\u5148\u628a\u6d88\u606f\u5165\u961f\uff0c\u7136\u540e\u901a\u8fc7\u5f02\u6b65\u7684\u65b9\u5f0f\u901a\u77e5async_\u63a5\u7740\u770basync_\u7684\u5904\u7406\u51fd\u6570\uff08\u5728\u5b50\u7ebf\u7a0b\u7684\u4e8b\u4ef6\u5faa\u73af\u91cc\u6267\u884c\uff09\u3002 <pre><code>uv_async_init(loop, &amp;async_, [](uv_async_t* async) {\n   // \u62ff\u5230async\u5bf9\u5e94\u7684\u4e0a\u4e0b\u6587\n   RequestQueueData* wrapper = node::ContainerOf(&amp;RequestQueueData::async_, async);\n   // \u6267\u884cRequestQueueData\u7684DoDispatch\n   wrapper-&gt;DoDispatch();\n});\n</code></pre></p> <p><pre><code>  void DoDispatch() {\n    for (const auto&amp; request : GetMessages()) {\n      request.Dispatch(server_);\n    }\n  }\n</code></pre> request\u662fRequestToServer\u5bf9\u8c61\u3002 <pre><code>  void Dispatch(InspectorSocketServer* server) const {\n    switch (action_) {\n      case TransportAction::kSendMessage:\n        server-&gt;Send(\n            session_id_,\n            protocol::StringUtil::StringViewToUtf8(message_-&gt;string()));\n        break;\n    }\n  }\n</code></pre> \u63a5\u7740\u770bInspectorSocketServer\u7684Send\u3002 <pre><code>void InspectorSocketServer::Send(int session_id, const std::string&amp; message) {\n  SocketSession* session = Session(session_id);\n  if (session != nullptr) {\n    session-&gt;Send(message);\n  }\n}\n</code></pre> session\u4ee3\u8868\u53ef\u5ba2\u6237\u7aef\u7684\u4e00\u4e2a\u8fde\u63a5\u3002 <pre><code>void SocketSession::Send(const std::string&amp; message) {\n  ws_socket_-&gt;Write(message.data(), message.length());\n}\n</code></pre> \u63a5\u7740\u8c03\u7528WebSocket handler\u7684Write\u3002 <pre><code>  void Write(const std::vector&lt;char&gt; data) override {\n    std::vector&lt;char&gt; output = encode_frame_hybi17(data);\n    WriteRaw(output, WriteRequest::Cleanup);\n  }\n</code></pre> WriteRaw\u662f\u57fa\u7c7bProtocolHandler\u5b9e\u73b0\u7684\u3002 <pre><code>int ProtocolHandler::WriteRaw(const std::vector&lt;char&gt;&amp; buffer,\n                              uv_write_cb write_cb) {\n  return tcp_-&gt;WriteRaw(buffer, write_cb);\n}\n</code></pre> \u6700\u7ec8\u662f\u901a\u8fc7TCP\u8fde\u63a5\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 <pre><code>int TcpHolder::WriteRaw(const std::vector&lt;char&gt;&amp; buffer, uv_write_cb write_cb) {\n  // Freed in write_request_cleanup\n  WriteRequest* wr = new WriteRequest(handler_, buffer);\n  uv_stream_t* stream = reinterpret_cast&lt;uv_stream_t*&gt;(&amp;tcp_);\n  int err = uv_write(&amp;wr-&gt;req, stream, &amp;wr-&gt;buf, 1, write_cb);\n  if (err &lt; 0)\n    delete wr;\n  return err &lt; 0;\n}\n</code></pre> \u65b0\u5efa\u4e00\u4e2a\u5199\u8bf7\u6c42\uff0csocket\u53ef\u5199\u7684\u65f6\u5019\u53d1\u9001\u6570\u636e\u7ed9\u5ba2\u6237\u7aef\u3002</p>"},{"location":"chapter24-Inspector/#4-inspector","title":"4 \u52a8\u6001\u5f00\u542fInspector","text":"<p>\u9ed8\u8ba4\u6253\u5f00Inspector\u80fd\u529b\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u8fd9\u610f\u5473\u7740\u80fd\u8fde\u4e0awebsocket\u670d\u52a1\u5668\u7684\u5ba2\u6237\u7aef\u90fd\u80fd\u901a\u8fc7\u534f\u8bae\u63a7\u5236Node.js\u8fdb\u7a0b\uff0c\u901a\u5e38\u6211\u4eec\u662f\u5728Node.js\u8fdb\u7a0b\u51fa\u73b0\u95ee\u9898\u7684\u65f6\u5019\uff0c\u52a8\u6001\u5f00\u542fInspector\u3002 <pre><code>const http = require('http');\nconst inspector = require('inspector');\nconst fs = require('fs');\n\nhttp.createServer((req, res) =&gt; {\n    if (req.url == 'debug') {\n          const session = new inspector.Session();\n          session.connect();\n          session.post('Profiler.enable', () =&gt; {\n          session.post('Profiler.start', () =&gt; {\n            session.post('Profiler.stop', (err, { profile }) =&gt; {\n              if (!err) {\n                fs.writeFileSync('./profile.cpuprofile', JSON.stringify(profile));\n              }\n              session.disconnect();\n              res.end('ok');\n            });\n          });\n        });\n    } else {\n        res.end('ok');\n    }\n}).listen(80);\n</code></pre> \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7url\u53c2\u6570\u63a7\u5236Inspector\u7684\u80fd\u529b\uff0c\u672c\u5730\u8c03\u8bd5\u65f6\u53ef\u4ee5\u5728vscode\u91cc\u53ef\u4ee5\u76f4\u63a5\u770b\u5230\u6570\u636e\u3002 </p>"},{"location":"chapter24-Inspector/#5","title":"5 \u6536\u96c6\u6570\u636e","text":"<p>V8 inspector\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u8c03\u8bd5\u53ea\u662f\u5b83\u5176\u4e2d\u4e00\u4e2a\u80fd\u529b\uff0c\u4ed6\u8fd8\u53ef\u4ee5\u83b7\u53d6\u5185\u5b58\u3001CPU\u7b49\u6570\u636e\uff0c\u5177\u4f53\u80fd\u529b\u8bf7\u53c2\u8003\u6587\u6863\u3002 </p> <p>\u540e\u8bb0\uff1aNode.js\u7684inspector\u662f\u5728Node.js\u989d\u5916\u7ebf\u7a0b\u91cc\u5f00\u542f\u7684\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u901a\u8fc7Node.js\u4f5c\u4e3a\u4e2d\u95f4\u4eba\uff0c\u5b8c\u6210\u5ba2\u6237\u7aef\u548cV8 inspector\u7684\u901a\u4fe1\uff08\u8c03\u8bd5\u3001\u6536\u96c6\u6570\u636e\uff09\uff0c\u662f\u6211\u4eec\u8c03\u8bd5\u548c\u8bca\u65adNode.js\u8fdb\u7a0b\u975e\u5e38\u597d\u7684\u65b9\u5f0f\u3002</p> <p>\u53c2\u8003\u5185\u5bb9\uff1a 1 Debugging Guide 2 inspector 3 \u5f00\u6e90\u7684inspector agent\u5b9e\u73b0 4 inpector\u534f\u8bae\u6587\u6863 5 Debugging Node.js with Chrome DevTools </p>"},{"location":"chapter25-Node.js%E5%AD%90%E7%BA%BF%E7%A8%8B%E8%B0%83%E8%AF%95%E5%92%8C%E8%AF%8A%E6%96%AD%E6%8C%87%E5%8D%97/","title":"chapter25 Node.js\u5b50\u7ebf\u7a0b\u8c03\u8bd5\u548c\u8bca\u65ad\u6307\u5357","text":"<p>\u8c03\u8bd5\u3001\u8bca\u65ad\u5b50\u7ebf\u7a0b\u6700\u76f4\u63a5\u7684\u65b9\u5f0f\u5c31\u662f\u50cf\u8c03\u8bd5\u3001\u8bca\u65ad\u4e3b\u7ebf\u7a0b\u4e00\u6837\uff0c\u4f46\u662f\u65e0\u8bba\u662f\u52a8\u6001\u5f00\u542f\u8fd8\u662f\u9759\u6001\u5f00\u542f\uff0c\u5b50\u7ebf\u7a0b\u90fd\u4e0d\u53ef\u907f\u514d\u5730\u9700\u8981\u5185\u7f6e\u4e00\u4e9b\u76f8\u5173\u7684\u975e\u4e1a\u52a1\u4ee3\u7801\uff0c\u672c\u6587\u4ecb\u7ecd\u53e6\u5916\u4e00\u79cd\u5bf9\u5b50\u7ebf\u7a0b\u4ee3\u7801\u65e0\u4fb5\u5165\u7684\u8c03\u8bd5\u65b9\u5f0f\uff0c\u53e6\u5916\u4e5f\u4ecb\u7ecd\u4e00\u4e0b\u901a\u8fc7\u5b50\u7ebf\u7a0b\u8c03\u8bd5\u4e3b\u7ebf\u7a0b\u7684\u65b9\u5f0f\u3002</p>"},{"location":"chapter25-Node.js%E5%AD%90%E7%BA%BF%E7%A8%8B%E8%B0%83%E8%AF%95%E5%92%8C%E8%AF%8A%E6%96%AD%E6%8C%87%E5%8D%97/#1-inspector","title":"1 \u521d\u59cb\u5316\u5b50\u7ebf\u7a0b\u7684Inspector","text":"<p>\u5728Node.js\u542f\u52a8\u5b50\u7ebf\u7a0b\u7684\u65f6\u5019\uff0c\u4f1a\u521d\u59cb\u5316Inspector\u3002 <pre><code>env_-&gt;InitializeInspector(std::move(inspector_parent_handle_));\n</code></pre> \u5728\u5206\u6790InitializeInspector\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u770b\u4e00\u4e0binspector_parent_handle_\u3002 <pre><code>std::unique_ptr&lt;inspector::ParentInspectorHandle&gt; inspector_parent_handle_;\n</code></pre> inspector_parent_handle_\u662f\u4e00\u4e2aParentInspectorHandle\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u662f\u5b50\u7ebf\u7a0b\u548c\u4e3b\u7ebf\u7a0b\u901a\u4fe1\u7684\u6865\u6881\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u4ed6\u7684\u521d\u59cb\u5316\u903b\u8f91\uff08\u5728\u4e3b\u7ebf\u7a0b\u91cc\u6267\u884c\uff09\u3002 <pre><code>inspector_parent_handle_ = env-&gt;inspector_agent()-&gt;GetParentHandle(thread_id_, url);\n</code></pre> \u8c03\u7528agent\u7684GetParentHandle\u83b7\u53d6\u4e00\u4e2aParentInspectorHandle\u5bf9\u8c61\u3002 <pre><code>std::unique_ptr&lt;ParentInspectorHandle&gt; Agent::GetParentHandle(int thread_id, const std::string&amp; url) {\n return client_-&gt;getWorkerManager()-&gt;NewParentHandle(thread_id, url);\n}\n</code></pre> \u5185\u90e8\u5176\u5b9e\u662f\u901a\u8fc7client_-&gt;getWorkerManager()\u5bf9\u8c61\u7684NewParentHandle\u65b9\u6cd5\u83b7\u53d6ParentInspectorHandle\u5bf9\u8c61\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0bWorkerManager\u7684NewParentHandle\u3002 <pre><code>std::unique_ptr&lt;ParentInspectorHandle&gt; WorkerManager::NewParentHandle(int thread_id, const std::string&amp; url) {\n  bool wait = !delegates_waiting_on_start_.empty();\n  return std::make_unique&lt;ParentInspectorHandle&gt;(thread_id, url, thread_, wait);\n}\n\nParentInspectorHandle::ParentInspectorHandle(\n    int id, const std::string&amp; url,\n    std::shared_ptr&lt;MainThreadHandle&gt; parent_thread, \n    bool wait_for_connect\n)\n    : id_(id), \n      url_(url), \n      parent_thread_(parent_thread),\n      wait_(wait_for_connect) {}\n</code></pre> \u6700\u7ec8\u7684\u67b6\u6784\u56fe\u5982\u4e0b\u5165\u6240\u793a\u3002  \u5206\u6790\u5b8cParentInspectorHandle\u540e\u7ee7\u7eed\u770b\u4e00\u4e0benv_-&gt;InitializeInspector(std::move(inspector_parent_handle_))\u7684\u903b\u8f91\uff08\u5728\u5b50\u7ebf\u7a0b\u91cc\u6267\u884c\uff09\u3002 <pre><code>int Environment::InitializeInspector(\n    std::unique_ptr&lt;inspector::ParentInspectorHandle&gt; parent_handle) {\n\n  std::string inspector_path;\n  inspector_path = parent_handle-&gt;url();\n  inspector_agent_-&gt;SetParentHandle(std::move(parent_handle));\n  inspector_agent_-&gt;Start(inspector_path,\n                          options_-&gt;debug_options(),\n                          inspector_host_port(),\n                          is_main_thread());\n}\n</code></pre> \u9996\u5148\u628aParentInspectorHandle\u5bf9\u8c61\u4fdd\u5b58\u5230agent\u4e2d\uff0c\u7136\u540e\u8c03\u7528agent\u7684Start\u65b9\u6cd5\u3002 <pre><code>bool Agent::Start(...) {\n    // \u65b0\u5efaclient\u5bf9\u8c61\n   client_ = std::make_shared&lt;NodeInspectorClient&gt;(parent_env_, is_main);\n   // \u8c03\u7528agent\u4e2d\u4fdd\u5b58\u7684ParentInspectorHandle\u5bf9\u8c61\u7684WorkerStarted\n   parent_handle_-&gt;WorkerStarted(client_-&gt;getThreadHandle(), ...);\n}\n</code></pre> Agent::Start\u521b\u5efa\u4e86\u4e00\u4e2aclient\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528ParentInspectorHandle\u5bf9\u8c61\u7684WorkerStarted\u65b9\u6cd5\uff08\u521a\u624dSetParentHandle\u7684\u65f6\u5019\u4fdd\u5b58\u7684\uff09\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u65f6\u5019\u7684\u67b6\u6784\u56fe\u3002  \u63a5\u7740\u770bparent_handle_-&gt;WorkerStarted\u3002 <pre><code>void ParentInspectorHandle::WorkerStarted(\n    std::shared_ptr&lt;MainThreadHandle&gt; worker_thread, bool waiting) {\n  std::unique_ptr&lt;Request&gt; request(\n      new WorkerStartedRequest(id_, url_, worker_thread, waiting));\n  parent_thread_-&gt;Post(std::move(request));\n}\n</code></pre> WorkerStarted\u521b\u5efa\u4e86\u4e00\u4e2aWorkerStartedRequest\u8bf7\u6c42\uff0c\u7136\u540e\u901a\u8fc7parent_thread_-&gt;Post\u63d0\u4ea4\uff0cparent_thread_\u662fMainThreadInterface\u5bf9\u8c61\u3002 <pre><code>void MainThreadInterface::Post(std::unique_ptr&lt;Request&gt; request) {\n  Mutex::ScopedLock scoped_lock(requests_lock_);\n  // \u4e4b\u524d\u662f\u7a7a\u5219\u9700\u8981\u5524\u9192\u6d88\u8d39\u8005\n  bool needs_notify = requests_.empty();\n  // \u6d88\u606f\u5165\u961f\n  requests_.push_back(std::move(request));\n  if (needs_notify) {\n       // \u83b7\u53d6\u5f53\u524d\u5bf9\u8c61\u7684\u4e00\u4e2a\u5f31\u5f15\u7528\n       std::weak_ptr&lt;MainThreadInterface&gt;* interface_ptr = new std::weak_ptr&lt;MainThreadInterface&gt;(shared_from_this());\n      // \u8bf7\u6c42V8\u6267\u884cRequestInterrupt\u5165\u53c2\u5bf9\u5e94\u7684\u56de\u8c03\n      isolate_-&gt;RequestInterrupt([](v8::Isolate* isolate, void* opaque) {\n        // \u628a\u6267\u884c\u65f6\u4f20\u5165\u7684\u53c2\u6570\u8f6c\u6210MainThreadInterface\n        std::unique_ptr&lt;std::weak_ptr&lt;MainThreadInterface&gt;&gt; interface_ptr {\n          static_cast&lt;std::weak_ptr&lt;MainThreadInterface&gt;*&gt;(opaque) \n        };\n        // \u5224\u65ad\u5bf9\u8c61\u662f\u5426\u8fd8\u6709\u6548\uff0c\u662f\u5219\u8c03\u7528DispatchMessages\n        if (auto iface = interface_ptr-&gt;lock()) iface-&gt;DispatchMessages();\n\n      }, static_cast&lt;void*&gt;(interface_ptr));\n  }\n  // \u5524\u9192\u6d88\u8d39\u8005\n  incoming_message_cond_.Broadcast(scoped_lock);\n}\n</code></pre> \u6211\u4eec\u770b\u770b\u8fd9\u65f6\u5019\u7684\u67b6\u6784\u56fe\u3002  \u63a5\u7740\u770b\u56de\u8c03\u91cc\u6267\u884cMainThreadInterface\u5bf9\u8c61DispatchMessages\u65b9\u6cd5\u7684\u903b\u8f91\u3002 <pre><code>void MainThreadInterface::DispatchMessages() {\n  // \u904d\u5386\u8bf7\u6c42\u961f\u5217\n  requests_.swap(dispatching_message_queue_);\n  while (!dispatching_message_queue_.empty()) {\n    MessageQueue::value_type task;\n    std::swap(dispatching_message_queue_.front(), task);\n    dispatching_message_queue_.pop_front();\n    // \u6267\u884c\u4efb\u52a1\u51fd\u6570\n    task-&gt;Call(this);\n  }\n}\n</code></pre> task\u662fWorkerStartedRequest\u5bf9\u8c61\uff0c\u770b\u4e00\u4e0bCall\u65b9\u6cd5\u7684\u4ee3\u7801\u3002 <pre><code>void Call(MainThreadInterface* thread) override {\n  auto manager = thread-&gt;inspector_agent()-&gt;GetWorkerManager();\n  manager-&gt;WorkerStarted(id_, info_, waiting_);\n}\n</code></pre> \u63a5\u7740\u8c03\u7528agent\u7684WorkerManager\u7684WorkerStarted\u3002 <pre><code>void WorkerManager::WorkerStarted(int session_id,\n                                  const WorkerInfo&amp; info,\n                                  bool waiting) {\n  children_.emplace(session_id, info);\n  for (const auto&amp; delegate : delegates_) {\n    Report(delegate.second, info, waiting);\n  }\n}\n</code></pre> WorkerStarted\u8bb0\u5f55\u4e86\u4e00\u4e2aid\u548c\u4e0a\u4e0b\u6587\uff0c\u56e0\u4e3adelegates_\u521d\u59cb\u5316\u7684\u65f6\u5019\u662f\u7a7a\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6267\u884c\u3002\u81f3\u6b64\uff0c\u5b50\u7ebf\u7a0bInspector\u521d\u59cb\u5316\u7684\u903b\u8f91\u5c31\u5206\u6790\u5b8c\u4e86\uff0c\u7ed3\u6784\u56fe\u5982\u4e0b\u3002  \u6211\u4eec\u53d1\u73b0\uff0c\u548c\u4e3b\u7ebf\u7a0b\u4e0d\u4e00\u6837\uff0c\u4e3b\u7ebf\u7a0b\u4f1a\u542f\u52a8\u4e00\u4e2aWebSocket\u670d\u52a1\u5668\u63a5\u6536\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42\uff0c\u800c\u5b50\u7ebf\u7a0b\u53ea\u662f\u521d\u59cb\u5316\u4e86\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u57fa\u4e8e\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\uff0c\u4e3b\u7ebf\u7a0b\u662f\u5982\u4f55\u52a8\u6001\u5f00\u542f\u8c03\u8bd5\u5b50\u7ebf\u7a0b\u7684\u3002</p>"},{"location":"chapter25-Node.js%E5%AD%90%E7%BA%BF%E7%A8%8B%E8%B0%83%E8%AF%95%E5%92%8C%E8%AF%8A%E6%96%AD%E6%8C%87%E5%8D%97/#2","title":"2 \u4e3b\u7ebf\u7a0b\u5f00\u542f\u8c03\u8bd5\u5b50\u7ebf\u7a0b\u7684\u80fd\u529b","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4ee5\u4ee5\u4e0b\u65b9\u5f0f\u5f00\u542f\u5bf9\u5b50\u7ebf\u7a0b\u7684\u8c03\u8bd5\u3002 <pre><code>const { Worker, workerData } = require('worker_threads');\nconst { Session } = require('inspector');\n// \u65b0\u5efa\u4e00\u4e2a\u65b0\u7684\u901a\u4fe1\u901a\u9053\nconst session = new Session();\nsession.connect();\n// \u521b\u5efa\u5b50\u7ebf\u7a0b\nconst worker = new Worker('./httpServer.js', {workerData: {port: 80}}); \n// \u5b50\u7ebf\u7a0b\u542f\u52a8\u6210\u529f\u540e\u5f00\u542f\u8c03\u8bd5\u5b50\u7ebf\u7a0b\u7684\u80fd\u529b\nworker.on('online', () =&gt; {\n    session.post(\"NodeWorker.enable\",\n                 {waitForDebuggerOnStart: false},  \n                 (err) =&gt; {  \n                    err &amp;&amp; console.log(\"NodeWorker.enable\", err);\n                 });\n});\n// \u9632\u6b62\u4e3b\u7ebf\u7a0b\u9000\u51fa\nsetInterval(() =&gt; {}, 100000);\n</code></pre> \u6211\u4eec\u5148\u6765\u5206\u6790\u4e00\u4e0bconnect\u51fd\u6570\u7684\u903b\u8f91\u3002 <pre><code> connect() {\n    this[connectionSymbol] = new Connection((message) =&gt; this[onMessageSymbol](message));\n  }\n</code></pre> \u65b0\u5efa\u4e86\u4e00\u4e2aConnection\u5bf9\u8c61\u5e76\u4f20\u5165\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u8be5\u56de\u8c03\u51fd\u6570\u5728\u6536\u5230\u6d88\u606f\u65f6\u88ab\u56de\u8c03\u3002Connection\u662fC++\u5c42\u5bfc\u51fa\u7684\u5bf9\u8c61\uff0c\u7531\u6a21\u7248\u7c7bJSBindingsConnection\u5b9e\u73b0\u3002 <pre><code>template &lt;typename ConnectionType&gt;\nclass JSBindingsConnection {}\n</code></pre> \u6211\u4eec\u770b\u770b\u5bfc\u51fa\u7684\u8def\u903b\u8f91\u3002 <pre><code>JSBindingsConnection&lt;Connection&gt;::Bind(env, target);\n</code></pre> \u63a5\u7740\u770bBind\u3002 <pre><code>static void Bind(Environment* env, Local&lt;Object&gt; target) {\n    // class_name\u662fConnection\n    Local&lt;String&gt; class_name = ConnectionType::GetClassName(env);\n    Local&lt;FunctionTemplate&gt; tmpl = env-&gt;NewFunctionTemplate(JSBindingsConnection::New);\n    tmpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n    tmpl-&gt;SetClassName(class_name);\n    tmpl-&gt;Inherit(AsyncWrap::GetConstructorTemplate(env));\n    env-&gt;SetProtoMethod(tmpl, \"dispatch\", JSBindingsConnection::Dispatch);\n    env-&gt;SetProtoMethod(tmpl, \"disconnect\", JSBindingsConnection::Disconnect);\n    target-&gt;Set(env-&gt;context(),\n                class_name,\n                tmpl-&gt;GetFunction(env-&gt;context()).ToLocalChecked())\n        .ToChecked();\n  }\n</code></pre> \u5f53\u6211\u4eec\u5728JS\u5c42\u6267\u884cnew Connection\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u6267\u884cJSBindingsConnection::New\u3002 <pre><code> static void New(const FunctionCallbackInfo&lt;Value&gt;&amp; info) {\n   Environment* env = Environment::GetCurrent(info);\n   Local&lt;Function&gt; callback = info[0].As&lt;Function&gt;();\n   new JSBindingsConnection(env, info.This(), callback);\n }\n</code></pre> \u6211\u4eec\u770b\u770b\u65b0\u5efa\u4e00\u4e2aJSBindingsConnection\u5bf9\u8c61\u65f6\u7684\u903b\u8f91\u3002 <pre><code>JSBindingsConnection(Environment* env,\n                       Local&lt;Object&gt; wrap,\n                       Local&lt;Function&gt; callback)\n                       : AsyncWrap(env, wrap, PROVIDER_INSPECTORJSBINDING),\n                         callback_(env-&gt;isolate(), callback) {\n    Agent* inspector = env-&gt;inspector_agent();\n    session_ = LocalConnection::Connect(\n        inspector, std::make_unique&lt;JSBindingsSessionDelegate&gt;(env, this)\n    );\n}\n\nstatic std::unique_ptr&lt;InspectorSession&gt; Connect(\n      Agent* inspector, \n      std::unique_ptr&lt;InspectorSessionDelegate&gt; delegate\n) {\n    return inspector-&gt;Connect(std::move(delegate), false);\n}\n</code></pre> \u6700\u7ec8\u662f\u4f20\u5165\u4e86\u4e00\u4e2aJSBindingsSessionDelegate\u5bf9\u8c61\u8c03\u7528Agent\u7684Connect\u65b9\u6cd5\u3002 <pre><code>std::unique_ptr&lt;InspectorSession&gt; Agent::Connect(\n    std::unique_ptr&lt;InspectorSessionDelegate&gt; delegate,\n    bool prevent_shutdown) {\n  int session_id = client_-&gt;connectFrontend(std::move(delegate),\n                                            prevent_shutdown);\n  // JSBindingsConnection\u5bf9\u8c61\u7684session_\u5b57\u6bb5\u6307\u5411\u7684\u5bf9\u8c61                                         \n  return std::unique_ptr&lt;InspectorSession&gt;(\n      new SameThreadInspectorSession(session_id, client_)\n  );\n}\n</code></pre> Agent\u7684Connect\u65b9\u6cd5\u7ee7\u7eed\u8c03\u7528client_-&gt;connectFrontend\u3002 <pre><code>int connectFrontend(std::unique_ptr&lt;InspectorSessionDelegate&gt; delegate,\n                      bool prevent_shutdown) {\n    int session_id = next_session_id_++;\n    channels_[session_id] = std::make_unique&lt;ChannelImpl&gt;(env_,\n                                                          client_,\n                                                          getWorkerManager(),\n                                                          std::move(delegate),\n                                                          getThreadHandle(),\n                                                          prevent_shutdown);\n    return session_id;\n  }\n</code></pre> connectFrontend\u65b0\u5efa\u4e86\u4e00\u4e2aChannelImpl\u5bf9\u8c61\uff0c\u5728\u65b0\u5efaChannelImpl\u65f6\uff0c\u4f1a\u521d\u59cb\u5316\u5b50\u7ebf\u7a0b\u5904\u7406\u7684\u903b\u8f91\u3002 <pre><code> explicit ChannelImpl(Environment* env,\n                       const std::unique_ptr&lt;V8Inspector&gt;&amp; inspector,\n                       std::shared_ptr&lt;WorkerManager&gt; worker_manager,\n                       std::unique_ptr&lt;InspectorSessionDelegate&gt; delegate,\n                       std::shared_ptr&lt;MainThreadHandle&gt; main_thread_,\n                       bool prevent_shutdown)\n      : delegate_(std::move(delegate)), prevent_shutdown_(prevent_shutdown),\n        retaining_context_(false) {\n    session_ = inspector-&gt;connect(CONTEXT_GROUP_ID, this, StringView());\n    // Node.js\u62d3\u5c55\u547d\u4ee4\u7684\u5904\u7406\u5206\u53d1\u5668\n    node_dispatcher_ = std::make_unique&lt;protocol::UberDispatcher&gt;(this);\n    // trace\u76f8\u5173\n    tracing_agent_ = std::make_unique&lt;protocol::TracingAgent&gt;(env, main_thread_);\n    tracing_agent_-&gt;Wire(node_dispatcher_.get());\n    // \u5904\u7406\u5b50\u7ebf\u7a0b\u76f8\u5173\n    if (worker_manager) {\n      worker_agent_ = std::make_unique&lt;protocol::WorkerAgent&gt;(worker_manager);\n      worker_agent_-&gt;Wire(node_dispatcher_.get());\n    }\n    // \u5904\u7406runtime\n    runtime_agent_ = std::make_unique&lt;protocol::RuntimeAgent&gt;();\n    runtime_agent_-&gt;Wire(node_dispatcher_.get());\n}\n</code></pre> \u6211\u4eec\u8fd9\u91cc\u53ea\u5173\u6ce8\u5904\u7406\u5b50\u7ebf\u7a0b\u76f8\u5173\u7684\u903b\u8f91\u3002\u770b\u4e00\u4e0b worker_agent_-&gt;Wire\u3002 <pre><code>void WorkerAgent::Wire(UberDispatcher* dispatcher) {\n  frontend_.reset(new NodeWorker::Frontend(dispatcher-&gt;channel()));\n  NodeWorker::Dispatcher::wire(dispatcher, this);\n  auto manager = manager_.lock();\n  workers_ = std::make_shared&lt;NodeWorkers&gt;(frontend_, manager-&gt;MainThread());\n}\n</code></pre> \u8fd9\u65f6\u5019\u7684\u67b6\u6784\u56fe\u5982\u4e0b  \u63a5\u7740\u770b\u4e00\u4e0bNodeWorker::Dispatcher::wire(dispatcher, this)\u7684\u903b\u8f91\u3002 <pre><code>void Dispatcher::wire(UberDispatcher* uber, Backend* backend)\n{\n    std::unique_ptr&lt;DispatcherImpl&gt; dispatcher(new DispatcherImpl(uber-&gt;channel(), backend));\n    uber-&gt;setupRedirects(dispatcher-&gt;redirects());\n    uber-&gt;registerBackend(\"NodeWorker\", std::move(dispatcher));\n}\n</code></pre> \u9996\u5148\u65b0\u5efa\u4e86\u4e00\u4e2aDispatcherImpl\u5bf9\u8c61\u3002 <pre><code>DispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)\n        : DispatcherBase(frontendChannel)\n        , m_backend(backend) {\n        m_dispatchMap[\"NodeWorker.sendMessageToWorker\"] = &amp;DispatcherImpl::sendMessageToWorker;\n        m_dispatchMap[\"NodeWorker.enable\"] = &amp;DispatcherImpl::enable;\n        m_dispatchMap[\"NodeWorker.disable\"] = &amp;DispatcherImpl::disable;\n        m_dispatchMap[\"NodeWorker.detach\"] = &amp;DispatcherImpl::detach;\n    }\n</code></pre> \u9664\u4e86\u521d\u59cb\u5316\u4e00\u4e9b\u5b57\u6bb5\uff0c\u53e6\u5916\u4e86\u4e00\u4e2akv\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u4e2a\u662f\u4e00\u4e2a\u8def\u7531\u914d\u7f6e\uff0c\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u5b83\u7684\u4f5c\u7528\u3002\u65b0\u5efa\u5b8cDispatcherImpl\u540e\u53c8\u8c03\u7528\u4e86uber-&gt;registerBackend(\"NodeWorker\", std::move(dispatcher))\u6ce8\u518c\u8be5\u5bf9\u8c61\u3002 <pre><code>void UberDispatcher::registerBackend(const String&amp; name, std::unique_ptr&lt;protocol::DispatcherBase&gt; dispatcher)\n{\n    m_dispatchers[name] = std::move(dispatcher);\n}\n</code></pre> \u8fd9\u65f6\u5019\u7684\u67b6\u6784\u56fe\u5982\u4e0b\u3002  \u6211\u4eec\u770b\u5230\u8fd9\u91cc\u5176\u5b9e\u662f\u5efa\u7acb\u4e86\u4e00\u4e2a\u8def\u7531\u4f53\u7cfb\uff0c\u540e\u9762\u6536\u5230\u547d\u4ee4\u65f6\u5c31\u4f1a\u6839\u636e\u8fd9\u4e9b\u8def\u7531\u914d\u7f6e\u8fdb\u884c\u8f6c\u53d1\uff0c\u7c7b\u4f3cNode.js Express\u6846\u67b6\u8def\u7531\u673a\u5236\u3002\u8fd9\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7session\u7684post\u7ed9\u4e3b\u7ebf\u7a0b\u53d1\u9001NodeWorker.enable\u547d\u4ee4\u6765\u5f00\u542f\u5b50\u7ebf\u7a0b\u7684\u8c03\u8bd5\u3002\u6211\u4eec\u5206\u6790\u8fd9\u4e2a\u8fc7\u7a0b\u3002 <pre><code>post(method, params, callback) {\n    // \u5ffd\u7565\u53c2\u6570\u5904\u7406\n    // \u4fdd\u5b58\u8bf7\u6c42\u5bf9\u5e94\u7684\u56de\u8c03\n    if (callback) {\n      this[messageCallbacksSymbol].set(id, callback);\n    }\n    // \u8c03\u7528C++\u7684dispatch\n    this[connectionSymbol].dispatch(JSONStringify(message));\n}\n</code></pre> this[connectionSymbol]\u5bf9\u5e94\u7684\u662fJSBindingsConnection\u5bf9\u8c61\u3002 <pre><code>static void Dispatch(const FunctionCallbackInfo&lt;Value&gt;&amp; info) {\n    Environment* env = Environment::GetCurrent(info);\n    JSBindingsConnection* session;\n    ASSIGN_OR_RETURN_UNWRAP(&amp;session, info.Holder());\n    if (session-&gt;session_) {\n      session-&gt;session_-&gt;Dispatch(\n          ToProtocolString(env-&gt;isolate(), info[0])-&gt;string());\n    }\n}\n</code></pre> session_\u662f\u4e00\u4e2aSameThreadInspectorSession\u5bf9\u8c61\u3002 <pre><code>void SameThreadInspectorSession::Dispatch(\n    const v8_inspector::StringView&amp; message) {\n  auto client = client_.lock();\n  client-&gt;dispatchMessageFromFrontend(session_id_, message);\n}\n\nvoid dispatchMessageFromFrontend(int session_id, const StringView&amp; message) {\n    channels_[session_id]-&gt;dispatchProtocolMessage(message);\n}\n</code></pre> \u6700\u7ec8\u8c03\u7528\u4e86ChannelImpl\u7684dispatchProtocolMessage\u3002 <pre><code>void dispatchProtocolMessage(const StringView&amp; message) {\n    std::string raw_message = protocol::StringUtil::StringViewToUtf8(message);\n    std::unique_ptr&lt;protocol::DictionaryValue&gt; value =\n        protocol::DictionaryValue::cast(protocol::StringUtil::parseMessage(\n            raw_message, false));\n    int call_id;\n    std::string method;\n    // \u89e3\u6790\u547d\u4ee4\n    node_dispatcher_-&gt;parseCommand(value.get(), &amp;call_id, &amp;method);\n    // \u5224\u65ad\u547d\u4ee4\u662fV8\u5185\u7f6e\u547d\u4ee4\u8fd8\u662fNode.js\u62d3\u5c55\u7684\u547d\u4ee4\n    if (v8_inspector::V8InspectorSession::canDispatchMethod(\n            Utf8ToStringView(method)-&gt;string())) {\n      session_-&gt;dispatchProtocolMessage(message);\n    } else {\n      node_dispatcher_-&gt;dispatch(call_id, method, std::move(value),\n                                 raw_message);\n    }\n  }\n</code></pre> \u56e0\u4e3aNodeWorker.enable\u662fNode.js\u62d3\u5c55\u7684\u547d\u4ee4\uff0c\u6240\u4ee5\u4f1a\u8d70\u5230else\u91cc\u9762\u7684\u903b\u8f91\u3002\u6839\u636e\u8def\u7531\u914d\u7f6e\u627e\u5230\u8be5\u547d\u4ee4\u5bf9\u5e94\u7684\u5904\u7406\u903b\u8f91\uff08NodeWorker.enable\u4ee5.\u5207\u5206\uff0c\u5bf9\u5e94\u4e24\u7ea7\u8def\u7531\uff09\u3002 <pre><code>void UberDispatcher::dispatch(int callId, const String&amp; in_method, std::unique_ptr&lt;Value&gt; parsedMessage, const ProtocolMessage&amp; rawMessage)\n{\n    // \u627e\u5230\u4e00\u7ea7\u8def\u7531\u914d\u7f6e\n    protocol::DispatcherBase* dispatcher = findDispatcher(method);\n    std::unique_ptr&lt;protocol::DictionaryValue&gt; messageObject = DictionaryValue::cast(std::move(parsedMessage));\n    // \u4ea4\u7ed9\u4e00\u7ea7\u8def\u7531\u5904\u7406\u5668\u5904\u7406\n    dispatcher-&gt;dispatch(callId, method, rawMessage, std::move(messageObject));\n}\n</code></pre> NodeWorker.enable\u5bf9\u5e94\u7684\u8def\u7531\u5904\u7406\u5668\u4ee3\u7801\u5982\u4e0b <pre><code>void DispatcherImpl::dispatch(int callId, const String&amp; method, const ProtocolMessage&amp; message, std::unique_ptr&lt;protocol::DictionaryValue&gt; messageObject)\n{\n    // \u67e5\u627e\u4e8c\u7ea7\u8def\u7531\n    std::unordered_map&lt;String, CallHandler&gt;::iterator it = m_dispatchMap.find(method);\n    protocol::ErrorSupport errors;\n    // \u627e\u5230\u5904\u7406\u51fd\u6570\n    (this-&gt;*(it-&gt;second))(callId, method, message, std::move(messageObject), &amp;errors);\n}\n</code></pre> dispatch\u7ee7\u7eed\u5bfb\u627e\u547d\u4ee4\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u6700\u7ec8\u627e\u5230NodeWorker.enable\u547d\u4ee4\u7684\u5904\u7406\u51fd\u6570\u4e3aDispatcherImpl::enable\u3002 <pre><code>void DispatcherImpl::enable(...)\n{\n    std::unique_ptr&lt;DispatcherBase::WeakPtr&gt; weak = weakPtr();\n    DispatchResponse response = m_backend-&gt;enable(...);\n    // \u8fd4\u56de\u54cd\u5e94\u7ed9\u547d\u4ee4\uff08\u7c7b\u4f3c\u8bf7\u6c42/\u54cd\u5e94\u6a21\u5f0f\uff09\n    weak-&gt;get()-&gt;sendResponse(callId, response);\n}\n</code></pre> \u6839\u636e\u67b6\u6784\u56fe\u53ef\u4ee5\u77e5\u9053m_backend\u662fWorkerAgent\u5bf9\u8c61\u3002 <pre><code>DispatchResponse WorkerAgent::enable(bool waitForDebuggerOnStart) {\n  auto manager = manager_.lock();\n  std::unique_ptr&lt;AgentWorkerInspectorDelegate&gt; delegate(new AgentWorkerInspectorDelegate(workers_));\n  event_handle_ = manager-&gt;SetAutoAttach(std::move(delegate));\n  return DispatchResponse::OK();\n}\n</code></pre> \u7ee7\u7eed\u8c03\u7528WorkerManager\u7684SetAutoAttach\u65b9\u6cd5\u3002 <pre><code>std::unique_ptr&lt;WorkerManagerEventHandle&gt; WorkerManager::SetAutoAttach(\n    std::unique_ptr&lt;WorkerDelegate&gt; attach_delegate) {\n  int id = ++next_delegate_id_;\n  // \u4fdd\u5b58delegate\n  delegates_[id] = std::move(attach_delegate);\n  const auto&amp; delegate = delegates_[id];\n  // \u901a\u77e5\u5b50\u7ebf\u7a0b\n  for (const auto&amp; worker : children_) {\n    Report(delegate, worker.second, false);\n  }\n  ...\n}\n</code></pre> SetAutoAttach\u904d\u5386\u5b50\u7ebf\u7a0b\u3002 <pre><code>void Report(const std::unique_ptr&lt;WorkerDelegate&gt;&amp; delegate,\n            const WorkerInfo&amp; info, bool waiting) {\n  if (info.worker_thread)\n    delegate-&gt;WorkerCreated(info.title, info.url, waiting, info.worker_thread);\n}\n</code></pre> info\u662f\u4e00\u4e2aWorkerInfo\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u662f\u5b50\u7ebf\u7a0b\u521d\u59cb\u5316\u548c\u4e3b\u7ebf\u7a0b\u5efa\u7acb\u5173\u7cfb\u7684\u6570\u636e\u7ed3\u6784\u3002delegate\u662fAgentWorkerInspectorDelegate\u5bf9\u8c61\u3002 <pre><code>void WorkerCreated(const std::string&amp; title,\n                     const std::string&amp; url,\n                     bool waiting,\n                     std::shared_ptr&lt;MainThreadHandle&gt; target) override {\n    workers_-&gt;WorkerCreated(title, url, waiting, target);\n}\n</code></pre> workers_\u662f\u4e00\u4e2aNodeWorkers\u5bf9\u8c61\u3002 <pre><code>void NodeWorkers::WorkerCreated(const std::string&amp; title,\n                                const std::string&amp; url,\n                                bool waiting,\n                                std::shared_ptr&lt;MainThreadHandle&gt; target) {\n  auto frontend = frontend_.lock();\n  std::string id = std::to_string(++next_target_id_);\n  // \u5904\u7406\u6570\u636e\u901a\u4fe1\u7684delegate\n  auto delegate = thread_-&gt;MakeDelegateThreadSafe(\n      std::unique_ptr&lt;InspectorSessionDelegate&gt;(\n          new ParentInspectorSessionDelegate(id, shared_from_this())\n      )\n  );\n  // \u5efa\u7acb\u548c\u5b50\u7ebf\u7a0bV8 Inspector\u7684\u901a\u4fe1\u901a\u9053\n  sessions_[id] = target-&gt;Connect(std::move(delegate), true);\n  frontend-&gt;attachedToWorker(id, WorkerInfo(id, title, url), waiting);\n}\n</code></pre> WorkerCreated\u5efa\u7acb\u4e86\u4e00\u6761\u548c\u5b50\u7ebf\u7a0b\u901a\u4fe1\u7684\u901a\u9053\uff0c\u7136\u540e\u901a\u77e5\u547d\u4ee4\u7684\u53d1\u9001\u65b9\u901a\u9053\u5efa\u7acb\u6210\u529f\u3002\u8fd9\u65f6\u5019\u67b6\u6784\u56fe\u5982\u4e0b\u3002  \u63a5\u7740\u770battachedToWorker\u3002 <pre><code>void Frontend::attachedToWorker(const String&amp; sessionId, std::unique_ptr&lt;protocol::NodeWorker::WorkerInfo&gt; workerInfo, bool waitingForDebugger)\n{\n    std::unique_ptr&lt;AttachedToWorkerNotification&gt; messageData = AttachedToWorkerNotification::create()\n        .setSessionId(sessionId)\n        .setWorkerInfo(std::move(workerInfo))\n        .setWaitingForDebugger(waitingForDebugger)\n        .build();\n    // \u89e6\u53d1NodeWorker.attachedToWorker\n    m_frontendChannel-&gt;sendProtocolNotification(InternalResponse::createNotification(\"NodeWorker.attachedToWorker\", std::move(messageData)));\n}\n</code></pre> \u7ee7\u7eed\u770bsendProtocolNotification <pre><code> void sendProtocolNotification(\n      std::unique_ptr&lt;Serializable&gt; message) override {\n    sendMessageToFrontend(message-&gt;serializeToJSON());\n }\n\n void sendMessageToFrontend(const StringView&amp; message) {\n    delegate_-&gt;SendMessageToFrontend(message);\n }\n</code></pre> \u8fd9\u91cc\u7684delegate_\u662f\u4e00\u4e2aJSBindingsSessionDelegate\u5bf9\u8c61\u3002 <pre><code>   void SendMessageToFrontend(const v8_inspector::StringView&amp; message)\n        override {\n      Isolate* isolate = env_-&gt;isolate();\n      HandleScope handle_scope(isolate);\n      Context::Scope context_scope(env_-&gt;context());\n      MaybeLocal&lt;String&gt; v8string = String::NewFromTwoByte(isolate,\n                                               message.characters16(),\n                                               NewStringType::kNormal, message.length()\n      );\n      Local&lt;Value&gt; argument = v8string.ToLocalChecked().As&lt;Value&gt;();\n      // \u6536\u5230\u6d88\u606f\u6267\u884c\u56de\u8c03\n      connection_-&gt;OnMessage(argument);\n}\n// \u6267\u884cJS\u5c42\u56de\u8c03\nvoid OnMessage(Local&lt;Value&gt; value) {\n   MakeCallback(callback_.Get(env()-&gt;isolate()), 1, &amp;value);\n}\n</code></pre> JS\u5c42\u56de\u8c03\u903b\u8f91\u5982\u4e0b\u3002 <pre><code>[onMessageSymbol](message) {\n    const parsed = JSONParse(message);\n    // \u6536\u5230\u7684\u6d88\u606f\u5982\u679c\u662f\u67d0\u4e2a\u8bf7\u6c42\u7684\u54cd\u5e94\uff0c\u5219\u6709\u4e2aid\u5b57\u6bb5\u8bb0\u5f55\u4e86\u8bf7\u6c42\u5bf9\u5e94\u7684id\uff0c\u5426\u5219\u5219\u89e6\u53d1\u4e8b\u4ef6\n    if (parsed.id) {\n       const callback = this[messageCallbacksSymbol].get(parsed.id);\n       this[messageCallbacksSymbol].delete(parsed.id);\n       if (callback) {\n         callback(null, parsed.result);\n       }\n     } else {\n       this.emit(parsed.method, parsed);\n       this.emit('inspectorNotification', parsed);\n     }\n  }\n</code></pre> \u4e3b\u7ebf\u7a0b\u62ff\u5230Worker Session\u5bf9\u4e00\u4e2a\u7684id\uff0c\u540e\u7eed\u5c31\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4NodeWorker.sendMessageToWorker\u52a0\u4e0a\u8be5id\u548c\u5b50\u7ebf\u7a0b\u901a\u4fe1\u3002\u5927\u81f4\u539f\u7406\u5982\u4e0b\uff0c\u4e3b\u7ebf\u7a0b\u901a\u8fc7\u81ea\u5df1\u7684channel\u548c\u5b50\u7ebf\u7a0b\u7684channel\u8fdb\u884c\u901a\u4fe1\uff0c\u4ece\u800c\u8fbe\u5230\u63a7\u5236\u5b50\u7ebf\u7a0b\u7684\u76ee\u7684\u3002  \u6211\u4eec\u5206\u6790\u4e00\u4e0bNodeWorker.sendMessageToWorker\u547d\u4ee4\u7684\u903b\u8f91\uff0c\u5bf9\u5e94\u5904\u7406\u51fd\u6570\u4e3aDispatcherImpl::sendMessageToWorker\u3002 <pre><code>void DispatcherImpl::sendMessageToWorker(...)\n{\n    std::unique_ptr&lt;DispatcherBase::WeakPtr&gt; weak = weakPtr();\n    DispatchResponse response = m_backend-&gt;sendMessageToWorker(in_message, in_sessionId);\n    // \u54cd\u5e94\n    weak-&gt;get()-&gt;sendResponse(callId, response);\n    return;\n}\n</code></pre> \u7ee7\u7eed\u5206\u6790m_backend-&gt;sendMessageToWorker\u3002 <pre><code>DispatchResponse WorkerAgent::sendMessageToWorker(const String&amp; message,\n                                                  const String&amp; sessionId) {\n  workers_-&gt;Receive(sessionId, message);\n  return DispatchResponse::OK();\n}\n\nvoid NodeWorkers::Receive(const std::string&amp; id, const std::string&amp; message) {\n  auto it = sessions_.find(id);\n  it-&gt;second-&gt;Dispatch(Utf8ToStringView(message)-&gt;string());\n}\n</code></pre> sessions_\u5bf9\u5e94\u7684\u662f\u548c\u5b50\u7ebf\u7a0b\u7684\u901a\u4fe1\u7684\u6570\u636e\u7ed3\u6784CrossThreadInspectorSession\u3002\u770b\u4e00\u4e0b\u8be5\u5bf9\u8c61\u7684Dispatch\u65b9\u6cd5\u3002 <pre><code>void Dispatch(const StringView&amp; message) override {\n    state_.Call(&amp;MainThreadSessionState::Dispatch,\n                StringBuffer::create(message));\n}\n</code></pre> \u518d\u6b21\u8c03\u4e86MainThreadSessionState::Dispatch</p> <p><pre><code>void Dispatch(std::unique_ptr&lt;StringBuffer&gt; message) {\n    session_-&gt;Dispatch(message-&gt;string());\n}\n</code></pre> session_\u662fSameThreadInspectorSession\u5bf9\u8c61\u3002\u7ee7\u7eed\u770b\u5b83\u7684Dispatch\u65b9\u6cd5\u3002</p> <p><pre><code>void SameThreadInspectorSession::Dispatch(\n    const v8_inspector::StringView&amp; message) {\n  auto client = client_.lock();\n  client-&gt;dispatchMessageFromFrontend(session_id_, message);\n}\n\nvoid dispatchMessageFromFrontend(int session_id, const StringView&amp; message) {\n    channels_[session_id]-&gt;dispatchProtocolMessage(message);\n}\n</code></pre> \u901a\u8fc7\u5c42\u5c42\u8c03\u7528\uff0c\u6700\u7ec8\u62ff\u5230\u4e86\u4e00\u4e2a\u5408\u5b50\u7ebf\u7a0b\u901a\u4fe1\u7684channel\uff0cdispatchProtocolMessage\u65b9\u6cd5\u521a\u624d\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u8be5\u65b9\u6cd5\u4f1a\u6839\u636e\u547d\u4ee4\u505a\u4e0d\u540c\u7684\u5904\u7406\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd9\u91cc\u53d1\u9001\u7684\u662fV8\u5185\u7f6e\u7684\u547d\u4ee4\uff0c\u6240\u4ee5\u4f1a\u4ea4\u7ed9V8 Inspector\u5904\u7406\u3002\u5f53V8 Inspector\u5904\u7406\u5b8c\u540e\uff0c\u4f1a\u901a\u8fc7ChannelImpl\u7684sendResponse\u8fd4\u56de\u7ed3\u679c\u3002 <pre><code>void sendResponse(\n      int callId,\n      std::unique_ptr&lt;v8_inspector::StringBuffer&gt; message) override {\n    sendMessageToFrontend(message-&gt;string());\n}\n\n void sendMessageToFrontend(const StringView&amp; message) {\n    delegate_-&gt;SendMessageToFrontend(message);\n  }\n</code></pre> \u8fd9\u91cc\u7684delegate_\u662fParentInspectorSessionDelegate\u5bf9\u8c61\u3002 <pre><code>void SendMessageToFrontend(const v8_inspector::StringView&amp; msg) override {\n  std::string message = protocol::StringUtil::StringViewToUtf8(msg);\n  workers_-&gt;Send(id_, message);\n}\n\nvoid NodeWorkers::Send(const std::string&amp; id, const std::string&amp; message) {\n  auto frontend = frontend_.lock();\n  if (frontend)\n    frontend-&gt;receivedMessageFromWorker(id, message);\n}\n\nvoid Frontend::receivedMessageFromWorker(const String&amp; sessionId, const String&amp; message)\n{\n    std::unique_ptr&lt;ReceivedMessageFromWorkerNotification&gt; messageData = ReceivedMessageFromWorkerNotification::create()\n        .setSessionId(sessionId)\n        .setMessage(message)\n        .build();\n // \u89e6\u53d1NodeWorker.receivedMessageFromWorker       \n    m_frontendChannel-&gt;sendProtocolNotification(InternalResponse::createNotification(\"NodeWorker.receivedMessageFromWorker\", std::move(messageData)));\n}\n</code></pre> m_frontendChannel\u662f\u4e3b\u7ebf\u7a0b\u7684ChannelImpl\u5bf9\u8c61\u3002 <pre><code>void sendProtocolNotification(\n    std::unique_ptr&lt;Serializable&gt; message) override {\n    sendMessageToFrontend(message-&gt;serializeToJSON());\n}\n\nvoid sendMessageToFrontend(const StringView&amp; message) {\n    delegate_-&gt;SendMessageToFrontend(message);\n}\n</code></pre> delegate_\u662fC++\u5c42\u4f20\u5165\u7684JSBindingsSessionDelegate\u5bf9\u8c61\u3002\u6700\u7ec8\u901a\u8fc7JSBindingsSessionDelegate\u5bf9\u8c61\u56de\u8c03JS\u5c42\uff0c\u4e4b\u524d\u5df2\u7ecf\u5206\u6790\u8fc7\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002\u81f3\u6b64\uff0c\u4e3b\u7ebf\u7a0b\u5c31\u5177\u5907\u4e86\u63a7\u5236\u5b50\u7ebf\u7a0b\u7684\u80fd\u529b\uff0c\u4f46\u662f\u63a7\u5236\u65b9\u5f0f\u6709\u5f88\u591a\u79cd\u3002</p>"},{"location":"chapter25-Node.js%E5%AD%90%E7%BA%BF%E7%A8%8B%E8%B0%83%E8%AF%95%E5%92%8C%E8%AF%8A%E6%96%AD%E6%8C%87%E5%8D%97/#21-v8","title":"2.1 \u4f7f\u7528\u901a\u7528\u7684V8\u547d\u4ee4","text":"<p>\u901a\u8fc7\u4e0b\u9762\u4ee3\u7801\u6536\u96c6\u5b50\u7ebf\u7a0b\u7684CPU Profile\u4fe1\u606f\u3002 <pre><code>const { Worker, workerData } = require('worker_threads');\nconst { Session } = require('inspector');\nconst session = new Session();\nsession.connect();\nlet id = 1;\nfunction post(sessionId, method, params, callback) {\n    session.post('NodeWorker.sendMessageToWorker', {\n        sessionId,\n        message: JSON.stringify({ id: id++, method, params })\n    }, callback);\n}\nsession.on('NodeWorker.attachedToWorker', (data) =&gt; {\n    post(data.params.sessionId, 'Profiler.enable');\n    post(data.params.sessionId, 'Profiler.start');\n    // \u6536\u96c6\u4e00\u6bb5\u65f6\u95f4\u540e\u63d0\u4ea4\u505c\u6b62\u6536\u96c6\u547d\u4ee4\n    setTimeout(() =&gt; {\n        post(data.params.sessionId, 'Profiler.stop');\n    }, 10000)\n});\nsession.on('NodeWorker.receivedMessageFromWorker', ({ params: { message }}) =&gt; { \n    const data = JSON.parse(message);\n    console.log(data);\n});\n\nconst worker = new Worker('./httpServer.js', {workerData: {port: 80}}); \nworker.on('online', () =&gt; {\n    session.post(\"NodeWorker.enable\",{waitForDebuggerOnStart: false},  (err) =&gt; {  console.log(err, \"NodeWorker.enable\");});\n});\nsetInterval(() =&gt; {}, 100000);\n</code></pre> \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u63a7\u5236\u5b50\u7ebf\u7a0b\u7684\u8c03\u8bd5\u548c\u6570\u636e\u6536\u96c6\u3002</p>"},{"location":"chapter25-Node.js%E5%AD%90%E7%BA%BF%E7%A8%8B%E8%B0%83%E8%AF%95%E5%92%8C%E8%AF%8A%E6%96%AD%E6%8C%87%E5%8D%97/#22","title":"2.2 \u5728\u5b50\u7ebf\u7a0b\u4e2d\u52a8\u6001\u6267\u884c\u811a\u672c","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u811a\u672c\u5f00\u542f\u5b50\u7ebf\u7a0b\u7684WebSocket\u670d\u52a1\uff0c\u50cf\u8c03\u8bd5\u4e3b\u7ebf\u7a0b\u4e00\u6837\u3002 <pre><code>const { Worker, workerData } = require('worker_threads');\nconst { Session } = require('inspector');\nconst session = new Session();\nsession.connect();\nlet workerSessionId;\nlet id = 1;\nfunction post(method, params) {\n    session.post('NodeWorker.sendMessageToWorker', {\n        sessionId: workerSessionId,\n        message: JSON.stringify({ id: id++, method, params })\n    });\n}\nsession.on('NodeWorker.receivedMessageFromWorker', ({ params: { message }}) =&gt; { \n    const data = JSON.parse(message);\n    console.log(data);\n});\n\nsession.on('NodeWorker.attachedToWorker', (data) =&gt; {\n    workerSessionId = data.params.sessionId;\n    post(\"Runtime.evaluate\", {\n        includeCommandLineAPI: true, \n        expression: `const inspector = process.binding('inspector');\n                    inspector.open();\n                    inspector.url();\n                    `\n        } \n    );\n});\n\nconst worker = new Worker('./httpServer.js', {workerData: {port: 80}}); \nworker.on('online', () =&gt; {\n    session.post(\"NodeWorker.enable\",{waitForDebuggerOnStart: false},  (err) =&gt; {  err &amp;&amp; console.log(\"NodeWorker.enable\", err);});\n});\n\nsetInterval(() =&gt; {}, 100000);\n</code></pre> \u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\u5c31\u62ff\u5230\u4ee5\u4e0b\u8f93\u51fa <pre><code>{\n  id: 1,\n  result: {\n    result: {\n      type: 'string',\n      value: 'ws://127.0.0.1:9229/c0ca16c8-55aa-4651-9776-fca1b27fc718'\n    }\n  }\n}\n</code></pre> \u901a\u8fc7\u8be5\u5730\u5740\uff0c\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u5bf9\u5b50\u7ebf\u7a0b\u8fdb\u884c\u8c03\u8bd5\u4e86\u3002\u4e0a\u9762\u4ee3\u7801\u91cc\u4f7f\u7528process.binding\u800c\u4e0d\u662frequire\u52a0\u8f7dinspector\uff0c\u56e0\u4e3a\u521a\u624d\u901a\u8fc7NodeWorker.enable\u547d\u4ee4\u4e3a\u5b50\u7ebf\u7a0b\u521b\u5efa\u4e86\u4e00\u4e2a\u5230\u5b50\u7ebf\u7a0bInspector\u7684channel\uff0c\u800cJS\u6a21\u5757\u91cc\u5224\u65ad\u5982\u679cchannel\u975e\u7a7a\u5219\u62a5\u9519Inspector\u5df2\u7ecf\u6253\u5f00\u3002\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u7ed5\u8fc7\u8fd9\u4e2a\u9650\u5236\uff0c\u76f4\u63a5\u52a0\u8f7dC++\u6a21\u5757\u5f00\u542fWebSocket\u670d\u52a1\u5668\u3002</p>"},{"location":"chapter25-Node.js%E5%AD%90%E7%BA%BF%E7%A8%8B%E8%B0%83%E8%AF%95%E5%92%8C%E8%AF%8A%E6%96%AD%E6%8C%87%E5%8D%97/#3","title":"3 \u5b50\u7ebf\u7a0b\u8c03\u8bd5\u4e3b\u7ebf\u7a0b","text":"<p>\u4e0d\u4ec5\u53ef\u4ee5\u901a\u8fc7\u4e3b\u7ebf\u7a0b\u8c03\u8bd5\u5b50\u7ebf\u7a0b\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5b50\u7ebf\u7a0b\u8c03\u8bd5\u4e3b\u7ebf\u7a0b\u3002Node.js\u5728\u5b50\u7ebf\u7a0b\u66b4\u9732\u4e86connectToMainThread\u65b9\u6cd5\u8fde\u63a5\u5230\u4e3b\u7ebf\u7a0b\u7684Inspector\uff08\u53ea\u80fd\u5728work_threads\u4e2d\u4f7f\u7528\uff09\uff0c\u5b9e\u73b0\u7684\u539f\u7406\u548c\u4e4b\u524d\u5206\u6790\u7684\u7c7b\u4f3c\uff0c\u4e3b\u8981\u662f\u5b50\u7ebf\u7a0b\u8fde\u63a5\u5230\u4e3b\u7ebf\u7a0b\u7684V8 Inspector\uff0c\u901a\u8fc7\u548c\u8be5Inspector\u5b8c\u6210\u5bf9\u4e3b\u7ebf\u7a0b\u7684\u63a7\u5236\u3002\u770b\u4e0b\u9762\u4e00\u4e2a\u4f8b\u5b50\u3002 \u4e3b\u7ebf\u7a0b\u4ee3\u7801 <pre><code>const { Worker, workerData } = require('worker_threads');\nconst http = require('http');\n\nconst worker = new Worker('./worker.js', {workerData: {port: 80}});\n\nhttp.createServer((_, res) =&gt; {\n    res.end('main');\n}).listen(8000);\n</code></pre> worker.js\u4ee3\u7801\u5982\u4e0b <pre><code>const fs = require('fs');\nconst { workerData: { port } } = require('worker_threads');\nconst { Session } = require('inspector');\nconst session = new Session();\nsession.connectToMainThread();\nsession.post('Profiler.enable');\nsession.post('Profiler.start');\nsetTimeout(() =&gt; {\n    session.post('Profiler.stop', (err, data) =&gt; {\n        if (data.profile) {\n            fs.writeFileSync('./profile.cpuprofile', JSON.stringify(data.profile));\n        }\n    });\n}, 5000)\n</code></pre></p>"},{"location":"chapter26-vscode%E8%B0%83%E8%AF%95Node.js/","title":"26-vscode\u8c03\u8bd5Node.js","text":"<p>\u524d\u8a00\uff1a\u8c03\u8bd5\u4ee3\u7801\u4e0d\u7ba1\u5bf9\u4e8e\u5f00\u53d1\u8fd8\u662f\u5b66\u4e60\u6e90\u7801\u90fd\u662f\u975e\u5e38\u91cd\u8981\u7684\u6280\u80fd\uff0c\u672c\u6587\u7b80\u5355\u4ecb\u7ecdvscode\u8c03\u8bd5Node.js\u76f8\u5173\u4ee3\u7801\u7684\u8c03\u8bd5\u6280\u5de7\u3002</p>"},{"location":"chapter26-vscode%E8%B0%83%E8%AF%95Node.js/#1-js","title":"1 \u8c03\u8bd5\u4e1a\u52a1JS","text":"<p>\u8c03\u8bd5\u4e1a\u52a1JS\u53ef\u80fd\u662f\u666e\u904d\u7684\u573a\u666f\uff0c\u968f\u7740Node.js\u548c\u8c03\u8bd5\u5de5\u5177\u7684\u6210\u719f\uff0c\u8c03\u8bd5\u4e5f\u53d8\u5f97\u8d8a\u6765\u8d8a\u7b80\u5355\u3002\u4e0b\u9762\u662fvscode\u7684lauch.json\u914d\u7f6e\u3002 <pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"node\",\n            \"request\": \"attach\",\n            \"name\": \"Attact Program\",\n            \"port\": 9229\n        }\n    ]\n}\n</code></pre> 1 \u5728JS\u91cc\u8bbe\u7f6e\u65ad\u70b9\uff0c\u6267\u884cnode --inspect index.js \u542f\u52a8\u8fdb\u7a0b\uff0c\u4f1a\u8f93\u51fa\u8c03\u8bd5\u5730\u5740\u3002  2 \u70b9\u51fb\u866b\u5b50\uff0c\u7136\u540e\u70b9\u51fb\u7eff\u8272\u7684\u4e09\u89d2\u5f62\u3002 3 vscode\u4f1a\u8fde\u63a5Node.js\u7684WebSocket\u670d\u52a1\u3002 4 \u5f00\u59cb\u8c03\u8bd5\uff08\u6216\u8005\u4f7f\u7528Chrome Dev Tools\u8c03\u8bd5\uff09\u3002</p>"},{"location":"chapter26-vscode%E8%B0%83%E8%AF%95Node.js/#2-addonc","title":"2 \u8c03\u8bd5Addon\u7684C++","text":"<p>\u5199Addon\u7684\u573a\u666f\u53ef\u80fd\u4e0d\u591a\uff0c\u4f46\u662f\u5f53\u4f60\u9700\u8981\u7684\u65f6\u5019\uff0c\u4f60\u5c31\u4f1a\u9700\u8981\u8c03\u8bd5\u5b83\u3002\u4e0b\u9762\u7684\u914d\u7f6e\u53ea\u53ef\u4ee5\u8c03\u8bd5C++\u4ee3\u7801\u3002 <pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug node C++ addon\",\n            \"type\": \"lldb\",\n            \"request\": \"launch\",\n            \"program\": \"node\",\n            \"args\": [\"${workspaceFolder}/node-addon-examples/1_hello_world/napi/hello.js\"],\n            \"cwd\": \"${workspaceFolder}/node-addon-examples/1_hello_world/napi\"\n        },\n    ]\n}\n</code></pre> 1 \u5728C++\u4ee3\u7801\u8bbe\u7f6e\u65ad\u70b9\u3002  2 \u6267\u884cnode-gyp configure &amp;&amp; node-gyp build --debug\u7f16\u8bd1debug\u7248\u672c\u7684Addon\u3002 3 JS\u91cc\u52a0\u8f7ddebug\u7248\u672c\u7684Addon\u3002  4 \u70b9\u51fb\u5c0f\u866b\u5b50\u5f00\u59cb\u8c03\u8bd5\u3002 </p>"},{"location":"chapter26-vscode%E8%B0%83%E8%AF%95Node.js/#3-addoncjs","title":"3 \u8c03\u8bd5Addon\u7684C++\u548cJS","text":"<p>Addon\u901a\u5e38\u9700\u8981\u901a\u8fc7JS\u66b4\u9732\u51fa\u6765\u4f7f\u7528\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u8c03\u8bd5C++\u548cJS\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\u3002 <pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug node C++ addon\",\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/node-addon-examples/1_hello_world/napi/hello.js\",\n            \"cwd\": \"${workspaceFolder}/node-addon-examples/1_hello_world/napi\"\n        },\n        {\n            \"name\": \"Attach node C/C++ Addon\",\n            \"type\": \"lldb\",\n            \"request\": \"attach\",\n            \"pid\": \"${command:pickMyProcess}\"  \n        }\n    ]\n}\n</code></pre> \u548c2\u7684\u8fc7\u7a0b\u7c7b\u4f3c\uff0c\u70b9\u4e09\u89d2\u5f62\u5f00\u59cb\u8c03\u8bd5\uff0c\u518d\u9009\u62e9Attach node C/C++ Addon\uff0c\u7136\u540e\u518d\u6b21\u70b9\u51fb\u4e09\u89d2\u5f62\u3002 \u9009\u62e9attach\u5230hello.js\u4e2d\u3002  \u5f00\u59cb\u8c03\u8bd5\u3002</p>"},{"location":"chapter26-vscode%E8%B0%83%E8%AF%95Node.js/#4-nodejsc","title":"4 \u8c03\u8bd5Node.js\u6e90\u7801C++","text":"<p>\u6211\u4eec\u4e0d\u4ec5\u7528Node.js\uff0c\u6211\u4eec\u53ef\u80fd\u8fd8\u4f1a\u5b66\u4e60Node.js\u6e90\u7801\uff0c\u5b66\u4e60\u6e90\u7801\u7684\u65f6\u5019\u5c31\u5c11\u4e0d\u4e86\u8c03\u8bd5\u3002\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u5f0f\u8c03\u8bd5Node.js\u7684C++\u6e90\u7801\u3002 <pre><code>./configure --debug &amp;&amp; make\n</code></pre> \u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e <pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"(lldb) \u542f\u52a8\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/out/Debug/node\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${fileDirname}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"lldb\"\n        }\n    ]\n}\n</code></pre> \u5728node_main.cc\u7684main\u51fd\u6570\u6216\u4efb\u4f55C++\u4ee3\u7801\u91cc\u6253\u65ad\u70b9\uff0c\u70b9\u51fb\u5c0f\u866b\u5b50\u5f00\u59cb\u8c03\u8bd5\u3002</p>"},{"location":"chapter26-vscode%E8%B0%83%E8%AF%95Node.js/#5-nodejscjs","title":"5 \u8c03\u8bd5Node.js\u6e90\u7801C++\u548cJS\u4ee3\u7801","text":"<p>Node.js\u7684\u6e90\u7801\u4e0d\u4ec5\u4ec5\u6709C++\uff0c\u8fd8\u6709JS\uff0c\u5982\u679c\u6211\u4eec\u60f3\u540c\u65f6\u8c03\u8bd5\uff0c\u90a3\u4e48\u5c31\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\u3002 <pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"(lldb) \u542f\u52a8\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/out/Debug/node\",\n            \"args\": [\"--inspect-brk\", \"${workspaceFolder}/out/Debug/index.js\"],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${fileDirname}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"lldb\"\n        }\n    ]\n}\n</code></pre> 1 \u70b9\u51fb\u8c03\u8bd5\u3002  2 \u5728vscode\u8c03\u8bd5C++\uff0c\u6267\u884c\u5b8cNode.js\u542f\u52a8\u7684\u6d41\u7a0b\u540e\u4f1a\u8f93\u51fa\u8c03\u8bd5JS\u7684\u5730\u5740\u3002  3 \u5728\u6d4f\u89c8\u5668\u8fde\u63a5WebSocket\u670d\u52a1\u8c03\u8bd5JS\u3002  </p>"},{"location":"chapter27-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Node.js%20%E7%9A%84%20Buffer/","title":"27-\u6df1\u5165\u7406\u89e3 Node.js \u7684 Buffer","text":"<p>\u524d\u8a00\uff1aBuffer \u6a21\u5757\u662f Node.js \u975e\u5e38\u91cd\u8981\u7684\u6a21\u5757\uff0c\u5f88\u591a\u6a21\u5757\u90fd\u4f9d\u8d56\u5b83\uff0c\u672c\u6587\u4ecb\u7ecd\u4e00\u4e0b Buffer \u6a21\u5757\u5e95\u5c42\u7684\u539f\u7406\uff0c\u5305\u62ec Buffer \u7684\u6838\u5fc3\u5b9e\u73b0\u548c V8 \u5806\u5916\u5185\u5b58\u7b49\u5185\u5bb9\u3002</p>"},{"location":"chapter27-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Node.js%20%E7%9A%84%20Buffer/#1-buffer","title":"1 Buffer \u7684\u5b9e\u73b0","text":""},{"location":"chapter27-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Node.js%20%E7%9A%84%20Buffer/#11-buffer-js","title":"1.1 Buffer \u7684 JS \u5c42\u5b9e\u73b0","text":"<p>Buffer \u6a21\u5757\u7684\u5b9e\u73b0\u867d\u7136\u975e\u5e38\u590d\u6742\uff0c\u4ee3\u7801\u4e5f\u975e\u5e38\u591a\uff0c\u4f46\u662f\u5f88\u591a\u90fd\u662f\u7f16\u7801\u89e3\u7801\u4ee5\u53ca\u5185\u5b58\u5206\u914d\u7ba1\u7406\u7684\u903b\u8f91\uff0c\u6211\u4eec\u4ece\u5e38\u7528\u7684\u4f7f\u7528\u65b9\u5f0f Buffer.from \u6765\u770b\u770b Buffer \u7684\u6838\u5fc3\u5b9e\u73b0\u3002 <pre><code>Buffer.from = function from(value, encodingOrOffset, length) {\n  return fromString(value, encodingOrOffset);\n};\n\nfunction fromString(string, encoding) {\n  return fromStringFast(string, ops);\n}\n\nfunction fromStringFast(string, ops) {\n  const length = ops.byteLength(string);\n  // \u957f\u5ea6\u592a\u957f\uff0c\u4ece C++ \u5c42\u5206\u914d\n  if (length &gt;= (Buffer.poolSize &gt;&gt;&gt; 1))\n    return createFromString(string, ops.encodingVal);\n  // \b\u5269\u4e0b\u7684\u4e0d\u591f\u4e86\uff0c\u6269\u5bb9 \n  if (length &gt; (poolSize - poolOffset))\n    createPool();\n  // \u4ece allocPool \uff08ArrayBuffer\uff09\u4e2d\u5206\u914d\u5185\u5b58\n  let b = new FastBuffer(allocPool, poolOffset, length);\n  const actual = ops.write(b, string, 0, length);\n  poolOffset += actual;\n  alignPool();\n  return b;\n}\n</code></pre> from \u7684\u903b\u8f91\u5982\u4e0b\uff1a 1. \u5982\u679c\u957f\u5ea6\u5927\u4e8e Node.js \u8bbe\u7f6e\u7684\u9608\u503c\uff0c\u5219\u8c03\u7528 createFromString \u901a\u8fc7 C++ \u5c42\u76f4\u63a5\u5206\u914d\u5185\u5b58\u3002 2. \u5426\u5219\u5224\u65ad\u4e4b\u524d\u5269\u4e0b\u7684\u5185\u5b58\u662f\u5426\u8db3\u591f\uff0c\u8db3\u591f\u5219\u76f4\u63a5\u5206\u914d\u3002Node.js \u521d\u59cb\u5316\u65f6\u4f1a\u9996\u5148\u5206\u914d\u4e00\u5927\u5757\u5185\u5b58\u7531 JS \u7ba1\u7406\uff0c\u6bcf\u6b21\u4ece\u8fd9\u5757\u5185\u5b58\u4e86\u5207\u5206\u4e00\u90e8\u5206\u7ed9\u4f7f\u7528\u65b9\uff0c\u5982\u679c\u4e0d\u591f\u5219\u6269\u5bb9\u3002 \u6211\u4eec\u770b\u770b createPool\u3002 <pre><code>// \u5206\u914d\u4e00\u4e2a\u5185\u5b58\u6c60\nfunction createPool() {\n  poolSize = Buffer.poolSize;\n  // \u62ff\u5230\u5e95\u5c42\u7684 ArrayBuffer\n  allocPool = createUnsafeBuffer(poolSize).buffer;\n  poolOffset = 0;\n}\n\nfunction createUnsafeBuffer(size) {\n  zeroFill[0] = 0;\n  try {\n    return new FastBuffer(size);\n  } finally {\n    zeroFill[0] = 1;\n  }\n}\n\nclass FastBuffer extends Uint8Array {}\n</code></pre> \u6211\u4eec\u770b\u5230\u6700\u7ec8\u8c03\u7528 Uint8Array \u5b9e\u73b0\u4e86\u5185\u5b58\u5206\u914d\u3002 3. \u901a\u8fc7 new FastBuffer(allocPool, poolOffset, length) \u4ece\u5185\u5b58\u6c60\u4e2d\u5206\u914d\u4e00\u5757\u5185\u5b58\u3002\u5982\u4e0b\u56fe\u6240\u793a\u3002 </p>"},{"location":"chapter27-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Node.js%20%E7%9A%84%20Buffer/#12-buffer-c","title":"1.2 Buffer \u7684 C++ \u5c42\u5b9e\u73b0","text":"<p>\u5206\u6790 C++ \u5c42\u4e4b\u524d\u6211\u4eec\u5148\u770b\u4e00\u4e0b V8 \u91cc\u4e0b\u9762\u51e0\u4e2a\u5bf9\u8c61\u7684\u5173\u7cfb\u56fe\u3002 \u63a5\u7740\u6765\u770b\u770b\u901a\u8fc7 createFromString \u76f4\u63a5\u4ece C++ \u7533\u8bf7\u5185\u5b58\u7684\u5b9e\u73b0\u3002 <pre><code>void CreateFromString(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  enum encoding enc = static_cast&lt;enum encoding&gt;(args[1].As&lt;Int32&gt;()-&gt;Value());\n  Local&lt;Object&gt; buf;\n  if (New(args.GetIsolate(), args[0].As&lt;String&gt;(), enc).ToLocal(&amp;buf))\n    args.GetReturnValue().Set(buf);\n}\n\nMaybeLocal&lt;Object&gt; New(Isolate* isolate,\n                       Local&lt;String&gt; string,\n                       enum encoding enc) {\n  EscapableHandleScope scope(isolate);\n\n  size_t length;\n  // \u8ba1\u7b97\u957f\u5ea6\n  if (!StringBytes::Size(isolate, string, enc).To(&amp;length))\n    return Local&lt;Object&gt;();\n  size_t actual = 0;\n  char* data = nullptr;\n  // \u76f4\u63a5\u901a\u8fc7 realloc \u5728\u8fdb\u7a0b\u5806\u4e0a\u7533\u8bf7\u4e00\u5757\u5185\u5b58\n  data = UncheckedMalloc(length);\n  // \u6309\u7167\u7f16\u7801\u8f6c\u6362\u6570\u636e\n  actual = StringBytes::Write(isolate, data, length, string, enc);\n  return scope.EscapeMaybe(New(isolate, data, actual));\n}\n\nMaybeLocal&lt;Object&gt; New(Isolate* isolate, char* data, size_t length) {\n  EscapableHandleScope handle_scope(isolate);\n  Environment* env = Environment::GetCurrent(isolate);\n  Local&lt;Object&gt; obj;\n  if (Buffer::New(env, data, length).ToLocal(&amp;obj))\n    return handle_scope.Escape(obj);\n  return Local&lt;Object&gt;();\n}\n\nMaybeLocal&lt;Object&gt; New(Environment* env,\n                       char* data,\n                       size_t length) {\n  // JS \u5c42\u53d8\u91cf\u91ca\u653e\u540e\u4f7f\u5f97\u8fd9\u5757\u5185\u5b58\u6ca1\u4eba\u7528\u4e86\uff0cGC \u65f6\u5728\u56de\u8c03\u91cc\u91ca\u653e\u8fd9\u5757\u5185\u5b58               \n  auto free_callback = [](char* data, void* hint) { free(data); };\n  return New(env, data, length, free_callback, nullptr);\n}\n\nMaybeLocal&lt;Object&gt; New(Environment* env,\n                       char* data,\n                       size_t length,\n                       FreeCallback callback,\n                       void* hint) {\n  EscapableHandleScope scope(env-&gt;isolate());\n  // \u521b\u5efa\u4e00\u4e2a ArrayBuffer\n  Local&lt;ArrayBuffer&gt; ab =\n      CallbackInfo::CreateTrackedArrayBuffer(env, data, length, callback, hint);\n  /* \n    \u521b\u5efa\u4e00\u4e2a Uint8Array \n    Buffer::New =&gt; Local&lt;Uint8Array&gt; ui = Uint8Array::New(ab, byte_offset, length)\n  */\n  MaybeLocal&lt;Uint8Array&gt; maybe_ui = Buffer::New(env, ab, 0, length);\n\n  Local&lt;Uint8Array&gt; ui;\n  if (!maybe_ui.ToLocal(&amp;ui))\n    return MaybeLocal&lt;Object&gt;();\n\n  return scope.Escape(ui);\n}\n</code></pre> \u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u8c03\u7528\uff0c\u6700\u540e\u901a\u8fc7 CreateTrackedArrayBuffer \u521b\u5efa\u4e86\u4e00\u4e2a ArrayBuffer\uff0c\u518d\u901a\u8fc7 ArrayBuffer \u521b\u5efa\u4e86\u4e00\u4e2a Uint8Array\u3002\u63a5\u7740\u770b\u4e00\u4e0b CreateTrackedArrayBuffer \u7684\u5b9e\u73b0\u3002 <pre><code>Local&lt;ArrayBuffer&gt; CallbackInfo::CreateTrackedArrayBuffer(\n    Environment* env,\n    char* data,\n    size_t length,\n    FreeCallback callback,\n    void* hint) {\n  // \u7ba1\u7406\u56de\u8c03\n  CallbackInfo* self = new CallbackInfo(env, callback, data, hint);\n  // \u7528\u81ea\u5df1\u7533\u8bf7\u7684\u5185\u5b58\u521b\u5efa\u4e00\u4e2a BackingStore\uff0c\u5e76\u8bbe\u7f6e GC \u56de\u8c03\n  std::unique_ptr&lt;BackingStore&gt; bs =\n      ArrayBuffer::NewBackingStore(data, length, [](void*, size_t, void* arg) {\n        static_cast&lt;CallbackInfo*&gt;(arg)-&gt;OnBackingStoreFree();\n      }, self);\n  // \u901a\u8fc7 BackingStore \u521b\u5efa ArrayBuffer\n  Local&lt;ArrayBuffer&gt; ab = ArrayBuffer::New(env-&gt;isolate(), std::move(bs));\n  return ab;\n}\n</code></pre> \u770b\u4e00\u4e0b NewBackingStore \u7684\u5b9e\u73b0\u3002 <pre><code>std::unique_ptr&lt;v8::BackingStore&gt; v8::ArrayBuffer::NewBackingStore(\n    void* data, size_t byte_length, v8::BackingStore::DeleterCallback deleter,\n    void* deleter_data) {\n  std::unique_ptr&lt;i::BackingStoreBase&gt; backing_store = i::BackingStore::WrapAllocation(data, byte_length, deleter, deleter_data,\n                                      i::SharedFlag::kNotShared);\n  return std::unique_ptr&lt;v8::BackingStore&gt;(\n      static_cast&lt;v8::BackingStore*&gt;(backing_store.release()));\n}\n\nstd::unique_ptr&lt;BackingStore&gt; BackingStore::WrapAllocation(\n    void* allocation_base, size_t allocation_length,\n    v8::BackingStore::DeleterCallback deleter, void* deleter_data,\n    SharedFlag shared) {\n  bool is_empty_deleter = (deleter == v8::BackingStore::EmptyDeleter);\n  // \u65b0\u5efa\u4e00\u4e2a BackingStore \n  auto result = new BackingStore(allocation_base,    // start\n                                 allocation_length,  // length\n                                 allocation_length,  // capacity\n                                 shared,             // shared\n                                 false,              // is_wasm_memory\n                                 true,               // free_on_destruct\n                                 false,              // has_guard_regions\n                                 // \u8bf4\u660e\u91ca\u653e\u5185\u5b58\u7531\u8c03\u7528\u65b9\u6267\u884c\n                                 true,               // custom_deleter\n                                 is_empty_deleter);  // empty_deleter\n  // \u4fdd\u5b58\u56de\u8c03\u9700\u8981\u7684\u4fe1\u606f                               \n  result-&gt;type_specific_data_.deleter = {deleter, deleter_data};\n  return std::unique_ptr&lt;BackingStore&gt;(result);\n}\n</code></pre> NewBackingStore \u6700\u7ec8\u662f\u521b\u5efa\u4e86\u4e00\u4e2a BackingStore \u5bf9\u8c61\u3002\u6211\u4eec\u518d\u770b\u4e00\u4e0b GC \u65f6 BackingStore \u7684\u6790\u6784\u51fd\u6570\u91cc\u90fd\u505a\u4e86\u4ec0\u4e48\u3002 <pre><code>BackingStore::~BackingStore() {\n  if (custom_deleter_) {\n    type_specific_data_.deleter.callback(buffer_start_, byte_length_,\n                                         type_specific_data_.deleter.data);\n    Clear();\n    return;\n  }\n}\n</code></pre> \u6790\u6784\u7684\u65f6\u5019\u4f1a\u6267\u884c\u521b\u5efa BackingStore \u65f6\u4fdd\u5b58\u7684\u56de\u8c03\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u7ba1\u7406\u56de\u8c03\u7684 CallbackInfo \u7684\u5b9e\u73b0\u3002 <pre><code>CallbackInfo::CallbackInfo(Environment* env,\n                           FreeCallback callback,\n                           char* data,\n                           void* hint)\n    : callback_(callback),\n      data_(data),\n      hint_(hint),\n      env_(env) {\n  env-&gt;AddCleanupHook(CleanupHook, this);\n  env-&gt;isolate()-&gt;AdjustAmountOfExternalAllocatedMemory(sizeof(*this));\n}\n</code></pre> CallbackInfo \u7684\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u7684\u5730\u65b9\u662f AdjustAmountOfExternalAllocatedMemory\u3002\u8be5\u51fd\u6570\u544a\u8bc9 V8 \u5806\u5916\u5185\u5b58\u589e\u52a0\u4e86\u591a\u5c11\u4e2a\u5b57\u8282\uff0cV8 \u4f1a\u6839\u636e\u5185\u5b58\u7684\u6570\u636e\u505a\u9002\u5f53\u7684 GC\u3002CallbackInfo \u4e3b\u8981\u662f\u4fdd\u5b58\u4e86\u56de\u8c03\u548c\u5185\u5b58\u5730\u5740\u3002\u63a5\u7740\u5728 GC \u7684\u65f6\u5019\u4f1a\u56de\u8c03 CallbackInfo \u7684 OnBackingStoreFree\u3002 <pre><code>void CallbackInfo::OnBackingStoreFree() {\n  std::unique_ptr&lt;CallbackInfo&gt; self { this };\n  Mutex::ScopedLock lock(mutex_);\n  // check \u9636\u6bb5\u6267\u884c CallAndResetCallback\n  env_-&gt;SetImmediateThreadsafe([self = std::move(self)](Environment* env) {\n    self-&gt;CallAndResetCallback();\n  });\n}\n\nvoid CallbackInfo::CallAndResetCallback() {\n  FreeCallback callback;\n  {\n    Mutex::ScopedLock lock(mutex_);\n    callback = callback_;\n    callback_ = nullptr;\n  }\n  if (callback != nullptr) {\n    // \u5806\u5916\u5185\u5b58\u51cf\u5c11\u4e86\u8fd9\u4e48\u591a\u4e2a\u5b57\u8282\n    int64_t change_in_bytes = -static_cast&lt;int64_t&gt;(sizeof(*this));\n    env_-&gt;isolate()-&gt;AdjustAmountOfExternalAllocatedMemory(change_in_bytes);\n    // \u6267\u884c\u56de\u8c03\uff0c\u901a\u5e38\u662f\u91ca\u653e\u5185\u5b58\n    callback(data_, hint_);\n  }\n}\n</code></pre></p>"},{"location":"chapter27-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Node.js%20%E7%9A%84%20Buffer/#13-buffer-c","title":"1.3 Buffer C++ \u5c42\u7684\u53e6\u4e00\u79cd\u5b9e\u73b0","text":"<p>\u521a\u624d\u4ecb\u7ecd\u7684 C++ \u5b9e\u73b0\u4e2d\u5185\u5b58\u662f\u7531\u81ea\u5df1\u5206\u914d\u5e76\u91ca\u653e\u7684\uff0c\u4e0b\u9762\u4ecb\u7ecd\u53e6\u4e00\u79cd\u5185\u5b58\u7684\u5206\u914d\u548c\u91ca\u653e\u7531 V8 \u7ba1\u7406\u7684\u573a\u666f\u3002\u4ee5 Buffer \u7684\u63d0\u4f9b\u7684 EncodeUtf8String \u51fd\u6570\u4e3a\u4f8b\uff0c\u8be5\u51fd\u6570\u5b9e\u73b0\u5b57\u7b26\u4e32\u7684\u7f16\u7801\u3002 <pre><code>static void EncodeUtf8String(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Environment* env = Environment::GetCurrent(args);\n  Isolate* isolate = env-&gt;isolate();\n  // \u88ab\u7f16\u7801\u7684\u5b57\u7b26\u4e32\n  Local&lt;String&gt; str = args[0].As&lt;String&gt;();\n  size_t length = str-&gt;Utf8Length(isolate);\n  // \u5206\u914d\u5185\u5b58\n  AllocatedBuffer buf = AllocatedBuffer::AllocateManaged(env, length);\n  // \u7f16\u7801\n  str-&gt;WriteUtf8(isolate,\n                 buf.data(),\n                 -1,  // We are certain that `data` is sufficiently large\n                 nullptr,\n                 String::NO_NULL_TERMINATION | String::REPLACE_INVALID_UTF8);\n  // \u57fa\u4e8e\u4e0a\u9762\u7533\u8bf7\u7684 buf \u5185\u5b58\u65b0\u5efa\u4e00\u4e2a Uint8Array              \n  auto array = Uint8Array::New(buf.ToArrayBuffer(), 0, length);\n  args.GetReturnValue().Set(array);\n}\n</code></pre> \u6211\u4eec\u91cd\u70b9\u5206\u6790 AllocatedBuffer::AllocateManaged\u3002 <pre><code>AllocatedBuffer AllocatedBuffer::AllocateManaged(\n    Environment* env,\n    size_t size) {\n  NoArrayBufferZeroFillScope no_zero_fill_scope(env-&gt;isolate_data());\n  std::unique_ptr&lt;v8::BackingStore&gt; bs = v8::ArrayBuffer::NewBackingStore(env-&gt;isolate(), size);\n  return AllocatedBuffer(env, std::move(bs));\n}\n</code></pre> AllocateManaged \u8c03\u7528 NewBackingStore \u7533\u8bf7\u4e86\u5185\u5b58\u3002 <pre><code>std::unique_ptr&lt;v8::BackingStore&gt; v8::ArrayBuffer::NewBackingStore(\n    Isolate* isolate, size_t byte_length) {\n\n  i::Isolate* i_isolate = reinterpret_cast&lt;i::Isolate*&gt;(isolate);\n  std::unique_ptr&lt;i::BackingStoreBase&gt; backing_store =\n      i::BackingStore::Allocate(i_isolate, byte_length,\n                                i::SharedFlag::kNotShared,\n                                i::InitializedFlag::kZeroInitialized);\n\n  return std::unique_ptr&lt;v8::BackingStore&gt;(\n      static_cast&lt;v8::BackingStore*&gt;(backing_store.release()));\n}\n</code></pre> \u7ee7\u7eed\u770b BackingStore::Allocate\u3002 <pre><code>std::unique_ptr&lt;BackingStore&gt; BackingStore::Allocate(\n    Isolate* isolate, size_t byte_length, SharedFlag shared,\n    InitializedFlag initialized) {\n  void* buffer_start = nullptr;\n  // ArrayBuffer \u5185\u5b58\u5206\u914d\u5668\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\uff0cV8 \u9ed8\u8ba4\u63d0\u4f9b\u7684\u662f\u4f7f\u7528\u5e73\u53f0\u76f8\u5173\u7684\u5806\u5185\u5b58\u5206\u6790\u51fd\u6570\uff0c\u6bd4\u5982 malloc\n  auto allocator = isolate-&gt;array_buffer_allocator();\n  if (byte_length != 0) {\n    auto allocate_buffer = [allocator, initialized](size_t byte_length) {\n      // \u5206\u914d\u5185\u5b58\n      void* buffer_start = allocator-&gt;Allocate(byte_length);\n      return buffer_start;\n    };\n    // \u540c\u6b65\u6267\u884c allocate_buffer \u5206\u914d\u5185\u5b58\n    buffer_start = isolate-&gt;heap()-&gt;AllocateExternalBackingStore(allocate_buffer, byte_length);\n  }\n  // \u65b0\u5efa BackingStore \u7ba1\u7406\u5185\u5b58\n  auto result = new BackingStore(buffer_start,  // start\n                                 byte_length,   // length\n                                 byte_length,   // capacity\n                                 shared,        // shared\n                                 false,         // is_wasm_memory\n                                 true,          // free_on_destruct\n                                 false,         // has_guard_regions\n                                 false,         // custom_deleter\n                                 false);        // empty_deleter\n\n  return std::unique_ptr&lt;BackingStore&gt;(result);\n}\n</code></pre> BackingStore::Allocate \u5206\u914d\u4e00\u5757\u5185\u5b58\u5e76\u65b0\u5efa BackingStore \u5bf9\u8c61\u7ba1\u7406\u8fd9\u5757\u5185\u5b58\uff0c\u5185\u5b58\u5206\u914d\u5668\u662f\u5728\u521d\u59cb\u5316 V8 \u7684\u65f6\u5019\u8bbe\u7f6e\u7684\u3002\u8fd9\u91cc\u6211\u4eec\u518d\u770b\u4e00\u4e0b AllocateExternalBackingStore \u51fd\u6570\u7684\u903b\u8f91\u3002 <pre><code>void* Heap::AllocateExternalBackingStore(\n    const std::function&lt;void*(size_t)&gt;&amp; allocate, size_t byte_length) {\n   // \u53ef\u80fd\u9700\u8981\u89e6\u53d1 GC\n   if (!always_allocate()) {\n    size_t new_space_backing_store_bytes =\n        new_space()-&gt;ExternalBackingStoreBytes();\n    if (new_space_backing_store_bytes &gt;= 2 * kMaxSemiSpaceSize &amp;&amp;\n        new_space_backing_store_bytes &gt;= byte_length) {\n      CollectGarbage(NEW_SPACE,\n                     GarbageCollectionReason::kExternalMemoryPressure);\n    }\n  }\n  // \u5206\u914d\u5185\u5b58\n  void* result = allocate(byte_length);\n  // \u6210\u529f\u5219\u8fd4\u56de\n  if (result) return result;\n  // \u5931\u8d25\u5219\u8fdb\u884c GC\n  if (!always_allocate()) {\n    for (int i = 0; i &lt; 2; i++) {\n      CollectGarbage(OLD_SPACE,\n                     GarbageCollectionReason::kExternalMemoryPressure);\n      result = allocate(byte_length);\n      if (result) return result;\n    }\n    isolate()-&gt;counters()-&gt;gc_last_resort_from_handles()-&gt;Increment();\n    CollectAllAvailableGarbage(\n        GarbageCollectionReason::kExternalMemoryPressure);\n  }\n  // \u518d\u6b21\u5206\u914d\uff0c\u5931\u8d25\u5219\u8fd4\u56de\u5931\u8d25\n  return allocate(byte_length);\n}\n</code></pre> \u6211\u4eec\u770b\u5230\u901a\u8fc7 BackingStore \u7533\u8bf7\u5185\u5b58\u5931\u8d25\u65f6\u4f1a\u89e6\u53d1 GC \u6765\u817e\u51fa\u66f4\u591a\u7684\u53ef\u7528\u5185\u5b58\u3002\u5206\u914d\u5b8c\u5185\u5b58\u540e\uff0c\u6700\u7ec8\u4ee5 BackingStore \u5bf9\u8c61\u4e3a\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a AllocatedBuffer \u5bf9\u8c61\u3002 <pre><code>AllocatedBuffer::AllocatedBuffer(\n    Environment* env, std::unique_ptr&lt;v8::BackingStore&gt; bs)\n    : env_(env), backing_store_(std::move(bs)) {}\n</code></pre> \u63a5\u7740\u628a AllocatedBuffer \u5bf9\u8c61\u8f6c\u6210 ArrayBuffer \u5bf9\u8c61\u3002 <pre><code>v8::Local&lt;v8::ArrayBuffer&gt; AllocatedBuffer::ToArrayBuffer() {\n  return v8::ArrayBuffer::New(env_-&gt;isolate(), std::move(backing_store_));\n}\n</code></pre> \u6700\u540e\u628a ArrayBuffer \u5bf9\u8c61\u4f20\u5165 Uint8Array \u8fd4\u56de\u4e00\u4e2a Uint8Array \u5bf9\u8c61\u8fd4\u56de\u7ed9\u8c03\u7528\u65b9\u3002</p>"},{"location":"chapter27-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Node.js%20%E7%9A%84%20Buffer/#2-uint8array","title":"2 Uint8Array \u7684\u4f7f\u7528\u548c\u5b9e\u73b0","text":"<p>\u4ece\u524d\u9762\u7684\u5b9e\u73b0\u4e2d\u53ef\u4ee5\u770b\u5230 C++ \u5c42\u7684\u5b9e\u73b0\u4e2d\uff0c\u5185\u5b58\u90fd\u662f\u4ece\u8fdb\u7a0b\u7684\u5806\u4e2d\u5206\u914d\u7684\uff0c\u90a3\u4e48 JS \u5c42\u901a\u8fc7 Uint8Array \u7533\u8bf7\u7684\u5185\u5b58\u662f\u5426\u4e5f\u662f\u5728\u8fdb\u7a0b\u5806\u4e2d\u7533\u8bf7\u7684\u5462\uff1f\u4e0b\u9762\u6211\u4eec\u770b\u770b V8 \u4e2d Uint8Array \u7684\u5b9e\u73b0\u3002Uint8Array \u6709\u591a\u79cd\u521b\u5efa\u65b9\u5f0f\uff0c\u6211\u4eec\u53ea\u770b new Uint8Array(length) \u7684\u5b9e\u73b0\u3002 <pre><code>transitioning macro ConstructByLength(implicit context: Context)(\n    map: Map, lengthObj: JSAny,\n    elementsInfo: typed_array::TypedArrayElementsInfo): JSTypedArray {\n  try {\n    // \u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\n    const length: uintptr = ToIndex(lengthObj);\n    // \u62ff\u5230\u521b\u5efa ArrayBuffer \u7684\u51fd\u6570\n    const defaultConstructor: Constructor = GetArrayBufferFunction();\n    const initialize: constexpr bool = true;\n    return TypedArrayInitialize(\n        initialize, map, length, elementsInfo, defaultConstructor)\n        otherwise RangeError;\n  }\n}\n\ntransitioning macro TypedArrayInitialize(implicit context: Context)(\n    initialize: constexpr bool, map: Map, length: uintptr,\n    elementsInfo: typed_array::TypedArrayElementsInfo,\n    bufferConstructor: JSReceiver): JSTypedArray labels IfRangeError {\n\n  const byteLength = elementsInfo.CalculateByteLength(length);\n  const byteLengthNum = Convert&lt;Number&gt;(byteLength);\n  const defaultConstructor = GetArrayBufferFunction();\n  const byteOffset: uintptr = 0;\n\n  try {\n    // \u521b\u5efa JSArrayBuffer\n    const buffer = AllocateEmptyOnHeapBuffer(byteLength);\n    const isOnHeap: constexpr bool = true;\n    // \u901a\u8fc7 buffer \u521b\u5efa TypedArray\n    const typedArray = AllocateTypedArray(\n        isOnHeap, map, buffer, byteOffset, byteLength, length);\n    // \u5185\u5b58\u7f6e 0\n    if constexpr (initialize) {\n      const backingStore = typedArray.data_ptr;\n      typed_array::CallCMemset(backingStore, 0, byteLength);\n    }\n\n    return typedArray;\n  }\n}\n</code></pre> \u4e3b\u8981\u903b\u8f91\u5206\u4e3a\u4e24\u6b65\uff0c\u9996\u5148\u901a\u8fc7 AllocateEmptyOnHeapBuffer \u7533\u8bf7\u4e00\u4e2a JSArrayBuffer\uff0c\u7136\u540e\u4ee5 JSArrayBuffer \u521b\u5efa\u4e00\u4e2a TypedArray\u3002\u6211\u4eec\u5148\u770b\u4e00\u4e0b AllocateEmptyOnHeapBuffer\u3002 <pre><code>TNode&lt;JSArrayBuffer&gt; TypedArrayBuiltinsAssembler::AllocateEmptyOnHeapBuffer(\n    TNode&lt;Context&gt; context, TNode&lt;UintPtrT&gt; byte_length) {\n\n  TNode&lt;NativeContext&gt; native_context = LoadNativeContext(context);\n  TNode&lt;Map&gt; map = CAST(LoadContextElement(native_context, Context::ARRAY_BUFFER_MAP_INDEX));\n  TNode&lt;FixedArray&gt; empty_fixed_array = EmptyFixedArrayConstant();\n  // \u7533\u8bf7\u4e00\u4e2a JSArrayBuffer \u5bf9\u8c61\u6240\u9700\u8981\u7684\u5185\u5b58\n  TNode&lt;JSArrayBuffer&gt; buffer = UncheckedCast&lt;JSArrayBuffer&gt;(Allocate(JSArrayBuffer::kSizeWithEmbedderFields));\n  // \u521d\u59cb\u5316\u5bf9\u8c61\u7684\u5c5e\u6027\n  StoreMapNoWriteBarrier(buffer, map);\n  StoreObjectFieldNoWriteBarrier(buffer, JSArray::kPropertiesOrHashOffset, empty_fixed_array);\n  StoreObjectFieldNoWriteBarrier(buffer, JSArray::kElementsOffset, empty_fixed_array);\n  int32_t bitfield_value = (1 &lt;&lt; JSArrayBuffer::IsExternalBit::kShift) |\n                           (1 &lt;&lt; JSArrayBuffer::IsDetachableBit::kShift);\n  StoreObjectFieldNoWriteBarrier(buffer, JSArrayBuffer::kBitFieldOffset, Int32Constant(bitfield_value));\n  StoreObjectFieldNoWriteBarrier(buffer, JSArrayBuffer::kByteLengthOffset, byte_length);\n  // \u8bbe\u7f6e buffer \u4e3a nullptr                               \n  StoreJSArrayBufferBackingStore(buffer, EncodeExternalPointer(ReinterpretCast&lt;RawPtrT&gt;(IntPtrConstant(0))));\n  StoreObjectFieldNoWriteBarrier(buffer, JSArrayBuffer::kExtensionOffset, IntPtrConstant(0));\n  for (int offset = JSArrayBuffer::kHeaderSize; offset &lt; JSArrayBuffer::kSizeWithEmbedderFields; offset += kTaggedSize) {\n    StoreObjectFieldNoWriteBarrier(buffer, offset, SmiConstant(0));\n  }\n  return buffer;\n}\n</code></pre> AllocateEmptyOnHeapBuffer \u7533\u8bf7\u4e86\u4e00\u4e2a\u7a7a\u7684 JSArrayBuffer \u5bf9\u8c61\uff0c\u7a7a\u7684\u610f\u601d\u662f\u8bf4\u6ca1\u6709\u5b58\u50a8\u6570\u636e\u7684\u5185\u5b58\u3002\u63a5\u7740\u770b\u57fa\u4e8e JSArrayBuffer \u5bf9\u8c61 \u901a\u8fc7 AllocateTypedArray \u521b\u5efa\u4e00\u4e2a TypedArray\u3002 <pre><code>transitioning macro AllocateTypedArray(implicit context: Context)(\n    isOnHeap: constexpr bool, map: Map, buffer: JSArrayBuffer,\n    byteOffset: uintptr, byteLength: uintptr, length: uintptr): JSTypedArray {\n  // \u4ece V8 \u5806\u4e2d\u7533\u8bf7\u5b58\u50a8\u6570\u636e\u7684\u5185\u5b58\n  let elements: ByteArray = AllocateByteArray(byteLength);\n  // \u7533\u8bf7\u4e00\u4e2a JSTypedArray \u5bf9\u8c61\n  const typedArray = UnsafeCast&lt;JSTypedArray&gt;(AllocateFastOrSlowJSObjectFromMap(map));\n  // \u521d\u59cb\u5316\u5c5e\u6027\n  typedArray.elements = elements;\n  typedArray.buffer = buffer;\n  typedArray.byte_offset = byteOffset;\n  typedArray.byte_length = byteLength;\n  typedArray.length = length;\n  typed_array::SetJSTypedArrayOnHeapDataPtr(typedArray, elements, byteOffset);\n  SetupTypedArrayEmbedderFields(typedArray);\n  return typedArray;\n}\n</code></pre> \u6211\u4eec\u53d1\u73b0 Uint8Array \u7533\u8bf7\u7684\u5185\u5b58\u662f\u57fa\u4e8e V8 \u5806\u7684\uff0c\u800c\u4e0d\u662f V8 \u7684\u5806\u5916\u5185\u5b58\uff0c\u8fd9\u96be\u9053\u548c C++ \u5c42\u7684\u5b9e\u73b0\u4e0d\u4e00\u6837\uff1fUint8Array \u7684\u5185\u5b58\u7684\u786e\u662f\u57fa\u4e8e V8 \u5806\u7684\uff0c\u6bd4\u5982\u6211\u50cf\u4e0b\u9762\u8fd9\u6837\u4f7f\u7528\u7684\u65f6\u5019\u3002 <pre><code>const arr = new Uint8Array(1);\narr[0] = 65;\n</code></pre> \u4f46\u662f\u5982\u679c\u6211\u4eec\u4f7f\u7528 arr.buffer \u7684\u65f6\u5019\uff0c\u60c5\u51b5\u5c31\u4e0d\u4e00\u6837\u4e86\u3002\u6211\u4eec\u770b\u770b\u5177\u4f53\u7684\u5b9e\u73b0\u3002 <pre><code>BUILTIN(TypedArrayPrototypeBuffer) {\n  HandleScope scope(isolate);\n  CHECK_RECEIVER(JSTypedArray, typed_array,\n                 \"get %TypedArray%.prototype.buffer\");\n  return *typed_array-&gt;GetBuffer();\n}\n</code></pre> \u63a5\u7740\u770b GetBuffer \u7684\u5b9e\u73b0\u3002 <pre><code>Handle&lt;JSArrayBuffer&gt; JSTypedArray::GetBuffer() {\n  Isolate* isolate = GetIsolate();\n  Handle&lt;JSTypedArray&gt; self(*this, isolate);\n  // \u62ff\u5230 TypeArray \u5bf9\u5e94\u7684 JSArrayBuffer \u5bf9\u8c61\n  Handle&lt;JSArrayBuffer&gt; array_buffer(JSArrayBuffer::cast(self-&gt;buffer()), isolate);\n  // \u5206\u914d\u8fc7\u4e86\u76f4\u63a5\u8fd4\u56de\n  if (!is_on_heap()) {\n   return array_buffer;\n  }\n  size_t byte_length = self-&gt;byte_length();\n  // \u7533\u8bf7 byte_length \u5b57\u8282\u5185\u5b58\u5b58\u50a8\u6570\u636e\n  auto backing_store = BackingStore::Allocate(isolate, byte_length, SharedFlag::kNotShared, InitializedFlag::kUninitialized);\n  // \u5173\u8054 backing_store \u5230 array_buffer\n  array_buffer-&gt;Setup(SharedFlag::kNotShared, std::move(backing_store));\n  return array_buffer;\n}\n</code></pre> \u6211\u4eec\u770b\u5230\u5f53\u4f7f\u7528 buffer \u7684\u65f6\u5019\uff0cV8 \u4f1a\u5728 V8 \u5806\u5916\u7533\u8bf7\u5185\u5b58\u6765\u66ff\u4ee3\u521d\u59cb\u5316 Uint8Array \u65f6\u5728 V8 \u5806\u5185\u5206\u914d\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u628a\u539f\u6765\u7684\u6570\u636e\u590d\u5236\u8fc7\u6765\u3002\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4f8b\u5b50\u3002 <pre><code>console.log(process.memoryUsage().arrayBuffers)\nlet a = new Uint8Array(10);\na[0] = 65;\nconsole.log(process.memoryUsage().arrayBuffers)\n</code></pre> \u6211\u4eec\u4f1a\u53d1\u73b0 arrayBuffers \u7684\u503c\u662f\u4e00\u6837\u7684\uff0c\u8bf4\u660e Uint8Array \u521d\u59cb\u5316\u65f6\u6ca1\u6709\u901a\u8fc7 arrayBuffers \u7533\u8bf7\u5806\u5916\u5185\u5b58\u3002\u63a5\u7740\u518d\u770b\u4e0b\u4e00\u4e2a\u4f8b\u5b50\u3002 <pre><code>console.log(process.memoryUsage().arrayBuffers)\nlet a = new Uint8Array(1);\na[0] = 65;\na.buffer\nconsole.log(process.memoryUsage().arrayBuffers)\nconsole.log(new Uint8Array(a.buffer))\n</code></pre> \u6211\u4eec\u770b\u5230\u8f93\u51fa\u7684\u5185\u5b58\u589e\u52a0\u4e86\u4e00\u4e2a\u5b57\u8282\uff0c\u8f93\u51fa\u7684 a.buffer \u662f [ 65 ]\uff08\u7533\u8bf7\u5185\u5b58\u5927\u4e8e 64 \u5b57\u8282\u4f1a\u5728\u5806\u5916\u5185\u5b58\u5206\u914d\uff09\u3002</p>"},{"location":"chapter27-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Node.js%20%E7%9A%84%20Buffer/#3","title":"3 \u5806\u5916\u5185\u5b58\u7684\u7ba1\u7406","text":"<p>\u4ece\u4e4b\u524d\u7684\u5206\u6790\u4e2d\u6211\u4eec\u770b\u5230\uff0cNode.js Buffer \u662f\u57fa\u4e8e\u5806\u5916\u5185\u5b58\u5b9e\u73b0\u7684\uff08\u81ea\u5df1\u7533\u8bf7\u8fdb\u7a0b\u5806\u5185\u5b58\u6216\u8005\u4f7f\u7528 V8 \u9ed8\u8ba4\u7684\u5185\u5b58\u5206\u914d\u5668\uff09\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u5e73\u65f6\u4f7f\u7528\u7684\u53d8\u91cf\u90fd\u662f\u7531 V8 \u8d1f\u8d23\u7ba1\u7406\u5185\u5b58\u7684\uff0c\u90a3\u4e48 Buffer \u6240\u4ee3\u8868\u7684\u5806\u5916\u5185\u5b58\u662f\u600e\u4e48\u7ba1\u7406\u7684\u5462\uff1fBuffer \u7684\u5185\u5b58\u91ca\u653e\u4e5f\u662f\u7531 V8 \u8ddf\u8e2a\u7684\uff0c\u4e0d\u8fc7\u91ca\u653e\u7684\u903b\u8f91\u548c\u5806\u5185\u5185\u5b58\u4e0d\u592a\u4e00\u6837\u3002\u6211\u4eec\u901a\u8fc7\u4e00\u4e9b\u4f8b\u5b50\u6765\u5206\u6790\u4e00\u4e0b\u3002 <pre><code>function forceGC() {\n    new ArrayBuffer(1024 * 1024 * 1024);\n}\nsetTimeout(() =&gt; {\n    /*\n        \u4ece C++ \u5c42\u8c03\u7528 V8 \u5bf9\u8c61\u521b\u5efa\u5185\u5b58\n        let a = process.binding('buffer').createFromString(\"\u4f60\u597d\", 1);\n    */ \n    /*\n        \u76f4\u63a5\u4f7f\u7528 V8 \u5185\u7f6e\u5bf9\u8c61\n        let a = new ArrayBuffer(10);\n    */\n    // \u4ece C++ \u5c42\u81ea\u5df1\u7ba1\u7406\u5185\u5b58\n    let a = process.binding('buffer').encodeUtf8String(\"\u4f60\u597d\");\n    // \u7f6e\u7a7a\u7b49\u5f85 GC\n    a = null;\n    // \u5206\u914d\u4e00\u5757\u5927\u5185\u5b58\u89e6\u53d1 GC\n    process.nextTick(forceGC);\n}, 1000);\nconst net = require('net');\nnet.createServer((socket) =&gt; {}).listen()\n</code></pre> \u5728 V8 \u7684\u4ee3\u7801\u6253\u65ad\u70b9\uff0c\u7136\u540e\u8c03\u8bd5\u4ee5\u4e0a\u4ee3\u7801\u3002  \u6211\u4eec\u770b\u5230\u5728\u8d85\u65f6\u56de\u8c03\u91cc V8 \u5206\u914d\u4e86\u4e00\u4e2a ArrayBufferExtension \u5bf9\u8c61\u5e76\u8bb0\u5f55\u5230 ArrayBufferSweeper \u4e2d\u3002 \u63a5\u7740\u770b\u4e00\u4e0b\u89e6\u53d1 GC \u65f6\u7684\u903b\u8f91\u3002   V8 \u5728 GC \u4e2d\u4f1a\u8c03\u7528 heap_-&gt;array_buffer_sweeper()-&gt;RequestSweepYoung() \u56de\u6536\u5806\u5916\u5185\u5b58\uff0c\u53e6\u5916 Node.js \u672c\u8eab\u4f3c\u4e4e\u4e5f\u4f7f\u7528\u7ebf\u7a0b\u53bb\u56de\u6536 \u5806\u5916\u5185\u5b58\u3002\u6211\u4eec\u518d\u770b\u4e00\u4e0b\u81ea\u5df1\u7ba1\u7406\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u56de\u8c03\u7684\u89e6\u53d1\u3002  \u5982\u679c\u8fd9\u6837\u5199\u662f\u4e0d\u4f1a\u89e6\u53d1 BackingStore::~BackingStore \u6267\u884c\u7684\uff0c\u518d\u6b21\u9a8c\u8bc1\u4e86 Uint8Array \u521d\u59cb\u5316\u65f6\u6ca1\u6709\u4f7f\u7528 BackingStore\u3002 <pre><code>setTimeout(() =&gt; {\n   let a = new Uint8Array(1);\n   // a.buffer;\n   a = null;\n   process.nextTick(forceGC);\n});\n</code></pre> \u4f46\u662f\u5982\u679c\u628a\u6ce8\u91ca\u6253\u5f00\u5c31\u53ef\u4ee5\u3002</p>"},{"location":"chapter27-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Node.js%20%E7%9A%84%20Buffer/#4","title":"4 \u603b\u7ed3","text":"<p>Buffer \u5e73\u65f6\u7528\u8d77\u6765\u53ef\u80fd\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662f\u5982\u679c\u6df1\u5165\u7814\u7a76\u5b83\u7684\u5b9e\u73b0\u5c31\u4f1a\u53d1\u73b0\u6d89\u53ca\u7684\u5185\u5bb9\u4e0d\u4ec5\u591a\uff0c\u800c\u4e14\u8fd8\u590d\u6742\uff0c\u4e0d\u8fc7\u6df1\u5165\u7406\u89e3\u4e86\u5b83\u7684\u5e95\u5c42\u5b9e\u73b0\u540e\uff0c\u4f1a\u6709\u79cd\u8c41\u7136\u5f00\u6717\u7684\u611f\u89c9\uff0c\u53e6\u5916 Buffer \u7684\u5185\u5b58\u662f\u5806\u5916\u5185\u5b58\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u8fdb\u7a0b\u7684\u5185\u5b58\u4e0d\u65ad\u589e\u957f\u4f46\u662f V8 \u5806\u5feb\u7167\u5927\u5c0f\u53d8\u5316\u4e0d\u5927\uff0c\u90a3\u53ef\u80fd\u662f Buffer \u53d8\u91cf\u6ca1\u6709\u91ca\u653e\uff0c\u7406\u89e3\u5b9e\u73b0\u80fd\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u5730\u601d\u8003\u95ee\u9898\u548c\u89e3\u51b3\u95ee\u9898\u3002</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/","title":"28-Node.js\u5e95\u5c42\u539f\u7406\uff08\u67b6\u6784\u7bc7\uff09","text":"<p>\u524d\u8a00\uff1a\u4e4b\u524d\u5206\u4eab\u4e86 Node.js \u7684\u5e95\u5c42\u539f\u7406\uff0c\u4e3b\u8981\u662f\u7b80\u5355\u4ecb\u7ecd\u4e86 Node.js \u7684\u4e00\u4e9b\u57fa\u7840\u539f\u7406\u548c\u4e00\u4e9b\u6838\u5fc3\u6a21\u5757\u7684\u5b9e\u73b0\uff0c\u672c\u6587\u4ece Node.js \u6574\u4f53\u65b9\u9762\u4ecb\u7ecd Node.js \u7684\u5e95\u5c42\u539f\u7406\u3002</p> <p>\u5185\u5bb9\u4e3b\u8981\u5305\u62ec\u4e94\u4e2a\u90e8\u5206\u3002\u7b2c\u4e00\u90e8\u5206\u662f\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b Node.js \u7684\u7ec4\u6210\u548c\u4ee3\u7801\u67b6\u6784\u3002\u7136\u540e\u4ecb\u7ecd\u4e00\u4e0b Node.js \u4e2d\u7684 Libuv\uff0c \u8fd8\u6709 V8 \u548c\u6a21\u5757\u52a0\u8f7d\u5668\u3002\u6700\u540e\u4ecb\u7ecd\u4e00\u4e0b Node.js \u7684\u670d\u52a1\u5668\u67b6\u6784\u3002</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#1-nodejs","title":"1 Node.js \u7684\u7ec4\u6210\u548c\u4ee3\u7801\u67b6\u6784","text":"<p>\u4e0b\u9762\u5148\u6765\u770b\u4e00\u4e0bNode.js \u7684\u7ec4\u6210\u3002Node.js \u4e3b\u8981\u662f\u7531 V8\u3001Libuv \u548c\u4e00\u4e9b\u7b2c\u4e09\u65b9\u5e93\u7ec4\u6210\u3002 1.  V8 \u6211\u4eec\u90fd\u6bd4\u8f83\u719f\u6089\uff0c\u5b83\u662f\u4e00\u4e2a JS \u5f15\u64ce\u3002\u4f46\u662f\u5b83\u4e0d\u4ec5\u5b9e\u73b0\u4e86 JS \u89e3\u6790\u548c\u6267\u884c\uff0c\u5b83\u8fd8\u662f\u81ea\u5b9a\u4e49\u62d3\u5c55\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 V8 \u63d0\u4f9b\u4e00\u4e9b C++ API \u53bb\u5b9a\u4e49\u4e00\u4e9b\u5168\u5c40\u53d8\u91cf\uff0c\u8fd9\u6837\u8bdd\u6211\u4eec\u5728 JS \u91cc\u9762\u53bb\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u4e86\u3002\u6b63\u662f\u56e0\u4e3a V8 \u652f\u6301\u8fd9\u4e2a\u81ea\u5b9a\u4e49\u7684\u62d3\u5c55\uff0c\u6240\u4ee5\u624d\u6709\u4e86 Node.js \u7b49 JS \u8fd0\u884c\u65f6\u3002 2. Libuv \u662f\u4e00\u4e2a\u8de8\u5e73\u53f0\u7684\u5f02\u6b65 IO \u5e93\u3002\u5b83\u4e3b\u8981\u7684\u529f\u80fd\u662f\u5b83\u5c01\u88c5\u4e86\u5404\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e00\u4e9b API\uff0c \u63d0\u4f9b\u7f51\u7edc\u8fd8\u6709\u6587\u4ef6\u8fdb\u7a0b\u7684\u8fd9\u4e9b\u529f\u80fd\u3002\u6211\u4eec\u77e5\u9053\u5728 JS \u91cc\u9762\u662f\u6ca1\u6709\u7f51\u7edc\u6587\u4ef6\u8fd9\u4e9b\u529f\u80fd\u7684\uff0c\u5728\u524d\u7aef\u65f6\uff0c\u662f\u7531\u6d4f\u89c8\u5668\u63d0\u4f9b\u7684\uff0c\u800c\u5728 Node.js \u91cc\uff0c\u8fd9\u4e9b\u529f\u80fd\u662f\u7531 Libuv \u63d0\u4f9b\u7684\u3002 3. \u53e6\u5916 Node.js \u91cc\u9762\u8fd8\u5f15\u7528\u4e86\u5f88\u591a\u7b2c\u4e09\u65b9\u5e93\uff0c\u6bd4\u5982 DNS \u89e3\u6790\u5e93\uff0c\u8fd8\u6709 HTTP \u89e3\u6790\u5668\u7b49\u7b49\u3002</p> <p>\u63a5\u4e0b\u6765\u770b\u4e00\u4e0b Node.js \u4ee3\u7801\u6574\u4f53\u7684\u67b6\u6784\u3002  Node.js \u4ee3\u7801\u4e3b\u8981\u662f\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662fC\u3001C++ \u548c JS\u3002  1. JS \u4ee3\u7801\u5c31\u662f\u6211\u4eec\u5e73\u65f6\u5728\u4f7f\u7528\u7684\u90a3\u4e9b JS \u7684\u6a21\u5757\uff0c\u6bd4\u65b9\u8bf4\u50cf http \u548c fs \u8fd9\u4e9b\u6a21\u5757\u3002 2. C++ \u4ee3\u7801\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u4e3b\u8981\u662f\u5c01\u88c5 Libuv \u548c\u7b2c\u4e09\u65b9\u5e93\u7684 C++ \u4ee3\u7801\uff0c\u6bd4\u5982net \u548c fs \u8fd9\u4e9b\u6a21\u5757\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a C++ \u6a21\u5757\uff0c\u5b83\u4e3b\u8981\u662f\u5bf9\u5e95\u5c42\u7684\u4e00\u4e9b\u5c01\u88c5\u3002\u7b2c\u4e8c\u90e8\u5206\u662f\u4e0d\u4f9d\u8d56 Libuv \u548c\u7b2c\u4e09\u65b9\u5e93\u7684 C++ \u4ee3\u7801\uff0c\u6bd4\u65b9\u50cf Buffer \u6a21\u5757\u7684\u5b9e\u73b0\u3002\u7b2c\u4e09\u90e8\u5206 C++ \u4ee3\u7801\u662f V8 \u672c\u8eab\u7684\u4ee3\u7801\u3002 3. C \u8bed\u8a00\u4ee3\u7801\u4e3b\u8981\u662f\u5305\u62ec Libuv \u548c\u7b2c\u4e09\u65b9\u5e93\u7684\u4ee3\u7801\uff0c\u5b83\u4eec\u90fd\u662f\u7eaf C \u8bed\u8a00\u5b9e\u73b0\u7684\u4ee3\u7801\u3002</p> <p>\u4e86\u89e3\u4e86 Nodejs \u7684\u7ec4\u6210\u548c\u4ee3\u7801\u67b6\u6784\u4e4b\u540e\uff0c\u518d\u6765\u770b\u4e00\u4e0b Node.js \u4e2d\u5404\u4e2a\u4e3b\u8981\u90e8\u5206\u7684\u5b9e\u73b0\u3002</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#2-nodejs-libuv","title":"2 Node.js \u4e2d\u7684 Libuv","text":"<p>\u9996\u5148\u6765\u770b\u4e00\u4e0b Node.js \u4e2d\u7684 Libuv\uff0c\u4e0b\u9762\u4ece\u4e09\u4e2a\u65b9\u9762\u4ecb\u7ecd Libuv\u3002 1. \u4ecb\u7ecd Libuv \u7684\u6a21\u578b\u548c\u9650\u5236 2. \u4ecb\u7ecd\u7ebf\u7a0b\u6c60\u89e3\u51b3\u7684\u95ee\u9898\u548c\u5e26\u6765\u7684\u95ee\u9898 3. \u4ecb\u7ecd\u4e8b\u4ef6\u5faa\u73af</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#21-libuv","title":"2.1  Libuv \u7684\u6a21\u578b\u548c\u9650\u5236","text":"<p>Libuv \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u7684\u6a21\u578b\u3002  \u4ece\u4e0a\u9762\u8fd9\u4e2a\u56fe\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5728 Libuv \u4e2d\u6709\u5f88\u591a\u79cd\u751f\u4ea7\u4efb\u52a1\u7684\u65b9\u5f0f\uff0c\u6bd4\u5982\u8bf4\u5728\u4e00\u4e2a\u56de\u8c03\u91cc\uff0c\u5728 Node.js \u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u6216\u8005\u5728\u7ebf\u7a0b\u6c60\u5b8c\u6210\u4e00\u4e9b\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u8fd9\u4e9b\u65b9\u5f0f\u90fd\u53ef\u4ee5\u751f\u4ea7\u4efb\u52a1\u3002\u7136\u540e Libuv \u4f1a\u4e0d\u65ad\u7684\u53bb\u6d88\u8d39\u8fd9\u4e9b\u4efb\u52a1\uff0c\u4ece\u800c\u9a71\u52a8\u7740\u6574\u4e2a\u8fdb\u7a0b\u7684\u8fd0\u884c\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u4e00\u76f4\u8bf4\u7684\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>\u4f46\u662f\u751f\u4ea7\u8005\u7684\u6d88\u8d39\u8005\u6a21\u578b\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u6d88\u8d39\u8005\u548c\u751f\u4ea7\u8005\u4e4b\u95f4\uff0c\u600e\u4e48\u53bb\u540c\u6b65\uff1f\u6bd4\u5982\u8bf4\u5728\u6ca1\u6709\u4efb\u52a1\u6d88\u8d39\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u6d88\u8d39\u8005\u4ed6\u5e94\u8be5\u5728\u5e72\u561b\uff1f\u7b2c\u4e00\u79cd\u65b9\u5f0f\u662f\u6d88\u8d39\u8005\u53ef\u4ee5\u7761\u7720\u4e00\u6bb5\u65f6\u95f4\uff0c\u7761\u9192\u4e4b\u540e\uff0c\u4ed6\u4f1a\u53bb\u5224\u65ad\u6709\u6ca1\u6709\u4efb\u52a1\u9700\u8981\u6d88\u8d39\uff0c\u5982\u679c\u6709\u7684\u8bdd\u5c31\u7ee7\u7eed\u6d88\u8d39\uff0c\u5982\u679c\u6ca1\u6709\u7684\u8bdd\u4ed6\u5c31\u7ee7\u7eed\u7761\u7720\u3002\u5f88\u663e\u7136\u8fd9\u79cd\u65b9\u5f0f\u5176\u5b9e\u662f\u6bd4\u8f83\u4f4e\u6548\u7684\u3002\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u662f\u6d88\u8d39\u8005\u4f1a\u628a\u81ea\u5df1\u6302\u8d77\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u6d88\u8d39\u6240\u5728\u7684\u8fdb\u7a0b\u4f1a\u88ab\u6302\u8d77\uff0c\u7136\u540e\u7b49\u5230\u6709\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c31\u4f1a\u5524\u9192\u5b83\uff0c\u76f8\u5bf9\u6765\u8bf4\uff0c\u8fd9\u79cd\u65b9\u5f0f\u662f\u66f4\u9ad8\u6548\u7684\uff0cLibuv \u91cc\u4e5f\u6b63\u662f\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002  \u8fd9\u4e2a\u903b\u8f91\u4e3b\u8981\u662f\u7531\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u5b9e\u73b0\u7684\uff0c\u4e0b\u9762\u770b\u4e00\u4e0b\u4e8b\u4ef6\u9a71\u52a8\u7684\u5927\u81f4\u7684\u6d41\u7a0b\u3002  \u5e94\u7528\u5c42\u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u8ba2\u9605 fd \u7684\u4e8b\u4ef6\uff0c\u5982\u679c\u8fd9\u4e2a\u4e8b\u4ef6\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fdb\u7a0b\u5c31\u4f1a\u88ab\u6302\u8d77\u3002\u7136\u540e\u7b49\u5230\u8fd9\u4e2a fd \u6240\u5bf9\u5e94\u7684\u4e8b\u4ef6\u89e6\u53d1\u4e86\u4e4b\u540e\uff0c\u5c31\u4f1a\u901a\u8fc7\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u56de\u8c03\u5e94\u7528\u5c42\u7684\u4ee3\u7801\u3002</p> <p>\u4e0b\u9762\u4ee5 Linux \u7684 \u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757 epoll \u4e3a\u4f8b\uff0c\u6765\u770b\u4e00\u4e0b\u4f7f\u7528\u6d41\u7a0b\u3002 1. \u9996\u5148\u901a\u8fc7 epoll_create \u53bb\u521b\u5efa\u4e00\u4e2aepoll \u5b9e\u4f8b\u3002 2. \u7136\u540e\u901a\u8fc7 epoll_ctl \u8fd9\u4e2a\u51fd\u6570\u8ba2\u9605\u3001\u4fee\u6539\u6216\u8005\u53d6\u6d88\u8ba2\u9605\u4e00\u4e2a fd \u7684\u4e00\u4e9b\u4e8b\u4ef6\u3002 3. \u6700\u540e\u901a\u8fc7 epoll_wait \u53bb\u5224\u65ad\u5f53\u524d\u8ba2\u9605\u7684\u4e8b\u4ef6\u6709\u6ca1\u6709\u53d1\u751f\uff0c\u5982\u679c\u6709\u4e8b\u60c5\u8981\u53d1\u751f\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u6267\u884c\u4e0a\u5c42\u56de\u8c03\uff0c\u5982\u679c\u6ca1\u6709\u4e8b\u4ef6\u53d1\u751f\u7684\u8bdd\uff0c\u8fd9\u79cd\u65f6\u5019\u53ef\u4ee5\u9009\u62e9\u4e0d\u963b\u585e\uff0c\u5b9a\u65f6\u963b\u585e\u6216\u8005\u4e00\u76f4\u963b\u585e\uff0c\u76f4\u5230\u6709\u4e8b\u4ef6\u53d1\u751f\u3002\u8981\u4e0d\u8981\u963b\u585e\u6216\u8005\u8bf4\u963b\u585e\u591a\u4e45\uff0c\u662f\u6839\u636e\u5f53\u524d\u7cfb\u7edf\u7684\u60c5\u51b5\u3002\u6bd4\u5982 Node.js \u91cc\u9762\u5982\u679c\u6709\u5b9a\u65f6\u5668\u7684\u8282\u70b9\u7684\u8bdd\uff0c\u90a3\u4e48 Node.js \u5c31\u4f1a\u5b9a\u65f6\u963b\u585e\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5b9a\u65f6\u5668\u53ef\u4ee5\u6309\u65f6\u6267\u884c\u3002</p> <p>\u63a5\u4e0b\u6765\u518d\u6df1\u5165\u4e00\u70b9\u53bb\u770b\u4e00\u4e0b epoll \u7684\u5927\u81f4\u7684\u5b9e\u73b0\u3002  \u5f53\u5e94\u7528\u5c42\u4ee3\u7801\u8c03\u7528\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u8ba2\u9605 fd \u7684\u4e8b\u4ef6\u65f6\uff0c\u6bd4\u5982\u8bf4\u8fd9\u91cc\u662f\u8ba2\u9605\u4e00\u4e2a\u53ef\u8bfb\u4e8b\u4ef6\u3002\u90a3\u4e48\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u5b83\u5c31\u4f1a\u5f80\u8fd9\u4e2a fd \u7684\u961f\u5217\u91cc\u9762\u6ce8\u518c\u4e00\u4e2a\u56de\u8c03\uff0c\u5982\u679c\u5f53\u524d\u8fd9\u4e2a\u4e8b\u4ef6\u8fd8\u6ca1\u6709\u89e6\u53d1\uff0c\u8fd9\u4e2a\u8fdb\u7a0b\u5b83\u5c31\u4f1a\u88ab\u963b\u585e\u3002\u7b49\u5230\u6709\u4e00\u5757\u6570\u636e\u5199\u5165\u4e86\u8fd9\u4e2a fd \u65f6\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a fd \u6709\u53ef\u8bfb\u4e8b\u4ef6\u4e86\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u7684\u56de\u8c03\uff0c\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u5c31\u4f1a\u76f8\u5e94\u7684\u6267\u884c\u7528\u5c42\u4ee3\u7801\u7684\u56de\u8c03\u3002</p> <p>\u4f46\u662f epoll \u5b58\u5728\u4e00\u4e9b\u9650\u5236\u3002\u9996\u5148\u7b2c\u4e00\u4e2a\u662f\u4e0d\u652f\u6301\u6587\u4ef6\u64cd\u4f5c\u7684\uff0c\u6bd4\u65b9\u8bf4\u6587\u4ef6\u8bfb\u5199\u8fd9\u4e9b\uff0c\u56e0\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u6ca1\u6709\u5b9e\u73b0\u3002\u7b2c\u4e8c\u4e2a\u662f\u4e0d\u9002\u5408\u6267\u884c\u8017\u65f6\u64cd\u4f5c\uff0c\u6bd4\u5982\u5927\u91cf CPU \u8ba1\u7b97\u3001\u5f15\u8d77\u8fdb\u7a0b\u963b\u585e\u7684\u4efb\u52a1\uff0c\u56e0\u4e3a epoll \u901a\u5e38\u662f\u642d\u914d\u5355\u7ebf\u7a0b\u7684\uff0c\u5982\u679c\u5728\u5355\u7ebf\u7a0b\u91cc\u6267\u884c\u8017\u65f6\u4efb\u52a1\uff0c\u5c31\u4f1a\u5bfc\u81f4\u540e\u9762\u7684\u4efb\u52a1\u65e0\u6cd5\u6267\u884c\u3002</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#22","title":"2.2 \u7ebf\u7a0b\u6c60\u89e3\u51b3\u7684\u95ee\u9898\u548c\u5e26\u6765\u7684\u95ee\u9898","text":"<p>\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0cLibuv \u63d0\u4f9b\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u4f7f\u7528\u7ebf\u7a0b\u6c60\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u5f15\u5165\u4e86\u7ebf\u7a0b\u6c60\u4e4b\u540e\uff0c \u7ebf\u7a0b\u6c60\u548c\u4e3b\u7ebf\u7a0b\u7684\u5173\u7cfb\u3002  \u4ece\u8fd9\u4e2a\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u5e94\u7528\u5c42\u63d0\u4ea4\u4efb\u52a1\u65f6\uff0c\u6bd4\u65b9\u8bf4\u50cf CPU \u8ba1\u7b97\u8fd8\u6709\u6587\u4ef6\u64cd\u4f5c\uff0c\u8fd9\u79cd\u65f6\u5019\u4e0d\u662f\u4ea4\u7ed9\u4e3b\u7ebf\u7a0b\u53bb\u5904\u7406\u7684\uff0c\u800c\u662f\u76f4\u63a5\u4ea4\u7ed9\u7ebf\u7a0b\u6c60\u5904\u7406\u7684\u3002\u7ebf\u7a0b\u6c60\u5904\u7406\u5b8c\u4e4b\u540e\u5b83\u4f1a\u901a\u77e5\u4e3b\u7ebf\u7a0b\u3002</p> <p>\u4f46\u662f\u5f15\u5165\u4e86\u591a\u7ebf\u7a0b\u540e\u4f1a\u5e26\u6765\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u600e\u4e48\u53bb\u4fdd\u8bc1\u4e0a\u5c42\u4ee3\u7801\u8dd1\u5728\u5355\u4e2a\u7ebf\u7a0b\u91cc\u9762\u3002\u56e0\u4e3a\u6211\u4eec\u77e5\u9053 JS \u5b83\u662f\u5355\u7ebf\u7a0b\u7684\uff0c\u5982\u679c\u7ebf\u7a0b\u6c60\u5904\u7406\u5b8c\u4e00\u4e2a\u4efb\u52a1\u4e4b\u540e\uff0c\u76f4\u63a5\u6267\u884c\u4e0a\u5c42\u56de\u8c03\uff0c\u90a3\u4e48\u4e0a\u5c42\u4ee3\u7801\u5c31\u4f1a\u5b8c\u5168\u4e71\u4e86\u3002\u8fd9\u79cd\u65f6\u5019\u5c31\u9700\u8981\u4e00\u4e2a\u5f02\u6b65\u901a\u77e5\u7684\u673a\u5236\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u5b83\u5904\u7406\u5b8c\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u5b83\u4e0d\u662f\u76f4\u63a5\u53bb\u6267\u884c\u4e0a\u7a0b\u56de\u8c03\u7684\uff0c\u800c\u662f\u901a\u8fc7\u5f02\u6b65\u673a\u5236\u53bb\u901a\u77e5\u4e3b\u7ebf\u7a0b\u6765\u6267\u884c\u8fd9\u4e2a\u56de\u8c03\u3002  Libuv \u4e2d\u5177\u4f53\u901a\u8fc7 fd \u7684\u65b9\u5f0f\u53bb\u5b9e\u73b0\u7684\u3002\u5f53\u7ebf\u7a0b\u6c60\u5b8c\u6210\u4efb\u52a1\u65f6\uff0c\u5b83\u4f1a\u4ee5\u539f\u5b50\u7684\u65b9\u5f0f\u53bb\u4fee\u6539\u8fd9\u4e2a fd \u4e3a\u53ef\u8bfb\u7684\uff0c\u7136\u540e\u5728\u4e3b\u7ebf\u7a0b\u4e8b\u4ef6\u5faa\u73af\u7684 Poll IO \u9636\u6bb5\u65f6\uff0c\u5b83\u5c31\u4f1a\u6267\u884c\u8fd9\u4e2a\u53ef\u8bfb\u4e8b\u4ef6\u7684\u56de\u8c03\uff0c\u4ece\u800c\u6267\u884c\u4e0a\u5c42\u7684\u56de\u8c03\u3002\u53ef\u4ee5\u770b\u5230\uff0cNode.js \u867d\u7136\u662f\u8dd1\u5728\u591a\u7ebf\u7a0b\u4e0a\u9762\u7684\uff0c\u4f46\u662f\u6240\u6709\u7684 JS \u4ee3\u7801\u90fd\u662f\u8dd1\u5728\u5355\u4e2a\u7ebf\u7a0b\u91cc\u7684\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u7ecf\u5e38\u8ba8\u8bba\u7684 Node.js \u662f\u5355\u7ebf\u7a0b\u8fd8\u662f\u591a\u7ebf\u7a0b\u7684\uff0c\u4ece\u4e0d\u540c\u7684\u89d2\u5ea6\u53bb\u770b\u5c31\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u7b54\u6848\u3002</p> <p>\u4e0b\u9762\u7684\u56fe\u5c31\u662f\u5f02\u6b65\u4efb\u52a1\u5904\u7406\u7684\u4e00\u4e2a\u5927\u81f4\u8fc7\u7a0b\u3002  \u6bd4\u5982\u6211\u4eec\u60f3\u8bfb\u4e00\u4e2a\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u8fd9\u65f6\u5019\u4e3b\u7ebf\u7a0b\u4f1a\u628a\u8fd9\u4e2a\u4efb\u52a1\u76f4\u63a5\u63d0\u4ea4\u5230\u7ebf\u7a0b\u6c60\u91cc\u9762\u53bb\u5904\u7406\uff0c\u7136\u540e\u4e3b\u7ebf\u7a0b\u5c31\u53ef\u4ee5\u7ee7\u7eed\u53bb\u505a\u81ea\u5df1\u7684\u4e8b\u60c5\u4e86\u3002\u5f53\u5728\u7ebf\u7a0b\u6c60\u91cc\u9762\u7684\u7ebf\u7a0b\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u4e4b\u540e\uff0c\u5b83\u5c31\u4f1a\u5f80\u8fd9\u4e2a\u4e3b\u7ebf\u7a0b\u7684\u961f\u5217\u91cc\u9762\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u4e3b\u7ebf\u7a0b\u5728 Poll IO \u9636\u6bb5\u65f6\uff0c\u5b83\u5c31\u4f1a\u53bb\u6267\u884c\u8fd9\u4e2a\u8282\u70b9\u91cc\u9762\u7684\u56de\u8c03\u3002</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#23","title":"2.3 \u4e8b\u4ef6\u5faa\u73af","text":"<p>\u4e86\u89e3 Libuv \u7684\u4e00\u4e9b\u6838\u5fc3\u5b9e\u73b0\u4e4b\u540e\uff0c\u4e0b\u9762\u6211\u4eec\u518d\u770b\u4e00\u4e0b Libuv \u4e2d\u4e00\u4e2a\u8457\u540d\u7684\u4e8b\u4ef6\u5faa\u73af\u3002\u4e8b\u4ef6\u5faa\u73af\u4e3b\u8981\u5206\u4e3a\u4e03\u4e2a\u9636\u6bb5\uff0c 1. \u7b2c\u4e00\u662f timer \u9636\u6bb5\uff0ctimer \u9636\u6bb5\u662f\u5904\u7406\u5b9a\u65f6\u5668\u76f8\u5173\u7684\u4e00\u4e9b\u4efb\u52a1\uff0c\u6bd4\u5982 Node.js \u4e2d\u7684 setTimeout\u548c setInterval\u3002 2. \u7b2c\u4e8c\u662f pending \u7684\u9636\u6bb5\uff0c pending \u9636\u6bb5\u4e3b\u8981\u5904\u7406 Poll IO \u9636\u6bb5\u6267\u884c\u56de\u8c03\u65f6\u4ea7\u751f\u7684\u56de\u8c03\u3002 3. \u7b2c\u4e09\u662f check\u3001prepare \u548c idle \u4e09\u4e2a\u9636\u6bb5\uff0c\u8fd9\u4e09\u4e2a\u9636\u6bb5\u4e3b\u8981\u5904\u7406\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684\u4efb\u52a1\u3002setImmediate \u5c5e\u4e8e check \u9636\u6bb5\u3002 4. \u7b2c\u56db\u662f Poll IO \u9636\u6bb5\uff0cPoll IO \u9636\u6bb5\u4e3b\u8981\u8981\u5904\u7406\u8ddf\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u5173\u7684\u4e00\u4e9b\u4e8b\u4ef6\u3002 5. \u7b2c\u4e94\u662f close \u9636\u6bb5\uff0c \u5b83\u4e3b\u8981\u662f\u5904\u7406\uff0c\u8c03\u7528\u4e86 uv_close \u65f6\u4f20\u5165\u7684\u56de\u8c03\u3002\u6bd4\u5982\u5173\u95ed\u4e00\u4e2a TCP \u8fde\u63a5\u65f6\u4f20\u5165\u7684\u56de\u8c03\uff0c\u5b83\u5c31\u4f1a\u5728\u8fd9\u4e2a\u9636\u6bb5\u88ab\u6267\u884c\u3002</p> <p>\u4e0b\u9762\u8fd9\u4e2a\u56fe\u662f\u5404\u4e2a\u9636\u6bb5\u5728\u4e8b\u4ef6\u5faa\u73af\u7684\u987a\u5e8f\u56fe\u3002  \u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u6bcf\u4e2a\u9636\u6bb5\u7684\u5b9e\u73b0\u3002</p> <ol> <li> <p>\u5b9a\u65f6\u5668 Libuv \u5728\u5e95\u5c42\u91cc\u9762\u7ef4\u62a4\u4e86\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u6bcf\u4e2a\u5b9a\u65f6\u8282\u70b9\u5c31\u662f\u5806\u91cc\u9762\u7684\u4e00\u4e2a\u8282\u70b9\uff08Node.js \u53ea\u7528\u4e86 Libuv \u7684\u4e00\u4e2a\u5b9a\u65f6\u5668\u8282\u70b9\uff09\uff0c\u8d8a\u65e9\u8d85\u65f6\u7684\u8282\u70b9\u5c31\u5728\u8d8a\u4e0a\u9762\u3002\u7136\u540e\u7b49\u5230\u5b9a\u65f6\u671f\u9636\u6bb5\u7684\u65f6\u5019\uff0c Libuv \u5c31\u4f1a\u4ece\u4e0a\u5f80\u4e0b\u53bb\u904d\u5386\u8fd9\u4e2a\u6700\u5c0f\u5806\u5224\u65ad\u5f53\u524d\u8282\u70b9\u6709\u6ca1\u6709\u8d85\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u5230\u671f\u7684\u8bdd\uff0c\u90a3\u4e48\u540e\u9762\u8282\u70b9\u4e5f\u4e0d\u9700\u8981\u53bb\u5224\u65ad\u4e86\uff0c\u56e0\u4e3a\u6700\u65e9\u5230\u671f\u7684\u8282\u70b9\u90fd\u6ca1\u5230\u671f\uff0c\u90a3\u4e48\u5b83\u540e\u9762\u8282\u70b9\u4e5f\u663e\u7136\u4e0d\u4f1a\u5230\u671f\u3002\u5982\u679c\u5f53\u524d\u8282\u70b9\u5230\u671f\u4e86\uff0c\u90a3\u4e48\u5c31\u4f1a\u6267\u884c\u5b83\u7684\u56de\u8c03\uff0c\u5e76\u4e14\u628a\u5b83\u79fb\u51fa\u8fd9\u4e2a\u6700\u5c0f\u5806\u3002\u4f46\u662f\u4e3a\u4e86\u652f\u6301\u7c7b\u4f3c setInterval \u8fd9\u79cd\u573a\u666f\u3002\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e86repeat \u6807\u8bb0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5b83\u4f1a\u88ab\u91cd\u65b0\u63d2\u5165\u5230\u6700\u5c0f\u5806\u4e2d\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21\u7684\u8d85\u65f6\u3002</p> </li> <li> <p>check\u3001idle\u3001prepare \u9636\u6bb5\u548c pending\u3001close \u9636\u6bb5\u3002  \u8fd9\u4e94\u4e2a\u9636\u6bb5\u7684\u5b9e\u73b0\u5176\u5b9e\u7c7b\u4f3c\u7684\uff0c\u5b83\u4eec\u90fd\u5bf9\u5e94\u81ea\u5df1\u7684\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\u3002\u5f53\u4ea7\u751f\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u5b83\u5c31\u4f1a\u5f80\u8fd9\u4e2a\u961f\u5217\u91cc\u9762\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u7b49\u5230\u76f8\u5e94\u7684\u9636\u6bb5\u65f6\uff0c\u5b83\u5c31\u4f1a\u53bb\u904d\u5386\u8fd9\u4e2a\u961f\u5217\u91cc\u9762\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u6267\u884c\u5b83\u7684\u56de\u8c03\u3002\u4f46\u662f check idle \u8fd8\u6709 prepare \u9636\u6bb5\u6709\u4e00\u4e2a\u6bd4\u8f83\u7279\u522b\u7684\u5730\u65b9\uff0c\u5c31\u662f\u5f53\u8fd9\u4e9b\u9636\u6bb5\u7684\u8282\u70b9\u56de\u8c03\u88ab\u6267\u884c\u4e4b\u540e\uff0c\u5b83\u8fd8\u4f1a\u91cd\u65b0\u63d2\u5165\u961f\u5217\u91cc\u9762\uff0c\u4e5f\u662f\u8bf4\u8fd9\u4e09\u4e2a\u9636\u6bb5\u5b83\u5bf9\u5e94\u7684\u4efb\u52a1\u5728\u6bcf\u4e00\u8f6e\u7684\u4e8b\u4ef6\u5faa\u73af\u90fd\u4f1a\u88ab\u6267\u884c\u3002</p> </li> <li> <p>Poll IO \u9636\u6bb5 Poll IO \u672c\u8d28\u4e0a\u662f\u5bf9\u524d\u9762\u8bb2\u7684\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u7684\u5c01\u88c5\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u6574\u4f53\u7684\u6d41\u7a0b\u3002 </p> </li> </ol> <p>\u5f53\u6211\u4eec\u8ba2\u9605\u4e00\u4e2a fd \u7684\u4e8b\u4ef6\u65f6\uff0cLibuv \u5c31\u4f1a\u901a\u8fc7 epoll \u53bb\u6ce8\u518c\u8fd9\u4e2a fd \u5bf9\u5e94\u7684\u4e8b\u4ef6\u3002\u5982\u679c\u8fd9\u65f6\u5019\u4e8b\u4ef6\u6ca1\u6709\u5c31\u7eea\uff0c\u90a3\u4e48\u8fdb\u7a0b\u5c31\u4f1a\u963b\u585e\u5728 epoll_wait \u4e2d\u3002\u7b49\u5230\u8fd9\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0c\u8fdb\u7a0b\u5c31\u4f1a\u88ab\u5524\u9192\uff0c\u5524\u9192\u4e4b\u540e\uff0c\u5b83\u5c31\u904d\u5386 epoll \u8fd4\u56de\u4e86\u4e8b\u4ef6\u5217\u8868\uff0c\u5e76\u6267\u884c\u4e0a\u5c42\u56de\u8c03\u3002</p> <p>\u73b0\u5728\u6709\u4e00\u4e2a\u5e95\u5c42\u80fd\u529b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5e95\u5c42\u80fd\u529b\u662f\u600e\u4e48\u66b4\u9732\u7ed9\u4e0a\u5c42\u7684 JS \u53bb\u4f7f\u7528\u5462\uff1f\u8fd9\u79cd\u65f6\u5019\u5c31\u9700\u8981\u7528\u5230 JS \u5f15\u64ce V8\u4e86\u3002 </p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#3-nodejs-v8","title":"3. Node.js \u4e2d\u7684 V8","text":"<p>\u4e0b\u9762\u4ece\u4e09\u4e2a\u65b9\u9762\u4ecb\u7ecd V8\u3002 1. \u4ecb\u7ecd V8 \u5728 Node.js \u7684\u4f5c\u7528\u548c V8 \u7684\u4e00\u4e9b\u57fa\u7840\u6982\u5ff5 2. \u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7 V8 \u6267\u884c JS \u548c\u62d3\u5c55 JS 3. \u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7 V8 \u5b9e\u73b0 JS \u548c C++ \u901a\u4fe1</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#31-v8-nodejs","title":"3.1 V8 \u5728 Node.js \u7684\u4f5c\u7528\u548c\u57fa\u7840\u6982\u5ff5","text":"<p>V8 \u5728 Node.js \u91cc\u9762\u4e3b\u8981\u662f\u6709\u4e24\u4e2a\u4f5c\u7528\uff0c\u7b2c\u4e00\u4e2a\u662f\u8d1f\u8d23\u89e3\u6790\u548c\u6267\u884c JS\u3002\u7b2c\u4e8c\u4e2a\u662f\u652f\u6301\u62d3\u5c55 JS \u80fd\u529b\uff0c\u4f5c\u4e3a\u8fd9\u4e2a JS \u548c C++ \u7684\u6865\u6881\u3002\u4e0b\u9762\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b V8 \u91cc\u9762\u90a3\u4e9b\u91cd\u8981\u7684\u6982\u5ff5\u3002</p> <p>Isolate\uff1a\u9996\u5148\u7b2c\u4e00\u4e2a\u662f Isolate \u5b83\u662f\u4ee3\u8868\u4e00\u4e2a V8 \u7684\u5b9e\u4f8b\uff0c\u5b83\u76f8\u5f53\u4e8e\u8fd9\u4e00\u4e2a\u5bb9\u5668\u3002\u901a\u5e38\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u9762\u4f1a\u6709\u4e00\u4e2a\u8fd9\u6837\u7684\u5b9e\u4f8b\u3002\u6bd4\u5982\u8bf4\u5728 Node.js\u4e3b\u7ebf\u7a0b\u91cc\u9762\uff0c\u5b83\u5c31\u4f1a\u6709\u4e00\u4e2a  Isolate \u5b9e\u4f8b\u3002</p> <p>Context\uff1aContext \u662f\u4ee3\u8868\u6211\u4eec\u6267\u884c\u4ee3\u7801\u7684\u4e00\u4e2a\u4e0a\u4e0b\u6587\uff0c\u5b83\u4e3b\u8981\u662f\u4fdd\u5b58\u50cf Object\uff0cFunction \u8fd9\u4e9b\u6211\u4eec\u5e73\u65f6\u7ecf\u5e38\u4f1a\u7528\u5230\u7684\u5185\u7f6e\u7684\u7c7b\u578b\u3002\u5982\u679c\u6211\u4eec\u60f3\u62d3\u5c55 JS \u529f\u80fd\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5bf9\u8c61\u5b9e\u73b0\u3002</p> <p>ObjectTemplate\uff1aObjectTemplate \u662f\u7528\u4e8e\u5b9a\u4e49\u5bf9\u8c61\u7684\u6a21\u677f\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u57fa\u4e8e\u8fd9\u4e2a\u6a21\u677f\u53bb\u521b\u5efa\u5bf9\u8c61\u3002</p> <p>FunctionTemplate\uff1aFunctionTemplate \u548c ObjectTemplate \u662f\u7c7b\u4f3c\u7684\uff0c\u5b83\u4e3b\u8981\u662f\u7528\u4e8e\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7684\u6a21\u677f\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u57fa\u4e8e\u8fd9\u4e2a\u51fd\u6570\u6a21\u677f\u53bb\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u3002</p> <p>FunctionCallbackInfo\uff1a \u7528\u4e8e\u5b9e\u73b0 JS \u548c C++ \u901a\u4fe1\u7684\u5bf9\u8c61\u3002</p> <p>Handle\uff1aHandle \u662f\u7528\u7ba1\u7406\u5728 V8 \u5806\u91cc\u9762\u90a3\u4e9b\u5bf9\u8c61\uff0c\u56e0\u4e3a\u50cf\u6211\u4eec\u5e73\u65f6\u5b9a\u4e49\u7684\u5bf9\u8c61\u548c\u6570\u7ec4\uff0c\u5b83\u662f\u5b58\u5728 V8 \u5806\u5185\u5b58\u91cc\u9762\u7684\u3002Handle \u5c31\u662f\u7528\u4e8e\u7ba1\u7406\u8fd9\u4e9b\u5bf9\u8c61\u3002</p> <p>HandleScope\uff1aHandleScope \u662f\u4e00\u4e2a Handle \u5bb9\u5668\uff0cHandleScope \u91cc\u9762\u53ef\u4ee5\u5b9a\u4e49\u5f88\u591a Handle\uff0c\u5b83\u4e3b\u8981\u662f\u5229\u7528\u81ea\u5df1\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u591a\u4e2a Handle\u3002</p> <p>\u4e0b\u9762\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4ee3\u7801\u6765\u770b\u4e00\u4e0b HandleScope \u548c Handle \u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u3002  \u9996\u5148\u7b2c\u4e00\u6b65\u65b0\u5efa\u4e00\u4e2a HandleScope\uff0c\u5c31\u4f1a\u5728\u4e00\u4e2a\u6808\u91cc\u9762\u5b9a\u4e49\u4e00\u4e2a HandleScope \u5bf9\u8c61\u3002\u7136\u540e\u7b2c\u4e8c\u6b65\u65b0\u5efa\u4e86\u4e00\u4e2a Handle \u5e76\u4e14\u628a\u5b83\u6307\u5411\u4e00\u4e2a\u5806\u5bf9\u8c61\u3002\u8fd9\u65f6\u5019\u5c31\u4f1a\u5728\u6808\u91cc\u9762\u5206\u914d\u4e00\u4e2a\u53eb Local \u5bf9\u8c61\uff0c\u7136\u540e\u5728\u5806\u91cc\u9762\u5206\u914d\u4e00\u5757 slot \u6240\u4ee3\u8868\u7684\u5185\u5b58\u548c\u4e00\u4e2a Object \u5bf9\u8c61\uff0c\u5e76\u4e14\u5efa\u7acb\u5173\u8054\u5173\u7cfb\u3002\u5f53\u6267\u884c\u5b8c\u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u6808\u5c31\u4f1a\u88ab\u6e05\u7a7a\uff0c\u76f8\u5e94\u7684\u8fd9\u4e2a slot \u4ee3\u8868\u7684\u5185\u5b58\u4e5f\u4f1a\u88ab\u91ca\u653e\uff0c\u4f46\u662f Object \u6240\u4ee3\u8868\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5b83\u662f\u4e0d\u4f1a\u7acb\u9a6c\u88ab\u91ca\u653e\u7684\uff0c\u5b83\u4f1a\u7b49\u5f85 GC \u7684\u56de\u6536\u3002</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#32-v8-js-js","title":"3.2 \u901a\u8fc7 V8 \u6267\u884c JS \u548c\u62d3\u5c55 JS","text":"<p>\u4e86\u89e3\u4e86 V8 \u7684\u57fa\u7840\u6982\u5ff5\u4e4b\u540e\uff0c\u6765\u770b\u4e00\u4e0b\u600e\u4e48\u901a\u8fc7 V8 \u6267\u884c\u4e00\u6bb5 JS \u7684\u4ee3\u7801\u3002  \u9996\u5148\u7b2c\u4e00\u6b65\u65b0\u5efa\u4e00\u4e2a Isolate\uff0c\u5b83\u8fd9\u8868\u793a\u4e00\u4e2a\u9694\u79bb\u7684\u5b9e\u4f8b\u3002\u7b2c\u4e8c\u6b65\u5b9a\u4e49\u4e00\u4e2a HandleScope \u5bf9\u8c61\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0b\u9762\u9700\u8981\u5b9a\u4e49 Handle\u3002\u7b2c\u4e09\u6b65\u5b9a\u4e49\u4e00\u4e2a Context\uff0c\u8fd9\u662f\u4ee3\u7801\u6267\u884c\u6240\u5728\u7684\u4e0a\u4e0b\u6587\u3002\u7b2c\u56db\u6b65\u5b9a\u4e49\u4e00\u4e9b\u9700\u8981\u88ab\u6267\u884c\u7684 JS \u4ee3\u7801\u3002\u7b2c\u4e94\u6b65\u901a\u8fc7 Script \u5bf9\u8c61\u7684 Compile \u51fd\u6570\u7f16\u8bd1 JS \u4ee3\u7801\u3002\u7f16\u8bd1\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a Script \u5bf9\u8c61\uff0c\u7136\u540e\u6267\u884c\u8fd9\u4e2a\u5bf9\u8c61\u7684 Run \u51fd\u6570\u5c31\u53ef\u4ee5\u5b8c\u6210\u4ee3\u7801\u7684\u6267\u884c\u3002</p> <p>\u63a5\u4e0b\u6765\u518d\u770b\u4e00\u4e0b\u600e\u4e48\u53bb\u62d3\u5c55 JS \u539f\u6709\u7684\u4e00\u4e9b\u80fd\u529b\u3002  \u9996\u5148\u7b2c\u4e00\u6b65\u662f\u901a\u8fc7 Context \u4e0a\u4e0b\u6587\u5bf9\u8c61\u62ff\u5230\u4e00\u4e2a\u5168\u5c40\u7684\u5bf9\u8c61\uff0c\u7c7b\u4f3c\u4e8e\u5728\u524d\u7aef\u91cc\u9762\u7684 window \u5bf9\u8c61\u3002\u7b2c\u4e8c\u6b65\u901a\u8fc7 ObjectTemplate \u65b0\u5efa\u4e00\u4e2a\u5bf9\u8c61\u7684\u6a21\u677f\uff0c\u7136\u540e\u63a5\u7740\u4f1a\u7ed9\u8fd9\u4e2a\u5bf9\u8c61\u6a21\u677f\u8bbe\u7f6e\u4e00\u4e2a test \u5c5e\u6027\uff0c \u503c\u662f\u51fd\u6570\u3002\u63a5\u7740\u901a\u8fc7\u8fd9\u4e2a\u5bf9\u8c61\u6a21\u677f\u65b0\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u4e14\u628a\u8fd9\u4e2a\u5bf9\u8c61\u8bbe\u7f6e\u5230\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u91cc\u9762\u53bb\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 JS \u5c42\u53bb\u8bbf\u95ee\u8fd9\u4e2a\u5168\u5c40\u5bf9\u8c61\u3002</p> <p>\u4e0b\u9762\u6211\u4eec\u901a\u8fc7\u4f7f\u7528\u521a\u624d\u5b9a\u4e49\u90a3\u4e2a\u5168\u5c40\u5bf9\u8c61\u6765\u770b\u4e00\u4e0b JS \u548c C++ \u662f\u600e\u4e48\u901a\u4fe1\u7684\u3002</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#33-v8-js-c","title":"3.3 \u901a\u8fc7 V8 \u5b9e\u73b0 JS \u548c C++ \u5c42\u901a\u4fe1","text":"<p> \u5f53\u5728 JS \u5c42\u8c03\u7528\u521a\u624d\u5b9a\u4e49 test \u51fd\u6570\u65f6\uff0c\u5c31\u4f1a\u76f8\u5e94\u7684\u6267\u884c C++ \u5c42\u7684 test \u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u6709\u4e00\u4e2a\u5165\u53c2\u662f FunctionCallbackInfo\uff0c\u5728 C++ \u4e2d\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5bf9\u8c61\u62ff\u5230 JS \u4f20\u6765\u4e00\u4e9b\u53c2\u6570\uff0c\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86 JS \u5c42\u5230 C++ \u5c42\u901a\u4fe1\u3002\u7ecf\u8fc7\u4e00\u7cfb\u5217\u5904\u7406\u4e4b\u540e\uff0c\u8fd8\u662f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5bf9\u8c61\u7ed9 JS \u5c42\u8bbe\u7f6e\u9700\u8981\u8fd4\u56de\u7ed9 JS \u7684\u5185\u5bb9\uff0c\u8fd9\u6837\u53ef\u4ee5\u5b8c\u6210\u4e86 C++ \u5c42\u5230 JS \u5c42\u7684\u901a\u4fe1\u3002</p> <p>\u73b0\u5728\u6709\u4e86\u5e95\u5c42\u80fd\u529b\uff0c\u6709\u4e86\u8fd9\u4e00\u5c42\u7684\u63a5\u53e3\uff0c\u4f46\u662f\u6211\u4eec\u662f\u600e\u4e48\u53bb\u52a0\u8f7d\u540e\u6267\u884c JS \u4ee3\u7801\u5462\uff1f\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u6a21\u5757\u52a0\u8f7d\u5668\u3002</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#4-nodejs","title":"4 Node.js \u4e2d\u7684\u6a21\u5757\u52a0\u8f7d\u5668","text":"<p>Node.js \u4e2d\u6709\u4e94\u79cd\u6a21\u5757\u52a0\u8f7d\u5668\u3002 1. JSON \u6a21\u5757\u52a0\u8f7d\u5668 2. \u7528\u6237 JS \u6a21\u5757\u52a0\u8f7d\u5668 3. \u539f\u751f JS \u6a21\u5757\u52a0\u8f7d\u5668 4. \u5185\u7f6e C++ \u6a21\u5757\u52a0\u8f7d\u5668 5. Addon \u6a21\u5757\u52a0\u8f7d\u5668</p> <p>\u73b0\u5728\u6765\u770b\u4e0b\u6bcf\u79cd\u6a21\u5757\u52a0\u8f7d\u5668\u3002</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#41-json","title":"4.1 JSON \u6a21\u5757\u52a0\u8f7d\u5668","text":"<p>JSON \u6a21\u5757\u52a0\u8f7d\u5668\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0cNode.js \u4ece\u786c\u76d8\u91cc\u9762\u628a JSON \u6587\u4ef6\u8bfb\u5230\u5185\u5b58\u91cc\u9762\u53bb\uff0c\u7136\u540e\u901a\u8fc7 JSON.parse \u51fd\u6570\u8fdb\u884c\u89e3\u6790\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230\u91cc\u9762\u7684\u6570\u636e\u3002 </p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#42-js","title":"4.2 \u7528\u6237 JS \u6a21\u5757","text":"<p> \u7528\u6237 JS \u6a21\u5757\u5c31\u662f\u6211\u4eec\u5e73\u65f6\u5199\u7684\u4e00\u4e9b JS \u4ee3\u7801\u3002\u5f53\u901a\u8fc7 require \u51fd\u6570\u52a0\u8f7d\u4e00\u4e2a\u7528\u6237 JS \u6a21\u5757\u65f6\uff0cNode.js \u5c31\u4f1a\u4ece\u786c\u76d8\u8bfb\u53d6\u8fd9\u4e2a\u6a21\u5757\u7684\u5185\u5bb9\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u901a\u8fc7 V8 \u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u53eb CompileFunctionInContext \u628a\u8bfb\u53d6\u7684\u4ee3\u7801\u5c01\u88c5\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u63a5\u7740\u65b0\u5efa\u7acb\u4e00\u4e2a Module \u5bf9\u8c61\u3002\u8fd9\u4e2a\u5bf9\u8c61\u91cc\u9762\u6709\u4e24\u4e2a\u5c5e\u6027\u53eb exports \u548c require \u51fd\u6570\uff0c\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u5c31\u662f\u6211\u4eec\u5e73\u65f6\u5728\u4ee3\u7801\u91cc\u9762\u6240\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u63a5\u7740\u4f1a\u628a\u8fd9\u4e2a\u5bf9\u8c61\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u6267\u884c\u8fd9\u4e2a\u51fd\u6570\uff0c\u6267\u884c\u5b8c\u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 module.exports \u62ff\u5230\u8fd9\u4e2a\u51fd\u6570\uff08\u6a21\u5757\uff09\u91cc\u9762\u5bfc\u51fa\u7684\u5185\u5bb9\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u7684 require \u51fd\u6570\u662f\u53ef\u4ee5\u52a0\u8f7d\u539f\u751f JS \u6a21\u5757\u548c\u7528\u6237\u6a21\u5757\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5e73\u65f6\u5728\u6211\u4eec\u4ee3\u7801\u91cc\u9762\uff0c\u53ef\u4ee5\u901a\u8fc7require \u52a0\u8f7d\u6211\u4eec\u81ea\u5df1\u5199\u7684\u6a21\u5757\uff0c\u6216\u8005 Node.js \u672c\u8eab\u63d0\u4f9b\u7684 JS \u6a21\u5757\u3002</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#43-js","title":"4.3  \u539f\u751f JS \u6a21\u5757","text":"<p> \u63a5\u4e0b\u6765\u770b\u4e0b\u539f\u751f JS \u6a21\u5757\u52a0\u8f7d\u5668\u3002\u539f\u751fJS \u6a21\u5757\u662f Node.js \u672c\u8eab\u63d0\u4f9b\u4e86\u4e00\u4e9b JS \u6a21\u5757\uff0c\u6bd4\u5982\u7ecf\u5e38\u4f7f\u7528\u7684 http \u548c fs\u3002\u5f53\u901a\u8fc7 require \u51fd\u6570\u52a0\u8f7d http \u8fd9\u4e2a\u6a21\u5757\u7684\u65f6\u5019\uff0cNode.js \u5c31\u4f1a\u4ece\u5185\u5b58\u91cc\u8bfb\u53d6\u8fd9\u4e2a\u6a21\u5757\u6240\u5bf9\u5e94\u5185\u5bb9\u3002\u56e0\u4e3a\u539f\u751f JS \u6a21\u5757\u9ed8\u8ba4\u662f\u6253\u5305\u8fdb\u5185\u5b58\u91cc\u9762\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u4ece\u5185\u5b58\u91cc\u9762\u8bfb\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u9700\u8981\u4ece\u786c\u76d8\u91cc\u9762\u53bb\u8bfb\u3002\u7136\u540e\u8fd8\u662f\u901a\u8fc7 V8 \u63d0\u4f9b\u7684 CompileFunctionInContext \u8fd9\u4e2a\u51fd\u6570\u628a\u8bfb\u53d6\u7684\u4ee3\u7801\u5c01\u88c5\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u63a5\u7740\u65b0\u5efa\u4e00\u4e2a NativeModule \u5bf9\u8c61\uff0c\u540c\u6837\u8fd9\u4e2a\u5bf9\u8c61\u91cc\u9762\u4e5f\u662f\u6709\u4e2a exports \u5c5e\u6027\uff0c\u63a5\u7740\u5b83\u4f1a\u628a\u8fd9\u4e2a\u5bf9\u8c61\u4f20\u5230\u8fd9\u4e2a\u51fd\u6570\u91cc\u9762\u53bb\u6267\u884c\uff0c\u6267\u884c\u5b8c\u8fd9\u51fd\u6570\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 module.exports \u62ff\u5230\u8fd9\u4e2a\u51fd\u6570\u91cc\u9762\u5bfc\u51fa\u7684\u5185\u5bb9\u3002\u9700\u8981\u6ce8\u610f\u662f\u8fd9\u91cc\u4f20\u5165\u7684 require \u51fd\u6570\u662f\u4e00\u4e2a\u53eb NativeModuleRequire \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5b83\u5c31\u53ea\u80fd\u52a0\u8f7d\u539f\u751f JS \u6a21\u5757\u3002\u53e6\u5916\u8fd9\u91cc\u8fd8\u4f20\u4e86\u53e6\u5916\u4e00\u4e2a internalBinding \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u7528\u4e8e\u52a0\u8f7d C++ \u6a21\u5757\u7684\uff0c\u6240\u4ee5\u5728\u539f\u751f JS \u6a21\u5757\u91cc\u9762\uff0c\u662f\u53ef\u4ee5\u52a0\u8f7d C++ \u6a21\u5757\u7684\u3002</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#44-c","title":"4.4 C++ \u6a21\u5757","text":"<p> Node.js \u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u6ce8\u518c C++ \u6a21\u5757\uff0c\u5e76\u4e14\u5f62\u6210\u4e00\u4e2a C++ \u6a21\u5757\u94fe\u8868\u3002\u5f53\u52a0\u8f7d C++ \u6a21\u5757\u65f6\uff0cNode.js \u5c31\u901a\u8fc7\u6a21\u5757\u540d\uff0c\u4ece\u8fd9\u4e2a\u94fe\u8868\u91cc\u9762\u627e\u5230\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u7136\u540e\u53bb\u6267\u884c\u5b83\u91cc\u9762\u7684\u94a9\u5b50\u51fd\u6570\uff0c\u6267\u884c\u5b8c\u4e4b\u540e\u5c31\u53ef\u4ee5\u62ff\u5230 C++ \u6a21\u5757\u5bfc\u51fa\u7684\u5185\u5bb9\u3002</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#45-addon","title":"4.5 Addon \u6a21\u5757","text":"<p> \u63a5\u7740\u518d\u6765\u770b\u4e00\u4e0b Addon \u6a21\u5757\uff0c Addon \u6a21\u5757\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u5e93\u3002\u5f53\u901a\u8fc7 require \u52a0\u8f7dAddon \u6a21\u5757\u7684\u65f6\u5019\uff0cNode.js \u4f1a\u901a\u8fc7 dlopen \u8fd9\u4e2a\u51fd\u6570\u53bb\u52a0\u8f7d\u8fd9\u4e2a\u52a8\u6001\u94fe\u63a5\u5e93\u3002 \u4e0b\u56fe\u662f\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a Addon \u6a21\u5757\u65f6\u7684\u4e00\u4e2a\u6807\u51c6\u683c\u5f0f\u3002  \u5b83\u91cc\u9762\u6709\u4e00\u4e9b C\u8bed\u8a00\u5b8f\uff0c\u5b8f\u5c55\u5f00\u4e4b\u540e\u91cc\u9762\u5185\u5bb9\u50cf\u4e0b\u56fe\u6240\u793a\u3002  \u91cc\u9762\u4e3b\u8981\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\u548c\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u628a\u8fd9\u4e2a\u7ed3\u6784\u4f53\u8d4b\u503c\u7ed9 Node.js \u7684\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u7136\u540e Nodejs \u5b83\u5c31\u53ef\u4ee5\u901a\u8fc7\u5168\u5c40\u53d8\u91cf\u62ff\u5230\u8fd9\u4e2a\u7ed3\u6784\u4f53\uff0c\u5e76\u4e14\u6267\u884c\u5b83\u91cc\u9762\u7684\u4e00\u4e2a\u94a9\u5b50\u51fd\u6570\uff0c\u6267\u884c\u5b8c\u4e4b\u540e\u5c31\u53ef\u4ee5\u62ff\u5230\u5b83\u91cc\u9762\u8981\u5bfc\u51fa\u7684\u4e00\u4e9b\u5185\u5bb9\u3002</p> <p>\u73b0\u5728\u6709\u4e86\u5e95\u5c42\u7684\u80fd\u529b\uff0c\u4e5f\u6709\u4e86\u8fd9\u4e00\u6b21\u5c42\u7684\u63a5\u53e3\uff0c\u4e5f\u6709\u4e86\u4ee3\u7801\u52a0\u8f7d\u5668\u3002\u6700\u540e\u6211\u4eec\u6765\u770b\u4e00\u4e0b Node.js \u4f5c\u4e3a\u4e00\u4e2a\u670d\u52a1\u5668\u7684\u65f6\u5019\uff0c\u5b83\u7684\u67b6\u6784\u662f\u600e\u4e48\u6837\u7684\uff1f</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#5-nodejs","title":"5 Node.js \u7684\u670d\u52a1\u5668\u67b6\u6784","text":"<p>\u4e0b\u9762\u4ece\u4e24\u4e2a\u65b9\u9762\u4ecb\u7ecd Node.js \u7684\u670d\u52a1\u5668\u67b6\u6784 1. \u4ecb\u7ecd\u670d\u52a1\u5668\u5904\u7406 TCP \u8fde\u63a5\u7684\u6a21\u578b 2. \u4ecb\u7ecd Node.js \u4e2d\u7684\u5b9e\u73b0\u548c\u5b58\u5728\u7684\u95ee\u9898</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#51-tcp","title":"5.1 \u5904\u7406 TCP \u8fde\u63a5\u7684\u6a21\u578b","text":"<p>\u9996\u5148\u6765\u770b\u4e00\u4e0b\u7f51\u7edc\u7f16\u7a0b\u4e2d\u600e\u4e48\u53bb\u521b\u5efa\u4e00\u4e2a TCP \u670d\u52a1\u5668\u3002 <pre><code>int fd = socket(\u2026);\nbind(fd, \u76d1\u542c\u5730\u5740);\nlisten(fd);\n</code></pre> \u9996\u5148\u5efa\u4e00\u4e2a socket\uff0c \u7136\u540e\u628a\u9700\u8981\u76d1\u542c\u7684\u5730\u5740\u7ed1\u5b9a\u5230\u8fd9\u4e2a socket \u4e2d\uff0c\u6700\u540e\u901a\u8fc7 listen \u51fd\u6570\u542f\u52a8\u670d\u52a1\u5668\u3002\u542f\u52a8\u670d\u52a1\u5668\u4e4b\u540e\uff0c\u90a3\u4e48\u600e\u4e48\u53bb\u5904\u7406 TCP \u8fde\u63a5\u5462\uff1f</p> <ol> <li> <p>\u4e32\u884c\u5904\u7406\uff08accept \u548c handle \u90fd\u4f1a\u5f15\u8d77\u8fdb\u7a0b\u963b\u585e\uff09  \u7b2c\u4e00\u79cd\u5904\u7406\u65b9\u5f0f\u662f\u4e32\u884c\u5904\u7406\uff0c\u4e32\u884c\u65b9\u5f0f\u5c31\u662f\u5728\u4e00\u4e2a while \u5faa\u73af\u91cc\u9762\uff0c\u901a\u8fc7 accept \u51fd\u6570\u4e0d\u65ad\u5730\u6458\u53d6 TCP \u8fde\u63a5\uff0c\u7136\u540e\u5904\u7406\u5b83\u3002\u8fd9\u79cd\u65b9\u5f0f\u7684\u7f3a\u70b9\u5c31\u662f\u5b83\u6bcf\u6b21\u53ea\u80fd\u5904\u7406\u4e00\u4e2a\u8fde\u63a5\uff0c\u5904\u7406\u5b8c\u4e00\u4e2a\u8fde\u63a5\u4e4b\u540e\uff0c\u624d\u80fd\u7ee7\u7eed\u5904\u7406\u4e0b\u4e00\u4e2a\u8fde\u63a5\u3002</p> </li> <li> <p>\u591a\u8fdb\u7a0b/\u591a\u7ebf\u7a0b  \u7b2c\u4e8c\u79cd\u65b9\u5f0f\u662f\u591a\u8fdb\u7a0b\u6216\u8005\u591a\u7ebf\u7a0b\u7684\u65b9\u5f0f\u3002\u8fd9\u79cd\u65b9\u5f0f\u4e3b\u8981\u662f\u5229\u7528\u591a\u4e2a\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u540c\u65f6\u5904\u7406\u591a\u4e2a\u8fde\u63a5\u3002\u4f46\u8fd9\u79cd\u6a21\u5f0f\u5b83\u7684\u7f3a\u70b9\u5c31\u662f\u5f53\u6d41\u91cf\u975e\u5e38\u5927\u7684\u65f6\u5019\uff0c\u8fdb\u7a0b\u6570\u6216\u8005\u7ebf\u7a0b\u6570\u5b83\u4f1a\u6210\u4e3a\u8fd9\u79cd\u67b6\u6784\u4e0b\u9762\u7684\u4e00\u4e2a\u74f6\u9888\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u65e0\u9650\u7684\u521b\u5efa\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\uff0c\u50cf Apache \u8fd8\u6709 PHP \u5c31\u662f\u8fd9\u79cd\u67b6\u6784\u7684\u3002</p> </li> <li> <p>\u5355\u8fdb\u7a0b\u5355\u7ebf\u7a0b + \u4e8b\u4ef6\u9a71\u52a8\uff08 Reactor &amp; Proactor \uff09 \u7b2c\u4e09\u79cd\u5c31\u662f\u5355\u7ebf\u7a0b + \u4e8b\u4ef6\u9a71\u52a8\u7684\u6a21\u5f0f\u3002\u8fd9\u79cd\u6a21\u5f0f\u4e0b\u6709\u4e24\u79cd\u7c7b\u578b\uff0c\u7b2c\u4e00\u79cd\u53eb Reactor\uff0c \u7b2c\u4e8c\u79cd\u53eb Proactor\u3002 Reactor \u6a21\u5f0f\u5c31\u662f\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u6ce8\u518c fd \u7684\u8bfb\u5199\u4e8b\u4ef6\uff0c\u7136\u540e\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0c\u5b83\u5c31\u4f1a\u901a\u8fc7\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u56de\u8c03\u4e0a\u5c42\u7684\u4ee3\u7801\u3002  Proactor \u6a21\u5f0f\u5c31\u662f\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u6ce8\u518c fd \u7684\u8bfb\u5199\u5b8c\u6210\u4e8b\u4ef6\uff0c\u7136\u540e\u8fd9\u4e2a\u8bfb\u5199\u5b8c\u6210\u4e8b\u4ef6\u540e\u5c31\u4f1a\u901a\u8fc7\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5757\u56de\u8c03\u4e0a\u5c42\u4ee3\u7801\u3002  \u6211\u4eec\u770b\u5230\u8fd9\u4e24\u79cd\u6a21\u5f0f\u7684\u533a\u522b\u662f\uff0c\u6570\u636e\u8bfb\u5199\u662f\u7531\u5185\u6838\u5b8c\u6210\u7684\uff0c\u8fd8\u662f\u7531\u5e94\u7528\u7a0b\u5e8f\u5b8c\u6210\u7684\u3002\u5f88\u663e\u7136\uff0c\u901a\u8fc7\u5185\u6838\u53bb\u5b8c\u6210\u662f\u66f4\u9ad8\u6548\u7684\uff0c\u4f46\u662f\u56e0\u4e3a Proactor \u8fd9\u79cd\u6a21\u5f0f\u5b83\u517c\u5bb9\u6027\u8fd8\u4e0d\u662f\u5f88\u597d\uff0c\u6240\u4ee5\u76ee\u524d\u7528\u7684\u8fd8\u4e0d\u7b97\u592a\u591a\uff0c\u4e3b\u8981\u76ee\u524d\u4e3b\u6d41\u7684\u4e00\u4e9b\u670d\u52a1\u5668\uff0c\u5b83\u7528\u7684\u90fd\u662f Reactor \u6a21\u5f0f\u3002\u6bd4\u65b9\u8bf4\u50cf Node.js\u3001Redis \u548c Nginx \u8fd9\u4e9b\u670d\u52a1\u5668\u7528\u7684\u90fd\u662f\u8fd9\u79cd\u6a21\u5f0f\u3002</p> </li> </ol> <p>\u521a\u624d\u63d0\u5230 Node.js \u662f\u5355\u8fdb\u7a0b\u5355\u7ebf\u7a0b\u52a0\u4e8b\u4ef6\u9a71\u52a8\u7684\u67b6\u6784\u3002\u90a3\u4e48\u5355\u7ebf\u7a0b\u7684\u67b6\u6784\u5b83\u600e\u4e48\u53bb\u5229\u7528\u591a\u6838\u5462\uff1f\u8fd9\u79cd\u65f6\u5019\u5c31\u9700\u8981\u7528\u5230\u591a\u8fdb\u7a0b\u7684\u8fd9\u79cd\u6a21\u5f0f\u4e86\uff0c\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u91cc\u9762\u4f1a\u5305\u542b\u4e00\u4e2aReactor \u6a21\u5f0f\u3002\u4f46\u662f\u5f15\u5165\u591a\u8fdb\u7a0b\u4e4b\u540e\uff0c\u5b83\u4f1a\u5e26\u6765\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u591a\u8fdb\u7a0b\u4e4b\u95f4\u5b83\u600e\u4e48\u53bb\u76d1\u542c\u540c\u4e00\u4e2a\u7aef\u53e3\u3002</p>"},{"location":"chapter28-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E6%9E%B6%E6%9E%84%E7%AF%87%EF%BC%89/#52-nodejs","title":"5.2 Node.js \u7684\u5b9e\u73b0\u548c\u95ee\u9898","text":"<p>\u4e0b\u9762\u6765\u770b\u4e0b\u9488\u5bf9\u591a\u8fdb\u7a0b\u76d1\u542c\u540c\u4e00\u4e2a\u7aef\u53e3\u7684\u4e00\u4e9b\u89e3\u51b3\u65b9\u5f0f\u3002 1. \u4e3b\u8fdb\u7a0b\u76d1\u542c\u7aef\u53e3\u5e76\u63a5\u6536\u8bf7\u6c42\uff0c\u8f6e\u8be2\u5206\u53d1\uff08\u8f6e\u8be2\u6a21\u5f0f\uff09 2. \u5b50\u8fdb\u7a0b\u7ade\u4e89\u63a5\u6536\u8bf7\u6c42\uff08\u5171\u4eab\u6a21\u5f0f\uff09  3. \u5b50\u8fdb\u7a0b\u8d1f\u8f7d\u5747\u8861\u5904\u7406\u8fde\u63a5\uff08SO_REUSEPORT \u6a21\u5f0f\uff09</p> <p>\u7b2c\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u4e3b\u8fdb\u7a0b\u53bb\u76d1\u542c\u8fd9\u4e2a\u7aef\u53e3\uff0c\u5e76\u4e14\u63a5\u6536\u8fde\u63a5\u3002\u5b83\u63a5\u6536\u8fde\u63a5\u4e4b\u540e\uff0c\u901a\u8fc7\u4e00\u5b9a\u7684\u7b97\u6cd5\uff08\u6bd4\u5982\u8f6e\u8be2\uff09\u5206\u53d1\u7ed9\u5404\u4e2a\u5b50\u8fdb\u7a0b\u3002\u8fd9\u79cd\u6a21\u5f0f\u3002\u5b83\u7684\u4e00\u4e2a\u7f3a\u70b9\u5c31\u662f\u5f53\u6d41\u91cf\u975e\u5e38\u5927\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u4e3b\u8fdb\u7a0b\u5c31\u4f1a\u6210\u4e3a\u74f6\u9888\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u90fd\u6765\u4e0d\u53ca\u63a5\u6536\u6216\u8005\u5206\u53d1\u8fd9\u4e2a\u8fde\u63a5\u7ed9\u5b50\u8fdb\u7a0b\u53bb\u5904\u7406\u3002 </p> <p>\u7b2c\u4e8c\u79cd\u5c31\u662f\u4e3b\u8fdb\u7a0b\u521b\u5efa\u76d1\u542c socket\uff0c \u7136\u540e\u5b50\u8fdb\u7a0b\u901a\u8fc7 fork \u7684\u65b9\u5f0f\u7ee7\u627f\u8fd9\u4e2a\u76d1\u542c\u7684 socket\uff0c \u5f53\u6709\u4e00\u4e2a\u8fde\u63a5\u5230\u6765\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c31\u5524\u9192\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\uff0c\u6240\u6709\u5b50\u8fdb\u7a0b\u4f1a\u4ee5\u7ade\u4e89\u7684\u65b9\u5f0f\u63a5\u6536\u8fde\u63a5\u3002\u8fd9\u79cd\u6a21\u5f0f\uff0c\u5b83\u7684\u7f3a\u70b9\u4e3b\u8981\u662f\u6709\u4e24\u4e2a\uff0c\u7b2c\u4e00\u4e2a\u5c31\u662f\u8d1f\u8f7d\u5747\u8861\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u5524\u9192\u4e86\u6240\u6709\u7684\u8fdb\u7a0b\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u67d0\u4e00\u4e2a\u8fdb\u7a0b\u4e00\u76f4\u5728\u5904\u7406\u8fde\u63a5\uff0c\u5176\u4ed6\u5176\u5b83\u8fdb\u7a0b\u90fd\u6ca1\u673a\u4f1a\u5904\u7406\u8fde\u63a5\u3002\u7136\u540e\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u60ca\u7fa4\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u5524\u8d77\u4e86\u6240\u6709\u7684\u8fdb\u7a0b\uff0c\u4f46\u662f\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u5b83\u4f1a\u5904\u7406\u8fd9\u4e2a\u8fde\u63a5\uff0c\u7136\u540e\u5269\u4e0b\u8fdb\u7a0b\u5c31\u4f1a\u88ab\u65e0\u6548\u5730\u5524\u9192\u3002\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u9020\u6210\u4e00\u5b9a\u7684\u6027\u80fd\u7684\u635f\u5931\u3002 </p> <p>\u7b2c\u4e09\u79cd\u901a\u8fc7 SO_REUSEPORT \u8fd9\u4e2a\u6807\u8bb0\u6765\u89e3\u51b3\u521a\u624d\u63d0\u5230\u7684\u4e24\u4e2a\u95ee\u9898\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u90fd\u4f1a\u6709\u4e00\u4e2a\u72ec\u7acb\u7684\u76d1\u542c socket \u548c\u8fde\u63a5\u961f\u5217\u3002\u5f53\u6709\u4e00\u4e2a\u8fde\u63a5\u5230\u6765\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u8fd9\u4e2a\u8fde\u63a5\u5206\u53d1\u7ed9\u67d0\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u5e76\u4e14\u5524\u9192\u5b83\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u89e3\u51b3\u60ca\u7fa4\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u53ea\u4f1a\u5524\u9192\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u3002\u53c8\u56e0\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u5206\u53d1\u8fd9\u4e2a\u8fde\u63a5\u7684\u65f6\u5019\uff0c\u5185\u90e8\u662f\u6709\u4e00\u4e2a\u8d1f\u8f7d\u5747\u8861\u7684\u7b97\u6cd5\u3002\u6240\u4ee5\u8fd9\u6837\u7684\u8bdd\u53c8\u53ef\u4ee5\u89e3\u51b3\u8d1f\u8f7d\u5747\u8861\u7684\u95ee\u9898\u3002 </p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0b Node.js \u4e2d\u7684\u5b9e\u73b0\u3002 1. \u8f6e\u8be2\u6a21\u5f0f\u3002 \u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u4e3b\u8fdb\u7a0b\u4f1a fork \u591a\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u7136\u540e\u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u91cc\u9762\u90fd\u4f1a\u8c03\u7528 listen \u51fd\u6570\u3002\u4f46\u662f listen \u51fd\u6570\u4e0d\u4f1a\u76d1\u542c\u4e00\u4e2a\u7aef\u53e3\uff0c\u5b83\u4f1a\u8bf7\u6c42\u4e3b\u8fdb\u7a0b\u76d1\u542c\u8fd9\u4e2a\u7aef\u53e3\uff0c\u5f53\u6709\u8fde\u63a5\u5230\u6765\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u4e3b\u8fdb\u7a0b\u5c31\u4f1a\u63a5\u6536\u8fd9\u4e2a\u8fde\u63a5\uff0c\u7136\u540e\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u65b9\u5f0f\u4f20\u7ed9\u5404\u4e2a\u5b50\u8fdb\u7a0b\u53bb\u5904\u7406\u3002  2. \u5171\u4eab\u6a21\u5f0f \u5171\u4eab\u6a21\u5f0f\u4e0b\uff0c\u4e3b\u8fdb\u7a0b\u540c\u6837\u8fd8\u662f\u4f1a fork \u591a\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u7136\u540e\u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u91cc\u9762\u8fd8\u662f\u4f1a\u6267\u884c listen \u51fd\u6570\uff0c\u4f46\u540c\u6837\u7684\u8fd9\u4e2a listen \u51fd\u6570\u4e0d\u4f1a\u76d1\u542c\u4e00\u4e2a\u7aef\u53e3\uff0c\u5b83\u4f1a\u8bf7\u6c42\u4e3b\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e2a socket \u5e76\u7ed1\u5b9a\u5230\u4e00\u4e2a\u9700\u8981\u76d1\u542c\u7684\u5730\u5740\uff0c\u63a5\u7740\u4e3b\u8fdb\u7a0b\u4f1a\u628a\u8fd9\u4e2a socket \u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u9012\u7684\u65b9\u5f0f\u4f20\u7ed9\u591a\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fbe\u5230\u591a\u4e2a\u5b50\u8fdb\u7a0b\u540c\u65f6\u76d1\u542c\u540c\u4e00\u4e2a\u7aef\u53e3\u7684\u6548\u679c\u3002  \u901a\u8fc7\u521a\u624d\u4ecb\u7ecd\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 Node.js \u7684\u670d\u52a1\u5668\u67b6\u6784\u5b58\u5728\u7684\u95ee\u9898\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u8f6e\u8be2\u6a21\u5f0f\uff0c\u5f53\u6d41\u91cf\u6bd4\u8f83\u5927\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e3b\u8fdb\u7a0b\u5c31\u4f1a\u6210\u4e3a\u7cfb\u7edf\u74f6\u9888\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u5171\u4eab\u6a21\u5f0f\uff0c\u5c31\u4f1a\u5b58\u5728\u60ca\u7fa4\u548c\u8d1f\u8f7d\u5747\u8861\u7684\u95ee\u9898\u3002\u4e0d\u8fc7\u5728 Libuv \u91cc\u9762\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e UV_TCP_SINGLE_ACCEPT \u73af\u5883\u53d8\u91cf\u6765\u4e00\u5b9a\u7a0b\u5ea6\u7f13\u89e3\u8fd9\u4e2a\u95ee\u9898\u3002\u5f53\u6211\u4eec\u8bbe\u7f6e\u4e86\u8fd9\u4e2a\u73af\u5883\u53d8\u91cf\u3002Libuv \u5728\u63a5\u6536\u5b8c\u4e00\u4e2a\u8fde\u63a5\u7684\u65f6\u5019\uff0c\u5b83\u5c31\u4f1a\u4f11\u7720\u4e00\u4f1a\uff0c\u8ba9\u5176\u5b83\u8fdb\u7a0b\u4e5f\u6709\u63a5\u6536\u8fde\u63a5\u7684\u673a\u4f1a\u3002</p> <p>\u6700\u540e\u6765\u603b\u7ed3\u4e00\u4e0b\uff0c\u672c\u6587\u7684\u5185\u5bb9\u3002Node.js \u91cc\u9762\u901a\u8fc7 Libuv \u89e3\u51b3\u4e86\u64cd\u4f5c\u7cfb\u7edf\u76f8\u5173\u7684\u95ee\u9898\u3002\u901a\u8fc7 V8 \u89e3\u51b3\u4e86\u6267\u884c JS \u548c\u62d3\u5c55 JS \u529f\u80fd\u7684\u95ee\u9898\u3002\u901a\u8fc7\u6a21\u5757\u52a0\u8f7d\u5668\u89e3\u51b3\u4e86\u4ee3\u7801\u52a0\u8f7d\u8fd8\u6709\u7ec4\u7ec7\u7684\u95ee\u9898\u3002\u901a\u8fc7\u591a\u8fdb\u7a0b\u7684\u670d\u52a1\u5668\u67b6\u6784\uff0c\u4f7f\u5f97 Node.js \u53ef\u4ee5\u5229\u7528\u591a\u6838\uff0c\u5e76\u4e14\u89e3\u51b3\u4e86\u591a\u4e2a\u8fdb\u7a0b\u76d1\u542c\u540c\u4e00\u4e2a\u7aef\u53e3\u7684\u95ee\u9898\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e9b\u8d44\u6599\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u4e5f\u53ef\u4ee5\u770b\u4e00\u4e0b\u3002 1. \u57fa\u4e8e epoll + V8 \u7684JS \u8fd0\u884c\u65f6 Just\uff1a  https://github.com/theanarkh/read-just-0.1.4-code 2. \u57fa\u4e8e io_uring+ V8 \u7684 JS \u8fd0\u884c\u65f6 No.js\uff1a  https://github.com/theanarkh/No.js 3. \u7406\u89e3 Node.js \u539f\u7406\uff1a  https://github.com/theanarkh/understand-nodejs</p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/","title":"29-Node.js\u5e95\u5c42\u539f\u7406\uff08\u5b9e\u73b0\u7bc7\uff09","text":"<p>\u524d\u8a00\uff1a\u672c\u6587\u6839\u636e\u6700\u8fd1\u505a\u7684\u4e00\u6b21\u5206\u4eab\u6574\u7406\u800c\u6210\uff0c\u5e0c\u671b\u80fd\u5e2e\u5fd9\u5927\u5bb6\u6df1\u5165\u7406\u89e3Node.js\u7684\u4e00\u4e9b\u539f\u7406\u548c\u5b9e\u73b0\u3002</p> <p>\u5927\u5bb6\u597d\uff0c\u6211\u662f\u4e00\u540dNode.js\u7231\u597d\u8005\uff0c\u4eca\u5929\u6211\u5206\u4eab\u7684\u4e3b\u9898\u662fNode.js\u7684\u5e95\u5c42\u539f\u7406\u3002\u5728\u5927\u524d\u7aef\u7684\u8d8b\u52bf\u4e0b\uff0cNode.js\u4e0d\u4ec5\u62d3\u5c55\u4e86\u524d\u7aef\u7684\u6280\u672f\u8303\u56f4\uff0c\u540c\u65f6\uff0c\u626e\u6f14\u7684\u89d2\u8272\u4e5f\u8d8a\u6765\u8d8a\u91cd\u8981\uff0c\u6df1\u5165\u4e86\u89e3\u548c\u7406\u89e3\u6280\u672f\u7684\u5e95\u5c42\u539f\u7406\uff0c\u624d\u80fd\u66f4\u597d\u5730\u4e3a\u4e1a\u52a1\u8d4b\u80fd\u3002</p> <p>\u4eca\u5929\u5206\u4eab\u7684\u5185\u5bb9\u4e3b\u8981\u5206\u4e3a\u4e24\u5927\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u662fNode.js\u7684\u57fa\u7840\u548c\u67b6\u6784\uff0c\u7b2c\u4e8c\u90e8\u5206\u662fNode.js\u6838\u5fc3\u6a21\u5757\u7684\u5b9e\u73b0\u3002</p> <ul> <li>\u4e00 Node.js\u57fa\u7840\u548c\u67b6\u6784     Node.js\u7684\u7ec4\u6210     Node.js\u4ee3\u7801\u67b6\u6784     Node.js\u542f\u52a8\u8fc7\u7a0b     Node.js\u4e8b\u4ef6\u5faa\u73af</li> <li>\u4e8c Node.js\u6838\u5fc3\u6a21\u5757\u7684\u5b9e\u73b0       \u8fdb\u7a0b\u548c\u8fdb\u7a0b\u95f4\u901a\u4fe1       \u7ebf\u7a0b\u548c\u7ebf\u7a0b\u95f4\u901a\u4fe1     Cluster     Libuv\u7ebf\u7a0b\u6c60       \u4fe1\u53f7\u5904\u7406       \u6587\u4ef6     TCP     UDP     DNS</li> </ul>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#nodejs","title":"Nodejs\u7ec4\u6210","text":"<p> Node.js\u4e3b\u8981\u7531V8\u3001Libuv\u548c\u7b2c\u4e09\u65b9\u5e93\u7ec4\u6210\u3002</p> <p>Libuv\uff1a\u8de8\u5e73\u53f0\u7684\u5f02\u6b65IO\u5e93\uff0c\u4f46\u5b83\u63d0\u4f9b\u7684\u529f\u80fd\u4e0d\u4ec5\u4ec5\u662fIO\uff0c\u8fd8 \u5305\u62ec\u8fdb\u7a0b\u3001\u7ebf\u7a0b\u3001\u4fe1\u53f7\u3001\u5b9a\u65f6\u5668\u3001\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u7ebf\u7a0b\u6c60\u7b49\u3002</p> <p>\u7b2c\u4e09\u65b9\u5e93\uff1a\u5f02\u6b65DNS\u89e3\u6790\uff08cares\uff09\u3001HTTP\u89e3\u6790\u5668\uff08\u65e7\u7248\u4f7f\u7528 http_parser\uff0c\u65b0\u7248\u4f7f\u7528llhttp\uff09\u3001HTTP2\u89e3\u6790\u5668\uff08nghttp2\uff09\u3001 \u89e3\u538b\u538b\u7f29\u5e93(zlib)\u3001\u52a0\u5bc6\u89e3\u5bc6\u5e93(openssl)\u7b49\u7b49\u3002</p> <p>V8\uff1a\u5b9e\u73b0JS\u89e3\u6790\u548c\u652f\u6301\u81ea\u5b9a\u4e49\u7684\u529f\u80fd\uff0c\u5f97\u76ca\u4e8eV8\u652f\u6301\u81ea\u5b9a\u4e49\u62d3\u5c55\uff0c\u624d\u6709\u4e86Node.js\u3002</p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#nodejs_1","title":"Node.js\u4ee3\u7801\u67b6\u6784","text":"<p> \u4e0a\u56fe\u662fNode.js\u7684\u4ee3\u7801\u67b6\u6784\uff0cNode.js\u7684\u4ee3\u7801\u4e3b\u8981\u5206\u4e3aJS\u3001C++\u3001C\u4e09\u79cd\u3002</p> <p>1 JS\u662f\u6211\u4eec\u4f7f\u7528\u7684\u90a3\u4e9b\u6a21\u5757\u3002</p> <p>2 C++\u4ee3\u7801\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u662f\u5c01\u88c5\u4e86Libuv\u7684\u529f\u80fd\uff0c\u7b2c\u4e8c\u90e8\u5206\u5219\u662f\u4e0d\u4f9d\u8d56\u4e8eLibuv(crypto\u90e8\u5206api\u4f7f\u7528\u4e86Libuv\u7ebf\u7a0b\u6c60)\uff0c\u6bd4\u5982Buffer\u6a21\u5757\u3002\u7b2c\u4e09\u90e8\u5206\u662fV8\u7684\u4ee3\u7801\u3002</p> <p>3 C\u8bed\u8a00\u5c42\u7684\u4ee3\u7801\u4e3b\u8981\u662f\u5c01\u88c5\u4e86\u64cd\u4f5c\u7cfb\u7edf\u7684\u529f\u80fd\uff0c\u6bd4\u5982TCP\u3001UDP\u3002</p> <p>\u4e86\u89e3\u4e86Node.js\u7684\u7ec4\u6210\u548c\u67b6\u6784\u540e\uff0c\u6211\u4eec\u770b\u770bNode.js\u542f\u52a8\u7684\u8fc7\u7a0b\u90fd\u505a\u4e86\u4ec0\u4e48\u3002</p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#nodejs_2","title":"Node.js\u542f\u52a8\u8fc7\u7a0b","text":""},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#1-c","title":"1 \u6ce8\u518cC++\u6a21\u5757","text":"<p>\u9996\u5148Node.js\u4f1a\u8c03\u7528registerBuiltinModules\u51fd\u6570\u6ce8\u518cC++\u6a21\u5757\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u8c03\u7528\u4e00\u7cfb\u5217registerxxx\u7684\u51fd\u6570\uff0c\u6211\u4eec\u53d1\u73b0\u5728Node.js\u6e90\u7801\u91cc\u627e\u4e0d\u5230\u8fd9\u4e9b\u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u51fd\u6570\u4f1a\u5728\u5404\u4e2aC++\u6a21\u5757\u4e2d\uff0c\u901a\u8fc7\u5b8f\u5b9a\u4e49\u5b9e\u73b0\u7684\u3002\u5b8f\u5c55\u5f00\u540e\u5c31\u662f\u4e0a\u56fe\u9ec4\u8272\u6846\u7684\u5185\u5bb9\uff0c\u6bcf\u4e2aregisterxxx\u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u5f80C++\u6a21\u5757\u7684\u94fe\u8868\u4e86\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u6700\u540e\u4f1a\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\u3002</p> <p>\u90a3\u4e48Node.js\u91cc\u662f\u5982\u4f55\u8bbf\u95ee\u8fd9\u4e9bC++\u6a21\u5757\u7684\u5462\uff1f\u5728Node.js\u4e2d\uff0c\u662f\u901a\u8fc7internalBinding\u8bbf\u95eeC++\u6a21\u5757\u7684\uff0cinternalBinding\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u6839\u636e\u6a21\u5757\u540d\u4ece\u6a21\u5757\u961f\u5217\u4e2d\u627e\u5230\u5bf9\u5e94\u6a21\u5757\u3002\u4f46\u662f\u8fd9\u4e2a\u51fd\u6570\u53ea\u80fd\u5728Node.js\u5185\u90e8\u4f7f\u7528\uff0c\u4e0d\u80fd\u5728\u7528\u6237js\u6a21\u5757\u4f7f\u7528\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7process.binding\u8bbf\u95eeC++\u6a21\u5757\u3002</p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#2-environmentcontext","title":"2 \u521b\u5efaEnvironment\u5bf9\u8c61\uff0c\u5e76\u7ed1\u5b9a\u5230Context","text":"<p>\u6ce8\u518c\u5b8cC++\u6a21\u5757\u540e\u5c31\u5f00\u59cb\u521b\u5efaEnvironment\u5bf9\u8c61\uff0cEnvironment\u662fNode.js\u6267\u884c\u65f6\u7684\u73af\u5883\u5bf9\u8c61\uff0c\u7c7b\u4f3c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\uff0c\u4ed6\u8bb0\u5f55\u4e86Node.js\u5728\u8fd0\u884c\u65f6\u7684\u4e00\u4e9b\u516c\u5171\u6570\u636e\u3002\u521b\u5efa\u5b8cEnvironment\u540e\uff0cNode.js\u4f1a\u628a\u8be5\u5bf9\u8c61\u7ed1\u5b9a\u5230V8\u7684Context\u4e2d\uff0c\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u505a\u5462\uff1f\u4e3b\u8981\u662f\u4e3a\u4e86\u5728V8\u7684\u6267\u884c\u4e0a\u4e0b\u6587\u91cc\u62ff\u5230env\u5bf9\u8c61\uff0c\u56e0\u4e3aV8\u4e2d\u53ea\u6709Isolate\u3001Context\u8fd9\u4e9b\u5bf9\u8c61\u3002\u5982\u679c\u6211\u4eec\u60f3\u5728V8\u7684\u6267\u884c\u73af\u5883\u4e2d\u83b7\u53d6Environment\u5bf9\u8c61\u7684\u5185\u5bb9\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7Context\u83b7\u53d6Environment\u5bf9\u8c61\u3002  </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#3","title":"3 \u521d\u59cb\u5316\u6a21\u5757\u52a0\u8f7d\u5668","text":"<p>1 Node.js\u9996\u5148\u4f20\u5165c++\u6a21\u5757\u52a0\u8f7d\u5668\uff0c\u6267\u884cloader.js\uff0cloader.js\u4e3b\u8981\u662f\u5c01\u88c5\u4e86c++\u6a21\u5757\u52a0\u8f7d\u5668\u548c\u539f\u751fjs\u6a21\u5757\u52a0\u8f7d\u5668\u3002\u5e76\u4fdd\u5b58\u5230env\u5bf9\u8c61\u4e2d\u3002 2 \u63a5\u7740\u4f20\u5165c++\u548c\u539f\u751fjs\u6a21\u5757\u52a0\u8f7d\u5668\uff0c\u6267\u884crun_main_module.js\u3002 3 \u5728run_main_module.js\u4e2d\u4f20\u5165js\u548c\u539f\u751fjs\u6a21\u5757\u52a0\u8f7d\u5668\uff0c\u6267\u884c\u7528\u6237\u7684js\u3002 \u5047\u8bbe\u7528\u6237js\u5982\u4e0b <pre><code>require('net')\nrequire('./myModule')\n</code></pre> \u5206\u522b\u52a0\u8f7d\u4e86\u4e00\u4e2a\u7528\u6237\u6a21\u5757\u548c\u539f\u751fjs\u6a21\u5757\uff0c\u6211\u4eec\u770b\u770b\u52a0\u8f7d\u8fc7\u7a0b\uff0c\u6267\u884crequire\u7684\u65f6\u5019\u3002 1 Node.js\u9996\u5148\u4f1a\u5224\u65ad\u662f\u5426\u662f\u539f\u751fjs\u6a21\u5757\uff0c\u5982\u679c\u4e0d\u662f\u5219\u76f4\u63a5\u52a0\u8f7d\u7528\u6237\u6a21\u5757\uff0c\u5426\u5219\uff0c\u4f1a\u4f7f\u7528\u539f\u751f\u6a21\u5757\u52a0\u8f7d\u5668\u52a0\u8f7d\u539f\u751fjs\u6a21\u5757\u3002 2 \u52a0\u8f7d\u539f\u751fjs\u6a21\u5757\u7684\u65f6\u5019\uff0c\u5982\u679c\u7528\u5230\u4e86c++\u6a21\u5757\uff0c\u5219\u4f7f\u7528internalBinding\u53bb\u52a0\u8f7d\u3002  </p> <p></p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#4-jslibuv","title":"4 \u6267\u884c\u7528\u6237JS\u4ee3\u7801\uff0c\u7136\u540e\u8fdb\u5165Libuv\u4e8b\u4ef6\u5faa\u73af","text":"<p>\u63a5\u7740Node.js\u5c31\u4f1a\u6267\u884c\u7528\u6237\u7684js\uff0c\u901a\u5e38\u7528\u6237\u7684js\u4f1a\u7ed9\u4e8b\u4ef6\u5faa\u73af\u751f\u4ea7\u4efb\u52a1\uff0c\u7136\u540e\u5c31\u8fdb\u5165\u4e86\u4e8b\u4ef6\u5faa\u73af\u7cfb\u7edf\uff0c\u6bd4\u5982\u6211\u4eeclisten\u4e00\u4e2a\u670d\u52a1\u5668\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u65b0\u5efa\u4e00\u4e2atcp handle\u3002Node.js\u5c31\u4f1a\u5728\u8fd9\u4e2a\u4e8b\u4ef6\u5faa\u73af\u4e2d\u4e00\u76f4\u8fd0\u884c\u3002 <pre><code>net.createServer(() =&gt; {}).listen(80)\n</code></pre> </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#_1","title":"\u4e8b\u4ef6\u5faa\u73af","text":"<p>\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u4e8b\u4ef6\u5faa\u73af\u7684\u5b9e\u73b0\u3002\u4e8b\u4ef6\u5faa\u73af\u4e3b\u8981\u5206\u4e3a7\u4e2a\u9636\u6bb5\u3002timer\u9636\u6bb5\u4e3b\u8981\u662f\u5904\u7406\u5b9a\u65f6\u5668\u76f8\u5173\u7684\u4efb\u52a1\uff0cpending\u9636\u6bb5\u4e3b\u8981\u662f\u5904\u7406poll io\u9636\u6bb5\u56de\u8c03\u91cc\u4ea7\u751f\u7684\u56de\u8c03\u3002check\u3001prepare\u3001idle\u9636\u6bb5\u662f\u81ea\u5b9a\u4e49\u7684\u9636\u6bb5\uff0c\u8fd9\u4e09\u4e2a\u9636\u6bb5\u7684\u4efb\u52a1\u6bcf\u6b21\u4e8b\u4ef6\u5e8f\u5faa\u73af\u90fd\u4f1a\u88ab\u6267\u884c\u3002Poll io\u9636\u6bb5\u4e3b\u8981\u662f\u5904\u7406\u7f51\u7edcIO\u3001\u4fe1\u53f7\u3001\u7ebf\u7a0b\u6c60\u7b49\u7b49\u4efb\u52a1\u3002closing\u9636\u6bb5\u4e3b\u8981\u662f\u5904\u7406\u5173\u95ed\u7684handle\uff0c\u6bd4\u5982\u505c\u6b62\u5173\u95ed\u670d\u52a1\u5668\u3002  1 timer\u9636\u6bb5: \u7528\u4e8c\u53c9\u5806\u5b9e\u73b0\uff0c\u6700\u5feb\u8fc7\u671f\u7684\u5728\u6839\u8282\u70b9\u3002 2 pending\u9636\u6bb5\uff1a\u5904\u7406poll io\u9636\u6bb5\u56de\u8c03\u91cc\u4ea7\u751f\u7684\u56de\u8c03\u3002 3 check\u3001prepare\u3001idle\u9636\u6bb5\uff1a\u6bcf\u6b21\u4e8b\u4ef6\u5faa\u73af\u90fd\u4f1a\u88ab\u6267\u884c\u3002 4 poll io\u9636\u6bb5\uff1a\u5904\u7406\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u5173\u4e8b\u4ef6\u3002 5 closing\u9636\u6bb5\uff1a\u6267\u884c\u8c03\u7528uv_close\u51fd\u6570\u65f6\u4f20\u5165\u7684\u56de\u8c03\u3002  </p> <p>\u4e0b\u9762\u6211\u4eec\u8be6\u7ec6\u770b\u4e00\u4e0b\u6bcf\u4e2a\u9636\u6bb5\u7684\u5b9e\u73b0\u3002</p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#_2","title":"\u5b9a\u65f6\u5668\u9636\u6bb5","text":"<p>\u5b9a\u65f6\u5668\u7684\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u662f\u4e8c\u53c9\u5806\uff0c\u6700\u5feb\u5230\u671f\u7684\u8282\u70b9\u5728\u6700\u4e0a\u9762\u3002\u5728\u5b9a\u65f6\u5668\u9636\u6bb5\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u9010\u4e2a\u8282\u70b9\u904d\u5386\uff0c\u5982\u679c\u8282\u70b9\u8d85\u65f6\u4e86\uff0c\u90a3\u4e48\u5c31\u6267\u884c\u4ed6\u7684\u56de\u8c03\uff0c\u5982\u679c\u6ca1\u6709\u8d85\u65f6\uff0c\u90a3\u4e48\u540e\u9762\u7684\u8282\u70b9\u4e5f\u4e0d\u7528\u5224\u65ad\u4e86\uff0c\u56e0\u4e3a\u5f53\u524d\u8282\u70b9\u662f\u6700\u5feb\u8fc7\u671f\u7684\uff0c\u5982\u679c\u4ed6\u90fd\u6ca1\u6709\u8fc7\u671f\uff0c\u8bf4\u660e\u5176\u4ed6\u8282\u70b9\u4e5f\u6ca1\u6709\u8fc7\u671f\u3002\u8282\u70b9\u7684\u56de\u8c03\u88ab\u6267\u884c\u540e\uff0c\u5c31\u4f1a\u88ab\u5220\u9664\uff0c\u4e3a\u4e86\u652f\u6301setInterval\u7684\u573a\u666f\uff0c\u5982\u679c\u8bbe\u7f6erepeat\u6807\u8bb0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u4f1a\u88ab\u91cd\u65b0\u63d2\u5165\u5230\u4e8c\u53c9\u5806\u3002  \u6211\u4eec\u770b\u5230\u5e95\u5c42\u7684\u5b9e\u73b0\u7a0d\u5fae\u7b80\u5355\uff0c\u4f46\u662fNode.js\u7684\u5b9a\u65f6\u5668\u6a21\u5757\u5b9e\u73b0\u5c31\u7a0d\u5fae\u590d\u6742\u3002  1 Node.js\u5728js\u5c42\u7ef4\u62a4\u4e86\u4e00\u4e2a\u4e8c\u53c9\u5806\u3002 2 \u5806\u7684\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e86\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u4e2a\u94fe\u8868\u4e2d\uff0c\u6700\u4e45\u8d85\u65f6\u7684\u6392\u5230\u540e\u9762\u3002 3 \u53e6\u5916Node.js\u8fd8\u7ef4\u62a4\u4e86\u4e00\u4e2amap\uff0cmap\u7684key\u662f\u76f8\u5bf9\u8d85\u65f6\u65f6\u95f4\uff0c\u503c\u5c31\u662f\u5bf9\u5e94\u7684\u4e8c\u53c9\u5806\u8282\u70b9\u3002 4 \u5806\u7684\u6240\u6709\u8282\u70b9\u5bf9\u5e94\u5e95\u5c42\u7684\u4e00\u4e2a\u8d85\u65f6\u8282\u70b9\u3002  </p> <p>\u5f53\u6211\u4eec\u8c03\u7528setTimeout\u7684\u65f6\u5019\uff0c\u9996\u5148\u6839\u636esetTimeout\u7684\u5165\u53c2\uff0c\u4ecemap\u4e2d\u627e\u5230\u4e8c\u53c9\u5806\u8282\u70b9\uff0c\u7136\u540e\u63d2\u5165\u94fe\u8868\u7684\u5c3e\u90e8\u3002\u5fc5\u8981\u7684\u65f6\u5019\uff0cNode.js\u4f1a\u6839\u636ejs\u4e8c\u53c9\u5806\u7684\u6700\u5feb\u8d85\u65f6\u65f6\u95f4\u6765\u66f4\u65b0\u5e95\u5c42\u8282\u70b9\u7684\u8d85\u65f6\u65f6\u95f4\u3002\u5f53\u4e8b\u4ef6\u5faa\u73af\u5904\u7406\u5b9a\u65f6\u5668\u9636\u6bb5\u7684\u65f6\u5019\uff0cNode.js\u4f1a\u904d\u5386js\u4e8c\u53c9\u5806\uff0c\u7136\u540e\u62ff\u5230\u8fc7\u671f\u7684\u8282\u70b9\uff0c\u518d\u904d\u5386\u8fc7\u671f\u8282\u70b9\u4e2d\u7684\u94fe\u8868\uff0c\u9010\u4e2a\u5224\u65ad\u662f\u5426\u9700\u8981\u6267\u884c\u56de\u8c03\u3002\u5fc5\u8981\u7684\u65f6\u5019\u8c03\u6574js\u4e8c\u53c9\u5806\u548c\u5e95\u5c42\u7684\u8d85\u65f6\u65f6\u95f4\u3002</p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#checkidleprepare","title":"check\u3001idle\u3001prepare\u9636\u6bb5","text":"<p>check\u3001idle\u3001prepare\u9636\u6bb5\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\uff0c\u6bcf\u4e2a\u9636\u6bb5\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\uff0c\u7136\u540e\u5728\u5904\u7406\u5bf9\u5e94\u9636\u6bb5\u7684\u65f6\u5019\uff0c\u6267\u884c\u961f\u5217\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u56de\u8c03\uff0c\u4e0d\u8fc7\u8fd9\u4e09\u4e2a\u9636\u6bb5\u6bd4\u8f83\u7279\u6b8a\u7684\u662f\uff0c\u961f\u5217\u4e2d\u7684\u8282\u70b9\u88ab\u6267\u884c\u540e\u4e0d\u4f1a\u88ab\u5220\u9664\uff0c\u800c\u662f\u864e\u4e00\u76f4\u5728\u961f\u5217\u91cc\uff0c\u9664\u975e\u663e\u5f0f\u5220\u9664\u3002 </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#pendingclosing","title":"pending\u3001closing\u9636\u6bb5","text":"<p>pending\u9636\u6bb5\uff1a\u5728poll io\u56de\u8c03\u91cc\u4ea7\u751f\u7684\u56de\u8c03\u3002 closing\u9636\u6bb5\uff1a\u6267\u884c\u5173\u95edhandle\u7684\u56de\u8c03\u3002 pending\u548cclosing\u9636\u6bb5\u4e5f\u662f\u7ef4\u62a4\u4e86\u4e00\u4e2a\u961f\u5217\uff0c\u7136\u540e\u5728\u5bf9\u5e94\u9636\u6bb5\u7684\u65f6\u5019\u6267\u884c\u6bcf\u4e2a\u8282\u70b9\u7684\u56de\u8c03\uff0c\u6700\u540e\u5220\u9664\u5bf9\u5e94\u7684\u8282\u70b9\u3002 </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#poll-io","title":"Poll io\u9636\u6bb5","text":"<p>Poll io\u9636\u6bb5\u662f\u6700\u91cd\u8981\u548c\u590d\u6742\u7684\u4e00\u4e2a\u9636\u6bb5\uff0c\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u5b9e\u73b0\u3002\u9996\u5148\u6211\u4eec\u770b\u4e00\u4e0bpoll io\u9636\u6bb5\u6838\u5fc3\u7684\u6570\u636e\u7ed3\u6784\uff1aio\u89c2\u5bdf\u8005\u3002io\u89c2\u5bdf\u8005\u662f\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u611f\u5174\u8da3\u4e8b\u4ef6\u548c\u56de\u8c03\u7684\u5c01\u88c5\u3002\u4e3b\u8981\u662f\u7528\u5728epoll\u4e2d\u3002  \u5f53\u6211\u4eec\u6709\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u9700\u8981\u88abepoll\u76d1\u542c\u7684\u65f6\u5019 1 \u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2aio\u89c2\u5bdf\u8005\u3002 2 \u8c03\u7528uv__io_start\u5f80\u4e8b\u4ef6\u5faa\u73af\u4e2d\u63d2\u5165\u4e00\u4e2aio\u89c2\u5bdf\u8005\u961f\u5217\u3002 3 Libuv\u4f1a\u8bb0\u5f55\u6587\u4ef6\u63cf\u8ff0\u7b26\u548cio\u89c2\u5bdf\u8005\u7684\u6620\u5c04\u5173\u7cfb\u3002 4 \u5728poll io\u9636\u6bb5\u7684\u65f6\u5019\u5c31\u4f1a\u904d\u5386io\u89c2\u5bdf\u8005\u961f\u5217\uff0c\u7136\u540e\u64cd\u4f5cepoll\u53bb\u505a\u76f8\u5e94\u7684\u5904\u7406\u3002 5 \u7b49\u4eceepoll\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u62ff\u5230\u54ea\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4e8b\u4ef6\u89e6\u53d1\u4e86\uff0c\u6700\u540e\u6839\u636e\u6587\u4ef6\u63cf\u8ff0\u7b26\u627e\u5230\u5bf9\u5e94\u7684io\u89c2\u5bdf\u8005\u5e76\u6267\u884c\u4ed6\u7684\u56de\u8c03\u5c31\u884c\u3002 </p> <p>\u53e6\u5916\u6211\u4eec\u770b\u5230\uff0cpoll io\u9636\u6bb5\u4f1a\u53ef\u80fd\u4f1a\u963b\u585e\uff0c\u662f\u5426\u963b\u585e\u548c\u963b\u585e\u591a\u4e45\u53d6\u51b3\u4e8e\u4e8b\u4ef6\u5faa\u73af\u7cfb\u7edf\u5f53\u524d\u7684\u72b6\u6001\u3002\u5f53\u53d1\u751f\u963b\u585e\u7684\u65f6\u5019\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u5b9a\u65f6\u5668\u9636\u6bb5\u6309\u65f6\u6267\u884c\uff0cepoll\u963b\u585e\u7684\u65f6\u95f4\u9700\u8981\u8bbe\u7f6e\u4e3a\u7b49\u4e8e\u6700\u5feb\u5230\u671f\u5b9a\u65f6\u5668\u8282\u70b9\u7684\u65f6\u95f4\u3002</p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#_3","title":"\u8fdb\u7a0b\u548c\u8fdb\u7a0b\u95f4\u901a\u4fe1","text":""},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#_4","title":"\u521b\u5efa\u8fdb\u7a0b","text":"<p>Node.js\u4e2d\u7684\u8fdb\u7a0b\u662f\u4f7f\u7528fork+exec\u6a21\u5f0f\u521b\u5efa\u7684\uff0cfork\u5c31\u662f\u590d\u5236\u4e3b\u8fdb\u7a0b\u7684\u6570\u636e\uff0cexec\u662f\u52a0\u8f7d\u65b0\u7684\u7a0b\u5e8f\u6267\u884c\u3002Node.js\u63d0\u4f9b\u4e86\u5f02\u6b65\u548c\u540c\u6b65\u521b\u5efa\u8fdb\u7a0b\u4e24\u79cd\u6a21\u5f0f\u3002</p> <p>1 \u5f02\u6b65\u65b9\u5f0f \u5f02\u6b65\u65b9\u5f0f\u5c31\u662f\u521b\u5efa\u4e00\u4e2a\u4eba\u5b50\u8fdb\u7a0b\u540e\uff0c\u4e3b\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u72ec\u7acb\u6267\u884c\uff0c\u4e92\u4e0d\u5e72\u6270\u3002\u5728\u4e3b\u8fdb\u7a0b\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u5982\u56fe\u6240\u793a\uff0c\u4e3b\u8fdb\u7a0b\u4f1a\u8bb0\u5f55\u5b50\u8fdb\u7a0b\u7684\u4fe1\u606f\uff0c\u5b50\u8fdb\u7a0b\u9000\u51fa\u7684\u65f6\u5019\u4f1a\u7528\u5230  2 \u540c\u6b65\u65b9\u5f0f  \u540c\u6b65\u521b\u5efa\u5b50\u8fdb\u7a0b\u4f1a\u5bfc\u81f4\u4e3b\u8fdb\u7a0b\u963b\u585e\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u662f 1 \u4e3b\u8fdb\u7a0b\u4e2d\u4f1a\u65b0\u5efa\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\u7ed3\u6784\u4f53\uff0c\u7136\u540e\u57fa\u4e8e\u8fd9\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u3002 2 \u7136\u540e\u4e3b\u8fdb\u7a0b\u5c31\u5728\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\u4e2d\u6267\u884c\uff0c\u65e7\u7684\u4e8b\u4ef6\u5faa\u73af\u5c31\u88ab\u963b\u585e\u4e86\u3002 3 \u5b50\u8fdb\u7a0b\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\u4e5f\u5c31\u7ed3\u675f\u4e86\uff0c\u4ece\u800c\u56de\u5230\u65e7\u7684\u4e8b\u4ef6\u5faa\u73af\u3002  </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#_5","title":"\u8fdb\u7a0b\u95f4\u901a\u4fe1","text":"<p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0b\u7236\u5b50\u8fdb\u7a0b\u95f4\u600e\u4e48\u901a\u4fe1\u5462\uff1f\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u8fdb\u7a0b\u95f4\u7684\u865a\u62df\u5730\u5740\u662f\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u57fa\u4e8e\u8fdb\u7a0b\u5185\u5b58\u76f4\u63a5\u901a\u4fe1\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u501f\u52a9\u5185\u6838\u63d0\u4f9b\u7684\u5185\u5b58\u3002\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u79cd\uff0c\u7ba1\u9053\u3001\u4fe1\u53f7\u3001\u5171\u4eab\u5185\u5b58\u7b49\u7b49\u3002  Node.js\u9009\u53d6\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\u662fUnix\u57df\uff0cNode.js\u4e3a\u4ec0\u4e48\u4f1a\u9009\u53d6Unix\u57df\u5462\uff1f\u56e0\u4e3a\u53ea\u6709Unix\u57df\u652f\u6301\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u9012\u3002\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u9012\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u80fd\u529b\u3002</p> <p>\u9996\u5148\u6211\u4eec\u770b\u4e00\u4e0b\u6587\u4ef6\u7cfb\u7edf\u548c\u8fdb\u7a0b\u7684\u5173\u7cfb\uff0c\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u5f53\u8fdb\u7a0b\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u4ed6\u5c31\u662f\u5f62\u6210\u4e00\u4e2afd file inode\u8fd9\u6837\u7684\u5173\u7cfb\uff0c\u8fd9\u79cd\u5173\u7cfb\u5728fork\u5b50\u8fdb\u7a0b\u7684\u65f6\u5019\u4f1a\u88ab\u7ee7\u627f\u3002  \u4f46\u662f\u5982\u679c\u4e3b\u8fdb\u7a0b\u5728fork\u5b50\u8fdb\u7a0b\u4e4b\u540e\uff0c\u6253\u5f00\u4e86\u4e00\u4e2a\u6587\u4ef6\uff0c\u4ed6\u60f3\u544a\u8bc9\u5b50\u8fdb\u7a0b\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f\u5982\u679c\u4ec5\u4ec5\u662f\u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\u5bf9\u5e94\u7684\u6570\u5b57\u4f20\u7ed9\u5b50\u8fdb\u7a0b\uff0c\u5b50\u8fdb\u7a0b\u662f\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u8fd9\u4e2a\u6570\u5b57\u5bf9\u5e94\u7684\u6587\u4ef6\u7684\u3002\u5982\u679c\u901a\u8fc7Unix\u57df\u53d1\u9001\u7684\u8bdd\uff0c\u7cfb\u7edf\u4f1a\u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\u548c\u6587\u4ef6\u7684\u5173\u7cfb\u4e5f\u590d\u5236\u5230\u5b50\u8fdb\u7a0b\u4e2d\u3002 </p> <p>\u5177\u4f53\u5b9e\u73b0 1 Node.js\u5e95\u5c42\u901a\u8fc7socketpair\u521b\u5efa\u4e24\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u4e3b\u8fdb\u7a0b\u62ff\u5230\u5176\u4e2d\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5e76\u4e14\u5c01\u88c5send\u548con meesage\u65b9\u6cd5\u8fdb\u884c\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002 2 \u63a5\u7740\u4e3b\u8fdb\u7a0b\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u628a\u53e6\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u7ed9\u5b50\u8fdb\u7a0b\u3002 3 \u5b50\u8fdb\u7a0b\u540c\u6837\u57fa\u4e8e\u6587\u4ef6\u63cf\u8ff0\u7b26\u5c01\u88c5\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u7684\u63a5\u53e3\u3002 \u8fd9\u6837\u4e24\u4e2a\u8fdb\u7a0b\u5c31\u53ef\u4ee5\u8fdb\u884c\u901a\u4fe1\u4e86\u3002 </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#_6","title":"\u7ebf\u7a0b\u548c\u7ebf\u7a0b\u95f4\u901a\u4fe1","text":""},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#_7","title":"\u7ebf\u7a0b\u67b6\u6784","text":"<p>Node.js\u662f\u5355\u7ebf\u7a0b\u7684\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u5904\u7406\u8017\u65f6\u7684\u64cd\u4f5c\uff0cNode.js\u5728\u652f\u6301\u591a\u8fdb\u7a0b\u4e4b\u540e\uff0c\u53c8\u652f\u6301\u4e86\u591a\u7ebf\u7a0b\u3002Node.js\u4e2d\u591a\u7ebf\u7a0b\u7684\u67b6\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002\u6bcf\u4e2a\u5b50\u7ebf\u7a0b\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u4e8b\u4ef6\u5faa\u73af\uff0c\u4f46\u662f\u6240\u6709\u7684\u7ebf\u7a0b\u4f1a\u5171\u4eab\u5e95\u5c42\u7684Libuv\u7ebf\u7a0b\u6c60\u3002 </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#_8","title":"\u521b\u5efa\u7ebf\u7a0b","text":"<p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b\u521b\u5efa\u7ebf\u7a0b\u7684\u8fc7\u7a0b\u3002  \u5f53\u6211\u4eec\u8c03\u7528new Worker\u521b\u5efa\u7ebf\u7a0b\u7684\u65f6\u5019 1  \u4e3b\u7ebf\u7a0b\u4f1a\u9996\u5148\u521b\u5efa\u521b\u5efa\u4e24\u4e2a\u901a\u4fe1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u63a5\u7740\u5f80\u5bf9\u7aef\u53d1\u9001\u4e00\u4e2a\u52a0\u8f7djs\u6587\u4ef6\u7684\u6d88\u606f\u3002 2 \u7136\u540e\u8c03\u7528\u5e95\u5c42\u63a5\u53e3\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u3002 3 \u8fd9\u65f6\u5019\u5b50\u7ebf\u7a0b\u5c31\u88ab\u521b\u5efa\u51fa\u6765\u4e86\uff0c\u5b50\u7ebf\u7a0b\u88ab\u521b\u5efa\u540e\u9996\u5148\u521d\u59cb\u5316\u81ea\u5df1\u7684\u6267\u884c\u73af\u5883\u548c\u4e0a\u4e0b\u6587\u3002 4 \u63a5\u7740\u4ece\u901a\u4fe1\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u8bfb\u53d6\u6d88\u606f\uff0c\u7136\u540e\u52a0\u8f7d\u5bf9\u5e94\u7684js\u6587\u4ef6\u6267\u884c\uff0c\u6700\u540e\u8fdb\u5165\u4e8b\u4ef6\u5faa\u73af\u3002  </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#_9","title":"\u7ebf\u7a0b\u95f4\u901a\u4fe1","text":"<p>\u90a3\u4e48Node.js\u4e2d\u7684\u7ebf\u7a0b\u662f\u5982\u4f55\u901a\u4fe1\u7684\u5462\uff1f\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u4e0d\u4e00\u6837\uff0c\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u4e0d\u80fd\u76f4\u63a5\u901a\u4fe1\uff0c\u4f46\u662f\u7ebf\u7a0b\u7684\u5730\u5740\u662f\u5171\u4eab\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u57fa\u4e8e\u8fdb\u7a0b\u7684\u5185\u5b58\u76f4\u63a5\u8fdb\u884c\u901a\u4fe1\u3002  \u4e0b\u9762\u6211\u4eec\u770b\u770bNode.js\u662f\u5982\u4f55\u5b9e\u73b0\u7ebf\u7a0b\u95f4\u901a\u4fe1\u7684\u3002\u4e86\u89e3Node.js\u7ebf\u7a0b\u95f4\u901a\u4fe1\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u770b\u4e00\u4e0b\u4e00\u4e9b\u6838\u5fc3\u6570\u636e\u7ed3\u6784\u3002 1 Message\u4ee3\u8868\u4e00\u4e2a\u6d88\u606f\u3002 2 MessagePortData\u662f\u5bf9\u64cd\u4f5cMessage\u7684\u5c01\u88c5\u548c\u5bf9\u6d88\u606f\u7684\u627f\u8f7d\u3002 3 MessagePort\u662f\u4ee3\u8868\u901a\u4fe1\u7684\u7aef\u70b9\uff0c\u662f\u5bf9MessagePortData\u7684\u5c01\u88c5\u3002 4 MessageChannel\u662f\u4ee3\u8868\u901a\u4fe1\u7684\u4e24\u7aef\uff0c\u5373\u4e24\u4e2aMessagePort\u3002 </p> <p>\u6211\u4eec\u770b\u5230\u4e24\u4e2aport\u662f\u4e92\u76f8\u5173\u8054\u7684\uff0c\u5f53\u9700\u8981\u7ed9\u5bf9\u7aef\u53d1\u9001\u6d88\u606f\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u5f80\u5bf9\u7aef\u7684\u6d88\u606f\u961f\u5217\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u5c31\u884c\u3002</p> <p>\u6211\u4eec\u6765\u770b\u770b\u901a\u4fe1\u7684\u5177\u4f53\u8fc7\u7a0b 1 \u7ebf\u7a0b1\u8c03\u7528postMessage\u53d1\u9001\u6d88\u606f\u3002 2 postMessage\u4f1a\u5148\u5bf9\u6d88\u606f\u8fdb\u884c\u5e8f\u5217\u5316\u3002 3 \u7136\u540e\u62ff\u5230\u5bf9\u7aef\u6d88\u606f\u961f\u5217\u7684\u9501\uff0c\u5e76\u628a\u6d88\u606f\u63d2\u5165\u961f\u5217\u4e2d\u3002 4 \u6210\u529f\u53d1\u9001\u6d88\u606f\u540e\uff0c\u8fd8\u9700\u8981\u901a\u77e5\u6d88\u606f\u63a5\u6536\u8005\u6240\u5728\u7684\u7ebf\u7a0b\u3002 5 \u6d88\u606f\u63a5\u6536\u8005\u4f1a\u5728\u4e8b\u4ef6\u5faa\u73af\u7684poll io\u9636\u6bb5\u5904\u7406\u8fd9\u4e2a\u6d88\u606f\u3002</p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#cluster","title":"Cluster","text":"<p>\u6211\u4eec\u77e5\u9053Node.js\u662f\u5355\u8fdb\u7a0b\u67b6\u6784\u7684\uff0c\u4e0d\u80fd\u5f88\u597d\u5730\u5229\u7528\u591a\u6838\uff0cCluster\u6a21\u5757\u4f7f\u5f97Node.js\u652f\u6301\u591a\u8fdb\u7a0b\u7684\u670d\u52a1\u5668\u67b6\u6784\u3002\u652f\u6301\u8f6e\u8be2\uff08\u4e3b\u8fdb\u7a0baccept\uff09\u548c\u5171\u4eab\uff08\u5b50\u8fdb\u7a0baccept\uff09\u4e24\u79cd\u6a21\u5f0f\u3002\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8fdb\u884c\u8bbe\u7f6e\u3002\u591a\u8fdb\u7a0b\u7684\u670d\u52a1\u5668\u67b6\u6784\u901a\u5e38\u6709\u4e24\u79cd\u6a21\u5f0f\uff0c\u7b2c\u4e00\u79cd\u662f\u4e3b\u8fdb\u7a0b\u5904\u7406\u8fde\u63a5\uff0c\u7136\u540e\u5206\u53d1\u7ed9\u5b50\u8fdb\u7a0b\u5904\u7406\uff0c\u7b2c\u4e8c\u79cd\u662f\u5b50\u8fdb\u7a0b\u5171\u4eabsocket\uff0c\u901a\u8fc7\u7ade\u4e89\u7684\u65b9\u5f0f\u83b7\u53d6\u8fde\u63a5\u8fdb\u884c\u5904\u7406\u3002  \u6211\u4eec\u770b\u4e00\u4e0bCluster\u6a21\u5757\u662f\u5982\u4f55\u4f7f\u7528\u7684\u3002  \u8fd9\u4e2a\u662fCluster\u6a21\u5757\u7684\u4f7f\u7528\u4f8b\u5b50 1 \u4e3b\u8fdb\u7a0b\u8c03\u7528fork\u521b\u5efa\u5b50\u8fdb\u7a0b\u3002 2 \u5b50\u8fdb\u7a0b\u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\u3002 \u901a\u5e38\u6765\u8bf4\uff0c\u591a\u4e2a\u8fdb\u7a0b\u76d1\u542c\u540c\u4e00\u4e2a\u7aef\u53e3\u4f1a\u62a5\u9519\uff0c\u6211\u4eec\u770b\u770bNode.js\u91cc\u662f\u600e\u4e48\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u7684\u3002  </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#accept","title":"\u4e3b\u8fdb\u7a0baccept","text":"<p> \u6211\u4eec\u5148\u770b\u4e00\u4e0b\u4e3b\u8fdb\u7a0baccept\u8fd9\u79cd\u6a21\u5f0f\u3002 1 \u9996\u5148\u4e3b\u8fdb\u7a0bfork\u591a\u4e2a\u5b50\u8fdb\u7a0b\u5904\u7406\u3002 2 \u7136\u540e\u5728\u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u91cc\u8c03\u7528listen\u3002 3 \u8c03\u7528listen\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5b50\u8fdb\u7a0b\u4f1a\u7ed9\u4e3b\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u3002 4 \u8fd9\u65f6\u5019\u4e3b\u8fdb\u7a0b\u5c31\u4f1a\u521b\u5efa\u4e00\u4e2asocket\uff0c\u7ed1\u5b9a\u5730\u5740\uff0c\u5e76\u7f6e\u4e3a\u76d1\u542c\u72b6\u6001\u3002 5 \u5f53\u8fde\u63a5\u5230\u6765\u7684\u65f6\u5019\uff0c\u4e3b\u8fdb\u7a0b\u8d1f\u8d23\u63a5\u6536\u8fde\u63a5\uff0c\u7136\u540e\u7136\u540e\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f20\u9012\u7684\u65b9\u5f0f\u5206\u53d1\u7ed9\u5b50\u8fdb\u7a0b\u5904\u7406\u3002  </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#accept_1","title":"\u5b50\u8fdb\u7a0baccept","text":"<p> \u6211\u4eec\u518d\u770b\u4e00\u4e0b\u5b50\u8fdb\u7a0baccept\u8fd9\u79cd\u6a21\u5f0f\u3002 1 \u9996\u5148\u4e3b\u8fdb\u7a0bfork\u591a\u4e2a\u5b50\u8fdb\u7a0b\u5904\u7406\u3002 2 \u7136\u540e\u5728\u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u91cc\u8c03\u7528listen\u3002 3 \u8c03\u7528listen\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5b50\u8fdb\u7a0b\u4f1a\u7ed9\u4e3b\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u3002 4 \u8fd9\u65f6\u5019\u4e3b\u8fdb\u7a0b\u5c31\u4f1a\u521b\u5efa\u4e00\u4e2asocket\uff0c\u5e76\u7ed1\u5b9a\u5730\u5740\u3002\u4f46\u4e0d\u4f1a\u628a\u5b83\u7f6e\u4e3a\u76d1\u542c\u72b6\u6001\uff0c\u800c\u662f\u628a\u8fd9\u4e2asocket\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u65b9\u5f0f\u8fd4\u56de\u7ed9\u5b50\u8fdb\u7a0b\u3002 5 \u5f53\u8fde\u63a5\u5230\u6765\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u8fde\u63a5\u4f1a\u88ab\u67d0\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u5904\u7406\u3002  </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#libuv","title":"Libuv\u7ebf\u7a0b\u6c60","text":"<p>\u4e3a\u4ec0\u4e48\u9700\u8981\u4f7f\u7528\u7ebf\u7a0b\u6c60\uff1f\u6587\u4ef6IO\u3001DNS\u3001CPU\u5bc6\u96c6\u578b\u4e0d\u9002\u5408\u5728Node.js\u4e3b\u7ebf\u7a0b\u5904\u7406\uff0c\u9700\u8981\u628a\u8fd9\u4e9b\u4efb\u52a1\u653e\u5230\u5b50\u7ebf\u7a0b\u5904\u7406\u3002  \u4e86\u89e3\u7ebf\u7a0b\u6c60\u5b9e\u73b0\u4e4b\u524d\u6211\u4eec\u5148\u770b\u770bLibuv\u7684\u5f02\u6b65\u901a\u4fe1\u673a\u5236\uff0c\u5f02\u6b65\u901a\u4fe1\u6307\u7684\u662fLibuv\u4e3b\u7ebf\u7a0b\u548c\u5176\u4ed6\u5b50\u7ebf\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u673a\u5236\u3002\u6bd4\u5982Libuv\u4e3b\u7ebf\u7a0b\u6b63\u5728\u6267\u884c\u56de\u8c03\uff0c\u5b50\u7ebf\u7a0b\u540c\u65f6\u5b8c\u6210\u4e86\u4e00\u4e2a\u4efb\u52a1\uff0c\u90a3\u4e48\u5982\u4f55\u901a\u77e5\u4e3b\u7ebf\u7a0b\uff0c\u8fd9\u5c31\u9700\u8981\u7528\u5230\u5f02\u6b65\u901a\u4fe1\u673a\u5236\u3002  1 Libuv\u5185\u90e8\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5f02\u6b65\u901a\u4fe1\u7684\u961f\u5217\uff0c\u9700\u8981\u5f02\u6b65\u901a\u4fe1\u7684\u65f6\u5019\uff0c\u5c31\u5f80\u91cc\u9762\u63d2\u5165\u4e00\u4e2aasync\u8282\u70b9\u3002 2 \u540c\u65f6Libuv\u8fd8\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5f02\u6b65\u901a\u4fe1\u76f8\u5173\u7684io\u89c2\u5bdf\u8005\u3002 3 \u5f53\u6709\u5f02\u6b65\u4efb\u52a1\u5b8c\u6210\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u8bbe\u7f6e\u5bf9\u5e94async\u8282\u70b9\u7684pending\u5b57\u6bb5\u4e3a1\uff0c\u8bf4\u660e\u4efb\u52a1\u5b8c\u6210\u4e86\u3002\u5e76\u4e14\u901a\u77e5\u4e3b\u7ebf\u7a0b\u3002 4 \u4e3b\u7ebf\u7a0b\u5728poll io\u9636\u6bb5\u5c31\u4f1a\u6267\u884c\u5904\u7406\u5f02\u6b65\u901a\u4fe1\u7684\u56de\u8c03\uff0c\u5728\u56de\u8c03\u91cc\u4f1a\u6267\u884cpending\u4e3a1\u7684\u8282\u70b9\u7684\u56de\u8c03\u3002  </p> <p>\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u7ebf\u7a0b\u6c60\u7684\u5b9e\u73b0\u3002 1 \u7ebf\u7a0b\u6c60\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5f85\u5904\u7406\u4efb\u52a1\u961f\u5217\uff0c\u591a\u4e2a\u7ebf\u7a0b\u4e92\u65a5\u5730\u4ece\u961f\u5217\u4e2d\u6458\u4e0b\u4efb\u52a1\u8fdb\u884c\u5904\u7406\u3002 2 \u5f53\u7ed9\u7ebf\u7a0b\u6c60\u63d0\u4ea4\u4e00\u4e2a\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u5c31\u662f\u5f80\u8fd9\u4e2a\u961f\u5217\u91cc\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u3002 3 \u5f53\u5b50\u7ebf\u7a0b\u5904\u7406\u5b8c\u4efb\u52a1\u540e\uff0c\u5c31\u4f1a\u628a\u8fd9\u4e2a\u4efb\u52a1\u63d2\u5165\u5230\u4e8b\u4ef6\u5faa\u73af\u672c\u8eab\u7ef4\u62a4\u5230\u4e00\u4e2a\u5df2\u5b8c\u6210\u4efb\u52a1\u961f\u5217\u4e2d\uff0c\u5e76\u4e14\u901a\u8fc7\u5f02\u6b65\u901a\u4fe1\u7684\u673a\u5236\u901a\u77e5\u4e3b\u7ebf\u7a0b\u3002 4 \u4e3b\u7ebf\u7a0b\u5728poll io\u9636\u6bb5\u5c31\u4f1a\u6267\u884c\u4efb\u52a1\u5bf9\u5e94\u7684\u56de\u8c03\u3002 </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#_10","title":"\u4fe1\u53f7","text":"<p> \u4e0a\u56fe\u662f\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u4fe1\u53f7\u7684\u8868\u793a\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528\u4e00\u4e2along\u7c7b\u578b\u8868\u793a\u8fdb\u7a0b\u6536\u5230\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u6807\u8bb0\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\u3002</p> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u4fe1\u53f7\u5728Libuv\u4e2d\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002  1 Libuv\u4e2d\u7ef4\u62a4\u4e86\u4e00\u4e2a\u7ea2\u9ed1\u6811\uff0c\u5f53\u6211\u4eec\u76d1\u542c\u4e00\u4e2a\u65b0\u7684\u4fe1\u53f7\u65f6\u5c31\u4f1a\u65b0\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u3002 2 \u5728\u63d2\u5165\u7b2c\u4e00\u4e2a\u8282\u70b9\u65f6\uff0cLibuv\u4f1a\u5c01\u88c5\u4e00\u4e2aio\u89c2\u5bdf\u8005\u6ce8\u518c\u5230epoll\u4e2d\uff0c\u7528\u6765\u76d1\u542c\u662f\u5426\u6709\u4fe1\u53f7\u9700\u8981\u5904\u7406\u3002 3 \u5f53\u4fe1\u53f7\u53d1\u751f\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u6839\u636e\u4fe1\u53f7\u7c7b\u578b\u4ece\u7ea2\u9ed1\u6811\u4e2d\u627e\u5230\u5bf9\u5e94\u7684handle\uff0c\u7136\u540e\u901a\u77e5\u4e3b\u7ebf\u7a0b\u3002 4 \u4e3b\u7ebf\u7a0b\u5728poll io\u9636\u6bb5\u5c31\u4f1a\u9010\u4e2a\u6267\u884c\u56de\u8c03\u3002  </p> <p>Node.js\u4e2d\uff0c\u662f\u901a\u8fc7\u76d1\u542cnewListener\u4e8b\u4ef6\u6765\u5b9e\u73b0\u4fe1\u53f7\u7684\u76d1\u542c\u7684\uff0cnewListener\u662f\u4e00\u79cdhooks\u7684\u673a\u5236\u3002\u6bcf\u6b21\u76d1\u542c\u4e8b\u4ef6\u7684\u65f6\u5019\uff0c\u5982\u679c\u76d1\u542c\u4e86\u8be5\u4e8b\u4ef6\uff0c\u90a3\u5c31\u4f1a\u89e6\u53d1newListener\u4e8b\u4ef6\u3002\u6240\u4ee5\u5f53\u6267\u884cprocess.on(\u2019SIGINT\u2019)\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528startListeningIfSignal\u6ce8\u518c\u4e00\u4e2a\u7ea2\u9ed1\u6811\u8282\u70b9\u3002 \u5e76\u5728events\u6a21\u5757\u4fdd\u5b58\u4e86\u8ba2\u9605\u5173\u7cfb\uff0c\u4fe1\u53f7\u89e6\u53d1\u65f6\uff0c\u6267\u884cprocess.emit(\u2018SIGINT\u2019)\u901a\u77e5\u8ba2\u9605\u8005\u3002 </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#_11","title":"\u6587\u4ef6","text":""},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#_12","title":"\u6587\u4ef6\u64cd\u4f5c","text":"<p>Node.js\u4e2d\u6587\u4ef6\u64cd\u4f5c\u5206\u4e3a\u540c\u6b65\u548c\u5f02\u6b65\u6a21\u5f0f\uff0c\u540c\u6b65\u6a21\u5f0f\u5c31\u662f\u5728\u4e3b\u8fdb\u7a0b\u4e2d\u76f4\u63a5\u8c03\u7528\u6587\u4ef6\u7cfb\u7edf\u7684api\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53ef\u80fd\u4f1a\u5f15\u8d77\u8fdb\u7a0b\u7684\u963b\u585e\uff0c\u5f02\u6b65\u65b9\u5f0f\u662f\u501f\u52a9\u4e86Libuv\u7ebf\u7a0b\u6c60\uff0c\u628a\u963b\u585e\u64cd\u4f5c\u653e\u5230\u5b50\u7ebf\u7a0b\u4e2d\u53bb\u5904\u7406\uff0c\u4e3b\u7ebf\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u5904\u7406\u5176\u4ed6\u64cd\u4f5c\u3002 </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#_13","title":"\u6587\u4ef6\u76d1\u542c","text":"<p>Node.js\u4e2d\u6587\u4ef6\u76d1\u542c\u63d0\u4f9b\u4e86\u57fa\u4e8e\u8f6e\u8be2\u548c\u8ba2\u9605\u53d1\u5e03\u4e24\u79cd\u6a21\u5f0f\u3002\u6211\u4eec\u5148\u770b\u4e00\u4e0b\u8f6e\u8be2\u6a21\u5f0f\u7684\u5b9e\u73b0\uff0c\u8f6e\u8be2\u6a21\u5f0f\u6bd4\u8f83\u7b80\u5355\uff0c\u4ed6\u662f\u4f7f\u7528\u5b9a\u65f6\u5668\u5b9e\u73b0\u7684\uff0cNode.js\u4f1a\u5b9a\u65f6\u6267\u884c\u56de\u8c03\uff0c\u5728\u56de\u8c03\u4e2d\u6bd4\u8f83\u5f53\u524d\u6587\u4ef6\u7684\u5143\u6570\u636e\u548c\u4e0a\u4e00\u6b21\u83b7\u53d6\u7684\u662f\u5426\u4e0d\u4e00\u6837\uff0c\u5982\u679c\u662f\u5219\u8bf4\u660e\u6587\u4ef6\u6539\u53d8\u4e86\u3002  \u7b2c\u4e8c\u79cd\u76d1\u542c\u6a21\u5f0f\u662f\u66f4\u9ad8\u6548\u7684inotify\u673a\u5236\uff0cinotify\u662f\u57fa\u4e8e\u8ba2\u9605\u53d1\u5e03\u6a21\u5f0f\u7684\uff0c\u907f\u514d\u4e86\u65e0\u6548\u7684\u8f6e\u8be2\u3002\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b\u64cd\u4f5c\u7cfb\u7edf\u7684inotify\u673a\u5236\uff0cinotify\u548cepoll\u7684\u4f7f\u7528\u662f\u7c7b\u4f3c\u7684 1 \u9996\u5148\u901a\u8fc7\u63a5\u53e3\u83b7\u53d6\u4e00\u4e2ainotify\u5b9e\u4f8b\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 2 \u7136\u540e\u901a\u8fc7\u589e\u5220\u6539\u67e5\u63a5\u53e3\u64cd\u4f5cinotify\u5b9e\u4f8b\uff0c\u6bd4\u5982\u9700\u8981\u76d1\u542c\u4e00\u4e2a\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u5c31\u8c03\u7528\u63a5\u53e3\u5f80inotify\u5b9e\u4f8b\u4e2d\u65b0\u589e\u4e00\u4e2a\u8ba2\u9605\u5173\u7cfb\u3002 3 \u5f53\u6587\u4ef6\u53d1\u751f\u6539\u53d8\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528read\u63a5\u53e3\u83b7\u53d6\u54ea\u4e9b\u6587\u4ef6\u53d1\u751f\u4e86\u6539\u53d8\uff0cinotify\u901a\u5e38\u7ed3\u5408epoll\u6765\u4f7f\u7528\u3002  </p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770bNode.js\u4e2d\u662f\u5982\u4f55\u57fa\u4e8einotify\u673a\u5236 \u5b9e\u73b0\u6587\u4ef6\u76d1\u542c\u7684\u3002 </p> <p>1 \u9996\u5148Node.js\u628ainotify\u5b9e\u4f8b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u548c\u56de\u8c03\u5c01\u88c5\u6210io\u89c2\u5bdf\u8005\u6ce8\u518c\u5230epoll\u4e2d\u3002 2 \u5f53\u9700\u8981\u76d1\u542c\u4e00\u4e2a\u6587\u4ef6\u7684\u65f6\u5019\uff0cNode.js\u4f1a\u8c03\u7528\u7cfb\u7edf\u51fd\u6570\u5f80inotify\u5b9e\u4f8b\u4e2d\u63d2\u5165\u4e00\u4e2a\u9879\uff0c\u5e76\u4e14\u62ff\u5230\u4e00\u4e2aid\uff0c\u63a5\u7740Node.js\u628a\u8fd9\u4e2aid\u548c\u6587\u4ef6\u4fe1\u606f\u5c01\u88c5\u5230\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\uff0c\u7136\u540e\u63d2\u5165\u7ea2\u9ed1\u6811\u3002 3 Node.js\u7ef4\u62a4\u4e86\u4e00\u68f5\u7ea2\u9ed1\u6811\uff0c\u7ea2\u9ed1\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e86\u88ab\u76d1\u542c\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u548c\u4e8b\u4ef6\u89e6\u53d1\u65f6\u7684\u56de\u8c03\u5217\u8868\u3002 4 \u5982\u679c\u6709\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u5728poll io\u9636\u6bb5\u5c31\u4f1a\u6267\u884c\u5bf9\u5e94\u7684\u56de\u8c03\uff0c\u56de\u8c03\u91cc\u4f1a\u5224\u65ad\u54ea\u4e9b\u6587\u4ef6\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u7136\u540e\u6839\u636eid\u4ece\u7ea2\u9ed1\u6811\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u63a5\u53e3\uff0c\u4ece\u800c\u6267\u884c\u5bf9\u5e94\u7684\u56de\u8c03\u3002  </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#tcp","title":"TCP","text":"<p>\u6211\u4eec\u901a\u5e38\u4f1a\u8c03\u7528http.createServer.listen\u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fc7\u7a0b\u5230\u5e95\u505a\u4e86\u4ec0\u4e48\u5462\uff1flisten\u51fd\u6570\u5176\u5b9e\u662f\u5bf9\u7f51\u7edcapi\u7684\u5c01\u88c5\uff0c 1 \u9996\u5148\u83b7\u53d6\u4e00\u4e2asocket\u3002 2 \u7136\u540e\u7ed1\u5b9a\u5730\u5740\u5230\u8be5socket\u4e2d\u3002 3 \u63a5\u7740\u8c03\u7528listen\u51fd\u6570\u628a\u8be5socket\u6539\u6210\u76d1\u542c\u72b6\u6001\u3002 4 \u6700\u540e\u628a\u8be5socket\u6ce8\u518c\u5230epoll\u4e2d\uff0c\u7b49\u5f85\u8fde\u63a5\u7684\u5230\u6765\u3002  </p> <p>\u90a3\u4e48Node.js\u662f\u5982\u4f55\u5904\u7406\u8fde\u63a5\u7684\u5462\uff1f\u5f53\u5efa\u7acb\u4e86\u4e00\u4e2atcp\u8fde\u63a5\u540e\uff0cNode.js\u4f1a\u5728poll io\u9636\u6bb5\u6267\u884c\u5bf9\u5e94\u7684\u56de\u8c03\u3002 1 Node.js\u4f1a\u8c03\u7528accept\u6458\u4e0b\u4e00\u4e2atcp\u8fde\u63a5\u3002 2 \u63a5\u7740\u4f1a\u8c03c++\u5c42\uff0cc++\u5c42\u4f1a\u65b0\u5efa\u4e00\u4e2a\u5bf9\u8c61\u8868\u793a\u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u7684\u5b9e\u4f8b\u3002 3 \u63a5\u7740\u56de\u8c03js\u5c42\uff0cjs\u4e5f\u4f1a\u65b0\u5efa\u4e00\u4e2a\u5bf9\u8c61\u8868\u793a\u901a\u4fe1\u7684\u5b9e\u4f8b\uff0c\u4e3b\u8981\u662f\u7ed9\u7528\u6237\u4f7f\u7528\u3002 4 \u6700\u540e\u6ce8\u518c\u7b49\u5f85\u53ef\u8bfb\u4e8b\u4ef6\uff0c\u7b49\u5f85\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\u8fc7\u6765\u3002  </p> <p>\u8fd9\u5c31\u662fNode.js\u5904\u7406\u4e00\u4e2a\u8fde\u63a5\u7684\u8fc7\u7a0b\uff0c\u5904\u7406\u5b8c\u4e00\u4e2a\u8fde\u63a5\u540e\uff0cNode.js\u4f1a\u5224\u65ad\u662f\u5426\u8bbe\u7f6e\u4e86single_accept\u6807\u8bb0\uff0c\u5982\u679c\u6709\u5219\u7761\u7720\u4e00\u6bb5\u65f6\u95f4\uff0c\u7ed9\u5176\u4ed6\u8fdb\u7a0b\u5904\u7406\u5269\u4e0b\u7684\u8fde\u63a5\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u907f\u514d\u8d1f\u8d23\u4e0d\u5747\u8861\uff0c\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u8be5\u6807\u8bb0\uff0cNode.js\u4f1a\u7ee7\u7eed\u5c1d\u8bd5\u5904\u7406\u4e0b\u4e00\u4e2a\u8fde\u63a5\u3002\u8fd9\u5c31\u662fNode.js\u5904\u7406\u8fde\u63a5\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002 </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#udp","title":"UDP","text":"<p>\u56e0\u4e3audp\u662f\u975e\u8fde\u63a5\u3001\u4e0d\u53ef\u9760\u7684\u534f\u8bae\uff0c\u5728\u5b9e\u73b0\u548c\u4f7f\u7528\u4e0a\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\uff0c\u8fd9\u91cc\u8bb2\u4e00\u4e0b\u53d1\u9001udp\u6570\u636e\u7684\u8fc7\u7a0b\uff0c\u5f53\u6211\u4eec\u53d1\u9001\u4e00\u4e2audp\u6570\u636e\u5305\u7684\u65f6\u5019\uff0cLibuv\u4f1a\u628a\u6570\u636e\u5148\u63d2\u5165\u7b49\u5f85\u53d1\u9001\u961f\u5217\uff0c\u63a5\u7740\u5728epoll\u4e2d\u6ce8\u518c\u7b49\u5f85\u53ef\u5199\u4e8b\u4ef6\uff0c\u5f53\u53ef\u5199\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0cLibuv\u4f1a\u904d\u5386\u7b49\u5f85\u53d1\u9001\u961f\u5217\uff0c\u9010\u4e2a\u8282\u70b9\u53d1\u9001\uff0c\u6210\u529f\u53d1\u9001\u540e\uff0cLibuv\u4f1a\u628a\u8282\u70b9\u79fb\u5230\u53d1\u9001\u6210\u529f\u961f\u5217\uff0c\u5e76\u5f80pending\u9636\u6bb5\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u5728pending\u9636\u6bb5\uff0cLibuv\u5c31\u4f1a\u6267\u884c\u53d1\u9001\u5b8c\u6210\u961f\u5217\u91cc\u6bcf\u4e2a\u8282\u70b9\u7684\u4f1a\u8c03\u901a\u77e5\u8c03\u7528\u65b9\u53d1\u9001\u7ed3\u675f\u3002 </p>"},{"location":"chapter29-Node.js%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AF%87%EF%BC%89/#dns","title":"DNS","text":"<p>\u56e0\u4e3a\u901a\u8fc7\u57df\u540d\u67e5\u627eip\u6216\u901a\u8fc7ip\u67e5\u627e\u57df\u540d\u7684api\u662f\u963b\u585e\u5f0f\u7684\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u529f\u80fd\u662f\u501f\u52a9\u4e86Libuv\u7684\u7ebf\u7a0b\u6c60\u5b9e\u73b0\u7684\u3002\u53d1\u8d77\u4e00\u4e2a\u67e5\u627e\u64cd\u4f5c\u7684\u65f6\u5019\uff0cNode.js\u4f1a\u5f80\u7ebf\u7a0b\u6c60\u63d0\u53ca\u4e00\u4e2a\u4efb\u52a1\uff0c\u7136\u540e\u5c31\u7ee7\u7eed\u5904\u7406\u5176\u4ed6\u4e8b\u60c5\uff0c\u540c\u65f6\uff0c\u7ebf\u7a0b\u6c60\u7684\u5b50\u7ebf\u7a0b\u4f1a\u8c03\u7528\u5e93\u51fd\u6570\u505adns\u67e5\u8be2\uff0c\u67e5\u8be2\u7ed3\u675f\u540e\uff0c\u5b50\u7ebf\u7a0b\u4f1a\u628a\u7ed3\u679c\u4ea4\u7ed9\u4e3b\u7ebf\u7a0b\u3002\u8fd9\u5c31\u662f\u6574\u4e2a\u67e5\u627e\u8fc7\u7a0b\u3002  \u5176\u4ed6\u7684dns\u64cd\u4f5c\u662f\u901a\u8fc7cares\u5b9e\u73b0\u7684\uff0ccares\u662f\u4e00\u4e2a\u5f02\u6b65dns\u5e93\uff0c\u6211\u4eec\u77e5\u9053dns\u662f\u4e00\u4e2a\u5e94\u7528\u5c42\u534f\u8bae\uff0ccares\u5c31\u662f\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u534f\u8bae\u3002\u6211\u4eec\u770b\u4e00\u4e0bNode.js\u662f\u600e\u4e48\u4f7f\u7528cares\u5b9e\u73b0dns\u64cd\u4f5c\u7684\u3002 </p> <p>1 \u9996\u5148Node.js\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u4f1a\u521d\u59cb\u5316cares\u5e93\uff0c\u5176\u4e2d\u6700\u91cd\u8981\u7684\u662f\u8bbe\u7f6esocket\u53d8\u66f4\u7684\u56de\u8c03\u3002\u6211\u4eec\u4e00\u4f1a\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u56de\u8c03\u7684\u4f5c\u7528\u3002 2 \u5f53\u6211\u4eec\u53d1\u8d77\u4e00\u4e2adns\u64cd\u4f5c\u7684\u65f6\u5019\uff0cNode.js\u4f1a\u8c03\u7528cares\u7684\u63a5\u53e3\uff0ccares\u63a5\u53e3\u4f1a\u521b\u5efa\u4e00\u4e2asocket\u5e76\u53d1\u8d77\u4e00\u4e2adns\u67e5\u8be2\uff0c\u63a5\u7740\u901a\u8fc7\u72b6\u6001\u53d8\u66f4\u56de\u8c03\u628asocket\u4f20\u7ed9Node.js\u3002 3  Node.js\u628a\u8fd9\u4e2asocket\u6ce8\u518c\u5230epoll\u4e2d\uff0c\u7b49\u5f85\u67e5\u8be2\u7ed3\u679c\uff0c\u5f53\u67e5\u8be2\u7ed3\u679c\u8fd4\u56de\u7684\u65f6\u5019\uff0cNode.js\u4f1a\u8c03\u7528cares\u7684\u51fd\u6570\u8fdb\u884c\u89e3\u6790\u3002\u6700\u540e\u8c03\u7528js\u56de\u8c03\u901a\u77e5\u7528\u6237\u3002  </p> <p>\u4ee5\u4e0a\u5c31\u662f\u6240\u6709\u5206\u4eab\u7684\u5185\u5bb9\uff0c\u8c22\u8c22\u3002 \u66f4\u591a\u5185\u5bb9\u53c2\u8003\uff1ahttps://github.com/theanarkh/understand-nodejs\u200b</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/","title":"30-Node.js \u7684 trace events \u67b6\u6784","text":"<p>\u524d\u8a00\uff1a trace \u7cfb\u7edf\u7528\u4e8e\u6536\u96c6\u5185\u6838\u7684\u6570\u636e\uff0c\u672c\u6587\u4ecb\u7ecd\u5728 Node.js \u4e2d trace \u7684\u67b6\u6784\u548c\u5b9e\u73b0\uff0c\u56e0\u4e3a Node.js \u7684 trace \u7cfb\u7edf\u662f\u57fa\u4e8e V8 \u7684\uff0c\u6240\u4ee5\u4e5f\u4f1a\u4ecb\u7ecd V8 \u90e8\u5206\u3002\u56e0\u4e3a\u5b9e\u73b0\u7ec6\u8282\u6bd4\u8f83\u591a\uff0c\u903b\u8f91\u4e5f\u6bd4\u8f83\u590d\u6742\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u914d\u5408\u6e90\u7801\u4e00\u8d77\u9605\u8bfb\u6216\u8005\u770b\u4e00\u4e0b\u524d\u9762\u7684\u76f8\u5173\u6587\u7ae0\u3002</p> <p>\u56e0\u4e3a Node.js \u7684 trace \u4f53\u7cfb\u662f\u57fa\u4e8e V8 \u7684\uff0c\u6240\u4ee5\u5148\u6765\u770b V8 \u7684\u5b9e\u73b0\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#1-v8","title":"1 V8 \u7684\u5b9e\u73b0","text":""},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#11-traceobject","title":"1.1. TraceObject","text":"<p>TraceObject \u5bf9\u5e94\u7528\u4e8e\u8868\u793a\u4e00\u4e2a trace \u4e8b\u4ef6\u7684\u4fe1\u606f\u3002\u4e0b\u9762\u662f\u4e00\u6b21  trace \u4e8b\u4ef6\u9700\u8981\u4fdd\u5b58\u7684\u6838\u5fc3\u5b57\u6bb5\u3002 <pre><code>class V8_PLATFORM_EXPORT TraceObject {\n private:\n  int pid_;\n  int tid_;\n  char phase_;\n  const char* name_;\n  const char* scope_;\n  int64_t ts_;\n  int64_t tts_;\n  uint64_t duration_;\n  uint64_t cpu_duration_;\n  // \u5ffd\u7565\u5176\u4ed6\u5b57\u6bb5\n};\n</code></pre></p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#12-tracewriter","title":"1.2  TraceWriter","text":"<p>TraceWriter \u7528\u4e8e\u8868\u793a\u6d88\u8d39\u8005\uff0c\u6574\u4e2a trace \u7cfb\u7edf\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2a\u6d88\u8d39\u8005\u3002 <pre><code>class V8_PLATFORM_EXPORT TraceWriter {\n public:\n  // \u6d88\u8d39\u6570\u636e\uff0c\u53ea\u4f1a\u4fdd\u5b58\u5728\u5185\u5b58\u91cc\uff0c\u5fc5\u8981\u7684\u65f6\u5019\u518d\u8fdb\u884c\u771f\u6b63\u7684\u5904\u7406\n  virtual void AppendTraceEvent(TraceObject* trace_event) = 0;\n  // \u771f\u6b63\u5904\u7406\u6570\u636e\u7684\u51fd\u6570\n  virtual void Flush() = 0;\n  // \u83b7\u53d6\u4e00\u4e2a json writer\uff0c\u5373\u628a trace \u6570\u636e\u8fdb\u884c json \u683c\u5f0f\u5316\n  static TraceWriter* CreateJSONTraceWriter(std::ostream&amp; stream)\n};\n</code></pre></p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#13-tracebufferchunk","title":"1.3  TraceBufferChunk","text":"<p>TraceBufferChunk \u7528\u4e8e\u4e34\u65f6\u4fdd\u5b58 trace \u6570\u636e\uff0c\u56e0\u4e3a\u6570\u636e\u4f1a\u73b0\u5728\u5185\u5b58\u4e2d\u7f13\u5b58\uff0c\u5177\u4f53\u7531 TraceBufferChunk \u8fdb\u884c\u7ec4\u7ec7\u548c\u4fdd\u5b58\u3002 <pre><code>class V8_PLATFORM_EXPORT TraceBufferChunk {\n public:\n  explicit TraceBufferChunk(uint32_t seq);\n\n  void Reset(uint32_t new_seq);\n  // \u6570\u7ec4\u662f\u5426\u6ee1\u4e86\n  bool IsFull() const { return next_free_ == kChunkSize; }\n  // \u83b7\u53d6\u4e00\u4e2a\u7a7a\u95f2\u7684\u5143\u7d20\u5730\u5740\n  TraceObject* AddTraceEvent(size_t* event_index);\n  TraceObject* GetEventAt(size_t index) { return &amp;chunk_[index]; }\n\n  uint32_t seq() const { return seq_; }\n  size_t size() const { return next_free_; }\n\n  static const size_t kChunkSize = 64;\n\n private:\n  size_t next_free_ = 0;\n  TraceObject chunk_[kChunkSize];\n  uint32_t seq_;\n};\n</code></pre> \u53ef\u4ee5\u770b\u5230 TraceBufferChunk \u5185\u90e8\u6301\u6709\u4e00\u4e2a TraceObject \u5bf9\u8c61\u6570\u7ec4\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#14-tracebuffer","title":"1.4 TraceBuffer","text":"<p>TraceBuffer \u662f\u5bf9 TraceBufferChunk \u7684\u5c01\u88c5\uff0c\u672c\u8eab\u4e0d\u5b58\u50a8\u6570\u636e\u3002 <pre><code>class V8_PLATFORM_EXPORT TraceBuffer {\n public:\n  virtual TraceObject* AddTraceEvent(uint64_t* handle) = 0;\n  virtual TraceObject* GetEventByHandle(uint64_t handle) = 0;\n  virtual bool Flush() = 0;\n\n  static const size_t kRingBufferChunks = 1024;\n\n  static TraceBuffer* CreateTraceBufferRingBuffer(size_t max_chunks, TraceWriter* trace_writer);\n};\n</code></pre> TraceBuffer \u5177\u4f53\u7684\u903b\u8f91\u7531\u5b50\u7c7b\u5b9e\u73b0\uff0c\u6bd4\u5982 Node.js \u91cc\u5b9e\u73b0\u4e86 NodeTraceBuffer\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#15-traceconfig","title":"1.5 TraceConfig","text":"<p>TraceConfig \u662f\u7528\u4e8e\u7ba1\u7406 category\uff0c\u8bb0\u5f55\u9700\u8981\u6536\u96c6\u54ea\u7c7b category \u6570\u636e\u3002 <pre><code>class V8_PLATFORM_EXPORT TraceConfig {\n public:\n  // \u83b7\u53d6\u9ed8\u8ba4 category =&gt; v8\n  static TraceConfig* CreateDefaultTraceConfig();\n  // \u83b7\u53d6\u8ba2\u9605\u7684 category\n  const StringList&amp; GetEnabledCategories() const {\n    return included_categories_;\n  }\n  // \u65b0\u589e category\n  void AddIncludedCategory(const char* included_category);\n  // \u662f\u5426\u5f00\u542f\u4e86\u6536\u96c6\u8be5 cateogry \u6570\u636e\n  bool IsCategoryGroupEnabled(const char* category_group) const;\n\n private:\n  StringList included_categories_;\n};\n</code></pre></p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#16-tracingcontroller","title":"1.6 TracingController","text":"<p>TracingController \u662f\u975e\u5e38\u6838\u5fc3\u7684\u7c7b\uff0c\u7528\u4e8e\u7ba1\u7406\u6574\u4e2a trace \u7cfb\u7edf\u3002 <pre><code>class TracingController {\n public:\n  // \u9700\u8981\u6536\u96c6\u54ea\u7c7b cateogry \u7684 trace \u6570\u636e\uff0c\u5b50\u7c7b\u5b9e\u73b0\n  virtual const uint8_t* GetCategoryGroupEnabled(const char* name) {\n    static uint8_t no = 0;\n    return &amp;no;\n  }\n  // \u4ea7\u751f trace \u6570\u636e\n  virtual uint64_t AddTraceEvent(...) {\n    return 0;\n  }\n  virtual uint64_t AddTraceEventWithTimestamp(...) {\n    return 0;\n  }\n  virtual void UpdateTraceEventDuration(...) {}\n\n  class TraceStateObserver {\n   public:\n    virtual ~TraceStateObserver() = default;\n    virtual void OnTraceEnabled() = 0;\n    virtual void OnTraceDisabled() = 0;\n  };\n\n  // \u7ba1\u7406 trace \u7cfb\u7edf\u7684\u89c2\u5bdf\u8005\n  virtual void AddTraceStateObserver(TraceStateObserver*) {}\n  virtual void RemoveTraceStateObserver(TraceStateObserver*) {}\n};\n</code></pre> TracingController \u662f\u4e00\u4e2a\u57fa\u7c7b\uff0c\u88ab\u4e0b\u9762\u4e00\u4e2a TracingController \u7ee7\u627f\uff0ctrace \u4f7f\u7528\u65b9\u7ee7\u627f\u4e0b\u9762\u7684 TracingController \u7c7b\u3002 <pre><code>class V8_PLATFORM_EXPORT TracingController : public V8_PLATFORM_NON_EXPORTED_BASE(v8::TracingController) {\n public:\n  // \u8bbe\u7f6e\u4fdd\u5b58\u6570\u636e\u7684 buffer\n  void Initialize(TraceBuffer* trace_buffer);\n  // \u5224\u65ad\u662f\u5426\u9700\u8981\u6536\u96c6 category \u4e3a category_group \u7684\u6570\u636e\n  const uint8_t* GetCategoryGroupEnabled(const char* category_group) override;\n  // \u628a\u6570\u636e\u4fdd\u5b58\u5230 buffer \u4e2d\n  uint64_t AddTraceEvent(...) override;\n  uint64_t AddTraceEventWithTimestamp(...) override;\n  void UpdateTraceEventDuration(...) override;\n  // \u6839\u636e\u8ba2\u9605\u7684 category \u8bbe\u7f6e\u5f00\u542f\u6807\u8bb0\uff0c\u8fd9\u65f6\u5019\u624d\u4f1a\u6536\u96c6 trace \u6570\u636e\n  void StartTracing(TraceConfig* trace_config);\n  void StopTracing();\n\n private:\n  // \u6839\u636e\u8ba2\u9605\u7684 category \u8bbe\u7f6e\u5f00\u542f\u6807\u8bb0\uff0c StartTracing \u4e2d\u4f7f\u7528\n  void UpdateCategoryGroupEnabledFlag(size_t category_index);\n  void UpdateCategoryGroupEnabledFlags();\n\n  std::unique_ptr&lt;base::Mutex&gt; mutex_;\n  // \u8ba2\u9605\u7684 category\n  std::unique_ptr&lt;TraceConfig&gt; trace_config_;\n  // \u8ba2\u9605\u8005\uff0cStartTracing \u65f6\u901a\u77e5\u5b83\u4eec\n  std::unordered_set&lt;v8::TracingController::TraceStateObserver*&gt; observers_;\n  // \u4fdd\u5b58\u6570\u636e\u7684 buffer\n  std::unique_ptr&lt;TraceBuffer&gt; trace_buffer_;\n};\n</code></pre> \u4ee5\u4e0a\u7684\u7c7b\u5173\u7cfb\u5982\u4e0b\u3002  \u4e86\u89e3\u4e86 V8 \u7684 trace \u67b6\u6784\u540e\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u770b Node.js \u57fa\u4e8e\u8fd9\u4e2a\u67b6\u6784\u505a\u4e86\u54ea\u4e9b\u5b9e\u73b0\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#2-nodejs","title":"2 Node.js \u7684\u5b9e\u73b0","text":""},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#21-internaltracebuffer","title":"2.1 InternalTraceBuffer","text":"<p>InternalTraceBuffer \u662f Node.js \u5b9e\u73b0\u7528\u4e8e\u5c01\u88c5 TraceBufferChunk \u7684\u3002 <pre><code>class InternalTraceBuffer {\n public:\n  InternalTraceBuffer(size_t max_chunks, uint32_t id, Agent* agent);\n  TraceObject* AddTraceEvent(uint64_t* handle);\n  TraceObject* GetEventByHandle(uint64_t handle);\n  void Flush(bool blocking);\n  bool IsFull() const {\n    return total_chunks_ == max_chunks_ &amp;&amp; chunks_[total_chunks_ - 1]-&gt;IsFull();\n  }\n\n private:\n  size_t max_chunks_;\n  Agent* agent_;\n  std::vector&lt;std::unique_ptr&lt;TraceBufferChunk&gt;&gt; chunks_;\n  size_t total_chunks_ = 0;\n};\n</code></pre> InternalTraceBuffer \u5185\u90e8 \u6301\u6709 TraceBufferChunk\uff0c\u7528\u4e8e\u4fdd\u5b58\u6570\u636e\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#22-nodetracebuffer","title":"2.2 NodeTraceBuffer","text":"<p>NodeTraceBuffer \u662f\u57fa\u7840 V8 \u7684 TraceBuffer\u3002\u7528\u4e8e\u7ba1\u7406\u6570\u636e\u7684\u5b58\u50a8\u548c\u6d88\u8d39\u3002\u5185\u90e8\u6301\u6709 InternalTraceBuffer\uff0cInternalTraceBuffer \u5185\u90e8\u7684 TraceBufferChunk \u7528\u4e8e\u771f\u6b63\u7684\u6570\u636e\u5b58\u50a8\u3002 <pre><code>class NodeTraceBuffer : public TraceBuffer {\n public:\n  NodeTraceBuffer(size_t max_chunks, Agent* agent, uv_loop_t* tracing_loop);\n  TraceObject* AddTraceEvent(uint64_t* handle) override;\n  TraceObject* GetEventByHandle(uint64_t handle) override;\n  bool Flush() override;\n\n  static const size_t kBufferChunks = 1024;\n\n private:\n  uv_loop_t* tracing_loop_;\n  uv_async_t flush_signal_;\n  std::atomic&lt;InternalTraceBuffer*&gt; current_buf_;\n  InternalTraceBuffer buffer1_;\n  InternalTraceBuffer buffer2_;\n};\n</code></pre></p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#23-nodetracewriter","title":"2.3 NodeTraceWriter","text":"<p>NodeTraceWriter \u7528\u4e8e\u5904\u7406\u6570\u636e\u7684\u6d88\u8d39\uff0c\u6bd4\u5982\u5199\u5165\u6587\u4ef6\u3002NodeTraceWriter \u6ca1\u6709\u7ee7\u627f V8 \u7684 TraceWriter\uff0c\u800c\u662f\u6301\u6709\u4e00\u4e2a TraceWriter \u5bf9\u8c61\u3002 <pre><code>// AsyncTraceWriter \u6ca1\u6709\u903b\u8f91\uff0c\u53ef\u4ee5\u5ffd\u7565\nclass NodeTraceWriter : public AsyncTraceWriter {\n public:\n  explicit NodeTraceWriter(const std::string&amp; log_file_pattern);\n  // \u5199\u5165 trace \u6570\u636e\uff0c\u4fdd\u5b58\u5728\u5185\u5b58\n  void AppendTraceEvent(TraceObject* trace_event) override;\n  // \u5237\u6570\u636e\u5230\u76ee\u7684\u5730\uff0c\u6bd4\u5982\u6587\u4ef6\n  void Flush(bool blocking) override;\n private:\n  // \u6570\u636e\u5199\u5165\u8be5\u6587\u4ef6\n  std::string log_file_pattern_;\n  std::ostringstream stream_;\n  // \u6301\u6709\u4e00\u4e2a TraceWriter \u5bf9\u8c61\uff0c\u5177\u4f53\u662f\u4e00\u4e2a json writer\uff0c\u5373\u6309 json \u683c\u5f0f\u5199\u5165\u6570\u636e\n  std::unique_ptr&lt;TraceWriter&gt; json_trace_writer_;\n};\n</code></pre></p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#24-tracingcontroller","title":"2.4 TracingController","text":"<p>TracingController \u7ee7\u627f v8 \u7684 TracingController\uff0c\u5b9e\u73b0\u7684\u903b\u8f91\u4e0d\u591a\u3002 <pre><code>class TracingController : public v8::platform::tracing::TracingController {\n public:\n  TracingController() : v8::platform::tracing::TracingController() {}\n\n  int64_t CurrentTimestampMicroseconds() override {\n    return uv_hrtime() / 1000;\n  }\n  void AddMetadataEvent(...) {\n    std::unique_ptr&lt;TraceObject&gt; trace_event(new TraceObject);\n    trace_event-&gt;Initialize(...);\n    Agent* node_agent = node::tracing::TraceEventHelper::GetAgent();\n    if (node_agent != nullptr)\n      node_agent-&gt;AddMetadataEvent(std::move(trace_event));\n  };\n};\n</code></pre> TracingController \u4e3b\u8981\u5b9e\u73b0\u4e86\u4ea7\u751f trace \u6570\u636e\u7684\u903b\u8f91\uff0c\u6bcf\u6b21\u4ea7\u751f\u4e00\u6b21 trace \u4e8b\u4ef6\u65f6\uff0c\u5c31\u65b0\u5efa\u4e00\u4e2a TraceObject \u5bf9\u8c61\u8868\u793a\uff0c\u7136\u540e\u4ea4\u7ed9 agent \u5904\u7406\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#25-agent","title":"2.5 Agent","text":"<p>Agent \u662f Node.js  \u4e2d trace \u7cfb\u7edf\u7684\u6838\u5fc3\u5bf9\u8c61\uff0c\u7528\u4e8e\u7ba1\u7406\u6574\u4e2a trace \u7cfb\u7edf\u3002 <pre><code>class Agent {\n public:\n  TracingController* GetTracingController() {\n    TracingController* controller = tracing_controller_.get();\n    return controller;\n  }\n\n  // \u589e\u52a0\u4e00\u4e2a writer\n  AgentWriterHandle AddClient(const std::set&lt;std::string&gt;&amp; categories,\n                              std::unique_ptr&lt;AsyncTraceWriter&gt; writer,\n                              enum UseDefaultCategoryMode mode);\n  // \u83b7\u53d6\u8ba2\u9605\u7684 category\uff0cNode.js \u672c\u8eab\u7f13\u5b58\u4e86\u8fd9\u4e2a\u6570\u636e\uff0c\u4e0d\u9700\u8981\u5230 V8 \u83b7\u53d6\n  std::string GetEnabledCategories() const;\n\n  // \u4ea7\u751f trace \u6570\u636e\uff0c\u901a\u77e5\u6240\u6709 writer\n  void AppendTraceEvent(TraceObject* trace_event);\n  void AddMetadataEvent(std::unique_ptr&lt;TraceObject&gt; event);\n  // \u5237\u6570\u636e\u5230\u76ee\u7684\u5730\uff0c\u6bd4\u5982\u6587\u4ef6\n  void Flush(bool blocking);\n  // \u521b\u5efa\u4e00\u4e2a\u7ba1\u7406 category \u7684 TraceConfig \u5bf9\u8c61\uff0c\u5e76\u628a\u7f13\u5b58\u7684 category \u5199\u5230 v8\n  TraceConfig* CreateTraceConfig() const;\n\n private:\n  // \u542f\u52a8 agent\uff0c\u4e0d\u662f\u542f\u52a8\u6536\u96c6 trace \u6570\u636e\n  void Start();\n  void StopTracing();\n  // \u8ba2\u9605/\u53d6\u6d88\u8ba2\u9605 category\n  void Enable(int id, const std::set&lt;std::string&gt;&amp; categories);\n  void Disable(int id, const std::set&lt;std::string&gt;&amp; categories);\n\n  // \u4fdd\u5b58 category\u3001writer \u548c controller\n  std::unordered_map&lt;int, std::multiset&lt;std::string&gt;&gt; categories_;\n  std::unordered_map&lt;int, std::unique_ptr&lt;AsyncTraceWriter&gt;&gt; writers_;\n  std::unique_ptr&lt;TracingController&gt; tracing_controller_;\n};\n</code></pre></p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#26-scopedsuspendtracing","title":"2.6 ScopedSuspendTracing","text":"<p>ScopedSuspendTracing \u5229\u7528 RAII \u673a\u5236\u5b9e\u73b0 category \u7684\u5237\u65b0\uff0c\u63a7\u5236 category \u7684\u5f00\u542f\u548c\u5173\u95ed\u3002 <pre><code>class Agent::ScopedSuspendTracing {\n public:\n  ScopedSuspendTracing(TracingController* controller, Agent* agent,\n                       bool do_suspend = true)\n    : controller_(controller), agent_(do_suspend ? agent : nullptr) {\n    if (do_suspend) {\n      controller-&gt;StopTracing();\n    }\n  }\n\n  ~ScopedSuspendTracing() {\n    if (agent_ == nullptr) return;\n    TraceConfig* config = agent_-&gt;CreateTraceConfig();\n    if (config != nullptr) {\n      controller_-&gt;StartTracing(config);\n    }\n  }\n\n private:\n  TracingController* controller_;\n  Agent* agent_;\n};\n</code></pre> v8 \u4e2d\u4f1a\u8bb0\u5f55\u5f53\u524d\u5f00\u542f\u4e86\u54ea\u4e9b category\uff0c\u901a\u8fc7 StopTracing \u53ef\u4ee5\u6e05\u9664\u6240\u6709\u7684\u5f00\u542f\u6807\u8bb0\uff0c\u7136\u540e\u518d\u901a\u8fc7 StartTracing \u548c\u4f20\u5165\u5f53\u524d\u5f00\u542f\u7684 category \u66f4\u65b0 v8 \u7684\u6570\u636e\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#27-nodetracestateobserver","title":"2.7 NodeTraceStateObserver","text":"<p>NodeTraceStateObserver \u662f trace \u7684\u89c2\u5bdf\u8005\uff0c\u662f v8 \u63d0\u4f9b\u7684\u673a\u5236\uff0c\u5728\u5f00\u542f trace \u7684\u65f6\u5019\u4f1a\u88ab\u6267\u884c\u3002\u6bd4\u5982 Node.js \u5b9e\u73b0\u7684\u89c2\u5bdf\u8005\u3002 <pre><code>class NodeTraceStateObserver: public v8::TracingController::TraceStateObserver {\n public:\n  //\u3002trace \u542f\u52a8\u65f6\u88ab\u56de\u8c03\n  inline void OnTraceEnabled() override {\n    // \u7701\u7565\u90e8\u5206\u4ee3\u7801\n    trace_process-&gt;SetString(\"arch\", per_process::metadata.arch.c_str());\n    trace_process-&gt;SetString(\"platform\", per_process::metadata.platform.c_str());\n    trace_process-&gt;BeginDictionary(\"release\");\n    trace_process-&gt;SetString(\"name\", per_process::metadata.release.name.c_str());\n    // \u4ea7\u751f trace \u6570\u636e\n    TRACE_EVENT_METADATA1(\"__metadata\", \"node\", \"process\", std::move(trace_process));\n  }\n private:\n  v8::TracingController* controller_;\n};\n</code></pre> NodeTraceStateObserver \u7684\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5728 trace \u7cfb\u7edf\u542f\u52a8\u65f6\u6267\u884c OnTraceEnabled\uff0c\u5728 OnTraceEnabled \u4e2d\u4f1a\u4ea7\u751f\u4e00\u4e2a trace \u7684 meta \u6570\u636e\u3002\u4e0b\u9762\u662f\u67b6\u6784\u56fe\u3002 </p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#28-trace-agent","title":"2.8 \u521d\u59cb\u5316 trace agent","text":"<p>\u518d\u770b\u4e00\u4e0b Node.js \u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u4e2d\u5173\u4e8e trace agent \u7684\u903b\u8f91\u3002 <pre><code>struct V8Platform {\n    bool initialized_ = false;\n    inline void Initialize(int thread_pool_size) {\n        // \u521b\u5efa\u4e00\u4e2a trace agent \u5bf9\u8c61\n        tracing_agent_ = std::make_unique&lt;tracing::Agent&gt;();\n        // \u4fdd\u5b58\u5230\u67d0\u4e2a\u5730\u65b9\uff0c\u751f\u4ea7 trace \u6570\u636e\u65f6\u4f7f\u7528\n        node::tracing::TraceEventHelper::SetAgent(tracing_agent_.get());\n        // \u83b7\u53d6 agent \u4e2d\u7684 controller\uff0ccontroller \u8d1f\u8d23\u7ba1\u7406 trace \u6570\u636e\u7684\u751f\u4ea7\n        node::tracing::TracingController* controller = tracing_agent_-&gt;GetTracingController();\n        // \u521b\u5efa\u4e00\u4e2a trace \u89c2\u5bdf\u8005\uff0c\u5728\u542f\u52a8 trace \u7684\u65f6\u5019\u88ab V8 \u6267\u884c\n        trace_state_observer_ = std::make_unique&lt;NodeTraceStateObserver&gt;(controller);\n        // \u4fdd\u6301\u5230 controller \u4e2d\n        controller-&gt;AddTraceStateObserver(trace_state_observer_.get());\n        // tracing_file_writer_ \u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u503c\n        tracing_file_writer_ = tracing_agent_-&gt;DefaultHandle();\n        // \u901a\u8fc7\u547d\u4ee4\u884c\u542f\u52a8\n        if (!per_process::cli_options-&gt;trace_event_categories.empty()) {\n          StartTracingAgent();\n        }\n    }\n\n    inline tracing::AgentWriterHandle* GetTracingAgentWriter() {\n      return &amp;tracing_file_writer_;\n    }\n    std::unique_ptr&lt;NodeTraceStateObserver&gt; trace_state_observer_;\n    std::unique_ptr&lt;tracing::Agent&gt; tracing_agent_;\n    tracing::AgentWriterHandle tracing_file_writer_;\n};\n</code></pre> Initialize \u4e3b\u8981\u662f\u521d\u59cb\u5316\u4e86\u4e00\u4e9b\u6838\u5fc3\u5bf9\u8c61\u3002\u7ee7\u7eed\u770b StartTracingAgent\u3002 <pre><code>inline void StartTracingAgent() {\n    if (tracing_file_writer_.IsDefaultHandle()) {\n      // \u89e3\u6790\u51fa\u547d\u4ee4\u540e\u8bbe\u7f6e\u7684\u9700\u8981 trace \u7684\u6a21\u5757\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86 --trace-events-enabled\uff0c\u5219\u9ed8\u8ba4\u5f00\u542f v8,node,node.async_hooks\n      std::vector&lt;std::string&gt; categories = SplitString(per_process::cli_options-&gt;trace_event_categories, ',');\n      // \u6ce8\u518c\u6d88\u8d39\u8005 writer\n      tracing_file_writer_ = tracing_agent_-&gt;AddClient(\n          std::set&lt;std::string&gt;(std::make_move_iterator(categories.begin()),\n                                std::make_move_iterator(categories.end())),\n          std::unique_ptr&lt;tracing::AsyncTraceWriter&gt;(\n              new tracing::NodeTraceWriter(\n                  per_process::cli_options-&gt;trace_event_file_pattern)),\n          tracing::Agent::kUseDefaultCategories);\n    }\n}\n</code></pre> \u5728 Node.js \u521d\u59cb\u5316\u65f6\uff0ctracing_file_writer_ \u4e3a\u521d\u59cb\u7684\u9ed8\u8ba4\u503c\uff0c\u6240\u4ee5\u5982\u679c\u8fd8\u6ca1\u6709\u8c03\u7528\u8fc7 StartTracingAgent\uff0c\u5219 IsDefaultHandle \u4e3a true\uff0c\u53cd\u4e4b tracing_file_writer_ \u4f1a\u88ab AddClient \u91cd\u65b0\u8d4b\u503c\uff0c\u7b2c\u4e8c\u6b21\u8c03\u7528 StartTracingAgent \u5c31\u76f4\u63a5\u8fd4\u56de\u4e86\u3002\u5f53\u7b2c\u4e00\u6b21\u6267\u884c StartTracingAgent\u3002IsDefaultHandle \u4e3a true\uff0c\u63a5\u7740\u89e3\u6790\u51fa\u9700\u8981 trace \u7684\u6a21\u5757\uff0c\u7136\u540e\u8c03\u7528 agent \u7684 AddClient \u51fd\u6570\u6ce8\u518c\u6d88\u8d39\u8005\u3002\u770b\u4e00\u4e0b AddClient\u3002 <pre><code>AgentWriterHandle Agent::AddClient(\n    const std::set&lt;std::string&gt;&amp; categories,\n    std::unique_ptr&lt;AsyncTraceWriter&gt; writer,\n    enum UseDefaultCategoryMode mode) {\n  // \u542f\u52a8 trace \u5b50\u7ebf\u7a0b\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u542f\u52a8\u7684\u8bdd\n  Start();\n  const std::set&lt;std::string&gt;* use_categories = &amp;categories;\n  int id = next_writer_id_++;\n  AsyncTraceWriter* raw = writer.get();\n  // \u8bb0\u5f55 writer \u548c trace \u7684\u6a21\u5757\n  writers_[id] = std::move(writer);\n  categories_[id] = { use_categories-&gt;begin(), use_categories-&gt;end() };\n  {\n    Mutex::ScopedLock lock(initialize_writer_mutex_);\n    // \u8bb0\u5f55\u5f85\u521d\u59cb\u5316\u7684 writer\n    to_be_initialized_.insert(raw);\n    // \u901a\u77e5 trace \u5b50\u7ebf\u7a0b\n    uv_async_send(&amp;initialize_writer_async_);\n    while (to_be_initialized_.count(raw) &gt; 0)\n      initialize_writer_condvar_.Wait(lock);\n  }\n\n  return AgentWriterHandle(this, id);\n}\n</code></pre> AddClient \u4fdd\u5b58\u4e86\u8ba2\u9605\u5173\u7cfb\uff0c\u53e6\u5916 trace \u7cfb\u7edf\u90e8\u5206\u903b\u8f91\u662f\u8dd1\u5728\u5b50\u7ebf\u7a0b\u7684\u3002\u6ce8\u518c writer \u65f6\u5982\u679c\u8fd8\u6ca1\u6709\u542f\u52a8 trace \u5b50\u7ebf\u7a0b\u5219\u542f\u52a8\u5b83\u3002 <pre><code>Agent::Agent() : tracing_controller_(new TracingController()) {\n  tracing_controller_-&gt;Initialize(nullptr);\n  uv_loop_init(&amp;tracing_loop_), 0;\n  // \u6ce8\u518c writer \u65f6\u6267\u884c\u7684\u56de\u8c03\n  uv_async_init(&amp;tracing_loop_, &amp;initialize_writer_async_, [](uv_async_t* async) {\n    Agent* agent = ContainerOf(&amp;Agent::initialize_writer_async_, async);\n    agent-&gt;InitializeWritersOnThread();\n  }), 0);\n  uv_unref(reinterpret_cast&lt;uv_handle_t*&gt;(&amp;initialize_writer_async_));\n}\n\nvoid Agent::Start() {\n  if (started_)\n    return;\n\n  NodeTraceBuffer* trace_buffer_ = new NodeTraceBuffer(NodeTraceBuffer::kBufferChunks, this, &amp;tracing_loop_);\n  tracing_controller_-&gt;Initialize(trace_buffer_);\n  uv_thread_create(&amp;thread_, [](void* arg) {\n    Agent* agent = static_cast&lt;Agent*&gt;(arg);\n    uv_run(&amp;agent-&gt;tracing_loop_, UV_RUN_DEFAULT);\n  }, this);\n  started_ = true;\n}\n</code></pre> Agent::Start \u9996\u5148\u521d\u59cb\u5316\u4e86\u548c\u751f\u4ea7\u8005\u76f8\u5173\u7684\u903b\u8f91\uff0c\u5426\u5219\u6ce8\u518c\u6d88\u8d39\u8005 writer \u5c31\u6beb\u65e0\u610f\u4e49\uff0c\u4e5f\u5c31\u662f\u8bbe\u7f6e\u4fdd\u5b58\u6570\u636e\u7684 NodeTraceBuffer \u5230 controller\uff0c\u56e0\u4e3a NodeTraceBuffer \u662f\u6d88\u8d39\u6570\u636e\u7684\u7b2c\u4e00\u4e2a\u70b9\uff0c\u6570\u636e\u5b58\u5230\u4e00\u5b9a\u7a0b\u5ea6\u540e\u518d\u901a\u77e5\u771f\u6b63\u7684 writer \u6d88\u8d39\u3002\u63a5\u7740\u521b\u5efa\u4e86\u4e00\u4e2a\u7ebf\u7a0b\uff0ctrace \u5b50\u7ebf\u7a0b\u4e2d\u5355\u72ec\u8dd1\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\uff0c\u5e76\u4e14\u901a\u8fc7\u5f02\u6b65\u65b9\u5f0f\u548c\u4e3b\u7ebf\u7a0b\u901a\u4fe1\uff0c\u6240\u4ee5\u6bcf\u6b21\u6ce8\u518c writer \u7684\u65f6\u5019\uff0c\u4e3b\u7ebf\u7a0b\u90fd\u901a\u8fc7 uv_async_send(&amp;initialize_writer_async_) \u901a\u77e5 \u5b50\u7ebf\u7a0b\u3002\u4ece\u800c\u5b50\u7ebf\u7a0b\u6267\u884c\u56de\u8c03 agent-&gt;InitializeWritersOnThread()\u3002 <pre><code>void Agent::InitializeWritersOnThread() {\n  Mutex::ScopedLock lock(initialize_writer_mutex_);\n  while (!to_be_initialized_.empty()) {\n    AsyncTraceWriter* head = *to_be_initialized_.begin();\n    head-&gt;InitializeOnThread(&amp;tracing_loop_);\n    to_be_initialized_.erase(head);\n  }\n  initialize_writer_condvar_.Broadcast(lock);\n}\n</code></pre> InitializeWritersOnThread \u904d\u5386\u5f85\u6ce8\u518c\u7684 writer \u5e76\u6267\u884c\u5b83\u7684 InitializeWritersOnThread \u51fd\u6570\u3002\u8fd9\u91cc\u4ee5 Node.js \u7684 writer NodeTraceWriter \u4e3a\u4f8b\u3002 <pre><code>void NodeTraceWriter::InitializeOnThread(uv_loop_t* loop) {\n  tracing_loop_ = loop;\n  flush_signal_.data = this;\n  int err = uv_async_init(tracing_loop_, &amp;flush_signal_, [](uv_async_t* signal) {\n    NodeTraceWriter* trace_writer = ContainerOf(&amp;NodeTraceWriter::flush_signal_, signal);\n    trace_writer-&gt;FlushPrivate();\n  });\n}\n</code></pre> writer \u5f80\u5b50\u7ebf\u7a0b\u4e8b\u4ef6\u5faa\u73af\u4e2d\u6ce8\u518c\u4e86\u4e00\u4e2a\u5f02\u6b65\u56de\u8c03\uff0c\u8fd9\u4e2a\u56de\u8c03\u4f1a\u5728\u9700\u8981\u5199\u5165\u6570\u636e\u5230\u6587\u4ef6\u91cc\u88ab\u6267\u884c\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#3","title":"3 \u4ea7\u751f\u6570\u636e","text":"<p>Node.js \u4e2d trace \u6570\u636e\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u4ea7\u751f\uff0c\u7b2c\u4e00\u79cd\u65b9\u5f0f\u662f\u901a\u8fc7 Node.js C++ \u5c42\uff0c\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u662f\u5728 JS \u5c42\u901a\u8fc7 V8 \u63d0\u4f9b\u7684 trace C++ API\u3002\u4e0b\u9762\u9996\u5148\u770b\u4e00\u4e0b\u7b2c\u4e00\u79cd\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#31-c","title":"3.1 C++ \u65b9\u5f0f","text":"<p>\u63a5\u4e0b\u6765\u5206\u6790\u751f\u4ea7\u8005\u3002\u4ee5\u540c\u6b65\u6253\u5f00\u6587\u4ef6 API \u4e3a\u4f8b\u3002\u4e0b\u9762\u662f open \u51fd\u6570\u7684 trace \u57cb\u70b9\u3002 <pre><code>FS_SYNC_TRACE_BEGIN(open);\nint result = SyncCall(env, args[4], &amp;req_wrap_sync, \"open\",\n                      uv_fs_open, *path, flags, mode);\nFS_SYNC_TRACE_END(open);\n</code></pre> \u5b8f\u5c55\u5f00\u540e <pre><code>#define FS_SYNC_TRACE_BEGIN(syscall, ...)                                  \\\n  if (GET_TRACE_ENABLED)                                                   \\\n  TRACE_EVENT_BEGIN(TRACING_CATEGORY_NODE2(fs, sync), TRACE_NAME(syscall), \\\n  ##__VA_ARGS__);\n</code></pre> \u7ee7\u7eed <pre><code>// \u5224\u65ad\u662f\u5426\u8ba2\u9605\u4e86\u5f53\u524d\u6a21\u5757\u7684 trace\nif (*node::tracing::TraceEventHelper::GetCategoryGroupEnabled(\"node,node.fs,node.fs.sync\") != 0) {\n    // \u901a\u8fc7 agent \u7684 controller \u5199\u5165 trace \u6570\u636e\n    controller-&gt;AddTraceEvent(...);\n}\n</code></pre> \u5728\u5904\u7406 trace \u6570\u636e\u4e4b\u524d\u9996\u5148\u5224\u65ad\u662f\u5426\u5f00\u542f\u4e86\u5904\u7406\u8be5\u7c7b trace \u6570\u636e\uff0c\u770b\u4e00\u4e0b GetCategoryGroupEnabled\u3002 <pre><code>const uint8_t* TracingController::GetCategoryGroupEnabled(\n    const char* category_group) {\n  // category \u4e2a\u6570  \n  size_t category_index = base::Acquire_Load(&amp;g_category_index);\n  // \u904d\u5386\u5224\u65ad\u662f\u5426\u5f00\u542f\u4e86\u5f53\u524d\u7684 category\n  for (size_t i = 0; i &lt; category_index; ++i) {\n    if (strcmp(g_category_groups[i], category_group) == 0) {\n      return &amp;g_category_group_enabled[i];\n    }\n  }\n  // \u5982\u679c\u6ca1\u6709\u770b\u5f00\u542f\u5219\u8ffd\u52a0\u5230 category \u5217\u8868\n  if (category_index &lt; kMaxCategoryGroups) {\n    const char* new_group = base::Strdup(category_group);\n    g_category_groups[category_index] = new_group;\n    // \u6839\u636e traceConfig \u66f4\u65b0\u5f00\u5173\n    UpdateCategoryGroupEnabledFlag(category_index);\n    // \u518d\u6b21\u5224\u65ad\n    category_group_enabled = &amp;g_category_group_enabled[category_index];\n    // \u66f4\u65b0 category \u6570\u91cf\n    base::Release_Store(&amp;g_category_index, category_index + 1);\n  } else {\n    category_group_enabled =\n        &amp;g_category_group_enabled[g_category_categories_exhausted];\n  }\n  return category_group_enabled;\n}\n</code></pre> \u5982\u679c\u5f00\u542f\u4e86\u6536\u96c6\u8be5 category \u5219\u901a\u8fc7 AddTraceEvent \u8fdb\u884c\u5904\u7406\u3002AddTraceEvent \u7531 V8 \u5b9e\u73b0\u3002 <pre><code>uint64_t TracingController::AddTraceEvent(...) {\n  int64_t now_us = CurrentTimestampMicroseconds();\n  return AddTraceEventWithTimestamp(...);\n}\n\nuint64_t TracingController::AddTraceEventWithTimestamp(...) {\n TraceObject* trace_object = trace_buffer_-&gt;AddTraceEvent(&amp;handle);\n}\n</code></pre> \u901a\u8fc7\u5c42\u5c42\u8c03\u7528\uff0c\u6700\u7ec8\u8c03\u7528 TraceBuffer \u7684 AddTraceEvent\uff0c\u5bf9\u5e94 Node.js \u7684 NodeTraceBuffer\u3002 <pre><code>TraceObject* NodeTraceBuffer::AddTraceEvent(uint64_t* handle) {\n  // buffer \u662f\u5426\u5df2\u7ecf\u6ee1\u4e86\uff0c\u662f\u5219 flush\n  if (!TryLoadAvailableBuffer()) {\n    *handle = 0;\n    return nullptr;\n  }\n  // \u5426\u5219\u7f13\u5b58\n  return current_buf_.load()-&gt;AddTraceEvent(handle);\n}\n</code></pre> \u6211\u4eec\u53ea\u9700\u8981\u770b TryLoadAvailableBuffer\u3002 <pre><code>bool NodeTraceBuffer::TryLoadAvailableBuffer() {\n  InternalTraceBuffer* prev_buf = current_buf_.load();\n  if (prev_buf-&gt;IsFull()) {\n    uv_async_send(&amp;flush_signal_);\n  }\n  return true;\n}\n</code></pre> \u5982\u679c buffer \u6ee1\u4e86\uff0c\u5219\u901a\u77e5 flush_signal_\uff0c\u90a3\u4e48 flush_signal_ \u662f\u4ec0\u4e48\u5462\uff1f\u8fd9\u662f\u5728 NodeTraceBuffer \u521d\u59cb\u5316\u65f6\u8bbe\u7f6e\u7684\u3002 <pre><code>NodeTraceBuffer::NodeTraceBuffer(size_t max_chunks,\n    Agent* agent, uv_loop_t* tracing_loop)\n    : tracing_loop_(tracing_loop),\n      buffer1_(max_chunks, 0, agent),\n      buffer2_(max_chunks, 1, agent) {\n  flush_signal_.data = this;\n  // \u56de\u8c03 NonBlockingFlushSignalCb\n  int err = uv_async_init(tracing_loop_, &amp;flush_signal_,NonBlockingFlushSignalCb);\n}\n</code></pre> \u53ef\u4ee5\u770b\u5230 NodeTraceBuffer \u5728 trace \u5b50\u7ebf\u7a0b\u4e2d\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u56de\u8c03\uff0c\u5f53\u4e3b\u7ebf\u7a0b\u5199\u5165\u7684 trace \u6570\u636e\u6ee1\u4e86\u5219\u901a\u77e5\u5b50\u7ebf\u7a0b\u5904\u7406\u3002\u5177\u4f53\u903b\u8f91\u5728 NonBlockingFlushSignalCb\u3002 <pre><code>void NodeTraceBuffer::NonBlockingFlushSignalCb(uv_async_t* signal) {\n  NodeTraceBuffer* buffer = static_cast&lt;NodeTraceBuffer*&gt;(signal-&gt;data);\n  if (buffer-&gt;buffer1_.IsFull() &amp;&amp; !buffer-&gt;buffer1_.IsFlushing()) {\n    buffer-&gt;buffer1_.Flush(false);\n  }\n  if (buffer-&gt;buffer2_.IsFull() &amp;&amp; !buffer-&gt;buffer2_.IsFlushing()) {\n    buffer-&gt;buffer2_.Flush(false);\n  }\n}\n</code></pre> NodeTraceBuffer \u5185\u90e8\u7ef4\u62a4\u4e86\u51e0\u4e2a\u5185\u90e8 buffer \u7528\u4e8e\u5b58\u50a8\u6570\u636e\uff08InternalTraceBuffer \u5bf9\u8c61\uff09\u3002\u5f53 \u5185\u90e8 buffer \u6ee1\u4e86\u5219\u8c03\u7528 Flush\u3002 <pre><code>void InternalTraceBuffer::Flush(bool blocking) {\n  {\n    Mutex::ScopedLock scoped_lock(mutex_);\n    if (total_chunks_ &gt; 0) {\n      flushing_ = true;\n      for (size_t i = 0; i &lt; total_chunks_; ++i) {\n        auto&amp; chunk = chunks_[i];\n        for (size_t j = 0; j &lt; chunk-&gt;size(); ++j) {\n          TraceObject* trace_event = chunk-&gt;GetEventAt(j);\n          if (trace_event-&gt;name()) {\n            // \u4ea4\u7ed9 agent \u5904\u7406\n            agent_-&gt;AppendTraceEvent(trace_event);\n          }\n        }\n      }\n      total_chunks_ = 0;\n      flushing_ = false;\n    }\n  }\n  agent_-&gt;Flush(blocking);\n}\n</code></pre> Flush \u6700\u7ec8\u4f1a\u901a\u77e5 agent \u8fdb\u884c\u6570\u636e\u7684\u5904\u7406\u5e76\u8c03\u7528 agent \u7684 Flush\u3002 <pre><code>void Agent::AppendTraceEvent(TraceObject* trace_event) {\n  for (const auto&amp; id_writer : writers_)\n    id_writer.second-&gt;AppendTraceEvent(trace_event);\n}\n\nvoid Agent::Flush(bool blocking) {\n  for (const auto&amp; id_writer : writers_)\n    id_writer.second-&gt;Flush(blocking);\n}\n</code></pre> agent \u4e5f\u53ea\u662f\u7b80\u5355\u8c03\u7528 writer \u8fdb\u884c\u6570\u636e\u7684\u6d88\u8d39\u3002 <pre><code>void NodeTraceWriter::AppendTraceEvent(TraceObject* trace_event) {\n  Mutex::ScopedLock scoped_lock(stream_mutex_);\n  if (total_traces_ == 0) {\n    // \u6253\u5f00 trace \u6587\u4ef6\n    OpenNewFileForStreaming();\n    json_trace_writer_.reset(TraceWriter::CreateJSONTraceWriter(stream_));\n  }\n  ++total_traces_;\n  // \u7f13\u5b58\u6570\u636e\n  json_trace_writer_-&gt;AppendTraceEvent(trace_event);\n}\n</code></pre> AppendTraceEvent \u53ea\u662f\u628a\u6570\u636e\u653e\u5230\u5185\u5b58\u91cc\u3002\u7b49\u5f85 Flush \u65f6\u5199\u5230\u6587\u4ef6\u3002 <pre><code>void NodeTraceWriter::Flush(bool blocking) {\n  int err = uv_async_send(&amp;flush_signal_);\n}\n</code></pre> \u6700\u7ec8\u901a\u8fc7 uv_async_send \u901a\u77e5 writer\uff0c\u56e0\u4e3a writer \u662f\u5728\u5b50\u7ebf\u7a0b\u91cc\u6267\u884c\u7684\u3002\u8fd9\u4e2a\u5728\u4ecb\u7ecd Node.js \u521d\u59cb\u5316\u90e8\u5206\u4ecb\u7ecd\u8fc7\u3002\u5177\u4f53\u5904\u7406\u51fd\u6570\u662f trace_writer-&gt;FlushPrivate()\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u628a\u6570\u636e\u5199\u5230 trace \u6587\u4ef6\uff0c\u5c31\u4e0d\u518d\u5177\u4f53\u5206\u6790\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#31-js","title":"3.1 JS \u65b9\u5f0f","text":"<p>JS \u65b9\u5f0f\u662f\u901a\u8fc7 v8 \u63d0\u4f9b\u7684 trace \u51fd\u6570\u3002 <pre><code>// binding.trace(phase, category, name, id, data)\n  SimpleInstallFunction(isolate(), extras_binding, \"trace\", Builtin::kTrace, 5, true);\n</code></pre> \u4e0a\u9762\u7684\u4ee3\u7801\u6765\u81ea V8\uff0cV8 \u6ce8\u518c\u4e86 trace \u51fd\u6570\uff0c\u5bf9\u5e94\u7684\u5b9e\u73b0\u5982\u4e0b\u3002 <pre><code>// Builtin::kTrace(phase, category, name, id, data)\nBUILTIN(Trace) {\n  HandleScope handle_scope(isolate);\n  Handle&lt;Object&gt; phase_arg = args.atOrUndefined(isolate, 1);\n  Handle&lt;Object&gt; category = args.atOrUndefined(isolate, 2);\n  Handle&lt;Object&gt; name_arg = args.atOrUndefined(isolate, 3);\n  Handle&lt;Object&gt; id_arg = args.atOrUndefined(isolate, 4);\n  Handle&lt;Object&gt; data_arg = args.atOrUndefined(isolate, 5);\n  // \u5224\u65ad\u662f\u5426\u5f00\u542f\u4e86\u8be5 category \n  const uint8_t* category_group_enabled = GetCategoryGroupEnabled(isolate, Handle&lt;String&gt;::cast(category));\n  // \u6ca1\u5f00\u542f\u5219\u4e0d\u5904\u7406\n  if (!*category_group_enabled) return ReadOnlyRoots(isolate).false_value();\n  // \u5ffd\u7565\u7ec6\u8282\u5904\u7406\n  // \u5f00\u542f\u5219\u5904\u7406\n  TRACE_EVENT_API_ADD_TRACE_EVENT(\n      phase, category_group_enabled, *name, tracing::kGlobalScope, id,\n      tracing::kNoId, num_args, &amp;arg_name, &amp;arg_type, &amp;arg_value, flags);\n\n  return ReadOnlyRoots(isolate).true_value();\n}\n</code></pre> trace \u7684\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u4ea7\u751f trace \u6570\u636e\u65f6\u9700\u8981\u6307\u5b9a\u7684 category\uff0c\u6240\u4ee5\u7b2c\u4e00\u6b65\u9996\u5148\u5224\u65ad\u662f\u5426\u5f00\u542f\u4e86\u8be5 category \u7684\u6570\u636e\u6536\u96c6\uff0c\u5982\u679c\u6ca1\u6709\u5f00\u542f\u5219\u4e0d\u8fdb\u884c\u6570\u636e\u5904\u7406\uff0c\u6240\u4ee5 trace \u7cfb\u7edf\u5728\u8fd9\u65f6\u5019\u5c31\u6ca1\u6709\u6027\u80fd\u635f\u5931\u7684\uff0c\u5982\u679c\u5f00\u542f\u4e86\u5219\u8fdb\u884c\u5904\u7406\uff0c\u4e0b\u9762\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u5904\u7406\u903b\u8f91\u3002 <pre><code>#define TRACE_EVENT_API_ADD_TRACE_EVENT v8::internal::tracing::AddTraceEventImpl\n\nstatic V8_INLINE uint64_t AddTraceEventImpl(...) {\n  v8::TracingController* controller = v8::internal::tracing::TraceEventHelper::GetTracingController();\n  return controller-&gt;AddTraceEvent(...);\n}\n</code></pre> AddTraceEvent \u521a\u624d\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u5c31\u4e0d\u518d\u5206\u6790\u3002</p> <p>\u4e24\u79cd\u4ea7\u751f\u6570\u636e\u7684\u65b9\u5f0f\u6700\u7ec8\u6b8a\u9014\u540c\u5f52\uff0c\u4f46\u662f\u4ee5\u4e0a\u4e24\u79cd\u65b9\u5f0f\u90fd\u662f\u5185\u7f6e\u5728 Node.js \u5185\u6838\u7684\uff0c\u7528\u6237\u4fa7\u65e0\u6cd5\u4f7f\u7528\uff0c\u6700\u8fd1\u7ed9 Node.js \u793e\u533a\u63d0\u4ea4\u4e86\u4e00\u4e2a pr\uff08https://github.com/nodejs/node/pull/42462\uff09\uff0c\u628a\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u901a\u8fc7 trace_events \u6a21\u5757\u5bfc\u51fa\u6765\u7ed9\u7528\u6237\u4f7f\u7528\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#4","title":"4 \u6536\u96c6\u6570\u636e","text":"<p>\u63a5\u4e0b\u6765\u4ecb\u7ecd\u83b7\u53d6\u6570\u636e\u7684\u903b\u8f91\u3002\u56e0\u4e3a\u4ea7\u751f\u548c\u6d88\u8d39 trace \u6570\u636e\u4f1a\u9020\u6210\u989d\u5916\u7684\u5f00\u9500\uff0c\u6240\u4ee5\u9ed8\u8ba4\u662f\u4e0d\u5f00\u542f\u7684\uff0c\u5f53\u6211\u4eec\u9700\u8981\u6536\u96c6\u8fd9\u4e9b\u6570\u636e\u7684\u65f6\u5019\uff0c\u9996\u5148\u9700\u8981\u4e3b\u52a8\u8ba2\u9605\u3002\u4e00\u5171\u6709\u4e09\u79cd\u65b9\u5f0f\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#41","title":"4.1 \u547d\u4ee4\u884c\u65b9\u5f0f","text":"<p>\u7b2c\u4e00\u79cd\u662f\u5728\u542f\u52a8 Node.js \u65f6 <pre><code>node --trace-event-categories v8 --trace-event-file-pattern '${pid}-${rotation}.log' server.js\n</code></pre> \u901a\u8fc7 trace-event-categories \u53ef\u4ee5\u6307\u5b9a\u8ba2\u9605\u7684 category\uff08trace \u6570\u636e\u6309 category \u5206\u7c7b\uff09\u3002\u901a\u8fc7 trace-event-file-pattern \u53ef\u4ee5\u6307\u5b9a\u6587\u4ef6\u7684\u683c\u5f0f\u3002\u8fd9\u6837\u542f\u52a8 Node.js \u8fdb\u7a0b\u540e\uff0cNode.js \u5c31\u4f1a\u628a\u76f8\u5e94 category \u7684\u6570\u636e\u5199\u5165\u5230\u67d0\u4e2a\u6587\u4ef6\u4e2d\u3002\u8fd9\u79cd\u65b9\u5f0f\u5b58\u5728\u6bd4\u8f83\u5728\u7684\u9650\u5236\uff0c\u56e0\u4e3a\u9700\u8981\u5728\u542f\u52a8\u65f6\u6307\u5b9a\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#42-trace_events","title":"4.2 \u901a\u8fc7 trace_events \u6a21\u5757","text":"<p>\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5c31\u662f\u52a8\u6001\u5f00\u542f\u3002 <pre><code>const trace_events = require('trace_events');\nconst categories = ['node.perf', 'node.async_hooks'];\nconst tracing = trace_events.createTracing({ categories });\ntracing.enable();\n// do something\ntracing.disable();\n</code></pre> \u901a\u8fc7 createTracing \u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a trace \u5bf9\u8c61\u3002 <pre><code>function createTracing(options) {\n  return new Tracing(options.categories);\n}\n\nclass Tracing {\n  constructor(categories) {\n    this[kHandle] = new CategorySet(categories);\n    this[kCategories] = categories;\n    this[kEnabled] = false;\n  }\n\n  enable() {\n    if (!this[kEnabled]) {\n      this[kEnabled] = true;\n      this[kHandle].enable();\n    }\n  }\n}\n</code></pre> \u65b0\u5efa\u4e86\u4e00\u4e2a CategorySet \u5bf9\u8c61\u7136\u540e\u8c03\u7528\u5176 enable \u51fd\u6570\u3002\u53ef\u4ee5\u770b\u5230\uff0cjs \u5c42\u53ea\u662f\u5bf9\u5e95\u5c42 CategorySet \u7684\u7b80\u5355\u5c01\u88c5\u3002\u63a5\u7740\u770b C++ \u5c42\u3002 <pre><code>class NodeCategorySet : public BaseObject {\n public:\n\n  static void New(const FunctionCallbackInfo&lt;Value&gt;&amp; args);\n  static void Enable(const FunctionCallbackInfo&lt;Value&gt;&amp; args);\n  static void Disable(const FunctionCallbackInfo&lt;Value&gt;&amp; args);\n private:\n\n  bool enabled_ = false;\n  const std::set&lt;std::string&gt; categories_; // \u5bf9\u8c61\u5173\u8054\u7684 trace \u6a21\u5757\n};\n</code></pre> \u63a5\u7740\u770b enable \u51fd\u6570\u7684\u903b\u8f91\u3002 <pre><code>void NodeCategorySet::Enable(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  NodeCategorySet* category_set;\n  ASSIGN_OR_RETURN_UNWRAP(&amp;category_set, args.Holder());\n  const auto&amp; categories = category_set-&gt;GetCategories();\n  // \u975e\u7a7a\u5e76\u4e14\u6ca1\u6709\u542f\u52a8\u5219\u542f\u52a8\n  if (!category_set-&gt;enabled_ &amp;&amp; !categories.empty()) {\n    // \u542f\u52a8 trace agent\uff0c\u5982\u679c\u5df2\u7ecf\u542f\u52a8\u5219\u76f4\u63a5\u8fd4\u56de\n    StartTracingAgent();\n    // \u901a\u8fc7 writer \u6ce8\u518c\u9700\u8981 trace \u7684\u6a21\u5757\n    GetTracingAgentWriter()-&gt;Enable(categories);\n    category_set-&gt;enabled_ = true;\n  }\n}\n</code></pre> \u63a5\u7740\u770b GetTracingAgentWriter()-&gt;Enable(categories)\u3002GetTracingAgentWriter \u8fd4\u56de\u5230\u662f\u4e00\u4e2a  AgentWriterHandle \u5bf9\u8c61\u3002 <pre><code>void AgentWriterHandle::Enable(const std::set&lt;std::string&gt;&amp; categories) {\n  if (agent_ != nullptr) agent_-&gt;Enable(id_, categories);\n}\n\nvoid Agent::Enable(int id, const std::set&lt;std::string&gt;&amp; categories) {\n  ScopedSuspendTracing suspend(tracing_controller_.get(), this,\n                               id != kDefaultHandleId);\n  categories_[id].insert(categories.begin(), categories.end());\n}\n</code></pre> \u8fd9\u6837\u5c31\u5b8c\u6210\u4e86 trace \u7cfb\u7edf\u7684\u521d\u59cb\u5316\u548c\u8ba2\u9605\u4e86\u9700\u8981 trace \u7684\u6a21\u5757\u3002\u4e0d\u8fc7\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u5173\u952e\u7684\u903b\u8f91\u5c31\u662f\u901a\u77e5 v8\uff0c\u56e0\u4e3a\u5f00\u542f\u4e86\u54ea\u4e9b category \u662f\u7531 v8 \u7ba1\u7406\u7684\uff0c\u5f53\u65b0\u589e category \u7684\u65f6\u5019\uff0c\u9700\u8981\u901a\u77e5 v8\u3002\u4e0b\u9762\u770b ScopedSuspendTracing\uff0c\u524d\u9762\u5206\u6790\u8fc7 ScopedSuspendTracing \u5229\u7528 RAII \u5728\u521d\u59cb\u5316\u65f6\u8c03\u7528 controller-&gt;StopTracing()\uff0c\u6790\u6784\u65f6\u8c03 controller_-&gt;StartTracing(config)\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u51fd\u6570\u3002 <pre><code>void TracingController::StopTracing() {\n  bool expected = true;\n  // \u5224\u65ad\u662f\u5426\u5df2\u7ecf\u5f00\u542f\u4e86 trace\uff0c\u662f\u5219\u5173\u95ed\uff08recording_ \u4e3a false\uff09\uff0c\u5426\u5219\u76f4\u63a5 return\n  if (!recording_.compare_exchange_strong(expected, false)) {\n    return;\n  }\n  // \u4fee\u6539\u6240\u6709 category \u4e3a\u5173\u95ed\u54e6\u72b6\u6001\n  UpdateCategoryGroupEnabledFlags();\n  std::unordered_set&lt;v8::TracingController::TraceStateObserver*&gt; observers_copy;\n  {\n    base::MutexGuard lock(mutex_.get());\n    observers_copy = observers_;\n  }\n  // \u901a\u77e5 trace \u89c2\u5bdf\u8005\n  for (auto o : observers_copy) {\n    o-&gt;OnTraceDisabled();\n  }\n  // \u901a\u77e5 writer \u5237\u6570\u636e\u5230\u76ee\u7684\u5730\n  {\n    base::MutexGuard lock(mutex_.get());\n    DCHECK(trace_buffer_);\n    trace_buffer_-&gt;Flush();\n  }\n}\n</code></pre> \u903b\u8f91\u6bd4\u8f83\u660e\u4e86\uff0c\u4e3b\u8981\u770b UpdateCategoryGroupEnabledFlags\u3002 <pre><code>void TracingController::UpdateCategoryGroupEnabledFlags() {\n  // g_category_index \u8bb0\u5f55\u4e86\u76ee\u524d category \u6570\u91cf\n  size_t category_index = base::Acquire_Load(&amp;g_category_index);\n  // \u6e05\u9664\u6240\u6709 category \u7684 \u5f00\u542f\u6807\u8bb0\n  for (size_t i = 0; i &lt; category_index; i++) UpdateCategoryGroupEnabledFlag(i);\n}\n\nvoid TracingController::UpdateCategoryGroupEnabledFlag(size_t category_index) {\n  unsigned char enabled_flag = 0;\n  // g_category_groups \u8bb0\u5f55\u4e86\u6240\u6709 category \u7684\u540d\u79f0\n  const char* category_group = g_category_groups[category_index];\n  /*\n   \u5224\u65ad\u662f\u5426\u6b63\u5728 trace \u5e76\u4e14\u8ba2\u9605\u4e86 category_group \u5bf9\u5e94\u7684 category\uff0c\n   \u662f\u5219\u8bbe\u7f6e\u5f00\u542f\u6807\u8bb0\uff0c\u5f00\u542f\u4e86\u624d\u80fd\u6536\u96c6\u5bf9\u5e94 category \u7684 trace \u6570\u636e\n  */\n  if (recording_.load(std::memory_order_acquire) &amp;&amp;\n      trace_config_-&gt;IsCategoryGroupEnabled(category_group)) {\n    enabled_flag |= ENABLED_FOR_RECORDING;\n  }\n  // \u8bbe\u7f6e category \u7684\u5f00\u542f\u6807\u8bb0\n  base::Relaxed_Store(reinterpret_cast&lt;base::Atomic8*&gt;(\n                          g_category_group_enabled + category_index),\n                      enabled_flag);\n}\n</code></pre> UpdateCategoryGroupEnabledFlag \u5728\u5f00\u542f\u548c\u505c\u6b62 trace \u7684\u65f6\u5019\u90fd\u4f1a\u88ab\u8c03\u7528\uff0c\u4f46\u662f\u5bf9\u5e94\u7684\u903b\u8f91\u4e0d\u4e00\u6837\uff0c\u5f53\u505c\u6b62\u7684\u65f6\u5019\uff0crecording_ \u662f false\uff0c\u6240\u4ee5 enabled_flag \u662f 0\uff0c\u5373\u6e05\u9664\u6240\u6709 category \u7684\u5f00\u542f\u6807\u8bb0\u3002\u5728\u5f00\u542f trace \u65f6\uff0crecording_ \u662f true\uff0c\u7136\u540e\u6839\u636e\u5f53\u524d\u8ba2\u9605\u7684 category \u8bbe\u7f6e\u5bf9\u5e94\u7684\u5f00\u5173\u3002\u63a5\u7740\u770b\u5f00\u542f trace \u903b\u8f91\u3002 <pre><code>void TracingController::StartTracing(TraceConfig* trace_config) {\n  // \u8bb0\u5f55\u5f53\u524d trace \u7684 category\n  trace_config_.reset(trace_config);\n  std::unordered_set&lt;v8::TracingController::TraceStateObserver*&gt; observers_copy;\n  {\n    base::MutexGuard lock(mutex_.get());\n    // \u8bbe\u7f6e\u5f00\u542f trace \u6807\u8bb0\n    recording_.store(true, std::memory_order_release);\n    // \u8bbe\u7f6e\u6253\u5f00\u6536\u96c6 category \u6570\u636e\u7684\u5f00\u5173\n    UpdateCategoryGroupEnabledFlags();\n    observers_copy = observers_;\n  }\n  // \u901a\u77e5 trace \u89c2\u5bdf\u8005\n  for (auto o : observers_copy) {\n    o-&gt;OnTraceEnabled();\n  }\n}\n</code></pre> StartTracing \u548c StopTracing \u903b\u8f91\u6bd4\u8f83\u76f8\u4f3c\u3002\u8ba2\u9605\u6210\u529f\u540e\uff0c\u540e\u7eed\u4ea7\u751f trace \u6570\u636e\u5c31\u4f1a\u5199\u5165\u5230\u6587\u4ef6\u3002</p>"},{"location":"chapter30-Node.js%20%E7%9A%84%20trace%20events%20%E6%9E%B6%E6%9E%84/#43-inspector","title":"4.3 \u901a\u8fc7 inspector \u6a21\u5757","text":"<p>\u7b2c\u4e09\u79cd\u65b9\u5f0f\u4e0d\u4ec5\u53ef\u4ee5\u52a8\u6001\u5f00\u542f\uff0c\u8fd8\u80fd\u76f4\u63a5\u62ff\u5230 trace \u6570\u636e\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5177\u4f53\u662f\u901a\u8fc7 Inspector \u534f\u8bae\u3002\u9996\u5148\u770b\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002 <pre><code>const { Session } = require('inspector');\nconst session = new Session();\nsession.connect();\nfunction post(message, data) {\n  return new Promise((resolve, reject) =&gt; {\n    session.post(message, data, (err, result) =&gt; {\n      if (err)\n        reject(new Error(JSON.stringify(err)));\n      else\n        resolve(result);\n    });\n  });\n}\n\nasync function test() {\n    session.on('NodeTracing.dataCollected', (data) =&gt; {\n      console.log(data.params.value);\n    });\n\n    session.on('NodeTracing.tracingComplete', () =&gt; {\n        console.log('done');\n    });\n    const { categories } = await post('NodeTracing.getCategories');\n    const traceConfig = { includedCategories: categories };\n    await post('NodeTracing.start', { traceConfig });\n    setTimeout(() =&gt; {\n        post('NodeTracing.stop');\n    }, 1000);\n}\n\ntest();\n</code></pre> \u4f7f\u7528\u65b9\u5f0f\u6bd4\u8f83\u56fa\u5b9a\uff0c\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0ctrace event \u662f\u57fa\u4e8e\u7c7b\u578b\u7684\uff0c\u6bd4\u5982\u540c\u6b65\u6587\u4ef6 IO\uff0cDNS \u89e3\u6790\u3002\u6240\u4ee5\u7b2c\u4e00\u6b65\u9996\u5148\u8bbe\u7f6e\u9700\u8981\u6536\u96c6\u7684\u6a21\u5757\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 NodeTracing.getCategories \u547d\u4ee4\u83b7\u53d6\u5f53\u524d\u652f\u6301\u7684\u6a21\u5757\u7c7b\u578b\u3002\u63a5\u7740\u901a\u8fc7 NodeTracing.start \u5f00\u542f\u6570\u636e\u6536\u96c6\uff0c\u6536\u96c6\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u901a\u8fc7 NodeTracing.stop \u505c\u6b62\u6570\u636e\u7684\u6536\u96c6\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6536\u96c6\u7684\u6570\u636e\u4f1a\u901a\u8fc7 NodeTracing.dataCollected \u4e8b\u4ef6\u6e90\u6e90\u4e0d\u65ad\u5730\u6d41\u5411\u7528\u6237\u4fa7\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u5b58\u8fd9\u4e9b\u6570\u636e\u540e\u7eed\u8fdb\u884c\u5206\u6790\uff0c\u6536\u96c6\u5b8c\u6bd5\u540e\u4f1a\u89e6\u53d1 NodeTracing.tracingComplete \u4e8b\u4ef6\uff0c\u4ece\u800c\u5b8c\u6210\u6574\u4e2a\u8fc7\u7a0b\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e9b\u547d\u4ee4\u7684\u5b9e\u73b0\u3002\u9996\u5148\u770b\u4e00\u4e0b\u6574\u4f53\u7684\u67b6\u6784\u3002  \u4e4b\u524d\u4ecb\u7ecd\u8fc7 Node.js Inspector \u7684\u67b6\u6784\uff0c\u672c\u6587\u5c31\u4e0d\u518d\u5177\u4f53\u5c55\u5f00\u4ecb\u7ecd\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5f53\u6211\u4eec\u901a\u8fc7 js \u5c42\u7684 session \u53d1\u9001\u547d\u4ee4\u65f6\uff0c\u4ee3\u7801\u6d41\u7a0b\u4ece\u56fe\u7684\u5de6\u8fb9\u5230\u53f3\u8fb9\uff0c\u6536\u96c6\u5230\u6570\u636e\u65f6\uff0c\u4ee3\u7801\u6d41\u7a0b\u4ece\u53f3\u5f80\u5de6\u56de\u8c03 js \u5c42\u3002\u9996\u5148\u6765\u770b\u4e00\u4e0b NodeTracing.start\u3002Node.js \u7684 Inspector \u6846\u67b6\u91c7\u7528\u4e24\u7ea7\u8def\u7531\u7684\u673a\u5236\uff0c\u9996\u5148\u901a\u8fc7 NodeTracing \u627e\u5230\u4e00\u7ea7\u8def\u7531\uff0c\u5728 inspetor \u91cc\u53eb Domain\uff0c\u7136\u540e\u518d\u901a\u8fc7 start \u627e\u5230\u4e8c\u7ea7\u8def\u7531\u3002 \u6765\u770b\u4e00\u4e0b\u6bcf\u4e2a\u8def\u7531\u5bf9\u5e94\u7684\u51fd\u6570\u3002 <pre><code>m_dispatchMap[\"NodeTracing.getCategories\"] = &amp;DispatcherImpl::getCategories;\nm_dispatchMap[\"NodeTracing.start\"] = &amp;DispatcherImpl::start;\nm_dispatchMap[\"NodeTracing.stop\"] = &amp;DispatcherImpl::stop;\n</code></pre> \u6211\u4eec\u53ea\u5173\u6ce8 start \u548c stop \u7684\u903b\u8f91\u3002</p> <p><pre><code>void DispatcherImpl::start(int callId, const String&amp; method, const ProtocolMessage&amp; message, std::unique_ptr&lt;DictionaryValue&gt; requestMessageObject, ErrorSupport* errors)\n{\n    protocol::DictionaryValue* object = DictionaryValue::cast(requestMessageObject-&gt;get(\"params\"));\n    protocol::Value* traceConfigValue = object ? object-&gt;get(\"traceConfig\") : nullptr;\n    std::unique_ptr&lt;protocol::NodeTracing::TraceConfig&gt; in_traceConfig = ValueConversions&lt;protocol::NodeTracing::TraceConfig&gt;::fromValue(traceConfigValue, errors);\n\n    std::unique_ptr&lt;DispatcherBase::WeakPtr&gt; weak = weakPtr();\n    DispatchResponse response = m_backend-&gt;start(std::move(in_traceConfig));\n    if (weak-&gt;get())\n        weak-&gt;get()-&gt;sendResponse(callId, response);\n    return;\n}\n</code></pre> start \u91cc\u8c03\u7528\u4e86 m_backend-&gt;start\uff0c\u6839\u636e\u67b6\u6784\u56fe\u53ef\u77e5\u9053 m_backend \u7684\u503c\u662f TracingAgent \u5bf9\u8c61\u3002</p> <p><pre><code>DispatchResponse TracingAgent::start(std::unique_ptr&lt;protocol::NodeTracing::TraceConfig&gt; traceConfig) {\n\n  std::set&lt;std::string&gt; categories_set;\n  protocol::Array&lt;std::string&gt;* categories = traceConfig-&gt;getIncludedCategories();\n  for (size_t i = 0; i &lt; categories-&gt;length(); i++)\n    categories_set.insert(categories-&gt;get(i));\n\n  tracing::AgentWriterHandle* writer = GetTracingAgentWriter();\n  if (writer != nullptr) {\n    trace_writer_ =\n        writer-&gt;agent()-&gt;AddClient(categories_set,\n                                   std::make_unique&lt;InspectorTraceWriter&gt;(\n                                       frontend_object_id_, main_thread_),\n                                   tracing::Agent::kIgnoreDefaultCategories);\n  }\n  return DispatchResponse::OK();\n}\n</code></pre> \u6700\u7ec8\u901a\u8fc7 AddClient \u5f80 tracing \u7cfb\u7edf\u6ce8\u518c\u4e86\u4e00\u4e2a\u6d88\u8d39\u8005\uff0cinspector \u6a21\u5757\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684 writer InspectorTraceWriter\u3002\u5f53tracing \u7cfb\u7edf\u4ea7\u751f\u6570\u636e\u65f6\uff0c\u5c31\u4f1a\u901a\u8fc7 InspectorTraceWriter \u8fdb\u884c\u6d88\u8d39\uff0c\u770b\u4e00\u4e0b\u8fd9\u4e2a InspectorTraceWriter \u5bf9\u8c61\u7684\u6838\u5fc3\u903b\u8f91\u3002 <pre><code> void AppendTraceEvent(\n      v8::platform::tracing::TraceObject* trace_event) override {\n    if (!json_writer_)\n      json_writer_.reset(TraceWriter::CreateJSONTraceWriter(stream_, \"value\"));\n    json_writer_-&gt;AppendTraceEvent(trace_event);\n  }\n\n  void Flush(bool) override {\n    if (!json_writer_)\n      return;\n    json_writer_.reset();\n    std::ostringstream result(\n        \"{\\\"method\\\":\\\"NodeTracing.dataCollected\\\",\\\"params\\\":\",\n        std::ostringstream::ate);\n    result &lt;&lt; stream_.str();\n    result &lt;&lt; \"}\";\n    main_thread_-&gt;Post(std::make_unique&lt;SendMessageRequest&gt;(frontend_object_id_,\n                                                            result.str()));\n    stream_.str(\"\");\n  }\n</code></pre> tracing \u7cfb\u7edf\u8c03\u7528 AppendTraceEvent \u8fdb\u884c\u6570\u636e\u7684\u6d88\u8d39\uff0c\u4e0d\u8fc7\u8fd9\u4e9b\u6570\u636e\u4f1a\u5148\u7f13\u5b58\u5230\u5185\u5b58\uff0c\u7136\u540e\u518d\u8c03\u7528 Flush \u901a\u77e5\u771f\u6b63\u7684\u6d88\u8d39\u8005\uff0c\u5728 Flush \u51fd\u6570\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u901a\u8fc7\u53d1\u9001\u4e00\u4e2a SendMessageRequest \u89e6\u53d1\u4e86 NodeTracing.dataCollected \u4e8b\u4ef6\u3002\u63a5\u7740\u770b\u4e00\u4e0b SendMessageRequest \u7684\u903b\u8f91\u3002</p> <p><pre><code>void Call(MainThreadInterface* thread) override {\n  DeletableFrontendWrapper* frontend_wrapper = static_cast&lt;DeletableFrontendWrapper*&gt;(thread-&gt;GetObjectIfExists(object_id_));\n  if (frontend_wrapper == nullptr) return;\n  auto frontend = frontend_wrapper-&gt;get();\n  if (frontend != nullptr) {\n    frontend-&gt;sendRawJSONNotification(message_);\n  }\n}\n\nvoid Frontend::sendRawJSONNotification(String notification)\n{\n    m_frontendChannel-&gt;sendProtocolNotification(InternalRawNotification::fromJSON(std::move(notification)));\n}\n</code></pre> Call \u53c8\u8c03\u7528\u4e86 m_frontendChannel-&gt;sendRawJSONNotification\uff0c\u6839\u636e\u67b6\u6784\u56fe\uff0cm_frontendChannel \u7684\u503c\u662f ChannelImpl\u3002\u6700\u540e\u901a\u8fc7 ChannelImpl \u901a\u77e5\u7528\u6237\u4fa7\u3002 \u63a5\u7740\u770b stop \u7684\u903b\u8f91\u3002 <pre><code>DispatchResponse TracingAgent::stop() {\n  trace_writer_.reset();\n  frontend_-&gt;tracingComplete();\n  return DispatchResponse::OK();\n}\n</code></pre> \u9996\u5148\u770b\u4e00\u4e0b trace_writer_.reset()\u3002 <pre><code>void AgentWriterHandle::reset() {\n  if (agent_ != nullptr)\n    agent_-&gt;Disconnect(id_);\n  agent_ = nullptr;\n}\n\nvoid Agent::Disconnect(int client) {\n  if (client == kDefaultHandleId) return;\n  {\n    Mutex::ScopedLock lock(initialize_writer_mutex_);\n    to_be_initialized_.erase(writers_[client].get());\n  }\n  ScopedSuspendTracing suspend(tracing_controller_.get(), this);\n  writers_.erase(client);\n  categories_.erase(client);\n}\n</code></pre> \u63a5\u7740\u770b ScopedSuspendTracing\u3002 <pre><code>ScopedSuspendTracing(TracingController* controller, Agent* agent,\n                       bool do_suspend = true)\n    : controller_(controller), agent_(do_suspend ? agent : nullptr) {\n    if (do_suspend) {\n      CHECK(agent_-&gt;started_);\n      controller-&gt;StopTracing();\n    }\n}\n\nvoid TracingController::StopTracing() {\n base::MutexGuard lock(mutex_.get());\n trace_buffer_-&gt;Flush();\n}\n</code></pre> \u628a\u6240\u6709\u6570\u636e Flush \u5230\u7528\u6237\u4fa7\u540e\u89e6\u53d1 tracingComplete \u4e8b\u4ef6\u3002 <pre><code>void Frontend::tracingComplete()\n{\n    if (!m_frontendChannel)\n        return;\n    m_frontendChannel-&gt;sendProtocolNotification(InternalResponse::createNotification(\"NodeTracing.tracingComplete\"));\n}\n</code></pre></p>"},{"location":"chapter31-Node.js%20%E7%9A%84%20perf_hooks/","title":"31-Node.js \u7684 perf_hooks","text":"<p>\u524d\u8a00\uff1aperf_hooks \u662f Node.js \u4e2d\u7528\u4e8e\u6536\u96c6\u6027\u80fd\u6570\u636e\u7684\u6a21\u5757\uff0cNode.js \u672c\u8eab\u57fa\u4e8e perf_hooks \u63d0\u4f9b\u4e86\u6027\u80fd\u6570\u636e\uff0c\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86\u673a\u5236\u7ed9\u7528\u6237\u4e0a\u62a5\u6027\u80fd\u6570\u636e\u3002\u6587\u672c\u4ecb\u7ecd\u4e00\u4e0b perk_hooks\u3002</p>"},{"location":"chapter31-Node.js%20%E7%9A%84%20perf_hooks/#1","title":"1 \u4f7f\u7528","text":"<p>\u9996\u5148\u770b\u4e00\u4e0b perf_hooks \u7684\u57fa\u672c\u4f7f\u7528\u3002 <pre><code>const { PerformanceObserver } = require('perf_hooks');\nconst obs = new PerformanceObserver((items) =&gt; {\n  // \n};\n\nobs.observe({ type: 'http' });\n</code></pre> \u901a\u8fc7 PerformanceObserver \u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u89c2\u5bdf\u8005\uff0c\u7136\u540e\u8c03\u7528 observe \u53ef\u4ee5\u8ba2\u9605\u5bf9\u54ea\u79cd\u7c7b\u578b\u7684\u6027\u80fd\u6570\u636e\u611f\u5174\u8da3\u3002</p> <p>\u4e0b\u9762\u770b\u4e00\u4e0b C++ \u5c42\u7684\u5b9e\u73b0\uff0cC++ \u5c42\u7684\u5b9e\u73b0\u9996\u5148\u662f\u4e3a\u4e86\u652f\u6301 C++ \u5c42\u7684\u4ee3\u7801\u8fdb\u884c\u6570\u636e\u7684\u4e0a\u62a5\uff0c\u540c\u65f6\u4e5f\u4e3a\u4e86\u652f\u6301 JS \u5c42\u7684\u529f\u80fd\u3002</p>"},{"location":"chapter31-Node.js%20%E7%9A%84%20perf_hooks/#2-c","title":"2 C++ \u5c42\u5b9e\u73b0","text":""},{"location":"chapter31-Node.js%20%E7%9A%84%20perf_hooks/#21-performanceentry","title":"2.1 PerformanceEntry","text":"<p>PerformanceEntry \u662f perf_hooks \u91cc\u7684\u4e00\u4e2a\u6838\u5fc3\u6570\u636e\u7ed3\u6784\uff0cPerformanceEntry \u4ee3\u8868\u4e00\u6b21\u6027\u80fd\u6570\u636e\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u5b83\u7684\u5b9a\u4e49\u3002 <pre><code>template &lt;typename Traits&gt;\nstruct PerformanceEntry {\n  using Details = typename Traits::Details;\n  std::string name;\n  double start_time;\n  double duration;\n  Details details;\n\n  static v8::MaybeLocal&lt;v8::Object&gt; GetDetails(\n      Environment* env,\n      const PerformanceEntry&lt;Traits&gt;&amp; entry) {\n    return Traits::GetDetails(env, entry);\n  }\n};\n</code></pre> PerformanceEntry \u91cc\u9762\u8bb0\u5f55\u4e86\u4e00\u6b21\u6027\u80fd\u6570\u636e\u7684\u4fe1\u606f\uff0c\u4ece\u5b9a\u4e49\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u91cc\u9762\u8bb0\u5f55\u4e86\u7c7b\u578b\uff0c\u5f00\u59cb\u65f6\u95f4\uff0c\u6301\u7eed\u65f6\u95f4\uff0c\u6bd4\u5982\u4e00\u4e2a HTTP \u8bf7\u6c42\u7684\u5f00\u59cb\u65f6\u95f4\uff0c\u5904\u7406\u8017\u65f6\u3002\u9664\u4e86\u8fd9\u4e9b\u4fe1\u606f\u4e4b\u5916\uff0c\u6027\u80fd\u6570\u636e\u8fd8\u5305\u62ec\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f\uff0c\u7531 details \u5b57\u6bb5\u4fdd\u5b58\uff0c\u6bd4\u5982 HTTP \u8bf7\u6c42\u7684 url\uff0c\u4e0d\u8fc7\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u8fd9\u4e2a\u80fd\u529b\uff0c\u4e0d\u540c\u7684\u6027\u80fd\u6570\u636e\u4f1a\u5305\u62ec\u4e0d\u540c\u7684\u989d\u5916\u4fe1\u606f\uff0c\u6240\u4ee5 PerformanceEntry \u662f\u4e00\u4e2a\u7c7b\u6a21\u7248\uff0c\u5177\u4f53\u7684 details \u7531\u5177\u4f53\u7684\u6027\u80fd\u6570\u636e\u751f\u4ea7\u8005\u5b9e\u73b0\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002 <pre><code>struct GCPerformanceEntryTraits {\n  static constexpr PerformanceEntryType kType = NODE_PERFORMANCE_ENTRY_TYPE_GC;\n  struct Details {\n    PerformanceGCKind kind;\n    PerformanceGCFlags flags;\n\n    Details(PerformanceGCKind kind_, PerformanceGCFlags flags_)\n        : kind(kind_), flags(flags_) {}\n  };\n\n  static v8::MaybeLocal&lt;v8::Object&gt; GetDetails(\n      Environment* env,\n      const PerformanceEntry&lt;GCPerformanceEntryTraits&gt;&amp; entry);\n};\n\nusing GCPerformanceEntry = PerformanceEntry&lt;GCPerformanceEntryTraits&gt;;\n</code></pre> \u8fd9\u662f\u5173\u4e8e gc \u6027\u80fd\u6570\u636e\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u770b\u5230\u5b83\u7684 details \u91cc\u5305\u62ec\u4e86 kind \u548c flags\u3002\u63a5\u4e0b\u6765\u770b\u4e00\u4e0b perf_hooks \u662f\u5982\u4f55\u6536\u96c6 gc \u7684\u6027\u80fd\u6570\u636e\u7684\u3002\u9996\u5148\u901a\u8fc7 InstallGarbageCollectionTracking \u6ce8\u518c gc \u94a9\u5b50\u3002 <pre><code>static void InstallGarbageCollectionTracking(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  env-&gt;isolate()-&gt;AddGCPrologueCallback(MarkGarbageCollectionStart,\n                                        static_cast&lt;void*&gt;(env));\n  env-&gt;isolate()-&gt;AddGCEpilogueCallback(MarkGarbageCollectionEnd,\n                                        static_cast&lt;void*&gt;(env));\n  env-&gt;AddCleanupHook(GarbageCollectionCleanupHook, env);\n}\n</code></pre> InstallGarbageCollectionTracking \u4e3b\u8981\u662f\u4f7f\u7528\u4e86 V8 \u63d0\u4f9b\u7684\u4e24\u4e2a\u51fd\u6570\u6ce8\u518c\u4e86 gc \u5f00\u59cb\u548c gc \u7ed3\u675f\u9636\u6bb5\u7684\u94a9\u5b50\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u94a9\u5b50\u7684\u903b\u8f91\u3002 <pre><code>void MarkGarbageCollectionStart(\n    Isolate* isolate,\n    GCType type,\n    GCCallbackFlags flags,\n    void* data) {\n  Environment* env = static_cast&lt;Environment*&gt;(data);\n  env-&gt;performance_state()-&gt;performance_last_gc_start_mark = PERFORMANCE_NOW();\n}\n</code></pre> MarkGarbageCollectionStart \u5728\u5f00\u59cb gc \u65f6\u88ab\u6267\u884c\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u662f\u8bb0\u5f55\u4e86 gc \u7684\u5f00\u59cb\u65f6\u95f4\u3002\u63a5\u7740\u770b MarkGarbageCollectionEnd\u3002 <pre><code>void MarkGarbageCollectionEnd(\n    Isolate* isolate,\n    GCType type,\n    GCCallbackFlags flags,\n    void* data) {\n  Environment* env = static_cast&lt;Environment*&gt;(data);\n  PerformanceState* state = env-&gt;performance_state();\n\n  double start_time = state-&gt;performance_last_gc_start_mark / 1e6;\n  double duration = (PERFORMANCE_NOW() / 1e6) - start_time;\n\n  std::unique_ptr&lt;GCPerformanceEntry&gt; entry =\n      std::make_unique&lt;GCPerformanceEntry&gt;(\n          \"gc\",\n          start_time,\n          duration,\n          GCPerformanceEntry::Details(\n            static_cast&lt;PerformanceGCKind&gt;(type),\n            static_cast&lt;PerformanceGCFlags&gt;(flags)));\n\n  env-&gt;SetImmediate([entry = std::move(entry)](Environment* env) {\n    entry-&gt;Notify(env);\n  }, CallbackFlags::kUnrefed);\n}\n</code></pre> MarkGarbageCollectionEnd \u6839\u636e\u521a\u624d\u8bb0\u5f55 gc \u5f00\u59cb\u65f6\u95f4\uff0c\u8ba1\u7b97\u51fa gc \u7684\u6301\u7eed\u65f6\u95f4\u3002\u7136\u540e\u4ea7\u751f\u4e00\u4e2a\u6027\u80fd\u6570\u636e GCPerformanceEntry\u3002\u7136\u540e\u5728\u4e8b\u4ef6\u5faa\u73af\u7684 check \u9636\u6bb5\u901a\u8fc7 Notify \u8fdb\u884c\u4e0a\u62a5\u3002 <pre><code>void Notify(Environment* env) {\n    v8::Local&lt;v8::Object&gt; detail;\n    if (!Traits::GetDetails(env, *this).ToLocal(&amp;detail)) {\n      // TODO(@jasnell): Handle the error here\n      return;\n    }\n\n    v8::Local&lt;v8::Value&gt; argv[] = {\n      OneByteString(env-&gt;isolate(), name.c_str()),\n      OneByteString(env-&gt;isolate(), GetPerformanceEntryTypeName(Traits::kType)),\n      v8::Number::New(env-&gt;isolate(), start_time),\n      v8::Number::New(env-&gt;isolate(), duration),\n      detail\n    };\n\n    node::MakeSyncCallback(\n        env-&gt;isolate(),\n        env-&gt;context()-&gt;Global(),\n        env-&gt;performance_entry_callback(),\n        arraysize(argv),\n        argv);\n  }\n};\n</code></pre> Notify \u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5904\u7406\uff0c\u7136\u540e\u6267\u884c JS \u7684\u56de\u8c03\u8fdb\u884c\u6570\u636e\u7684\u4e0a\u62a5\u3002env-&gt;performance_entry_callback() \u5bf9\u5e94\u7684\u56de\u8c03\u5728 JS \u8bbe\u7f6e\u3002</p>"},{"location":"chapter31-Node.js%20%E7%9A%84%20perf_hooks/#22-performancestate","title":"2.2 PerformanceState","text":"<p>PerformanceState \u662f perf_hooks \u7684\u53e6\u4e00\u4e2a\u6838\u5fc3\u6570\u636e\u7ed3\u6784\uff0c\u8d1f\u8d23\u7ba1\u7406 perf_hooks \u6a21\u5757\u7684\u4e00\u4e9b\u516c\u5171\u6570\u636e\u3002 <pre><code>class PerformanceState {\n public:\n  explicit PerformanceState(v8::Isolate* isolate, const SerializeInfo* info);\n  AliasedUint8Array root;\n  AliasedFloat64Array milestones;\n  AliasedUint32Array observers;\n\n  uint64_t performance_last_gc_start_mark = 0;\n\n  void Mark(enum PerformanceMilestone milestone,uint64_t ts = PERFORMANCE_NOW());\n\n private:\n  struct performance_state_internal {\n    // Node.js \u521d\u59cb\u5316\u65f6\u7684\u6027\u80fd\u6570\u636e\n    double milestones[NODE_PERFORMANCE_MILESTONE_INVALID];\n    // \u8bb0\u5f55\u5bf9\u4e0d\u540c\u7c7b\u578b\u6027\u80fd\u6570\u636e\u611f\u5174\u8da3\u7684\u89c2\u5bdf\u8005\u4e2a\u6570\n    uint32_t observers[NODE_PERFORMANCE_ENTRY_TYPE_INVALID];\n  };\n};\n</code></pre> PerformanceState \u4e3b\u8981\u662f\u8bb0\u5f55\u4e86 Node.js \u521d\u59cb\u5316\u65f6\u7684\u6027\u80fd\u6570\u636e\uff0c\u6bd4\u5982 Node.js \u521d\u59cb\u5316\u5b8c\u6bd5\u7684\u65f6\u95f4\uff0c\u4e8b\u4ef6\u5faa\u73af\u7684\u5f00\u59cb\u65f6\u95f4\u7b49\u3002\u8fd8\u6709\u5c31\u662f\u8bb0\u5f55\u4e86\u89c2\u5bdf\u8005\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982\u5bf9 HTTP \u6027\u80fd\u6570\u636e\u611f\u5174\u8da3\u7684\u89c2\u5bdf\u8005\uff0c\u4e3b\u8981\u7528\u4e8e\u63a7\u5236\u8981\u4e0d\u8981\u4e0a\u62a5\u76f8\u5173\u7c7b\u578b\u7684\u6027\u80fd\u6570\u636e\u3002\u6bd4\u5982\u5982\u679c\u6ca1\u6709\u89c2\u5bdf\u8005\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u4e0a\u62a5\u8fd9\u4e2a\u6570\u636e\u3002</p>"},{"location":"chapter31-Node.js%20%E7%9A%84%20perf_hooks/#3-js","title":"3 JS \u5c42\u5b9e\u73b0","text":"<p>\u63a5\u4e0b\u6765\u770b\u4e00\u4e0b JS \u7684\u5b9e\u73b0\u3002\u9996\u5148\u770b\u4e00\u4e0b\u89c2\u5bdf\u8005\u7684\u5b9e\u73b0\u3002</p> <p><pre><code>class PerformanceObserver {\n  constructor(callback) {\n    // \u6027\u80fd\u6570\u636e\n    this[kBuffer] = [];\n    // \u89c2\u5bdf\u8005\u8ba2\u9605\u7684\u6027\u80fd\u6570\u636e\u7c7b\u578b\n    this[kEntryTypes] = new SafeSet();\n    // \u89c2\u5bdf\u8005\u5bf9\u4e00\u4e2a\u8fd8\u662f\u591a\u4e2a\u6027\u80fd\u6570\u636e\u7c7b\u578b\u611f\u5174\u8da3\n    this[kType] = undefined;\n    // \u89c2\u5bdf\u8005\u56de\u8c03\n    this[kCallback] = callback;\n  }\n\n  observe(options = {}) {\n    const {\n      entryTypes,\n      type,\n      buffered,\n    } = { ...options };\n    // \u6e05\u9664\u4e4b\u524d\u7684\u6570\u636e\n    maybeDecrementObserverCounts(this[kEntryTypes]);\n    this[kEntryTypes].clear();\n    // \u91cd\u65b0\u8ba2\u9605\u5f53\u524d\u8bbe\u7f6e\u7684\u7c7b\u578b\n    for (let n = 0; n &lt; entryTypes.length; n++) {\n      if (ArrayPrototypeIncludes(kSupportedEntryTypes, entryTypes[n])) {\n        this[kEntryTypes].add(entryTypes[n]);\n        maybeIncrementObserverCount(entryTypes[n]);\n      }\n    }\n    // \u63d2\u5165\u89c2\u5bdf\u8005\u961f\u5217\n    kObservers.add(this);\n  }\n\n  takeRecords() {\n    const list = this[kBuffer];\n    this[kBuffer] = [];\n    return list;\n  }\n\n  static get supportedEntryTypes() {\n    return kSupportedEntryTypes;\n  }\n  // \u4ea7\u751f\u6027\u80fd\u6570\u636e\u65f6\u88ab\u6267\u884c\u7684\u51fd\u6570\n  [kMaybeBuffer](entry) {\n    if (!this[kEntryTypes].has(entry.entryType))\n      return;\n    // \u4fdd\u5b58\u6027\u80fd\u6570\u636e\uff0c\u8fdf\u70b9\u4e0a\u62a5\n    ArrayPrototypePush(this[kBuffer], entry);\n    // \u63d2\u5165\u5f85\u4e0a\u62a5\u961f\u5217\n    kPending.add(this);\n    if (kPending.size)\n      queuePending();\n  }\n   // \u6267\u884c\u89c2\u5bdf\u8005\u56de\u8c03\n  [kDispatch]() {\n    this[kCallback](new PerformanceObserverEntryList(this.takeRecords()),\n                    this);\n  }\n}\n</code></pre> \u89c2\u5bdf\u8005\u7684\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0c\u9996\u5148\u6709\u4e00\u4e2a\u5168\u5c40\u7684\u53d8\u91cf\u8bb0\u5f55\u4e86\u6240\u6709\u7684\u89c2\u5bdf\u8005\uff0c\u7136\u540e\u6bcf\u4e2a\u89c2\u5bdf\u8005\u8bb0\u5f55\u4e86\u81ea\u5df1\u8ba2\u9605\u7684\u7c7b\u578b\u3002\u5f53\u4ea7\u751f\u6027\u80fd\u6570\u636e\u65f6\uff0c\u751f\u4ea7\u8005\u5c31\u4f1a\u901a\u77e5\u89c2\u5bdf\u8005\uff0c\u63a5\u7740\u89c2\u5bdf\u8005\u6267\u884c\u56de\u8c03\u3002\u8fd9\u91cc\u9700\u8981\u989d\u5916\u4ecb\u7ecd\u7684\u4e00\u4e2a\u662f maybeDecrementObserverCounts \u548c maybeIncrementObserverCount\u3002 <pre><code>function getObserverType(type) {\n  switch (type) {\n    case 'gc': return NODE_PERFORMANCE_ENTRY_TYPE_GC;\n    case 'http2': return NODE_PERFORMANCE_ENTRY_TYPE_HTTP2;\n    case 'http': return NODE_PERFORMANCE_ENTRY_TYPE_HTTP;\n  }\n}\n\nfunction maybeDecrementObserverCounts(entryTypes) {\n  for (const type of entryTypes) {\n    const observerType = getObserverType(type);\n\n    if (observerType !== undefined) {\n      observerCounts[observerType]--;\n\n      if (observerType === NODE_PERFORMANCE_ENTRY_TYPE_GC &amp;&amp;\n          observerCounts[observerType] === 0) {\n        removeGarbageCollectionTracking();\n        gcTrackingInstalled = false;\n      }\n    }\n  }\n}\n</code></pre> maybeDecrementObserverCounts \u4e3b\u8981\u7528\u4e8e\u64cd\u4f5c C++ \u5c42\u7684\u903b\u8f91\uff0c\u9996\u5148\u6839\u636e\u8ba2\u9605\u7c7b\u578b\u5224\u65ad\u662f\u4e0d\u662f C++ \u5c42\u652f\u6301\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a perf_hooks \u5728 C++ \u548c JS \u5c42\u90fd\u5b9a\u4e49\u4e86\u4e0d\u540c\u7684\u6027\u80fd\u7c7b\u578b\uff0c\u5982\u679c\u662f\u6d89\u53ca\u5230\u5e95\u5c42\u7684\u7c7b\u578b\uff0c\u5c31\u4f1a\u64cd\u4f5c observerCounts \u8bb0\u5f55\u5f53\u524d\u7c7b\u578b\u7684\u89c2\u5bdf\u8005\u6570\u91cf\uff0cobserverCounts \u5c31\u662f\u521a\u624d\u5206\u6790 C++ \u5c42\u7684 observers \u53d8\u91cf\uff0c\u5b83\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u4e2a\u7d22\u5f15\u5bf9\u5e94\u4e00\u4e2a\u7c7b\u578b\uff0c\u6570\u7ec4\u5143\u7d20\u7684\u503c\u662f\u89c2\u5bdf\u8005\u7684\u4e2a\u6570\u3002\u53e6\u5916\u5982\u679c\u8ba2\u9605\u7684\u662f gc \u7c7b\u578b\uff0c\u5e76\u4e14\u662f\u7b2c\u4e00\u4e2a\u8ba2\u9605\u8005\uff0c\u90a3\u5c31 JS \u5c42\u5c31\u4f1a\u64cd\u4f5c C++ \u5c42\u5f80 V8 \u91cc\u6ce8\u518c gc \u56de\u8c03\u3002</p> <p>\u4e86\u89e3\u4e86 perf_hooks \u63d0\u4f9b\u7684\u673a\u5236\u540e\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u6027\u80fd\u6570\u636e\u4e0a\u62a5\u4f8b\u5b50\u3002\u8fd9\u91cc\u4ee5 HTTP Server \u5904\u7406\u8bf7\u6c42\u7684\u8017\u65f6\u4e3a\u4f8b\u3002 <pre><code>function emitStatistics(statistics) {\n  const startTime = statistics.startTime;\n  const diff = process.hrtime(startTime);\n  const entry = new InternalPerformanceEntry(\n    statistics.type,\n    'http',\n    startTime[0] * 1000 + startTime[1] / 1e6,\n    diff[0] * 1000 + diff[1] / 1e6,\n    undefined,\n  );\n  enqueue(entry);\n}\n</code></pre> \u4e0b\u9762\u662f HTTP Server \u5904\u7406\u5b8c\u4e00\u4e2a\u8bf7\u6c42\u65f6\u4e0a\u62a5\u6027\u80fd\u6570\u636e\u7684\u903b\u8f91\u3002\u9996\u5148\u521b\u5efa\u4e00\u4e2a InternalPerformanceEntry \u5bf9\u8c61\uff0c\u8fd9\u4e2a\u548c\u521a\u624d\u4ecb\u7ecd\u7684 C++ \u5bf9\u8c61\u662f\u4e00\u6837\u7684\uff0c\u662f\u8868\u793a\u4e00\u4e2a\u6027\u80fd\u6570\u636e\u7684\u5bf9\u8c61\u3002\u63a5\u7740\u8c03\u7528 enqueue \u51fd\u6570\u3002 <pre><code>function enqueue(entry) {\n  // \u901a\u77e5\u89c2\u5bdf\u8005\u6709\u6027\u80fd\u6570\u636e\uff0c\u89c2\u5bdf\u8005\u81ea\u5df1\u5224\u65ad\u662f\u5426\u8ba2\u9605\u4e86\u8fd9\u4e2a\u7c7b\u578b\u7684\u6570\u636e\n  for (const obs of kObservers) {\n    obs[kMaybeBuffer](entry);\n  }\n  // \u5982\u679c\u662f mark \u6216 measure \u7c7b\u578b\uff0c\u5219\u63d2\u5165\u4e00\u4e2a\u5168\u5c40\u961f\u5217\u3002\n  const entryType = entry.entryType;\n  let buffer;\n  if (entryType === 'mark') {\n    buffer = markEntryBuffer; // mark \u6027\u80fd\u6570\u636e\u961f\u5217\n  } else if (entryType === 'measure') {\n    buffer = measureEntryBuffer; // measure \u6027\u80fd\u6570\u636e\u961f\u5217\n  } else {\n    return;\n  }\n\n  ArrayPrototypePush(buffer, entry);\n}\n</code></pre> enqueue \u4f1a\u628a\u6027\u80fd\u6570\u636e\u4e0a\u62a5\u5230\u89c2\u5bdf\u8005\uff0c\u7136\u540e\u89c2\u5bdf\u8005\u5982\u679c\u8ba2\u9605\u8fd9\u4e2a\u7c7b\u578b\u7684\u6570\u636e\u5219\u6267\u884c\u7528\u6237\u56de\u8c03\u901a\u77e5\u7528\u6237\u3002\u6211\u4eec\u770b\u4e00\u4e0b obs[kMaybeBuffer] \u7684\u903b\u8f91\u3002 <pre><code>[kMaybeBuffer](entry) {\n    if (!this[kEntryTypes].has(entry.entryType))\n      return;\n    ArrayPrototypePush(this[kBuffer], entry);\n    // this \u662f\u89c2\u5bdf\u8005\u5b9e\u4f8b\n    kPending.add(this);\n    if (kPending.size)\n      queuePending();\n}\n\n\nfunction queuePending() {\n  if (isPending) return;\n  isPending = true;\n  setImmediate(() =&gt; {\n    isPending = false;\n    const pendings = ArrayFrom(kPending.values());\n    kPending.clear();\n    // \u904d\u5386\u89c2\u5bdf\u8005\u961f\u5217\uff0c\u6267\u884c kDispatch\n    for (const pending of pendings)\n      pending[kDispatch]();\n  });\n}\n// \u4e0b\u9762\u662f\u89c2\u5bdf\u8005\u4e2d\u7684\u903b\u8f91\uff0c\u89c2\u5bdf\u8005\u628a\u5f53\u524d\u4fdd\u5b58\u7684\u6570\u636e\u4e0a\u62a5\u7ed9\u7528\u6237\n[kDispatch]() {\n  this[kCallback](new PerformanceObserverEntryList(this.takeRecords()),this);\n}\n</code></pre> \u53e6\u5916 mark \u548c measure \u7c7b\u578b\u7684\u6027\u80fd\u6570\u636e\u6bd4\u8f83\u7279\u6b8a\uff0c\u5b83\u4e0d\u4ec5\u4f1a\u901a\u77e5\u89c2\u5bdf\u8005\uff0c\u8fd8\u4f1a\u63d2\u5165\u5230\u5168\u5c40\u7684\u4e00\u4e2a\u961f\u5217\u4e2d\u3002\u6240\u4ee5\u5bf9\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u6027\u80fd\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\u89c2\u5bdf\u8005\u7684\u8bdd\u5c31\u4f1a\u88ab\u4e22\u5f03\uff08\u901a\u5e38\u5728\u8c03\u7528 enqueue \u4e4b\u524d\u4f1a\u5148\u5224\u65ad\u662f\u5426\u6709\u89c2\u5bdf\u8005\uff09\uff0c\u5bf9\u4e8e mark \u548c measure \u7c7b\u578b\u7684\u6027\u80fd\u6570\u636e\uff0c\u4e0d\u7ba1\u6709\u6ca1\u6709\u89c2\u5bdf\u8005\u90fd\u4f1a\u88ab\u4fdd\u5b58\u4e0b\u6765\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u663e\u5f0f\u6e05\u9664\u3002</p>"},{"location":"chapter31-Node.js%20%E7%9A%84%20perf_hooks/#4","title":"4 \u603b\u7ed3","text":"<p>\u4ee5\u4e0a\u5c31\u662f perf_hooks \u4e2d\u6838\u5fc3\u7684\u5b9e\u73b0\uff0c\u9664\u6b64\u4e4b\u5916\uff0cperf_hooks \u8fd8\u63d0\u4f9b\u4e86\u5176\u4ed6\u7684\u529f\u80fd\uff0c\u672c\u6587\u5c31\u5148\u4e0d\u4ecb\u7ecd\u4e86\u3002\u53ef\u4ee5\u770b\u5230 perf_hooks \u7684\u5b9e\u73b0\u662f\u4e00\u4e2a\u8ba2\u9605\u53d1\u5e03\u7684\u6a21\u5f0f\uff0c\u770b\u8d77\u6765\u8c8c\u4f3c\u6ca1\u4ec0\u4e48\u7279\u522b\u7684\u3002\u4f46\u662f\u5b83\u7684\u5f3a\u5927\u4e4b\u5904\u5728\u4e8e\u662f\u7531 Node.js \u5185\u7f6e\u5b9e\u73b0\u7684\uff0c \u8fd9\u6837 Node.js \u7684\u5176\u4ed6\u6a21\u5757\u5c31\u53ef\u4ee5\u57fa\u4e8e perf_hooks \u8fd9\u4e2a\u6846\u67b6\u4e0a\u62a5\u5404\u79cd\u7c7b\u578b\u7684\u6027\u80fd\u6570\u636e\u3002\u76f8\u6bd4\u6765\u8bf4\u867d\u7136\u6211\u4eec\u4e5f\u80fd\u5728\u7528\u6237\u5c42\u5b9e\u73b0\u8fd9\u6837\u7684\u903b\u8f91\uff0c\u4f46\u662f\u6211\u4eec\u62ff\u4e0d\u5230\u6216\u8005\u6ca1\u6709\u529e\u6cd5\u4f18\u96c5\u5730\u65b9\u6cd5\u62ff\u5230 Node.js \u5185\u6838\u91cc\u9762\u7684\u6570\u636e\uff0c\u6bd4\u5982\u6211\u4eec\u60f3\u62ff\u5230 gc \u7684\u6027\u80fd\u6570\u636e\uff0c\u6211\u4eec\u53ea\u80fd\u5199 addon \u5b9e\u73b0\u3002\u53c8\u6bd4\u5982\u6211\u4eec\u60f3\u62ff\u5230 HTTP Server \u5904\u7406\u8bf7\u6c42\u7684\u8017\u65f6\uff0c\u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u76d1\u542c reqeust \u6216\u8005 response \u5bf9\u8c61\u7684\u4e8b\u4ef6\u5b9e\u73b0\uff0c\u4f46\u662f\u8fd9\u6837\u4e00\u6765\u6211\u4eec\u5c31\u4f1a\u8026\u5408\u5230\u4e1a\u52a1\u4ee3\u7801\u91cc\uff0c\u6bcf\u4e2a\u5f00\u53d1\u8005\u90fd\u9700\u8981\u5904\u7406\u8fd9\u6837\u7684\u903b\u8f91\uff0c\u5982\u679c\u6211\u4eec\u60f3\u6536\u62e2\u8fd9\u4e2a\u903b\u8f91\uff0c\u5c31\u53ea\u80fd\u52ab\u6301 HTTP \u6a21\u5757\u6765\u5b9e\u73b0\uff0c\u8fd9\u4e9b\u4e0d\u662f\u4f18\u96c5\u4f46\u662f\u662f\u4e0d\u5f97\u5df2\u7684\u89e3\u51b3\u65b9\u6848\u3002\u6709\u4e86 perf_hooks \u673a\u5236\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4ee5\u4e00\u79cd\u7ed3\u8026\u7684\u65b9\u5f0f\u6765\u6536\u96c6\u8fd9\u4e9b\u6027\u80fd\u6570\u636e\uff0c\u5b9e\u73b0\u5199\u4e00\u4e2a SDK\uff0c\u5927\u5bb6\u53ea\u9700\u8981\u7b80\u5355\u5f15\u5165\u5c31\u884c\u3002</p> <p>\u6700\u8fd1\u5728\u7814\u7a76 perf_hooks \u4ee3\u7801\u7684\u65f6\u5019\u53d1\u73b0\u76ee\u524d perf_hooks \u7684\u529f\u80fd\u8fd8\u4e0d\u7b97\u5b8c\u5584\uff0c\u5f88\u591a\u6027\u80fd\u6570\u636e\u5e76\u6ca1\u6709\u4e0a\u62a5\uff0c\u76ee\u524d\u53ea\u652f\u6301 HTTP Server \u7684\u8bf7\u6c42\u8017\u65f6\u3001HTTP 2 \u548c gc \u8017\u65f6\u8fd9\u4e9b\u6027\u80fd\u6570\u636e\u3002\u6240\u4ee5\u6700\u8fd1\u63d0\u4ea4\u4e86\u4e24\u4e2a PR \u652f\u6301\u4e86\u66f4\u591a\u6027\u80fd\u6570\u636e\u7684\u4e0a\u62a5\u3002\u7b2c\u4e00\u4e2a PR \u662f\u7528\u4e8e\u652f\u6301\u6536\u96c6 HTTP Client \u7684\u8017\u65f6\uff0c\u7b2c\u4e8c\u4e2a PR \u662f\u7528\u4e8e\u652f\u6301\u6536\u96c6 TCP \u8fde\u63a5\u548c DNS \u89e3\u6790\u7684\u8017\u65f6\u3002\u5728\u7b2c\u4e8c\u4e2a PR \u91cc\uff0c\u5b9e\u73b0\u4e86\u4e24\u4e2a\u901a\u7528\u7684\u65b9\u6cd5\uff0c\u65b9\u4fbf\u540e\u7eed\u5176\u4ed6\u6a21\u5757\u505a\u6027\u80fd\u4e0a\u62a5\u3002\u53e6\u5916\u540e\u7eed\u6709\u65f6\u95f4\u7684\u8bdd\uff0c\u5e0c\u671b\u53ef\u4ee5\u53bb\u4e0d\u65ad\u5b8c\u5584 perf_hooks \u673a\u5236\u548c\u6027\u80fd\u6570\u636e\u6536\u96c6\u8fd9\u5757\u7684\u80fd\u529b\u3002\u5728\u4ece\u4e8b Node.js \u8c03\u8bd5\u548c\u8bca\u65ad\u8fd9\u4e2a\u65b9\u5411\u7684\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u6df1\u611f\u5230\u5e94\u7528\u5c42\u80fd\u529b\u7684\u5c40\u9650\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u662f\u4e1a\u52a1\u65b9\uff0c\u800c\u662f\u57fa\u7840\u80fd\u529b\u7684\u63d0\u4f9b\u8005\uff0c\u5c31\u50cf\u524d\u9762\u63d0\u5230\u7684\uff0c\u54ea\u6015\u60f3\u63d0\u4f9b\u4e00\u4e2a\u6536\u96c6 HTTP \u8bf7\u6c42\u8017\u65f6\u7684\u6570\u636e\u90fd\u662f\u975e\u5e38\u56f0\u96be\u7684\uff0c\u800c\u4f5c\u4e3a\u57fa\u7840\u80fd\u529b\u7684\u63d0\u4f9b\u8005\uff0c\u6211\u4eec\u4e00\u76f4\u5e0c\u671b\u6211\u4eec\u7684\u80fd\u529b\u5bf9\u4e1a\u52a1\u6765\u8bf4\u662f\u65e0\u611f\u77e5\uff0c\u65e0\u4fb5\u5165\u5e76\u4e14\u662f\u7a33\u5b9a\u53ef\u9760\u7684\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e0d\u65ad\u6df1\u5165\u5730\u4e86\u89e3 Node.js \u5728\u8fd9\u65b9\u9762\u63d0\u4f9b\u7684\u80fd\u529b\uff0c\u5982\u679c Node.js \u6ca1\u6709\u63d0\u4f9b\u6211\u4eec\u60f3\u8981\u7684\u529f\u80fd\uff0c\u6211\u4eec\u53ea\u80fd\u5199 addon \u6216\u8005\u5c1d\u8bd5\u7ed9\u793e\u533a\u63d0\u4ea4 PR \u6765\u89e3\u51b3\u3002\u53e6\u5916\u6211\u4eec\u4e5f\u5728\u6162\u6162\u4e86\u89e3\u548c\u5b66\u4e60 ebpf\uff0c\u5e0c\u671b\u80fd\u5229\u7528 ebpf \u4ece\u53e6\u5916\u4e00\u4e2a\u5c42\u9762\u5e2e\u52a9\u6211\u4eec\u89e3\u51b3\u6240\u78b0\u5230\u7684\u95ee\u9898\u3002</p>"}]}